<?php

use components\Event\Events;
use components\Event\EventSchedule;
use components\Event\EventReceiver;

/**
 * This is the model class for table "booking".
 *
 * The followings are the available columns in table 'booking':
 * @property integer $bkg_id
 * @property string $bkg_booking_id
 * @property integer $bkg_bcb_id
 * @property string $bkg_pickup_date
 * @property string $bkg_return_date
 * @property string $bkg_trip_distance
 * @property string $bkg_trip_duration
 * @property integer $bkg_booking_type
 * @property integer $bkg_vehicle_type_id
 * @property integer $bkg_agent_id
 * @property integer $bkg_package_id
 * @property integer $bkg_shuttle_id
 * @property integer $bkg_cav_id
 * @property string $bkg_agent_ref_code
 * @property string $bkg_partner_ref_id
 * @property integer $bkg_from_city_id
 * @property integer $bkg_to_city_id
 * @property string $bkg_pickup_address
 * @property string $bkg_pickup_address_pending
 * @property string $bkg_drop_address
 * @property string $bkg_pickup_lat
 * @property string $bkg_pickup_long
 * @property string $bkg_dropup_lat
 * @property string $bkg_dropup_long
 * @property integer $bkg_status
 * @property integer $bkg_transfer_type
 * @property integer $bkg_fp_id
 * @property integer $bkg_flexxi_type
 * @property string $bkg_instruction_to_driver_vendor
 * @property integer $bkg_active
 * @property string $bkg_modified_on
 * @property string $bkg_create_date
 * @property integer $bkg_reconfirm_flag
 * @property integer $bkg_admin_id
 * @property integer $bkg_cancel_id
 * @property string $bkg_cancel_delete_reason
 * @property integer $bkg_return_id
 * @property integer $bkg_lead_id
 * @property integer $bkg_vht_id
 * The followings are the available model relations:
 * @property Cities $bkgFromCity
 * @property Cities $bkgToCity
 * @property SvcClassVhcCat $bkgSvcClassVhcCat
 * @property BookingRoute[] $bookingRoutes
 * @property BookingCab $bkgBcb
 * @property Cities $upBkgFromCity
 * @property Cities $upBkgToCity
 * @property Cities $downBkgToCity
 * @property Cities $downBkgFromCity
 * @property Ratings[] $ratings
 * @property BookingPref $bkgPref
 * @property Agents $bkgAgent
 * @property BookingUser $bkgUserInfo
 * @property BookingInvoice $bkgInvoice
 * @property BookingPriceFactor $bkgPf
 * @property BookingAddInfo $bkgAddInfo
 * @property BookingTrack $bkgTrack
 * @property BookingTrail $bkgTrail
 * @property BookingTrackLog[] $bookingTrackLog
 * @property BookingPayDocs[] $bpayBkg
 * @property VehicleTypes $bkgVehicleType
 */
class Booking extends CActiveRecord
{

	const STATUS_NEW				 = 1;
	const STATUS_VERIFY			 = 2;
	const STATUS_ASSIGN			 = 3;
	const STATUS_PROCESSED		 = 5;
	const STATUS_COMPLETED		 = 6;
	const STATUS_SETTELED			 = 7;
	const STATUS_DELETED			 = 8;
	const STATUS_CANCELLED		 = 9;
	const STATUS_VERIFY_CANCELLED	 = 10;
//booking_platform
	const Platform_User			 = 1;
	const Platform_Admin			 = 2;
	const Platform_App			 = 3;
	const Platform_Agent			 = 4;
	const Platform_System			 = 0;
	const Platform_Partner_Spot	 = 5;
	const Platform_Bot			 = 6;
	const Platform_GOMMT			 = 7;
	const Platform_Spicejet		 = 9;
	const Platform_CPAPI			 = 10;

	public $requiredKMs				 = 0;
	public $isconvertedToDR			 = 0;
	public $bkg_from_city;
	public $bkg_to_city;
	public $category;
	public $pickupLat;
	public $pickupLon;
	public $dropLat;
	public $dropLon;
	public $latlonSet;
	public $userTripList			 = [1 => 'Personal', 2 => 'Business'];
	public $userTripList1			 = [1 => 'Gozo', 2 => 'Other Agent']; //[1 => 'Individual User', 2 => 'Agent', 3 => 'Corporate'];
	public $trip_user;
	public $followupType			 = [0 => 'None', 10 => 'Normal', 20 => 'Unaaproved Driver/Cab', 30 => 'Both'];
	public $corporate_code;
	public $bkg_trip_duration_day;
	public $discountAmount;
	public $sourcezone;
	public $destinationzone;
	public $bkg_to_city_multi_id;
	public $search_tags;
	public $bkg_id1;
	public $bkg_id2;
	public $bkg_trvl_sendupdate;
	public $agentBkgAmountPay;
	public $agentCreditAmount;
	public $bkg_copybooking_name;
	public $bkg_copybooking_email;
	public $bkg_copybooking_country;
	public $agt_approved_untill_date;
	public $arl_operating_managers;
	public $bkg_copybooking_phone;
	public $bkg_copybooking_ismail;
	public $bkg_copybooking_issms;
	public $bkg_trvl_email;
	public $bkg_trvl_phone;
	public $updateDistance;
	public $bkg_trvl_isemail;
	public $trans_mode;
	public $bkg_trvl_issms;
	public $bkg_trvl_isapp;
	public $bkg_send_app;
	public $hash1;
	public $hash2;
	public $max_date;
	public $monthcount;
	public $count_trip;
	public $badVendorCount;
	public $badCabCount;
	public $badDriverCount;
	public $vnd_name;
	public $vnd_phone;
	public $preData;
	public $trip_purpose;
	public $agentNotifyData;
	public $bcb_cab_id;
	public $bcb_driver_id;
	public $bcb_vendor_id;
	public $traveller_name;
	public $partialPayment;
	public $bkg_promo_code1;
	public $bkg_pickup_date_date;
	public $bkg_pickup_date_time;
	public $bkg_return_date_date;
	public $bkg_return_date_time;
	public $bkg_create_date_show;
	public $pickup1;
	public $pickup2;
	public $pickup3;
	public $bkg_vendor_id;
	public $bkg_vendor_name;
	public $bkgids;
	public $bkg_agent_company;
	public $chk_user_msg;
	public $bkg_route;
	public $chk_vendor_msg;
	public $bcb_id;
	public $bcb_pending_status;
	public $bktyp					 = 0;
	public $bkg_pickup_date1;
	public $bkg_pickup_date2;
	public $bkg_create_date1;
	public $bkg_create_date2;
	public $agt_trans_created1;
	public $agt_trans_created2;
	public $bkg_vendor_status;
	public $bkg_from_city_name;
	public $bkg_to_city_name;
	public $bkg_vendor;
	public $bkg_remark;
	public $chk_driver_msg;
	public $vehicle_type_id;
	public $up_bkg_bcb_id;
	public $up_bkg_booking_id;
	public $bkg1_total_amount;
	public $up_bkg_status;
	public $down_bkg_bcb_id;
	public $down_bkg_booking_id;
	public $down_bkg_status;
	public $up_vht_model;
	public $down_vht_model;
	public $match_trip;
	public $match_vendor;
	public $bcbTypeMatched			 = [];
	public $bkg_serial_no;
	public $bkg_chk_others;
	public $commission;
	public $full_name;
	public $bcb_vendor_amount;
	public $no_of_days				 = 1;
	public $date;
	public $hash;
	public $bkg_tags;
	public $b2cbookings;
	public $excludeAT;
	public $otherAPIPartner;
	public $nonAPIPartner;
	public $b2b0bookings;
	public $bkgtypes;
	public $b_count;
	public $max_blg_create;
	public $avg_booking_amount;
	public $trips_booked;
	public $min_time;
	public $trips_started;
	public $trips_completed;
	public $cab_free_time;
	public $lead_id;
	public $bkg_gozo_due;
	public $bkg_vendor_due;
	public $trip_duration_format;
	public $trip_distance_format;
	public $cntBadCustomer;
	public $cntBadDriver;
	public $cntBadCar;
	public $cntBadVendor;
	public $total;
	public $bkg_status_name;
	public $bkg_route_name;
	public $search;
	public $fileImage;
	public $tocity;
	public $fromcity;
	public $make;
	public $model;
	public $type;
	public $agt_fn;
	public $agt_ln;
	public $agt_address;
	public $agt_contct;
	public $agt_ph_pref;
	public $agt_email;
	public $agt_gstin;
	public $agt_cmpny;
	public $new_remark;
	public $bkg_name;
	public $bkg_message;
	public $countRelated;
	public $up_bkg_id;
	public $down_bkg_id;
	public $up_bkg_from_city_id;
	public $down_bkg_from_city_id;
	public $up_bkg_to_city_id;
	public $down_bkg_to_city_id;
	public $bkg_user_name;
	public $up_bkg_pickup_date;
	public $up_bkg_pickup_date1;
	public $up_bkg_pickup_date2;
	public $down_bkg_pickup_date;
	public $down_bkg_pickup_date1;
	public $down_bkg_pickup_date2;
	public $bkg_remark_check;
	public $bkg_upsell_status;
	public $bkg_escalation_status;
	public $bkg_remark2;
	public $checkPickupTime;
	public $bkg_flag_source;
	public $bkg_dashbord_source;
	public $bkg_source;
	public $month;
	public $year;
	public $totSubsSeats;
	public $bkg_no_of_seats;
	public $bkg_driver_message;
	public $bkg_cab_message;
	public $bkg_driver_cab_message;
	public $bkg_user_message;
	public $optPaymentOptions;
	public $paymentType;
	public $ebsOpt;
	public $optUseCredits;
	public $bkg_refund_amount_remark;
	public $bkg_total_amount_remark;
	public $bkg_trip_distance_remark;
	public $bkg_gozo_amount_remark;
	public $bkg_vendor_amount_remark;
	public $bkg_credits_used_remark;
	public $bkg_advance_amount_remark;
	public $bkg_vendor_collected_remark;
	public $bkg_discount_amount_remark;
	public $ids;
	public $diffCollectionType;
	public $local, $outstation, $weekDays, $restricted;
	public $countbvr,$confirmDate1,$confirmDate2,$autoAssignDate1,$autoAssignDate2;
	public $max_bvr_date;
	public $min_bvr_date, $compensationCond;
	public $bkg_assigned_date1, $bkg_assigned_date2, $b2btfrbookings, $incB2Btfrbookings;
	public $is_advance_amount, $is_dbo_applicable, $is_reconfirm_flag, $is_New, $is_Assigned, $is_Manual, $is_Critical, $zoneType;
	public $userArr					 = ['1' => 'Consumer', '2' => 'Vendor', '3' => 'Driver', '4' => 'Admin', '5' => 'Agent'];
	public $booking_types			 = [
		'1'	 => 'OW',
		'2'	 => 'RT',
		'3'	 => 'RT',
		'4'	 => 'AT',
		'5'	 => 'PT',
		'7'	 => 'SH',
		'8'	 => 'CT',
		'9'	 => 'DR',
		'10' => 'DR',
		'16' => 'DR',
		'11' => 'DR',
		'12' => 'AP',
		'14' => 'IN',
		'15' => 'LT'];
	public $booking_type			 = [
		'1'	 => 'One Way',
		'2'	 => 'Round/Multi Trip',
		'3'	 => 'Round/Multi Trip',
		'4'	 => 'Airport Transfer',
		'5'	 => 'Package',
		'6'	 => 'Flexxi',
		'7'	 => 'Shuttle',
		'8'	 => 'Custom Trip',
		'9'	 => 'Day Rental(4hr-40km)',
		'10' => 'Day Rental(8hr-80km)',
		'16' => 'Day Rental(10hr-100km)',
		'11' => 'Day Rental(12hr-120km)',
		'12' => 'Partner Airport Transfer',
		'14' => 'Intra City (P2P)',
		'15' => 'Local Transfer'];
	public $bkgtype					 = ['1' => 'One Way', '2' => 'Return', '3' => 'Airport Transfer', '4' => 'Package', '5' => 'Day Rental', '6' => 'Tempo Travel', '14' => 'Local P2P', '15' => 'Local Transfer'];
//	public $rental_types			 = ['9' => '4Hr - 40Km', '10' => '8Hr - 80Km', '11' => '12Hr - 120Km'];
	public $rental_types			 = ['10' => '8Hr - 80Km', '11' => '12Hr - 120Km'];
	public $trip_type				 = ['1' => 'Fixed Charge', '2' => 'Rate Per Km'];
	public $booking_platform		 = ['1' => 'User', '2' => 'Admin', '3' => 'App', '4' => 'Agent', '5' => 'Partner Spot', '6' => 'Bot', '7' => 'GO MMT', '9' => 'Spicejet', '10' => 'Other Channel Partner'];
	public $transferTypes			 = ['1' => 'From the Airport', '2' => 'To the Airport'];
	public $prefRateBooking_types	 = ['1' => 'OW', '2' => 'RT', '4' => 'AT', '9' => 'DR', '14' => 'IN'];
	public $event_by				 = 1; //event fired by admin(1) side or vendor app side(2)
	public $bkg_pickup_date_time1;
	public $bkg_from_city_id1;
	public $bkg_to_city_id1;
	public $bkg_pickup_date_date1;
	public $to_cities;
	public $bkg_pickup_date_time_1;
	public $bkg_from_city_id_1;
	public $bkg_to_city_id_1;
	public $bkg_pickup_date_date_1;
	public $bkg_verification_code1;
	public $bkg_verification_code2;
	public $bkg_country_code1;
	public $bkg_contact_no1;
	public $bkg_user_email1;
	public $bkg_search1;
	public $bkg_amount;
	public $bookingRouteData;
	public $promosAutoApply;
	public $routes;
	public $vnd;
	public $crp_name;
	public $crp_email;
	public $crp_send_email;
	public $crp_send_sms;
	public $crp_send_app;
	public $enabledCOD;
	public $isAdvPromoPaynow;
	public $bkg_region;
	public $bkg_state;
	public $corporate_id;
	public $bkg_user_email_chkbox;
	public $bkg_contact_no_chkbox;
	public $bkg_smart_broken;
	public $bkg_smart_successful;
	public $trip_id;
	public $bkg_add_my_trip;
	public $routeProcessed;
	public $multicityjsondata;
	public $multicityjson;
	public $corpAddtDetails;
	public $bkgGender;
	public $bkgFlexxiMinPay			 = 0;
	public $bkg_from_date;
	public $bkg_to_date;
	public $used_time;
	public $entity_type;
	public $quote;
	public $bkgCancelCustomer;
	public $bkgCancelAdmin;
	public $bkgCancelAgent;
	public $bkgCancelSystem;
	public $sameDayCancellation;
	public $searchIsDBO;
	public $IsGozoCancel;
	public $IsCustomerCancel;
	public $tripAssignmnetFromTime;
	public $tripAssignmnetToTime;
	public $bkg_shuttle_seat_count;
	public $agt_otp_required;
	public $paymentChangesData;
	public $bkgAirport;
	public $bkg_drv_app_filter;
	public $timePrePost;
	public $timeSchedule;
	public $serviceLabel;
	public $bkg_service_class;
	public $platform;
	public $baseamount;
	public $mycallPage;
	public $dateType;
	public $reachInMinutes;
	public $dem_sup_misfireCount, $total_completedCount, $zero_percent, $bkg_is_corporate;
	public $stepOver				 = 0, $bkg_route_data, $newBookingRoutes;
	public $bkgCabCategory;
	public $bkgCabClass;
	public $isGozonow, $isMobile, $isAndroid, $isiOS;
	public $mmtbookings, $restrictToDate;
	public $pickup_later_chk, $drop_later_chk, $compensationdate1, $compensationdate2;
	public $bkgPoi;
	public $bkgUrl					 = [1 => 'book-cab/one-way', 2 => 'book-cab/round-trip', 3 => 'book-cab/multi-city', 4 => [1 => 'book-cab/airport-pickup', 2 => 'book-cab/airport-drop'], 9 => 'booking/itinerary/bkgType/9', 10 => 'booking/itinerary/bkgType/10', 11 => 'booking/itinerary/bkgType/11', 12 => [1 => 'book-cab/airport-pickup', 2 => 'book-cab/airport-drop']];
	public $minPay					 = 0, $minPayExtra				 = 0, $rescheduleCharge		 = 0, $additionalMarkup;
	public $fare, $bkgTravellBy;
	public $bkg_left_For_Pickup;
	public $bkg_arrived;
	public $bkg_trip_start, $bkg_trip_end, $bkg_extra_km_charge, $bkg_extra_km, $bkg_extra_toll_tax, $bkg_extra_state_tax, $bkg_extra_min, $bkg_extra_total_min_charge, $bkg_vendor_collected, $bkg_end_odometer, $bkg_start_odometer, $bkg_trip_otp, $createQuotePartner		 = 1;
	public $userCategories;
	public $requestType;

	const SEARCH_REQUEST	 = 'SEARCH';
	const HOLD_REQUEST	 = 'CREATE';
	const CONFIRM_REQUEST = 'CONFIRM';
	const CODE_VENDOR_ASSIGNED						 = 500;
	const CODE_CABDRIVER_ASSIGNED						 = 501;
	const CODE_COMPLETED								 = 502;
	const CODE_SETTLED								 = 503;
	const CODE_VENDOR_DENY							 = 504;
	const CODE_USER_CANCEL							 = 505;
	const CODE_PENDING								 = 506;
	const CODE_MODIFIED								 = 507;
	const CODE_VENDOR_REGISTER						 = 508;
	const CODE_DELETED								 = 509;
	const CODE_BROADCAST_IMAGE						 = 511;
	const CODE_VENDOR_BROADCAST						 = 512;
	const CODE_VENDOR_ADVANCE							 = 513;
	const CODE_VENDOR_BOOKING_REQUEST					 = 514;
	const CODE_DRIVER_PENDING							 = 516;
	const CODE_MISSING_PAPERWORK						 = 518;
	const CODE_CONSUMER_NOTIFICATION					 = 520;
	const CODE_DRIVER_BROADCAST						 = 521;
	const CODE_CHAT_MESSAGE							 = 522;
	const CODE_DRIVER_PICKUP_REMINDER					 = 523;
	const CODE_DRIVER_RATING_RECIEVED					 = 524;
	const CODE_VENDOR_UNASSIGNED						 = 525;
	const CODE_VENDOR_MARK_COMPLETE_REMINDER			 = 526;
	const CODE_VENDOR_TIER							 = 527;
	const CODE_DELEGATED_OM							 = 531;
	const CODE_BROADCAST_ADMIN						 = 532;
	const CODE_CABDRIVER_UNASSIGNED					 = 533;
	const CODE_TRIP_START_NOTIFICATION				 = 534;
	const CODE_TRIP_END_NOTIFICATION					 = 535;
	const CODE_VENDOR_CANCEL_NOTIFICATION				 = 536;
	const CODE_SOS_OFF_NOTIFICATION					 = 537;
	const CODE_CONSUMER_BROADCAST						 = 538;
	const CODE_ESCALATION_ON_NOTIFICATION				 = 539;
	const CODE_VENDOR_BOOST_NOTIFICATION				 = 540;
	const CODE_AUTOCANCEL_NOTIFICATION				 = 541;
	const CODE_MANUALASSIGNMENT_NOTIFICATION			 = 542;
	const CODE_CRITICALASSIGNMENT_NOTIFICATION		 = 543;
	const CODE_FOR_LOCK								 = 600;
	const CODE_VENDOR_GOZONOW_BOOKING_REQUEST			 = 550;
	const CODE_VENDOR_GOZONOW_BOOKING_ALLOCATED		 = 551;
	const CODE_VENDOR_GOZONOW_NOTIFIED_REJECTED_OFFER	 = 552;
//	const CODE_VENDOR_GOZONOW_BOOKING_REQUEST_NEW		 = 650;
//	const CODE_VENDOR_GOZONOW_BOOKING_ALLOCATED_NEW	 = 651;
	const CODE_PRICE_ANALYST							 = 553;
	const CODE_DCO_NEW_CHAT_NOTIFIED					 = 570;
	const CODE_DEPENDECY_SCORE_MODIFIED				 = 707;

	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'booking';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
//ramala nayek
// NOTE: you should only define rules for those attributes that
// will receive user inputs.
//added spot booking validation
		return [
			['bkg_booking_type, bkg_from_city_id, bkg_to_city_id, bkg_pickup_date, bkg_status', 'required', 'except' => 'spotStep5'],
			['bkg_pickup_date_date', 'required', 'on' => 'type1, t1, type2, spotStep6, step1, admininsert,custombooking, adminupdate'],
			['bkg_pickup_date_time', 'required', 'on' => 'type2, spotStep6, step1, admininsert, custombooking, adminupdate'],
			['bkg_pickup_date_date', 'date', 'format' => 'dd/MM/yyyy'],
			['bkg_pickup_date_time', 'date', 'format' => 'h:mm a'],
			['bkg_pickup_date_date', 'validateTime', 'on' => 'multiroute,type1, new, t1, type2, spotStep6, step1, validateStep1'],
			['bkg_pickup_date_date1', 'validateTime1', 'on' => 'type2'],
			['bkg_pickup_date_date', 'validateFollowupTiming', 'on' => 'admininsert,custombooking'],
			['bkg_shuttle_id', 'required', 'on' => 'spotShuttle'],
			['bkg_shuttle_id', 'validateShuttle', 'on' => 'spotShuttle'],
			['bkg_booking_type', 'validateRouteData', 'on' => 'multiroute, apiroutes, apiroutes1'],
			['routes', 'validateRouteTime', 'on' => 'apiroutes, apiroutes1'],
			['routes', 'validateRouteDate', 'on' => 'apiroutes1'],
			['routes', 'validateRouteDistance', 'on' => 'apiroutes, apiroutes1'],
			['bkg_id', 'validateSpam', 'on' => 'multiroute'],
			['bkg_pickup_address, bkg_drop_address', 'required', 'on' => 'cabRate, step3, stepApp3, additional, lead_convert, stepMobile3'],
			['bkg_vehicle_type_id,bkg_pickup_date', 'required', 'on' => 'modifybooking'],
			['bkg_booking_id', 'validateAgentBooking', 'on' => 'validateData, cabAgent'],
			['bkg_remark', 'required', 'on' => 'add_remarks'],
			['bkg_pickup_address', 'validateAddressLatLong', 'on' => 'cabRateAgt,cabRateAdm'],
			['bkg_bcb_id, bkg_booking_type, bkg_from_city_id, bkg_to_city_id, bkg_trip_distance, bkg_status, bkg_active', 'numerical', 'integerOnly' => true, 'min' => 0],
			['bkg_booking_id, bkg_pickup_address, bkg_drop_address', 'length', 'max' => 500],
			['bkg_remark, new_remark', 'length', 'max' => 1000],
			['bkg_create_date1', 'validatePartnerUpload', 'on' => 'partnerupdate'],
			['bkg_agent_id', 'required', 'on' => 'partnerupdate'],
			['bkg_pickup_date_date', 'adminValidateTime', 'on' => 'admininsert,custombooking,adminupdate'],
			['bkg_contact_no_chkbox', 'validateCabDriverInfo', 'on' => 'sendcabdriver'],
			['bkg_id', 'validateVendorAssignment', 'on' => 'assignvendor'],
			['bkg_vendor_confirm', 'required', 'on' => 'vendorconfirmdeny'],
			['bkg_return_date_date', 'checkReturnDate', 'on' => 'insert,update,lead_convert,admininsert,custombooking,adminupdate'],
			['bkg_pickup_date', 'validateTimeVendorCancel', 'on' => 'deny_vendor'],
			['bkg_pickup_date', 'checkTimeTripStart', 'on' => 'trip_start'],
			array('bkg_trip_status', 'required', 'on' => 'trip_status'),
			array('bkg_pickup_date', 'validateTimeConsumerEdit', 'on' => 'deny_consumer'),
			array('bkg_cancel_delete_reason', 'required', 'on' => 'cancel_delete'),
			array('bkg_cancel_id', 'required', 'on' => 'cancel_delete_new, cancel_delete_new_system'),
			array('bkg_id', 'checkUserAccess', 'on' => 'cancel_delete_new'),
			array('bkg_status', 'validateConfirmBooking', 'on' => 'confirmBooking'),
			array('bkg_cancel_delete_reason', 'length', 'max' => 1000),
			array('bkg_trip_distance, bkg_trip_duration', 'length', 'max' => 250),
			array('bkg_instruction_to_driver_vendor', 'length', 'max' => 4000),
			array('bkg_pickup_lat, bkg_pickup_long', 'length', 'max' => 100),
			array('search,bkg_pickup_date,bkg_vehicle_type_id,pickup1, pickup2, fromcity,sourcezone,destinationzone,tocity,paymentType,ebsOpt,
				bkg_pickup_date_date, bkg_pickup_date_time, bkg_return_date_date,bkg_return_date,bkg_return_id,optPaymentOptions,
				bkg_return_date_time, chk_user_msg, bkg_verification_code1, partialPayment, bkg_operator_surge,
				bkg_from_city_id,bkg_to_city_id,bkg_status,bkg_id,lead_id,ids,bkg_agent_id,bkg_name,bkg_message,
				bkg_remark2,bkg_refund_amount_remark,bkg_total_amount_remark,bkg_trip_distance_remark,bkg_gozo_amount_remark,
				bkg_vendor_amount_remark,bkg_credits_used_remark bkg_advance_amount_remark,bkg_vendor_collected_remark,vehicle_type_id,full_name,
				bkg_pickup_date_time1,bkg_pickup_date_date1,bkg_from_city_id1,bkg_to_city_id1,bkg_country_code1,bkg_contact_no1,bkg_user_email1,
				bkg_search1,bkg_driver_cab_message,bkg_user_message,bkg_vendor_confirm,bkg_accounts_remark,month,year,
				optUseCredits,bkg_vendor_rating,bkg_vendor_trips,bkg_driver_rating,bookingRouteData,
				bkg_cancel_id,bkg_driver_trips,bkg_trip_status,bkg_vehicle_rating,bkg_vehicle_trips,
				bkg_trip_duration_day,bktyp,bkg_package_id,bkg_shuttle_id,bkg_cav_id,bkg_cancel_delete_reason, bkg_cancel_id, bkg_modified_on, bkg_status,
				bkg_active, bkg_create_date,bkg_pickup_date1,bkg_pickup_date2,bkg_create_date1,bkg_create_date2,bkg_bcb_id,trans_mode,bkg_transfer_type,
				cntBadCustomer, cntBadDriver, cntBadCar,cntBadVendor,preData,b2cbookings,excludeAT,b2b0bookings,bkg_is_corporate,bkgtypes,new_remark,bkg_remark,checkPickupTime,
				enabledCOD,agentCreditAmount,bkg_price_surge_id,bkg_admin_id,bkgTrail,bkgCancelCustomer,bkgCancelAdmin,bkgCancelAgent,bkgCancelSystem,searchIsDBO,search_tags,
				bkg_reconfirm_flag,bkg_flexxi_type,bkg_fp_id,bkg_reconfirm_flag,bkg_vendor_collected,bkg_flag_source,corporate_code,bkg_dashbord_source,bkg_source,routes,bkg_region,bkg_agent_ref_code,bkg_user_email_chkbox,bkg_contact_no_chkbox,
				bkg_smart_broken,bkg_smart_successful,bkg_settled_flag,bkg_vendor_actual_collected,bkg_lead_id,bkg_refund_amount,bkg_service_class,bkg_vht_id,bkg_assigned_date1,bkg_assigned_date2,b2btfrbookings,incB2Btfrbookings',
				'safe'),
			['bkg_return_date, sourcezone, destinationzone, bkg_modified_on,hash', 'safe'],
			['bkg_pickup_address, bkg_drop_address, bkg_instruction_to_driver_vendor', 'filter', 'filter' => array($obj = new CHtmlPurifier(), 'purify')],
			['bkg_message', 'required', 'on' => 'feedback'],
			['bkg_total_amount,bkg_message', 'required', 'on' => 'accountupdate'],
			['bkg_user_message', 'required', 'on' => 'markedbadremark'],
			['bkg_id', 'validateMMTCancel', 'on' => 'mmtCancel'],
			['bkg_id', 'validateSpicejetCancel', 'on' => 'spicejetCancel'],
			['bkg_id', 'validateSpicejetUpdate', 'on' => 'spicejetUpdate'],
			['bkg_id', 'validateMMTConfirm', 'on' => 'mmtConfirm'],
			['bkg_id', 'checkSpam', 'on' => 'createNewQuote'],
			['bkg_id', 'checkDuplicatePartnerRefId', 'on' => 'checkDuplicatePartnerRefId'],
		];
	}

	public function checkUserAccess($attribute, $params)
	{
		if ($this->bkg_cancel_id == 42)
		{
			return true;
		}

		$success = false;
		if (UserInfo::getUserType() == 1 && UserInfo::getUserId() == 0)
		{
			$success = true;
			goto accessCheck;
		}
		switch (UserInfo::getUserType())
		{
			case UserInfo::TYPE_CONSUMER:
				$success = ($this->bkgUserInfo->bkg_user_id == UserInfo::getUserId());
				break;
			case UserInfo::TYPE_AGENT:
				$agentId = $this->bkg_agent_id;
				$success = AgentUsers::model()->checkAccess($agentId, UserInfo::getUserId());
				break;
			case UserInfo::TYPE_ADMIN:
			case UserInfo::TYPE_SYSTEM:
				$success = true;
				break;
			default:
				break;
		}
		if (!$success)
		{
			$this->addError($attribute, "Access denied. You are not authorised to cancel this booking.");
		}
		accessCheck:
		return $success;
	}

	public function validateSOS($attribute, $params)
	{
		$success = false;
		switch (UserInfo::getUserType())
		{
			case UserInfo::TYPE_CONSUMER:
				$success = ($this->bkgUserInfo->bkg_user_id == UserInfo::getUserId());
				break;
			case UserInfo::TYPE_AGENT:
				$agentId = $this->bkg_agent_id;
				$success = AgentUsers::model()->checkAccess($agentId, UserInfo::getUserId());
				break;
			case UserInfo::TYPE_ADMIN:
			case UserInfo::TYPE_SYSTEM:
				$success = true;
				break;
			default:
				break;
		}
		if (!$success)
		{
			$this->addError($attribute, "Access denied. You are not authorised to cancel this booking.");
		}
		return $success;
	}

	public function validateVendorAssignment($attribute, $params)
	{
		$success	 = true;
		$userType	 = UserInfo::getUserType();
		if ($userType != UserInfo::TYPE_ADMIN)
		{
			goto end;
		}
		$manualAssignFlag			 = $this->bkgPref->bkg_manual_assignment + $this->bkgPref->bkg_critical_assignment;
		$checkPreVendorAssignAccess	 = Yii::app()->user->checkAccess('preVendorAssignment');

		if ($this->bkg_booking_type == 7)
		{
			return true;
		}

		if (!$checkPreVendorAssignAccess && $manualAssignFlag == 0 && $this->bkgPref->bpr_assignment_level == 0)
		{
			$this->addError($attribute, "Pre assignment of vendor for this booking is not allowed yet. Please contact your operation manager.");
			$success = false;
		}
		end:
		return $success;
	}

	public function validateAddressLatLong($attribute, $params)
	{
		if ($this->pickupLat == '' || $this->pickupLon == '')
		{
			$fcityName = $this->bkgFromCity->cty_name;
			$this->addError('bkg_pickup_address', "Please enter correct pickup address for $fcityName as suggested");
			return false;
		}
		if ($this->dropLat == '' || $this->dropLon == '')
		{
			$tcityName = $this->bkgToCity->cty_name;
			$this->addError('bkg_drop_address', "Please enter correct drop address for $tcityName as suggested");
			return false;
		}
		return true;
	}

	public function validateConfirmBooking($attribute, $params)
	{
		$success	 = false;
		$msg		 = "BookingId to validate confirm booking---" . $this->bkg_id;
#\Sentry\captureMessage($msg, null);
		$isStatus	 = in_array($this->bkg_status, [1, 15]);
		if ($this->bkgInvoice->bkg_advance_amount > 0 || $this->bkgPref->bkg_is_confirm_cash == 1)
		{
			$success = true;
		}
		else
		{
			if ($this->bkgInvoice->bkg_advance_amount == 0 && ($this->bkgPref->bkg_is_confirm_cash == 0 || $this->bkgPref->bkg_is_confirm_cash == null) && ($this->bkg_agent_id == '' || $this->bkg_agent_id == null))
			{
				$this->addError('bkg_status', 'Please pay advance or confirm as cash');
				return $success;
			}
			else
			{
				$success = true;
			}
		}
		return $success;
	}

	public function getTags($tag = '')
	{
		$arr = [1 => 'MFF', 2 => 'VIP'];
		if ($tag != '')
		{
			return $arr[$tag];
		}
		return $arr;
	}

	public function enableCOD()
	{
		$isCod				 = BookingSub::model()->getApplicable($this->bkg_from_city_id, $this->bkg_to_city_id, 3);
		$this->enabledCOD	 = ($this->bkg_booking_type == 4 || !$isCod) ? false : true;
		return $this->enabledCOD;
	}

	public function validateSpam($attribute, $params)
	{
		$validateSpam = Yii::app()->params['validateSpam'];
		if (!$validateSpam)
		{
			return true;
		}
		$cnt = $this->checkDuplicateByIP($this->bkg_user_ip, $this->bkg_contact_no, $this->bkg_user_email);
		$ip	 = Yii::app()->cache->get("ddns");
		if (!$ip)
		{
			$ip = gethostbyname("gozocabs.ddns.net");
			Yii::app()->cache->set("ddns", $ip, 60 * 60 * 5);
		}
	}

	public function validateCabDriverInfo($attribute, $params)
	{
		if ($this->bkg_contact_no_chkbox != 1 && $this->bkg_user_email_chkbox != 1)
		{
			$this->addError('bkg_contact_no_chkbox', "Please check contact number/email address to send notifications.");
		}
	}

	public function validateRouteData($attribute, $params)
	{
		Logger::create("getQuote BEFORE validateRouteData:\t", CLogger::LEVEL_PROFILE);
		$cntRut = count($this->bookingRoutes);

		$bookingType = $this->getBookingType($this->bkg_booking_type);
		if ($cntRut > 0)
		{
			foreach ($this->bookingRoutes as $route)
			{
				if (!$route->validate())
				{
					$this->addErrors($route->getErrors());
				}
			}
			$fromCity	 = Cities::checkActive($this->bkg_from_city_id);
			$toCity		 = Cities::checkActive($this->bkg_to_city_id);
			if ($fromCity == 0)
			{
				$this->addError($attribute, 'Please select valid source city');
				return false;
			}
			elseif ($toCity == 0)
			{
				$this->addError($attribute, 'Please select valid destination city');
				return false;
			}
			elseif ($this->bkg_booking_type == 3 && $this->bkg_from_city_id == $this->bkg_to_city_id)
			{
				$this->bkg_booking_type = 2;
			}
			elseif ($this->bkg_booking_type == 2)
			{
				$this->bkg_return_date_date	 = $this->bookingRoutes[$cntRut - 1]->brt_pickup_date_date;
				$this->bkg_return_date_time	 = $this->bookingRoutes[$cntRut - 1]->brt_pickup_date_time;
			}
			elseif ($this->bkg_booking_type == 1 && $cntRut != 1)
			{
				$this->addError($attribute, 'One way trip cannot have more than 1 route');
				return false;
			}
			elseif (($this->bkg_booking_type == 2 || $this->bkg_booking_type == 3) && $cntRut == 1)
			{
				$this->addError($attribute, $bookingType . 'trip should have more than 1 route');
				return false;
			}
			elseif ($this->bkg_booking_type == 2 && $this->bkg_from_city_id != $this->bkg_to_city_id)
			{
				$this->addError($attribute, 'Source and destination cities must be same for return trip');
				return false;
			}
		}
		else
		{
			$this->addError($attribute, 'No route is chosen');
			return false;
		}
		Logger::create("getQuote After validateRouteData:\t", CLogger::LEVEL_PROFILE);

		return true;
	}

	public function validateRouteTime($attribute, $params)
	{
		Logger::create("getQuote Before validateRouteTime:\t", CLogger::LEVEL_PROFILE);
		if ($this->errors != null || $this->errors != [])
		{
			return false;
		}
		$count		 = count($this->bookingRoutes);
		$est_date1	 = '';
		for ($i = 0; $i < $count; $i++)
		{
			if ($i == 0)
			{
				$pickup_date = $this->bookingRoutes[$i]->brt_pickup_datetime;
				$diff		 = ((strtotime($pickup_date) - time()) / 3600);
				$currentHour = (int) date('H');
				$diffCheck	 = 4;
				if ($currentHour < 2 || $currentHour > 22)
				{
					$diffCheck = 6;
				}
				elseif ($currentHour < 5 || $currentHour > 21)
				{
					$diffCheck = 5;
				}

				if ($diff < $diffCheck)
				{
//$minHour = ($currentHour > 3 && $currentHour < 21 && $diff < 4) ? 4 : 6;
					$this->addError($attribute, "Departure time should be at least $diffCheck hours hence");
					return false;
				}
			}
			else
			{
				$est_date2	 = date('Y-m-d H:i:s', strtotime(str_replace("/", "-", $this->bookingRoutes[$i]->brt_pickup_datetime)));
				$est_date3	 = date('Y-m-d H:i:s', strtotime(str_replace("/", "-", $pickup_date)));
				$est_date1	 = date('Y-m-d H:i:s', strtotime(str_replace("/", "-", $this->bookingRoutes[$i]->brt_return_date_time)));
				if ($est_date3 > $est_date1 && ($est_date1 != null && $est_date1 != '1970-01-01 05:30:00'))
				{
					$this->addError($attribute, 'Pickup Time for should be after ' . $est_date3);
					return false;
				}
				if ($i > 0)
				{
					if ($est_date3 > $est_date2)
					{
						$this->addError($attribute, 'Pickup Time for ' . Cities::getName($this->bookingRoutes[$i]->brt_from_city_id) . ' should be after ' . $est_date3);
						return false;
					}
				}
			}
		}
		Logger::create("getQuote After validateRouteTime:\t", CLogger::LEVEL_PROFILE);

		return true;
	}

	public function validateRouteDate($attribute, $params)
	{
		$count		 = count($this->bookingRoutes);
		$est_date1	 = '';
		for ($i = 0; $i < $count; $i++)
		{
			if ($i == 0)
			{
				$pickup_date = date('Y-m-d', strtotime($this->bookingRoutes[$i]->brt_pickup_datetime));
				$todayDate	 = date('Y-m-d');
				if ($pickup_date < $todayDate && ($this->bkg_agent_id == 450 || $this->bkg_agent_id == 18190))
				{
					$this->addError($attribute, 'Departure date should be on or after ' . date('d/m/Y'));
					return false;
				}
			}
			else
			{
				$est_date2	 = new DateTime($this->bookingRoutes[$i]->brt_pickup_datetime);
				$est_date3	 = new DateTime($est_date1);
				if ($est_date2 < $est_date3)
				{
					$this->addError($attribute, 'Pickup Time for ' . Cities::getName($this->bookingRoutes[$i]->brt_from_city_id) . ' should be after ' . $est_date1);
					return false;
				}
			}
		}
		return true;
	}

	public function validateTime($attribute, $params)
	{

		if ($this->bkg_pickup_date != '')
		{
			$diff = floor((strtotime($this->bkg_pickup_date) - time()));

			$response->isAllowed = false;
			if ($this->bkg_id == null)
			{
				$response = $this->checkGozoNowEligibility();
			}
			if (!$response->isAllowed)
			{
				$response = self::checkTime($this);
			}

			$tier = 0;
			if ($this->bkg_vehicle_type_id > 0)
			{
				$svcModel	 = SvcClassVhcCat::model()->findByPk($this->bkg_vehicle_type_id);
				$tier		 = $svcModel->scv_scc_id;
			}
//$minDuration = Config::getMinPickupDuration($this->bkg_agent_id, $this->bkg_booking_type, $tier);
//			if ($response->isAllowed && $diff >= $response->timeDifference*60)
//			{
//				goto skipCheck;
//			}

			if (!$response->isAllowed)
			{
				$this->addError($attribute, 'Departure time should be at least ' . $response->timeDifference . ' minutes from now.');
				return false;
			}


			$currDateTime	 = Filter::getDBDateTime();
			$workingMinDiff	 = Filter::CalcWorkingMinutes($currDateTime, $this->bkg_pickup_date);
			$spiceId		 = Config::get('spicejet.partner.id');
			$sugerboxId		 = Config::get('sugerbox.partner.id');
			if ($workingMinDiff <= Config::get('working.minute.difference') && $this->bkgPref->bkg_is_gozonow != 1 && $this->bkg_agent_id != $spiceId && $this->bkg_agent_id != $sugerboxId)
			{
				$durationStartDate = Filter::addWorkingMinutes(Config::get('working.minute.difference'), $this->bkg_pickup_date);
				$this->addError($attribute, 'Departure time should be after ' . $durationStartDate);
				return false;
			}

			skipCheck:
			$maxTime		 = Config::getMaxPickupTime($this->bkg_booking_type);
			$maxTimestamp	 = strtotime("+{$maxTime} minute");
			$maxPickDate	 = date('Y-m-d H:00:00', $maxTimestamp);
			$d1				 = new DateTime($this->bkg_pickup_date);
			$d2				 = new DateTime($maxPickDate);
			$transferzId	 = Config::get('transferz.partner.id');
			if ($d1 > $d2 && ($this->bkg_agent_id != $transferzId))
			{
				$maxPickDate = date('d-M-Y H:00:00', $maxTimestamp);

				$this->addError($attribute, 'Departure time should be before' . $maxPickDate);
				return false;
			}
		}
		return true;
	}

	/**
	 * This function helps to determine the time difference of create and pickup booking
	 * @param BookingRoute $model
	 * @return int
	 */
	public function checkTime($model)
	{
		$tier = 0;
		if ($this->bkg_vehicle_type_id > 0)
		{
			$svcModel	 = SvcClassVhcCat::model()->findByPk($this->bkg_vehicle_type_id);
			$tier		 = $svcModel->scv_scc_id;
		}
		$minTime = Config::getMinPickupDuration($this->bkg_agent_id, $this->bkg_booking_type, $tier, $this->bkg_transfer_type);
		if ($this->bkgPref->bkg_is_gozonow == 1)
		{
			$minTime = Config::getMinGozoNowPickupDuration($model->bkg_booking_type, $tier);
		}


		$response					 = new stdClass();
		$response->timeDifference	 = $minTime;
		$diff						 = floor((strtotime($model->bkg_pickup_date) - time()) / 60);
		$response->pickDiff			 = $diff;

		if ($model->bkg_booking_type == 7)
		{
			$response->timeDifference = 12 * 60;
		}

		//For delhi and delhi airport cash payment booking allowed with 1 hrs pickup duration check
		/* @var $isAllowedCity GoMmt */
		$isAllowedCity = GoMmt::isAllowedCity($this->bkg_from_city_id, $this->bkg_agent_id);
		if (UserInfo::getUserType() == UserInfo::TYPE_ADMIN || $isAllowedCity == true) //|| $isAllowedCity == true
		{
			$response->timeDifference = 75;
		}

		if (($this->bkg_agent_id > 0 && $this->bkg_agent_id <> 1249) && ($model->requestType == GoMmt::HOLD_REQUEST))
		{
			$response->timeDifference = $response->timeDifference - Config::get('instantsearch.pickup.mintime');
		}

		$response->isAllowed = true;
		if ($diff < $response->timeDifference)
		{
			$response->isAllowed = false;
		}

		return $response;
	}

	public function validateTimeOld($attribute, $params)
	{

		if ($this->bkg_pickup_date != '')
		{
			$diff = floor((strtotime($this->bkg_pickup_date) - time()));

			$response	 = self::checkTime($this);
			$tier		 = 0;
			if ($this->bkg_vehicle_type_id > 0)
			{
				$svcModel	 = SvcClassVhcCat::model()->findByPk($this->bkg_vehicle_type_id);
				$tier		 = $svcModel->scv_scc_id;
			}
//$minDuration = Config::getMinPickupDuration($this->bkg_agent_id, $this->bkg_booking_type, $tier);
//			if ($response->isAllowed && $diff >= $response->timeDifference*60)
//			{
//				goto skipCheck;
//			}

			if ($diff < $response->timeDifference * 60)
			{
				$this->addError($attribute, 'Departure time should be at least ' . $response->timeDifference . ' minutes from now.');
				return false;
			}

			$currDateTime	 = Filter::getDBDateTime();
			$workingHrsDiff	 = Filter::CalcWorkingHour($currDateTime, $this->bkg_pickup_date);
			$spiceId		 = Config::get('spicejet.partner.id');
			$sugerboxId		 = Config::get('sugerbox.partner.id');
			if ($workingHrsDiff <= 1 && $this->bkgPref->bkg_is_gozonow != 1 && $this->bkg_agent_id != $spiceId)
			{
				$durationStartDate = Filter::addWorkingMinutes(60, $this->bkg_pickup_date);
				$this->addError($attribute, 'Departure time should be after ' . $durationStartDate);
				return false;
			}



			skipCheck:
			$maxTime		 = Config::getMaxPickupTime($this->bkg_booking_type);
			$maxTimestamp	 = strtotime("+{$maxTime} minute");
			$maxPickDate	 = date('Y-m-d H:00:00', $maxTimestamp);
			$d1				 = new DateTime($this->bkg_pickup_date);
			$d2				 = new DateTime($maxPickDate);
			if ($d1 > $d2)
			{
				$maxPickDate = date('d-M-Y H:00:00', $maxTimestamp);

				$this->addError($attribute, 'Departure time should be before ' . $maxPickDate);
				return false;
			}
		}
		return true;
	}

	/**
	 * This function helps to determine the time difference of create and pickup booking
	 * @param BookingRoute $model
	 * @return int
	 */
	public function checkTime1($model)
	{
		$tier = 0;
		if ($this->bkg_vehicle_type_id > 0)
		{
			$svcModel	 = SvcClassVhcCat::model()->findByPk($this->bkg_vehicle_type_id);
			$tier		 = $svcModel->scv_scc_id;
		}
		$minTime = Config::getMinPickupDuration($this->bkg_agent_id, $this->bkg_booking_type, $tier, $this->bkg_transfer_type);
		if ($this->bkgPref->bkg_is_gozonow == 1)
		{
			$minTime = Config::getMinGozoNowPickupDuration($model->bkg_booking_type, $tier);
		}


		$response					 = new stdClass();
		$response->timeDifference	 = $minTime;
		$response->isAllowed		 = false;

		if ($model->bkg_booking_type == 7)
		{
			$response->timeDifference = 12 * 60;
		}
		if (UserInfo::getUserType() == UserInfo::TYPE_ADMIN)
		{
			$response->timeDifference = 60;
		}

		return $response;
	}

	public function validateRouteDistance($attribute, $params)
	{
		Logger::create("getQuote Before validateRouteDistance:\t", CLogger::LEVEL_PROFILE);
		$key		 = "validateRouteDistance_{$this->bkg_from_city_id}_{$this->bkg_to_city_id}";
		$recordset	 = Yii::app()->cache->get($key);
		if ($recordset !== false)
		{
			goto result;
		}

		$sql		 = "SELECT * FROM cities c1
                INNER JOIN cities c2 ON c1.cty_active=c2.cty_active AND c1.cty_active=1 AND c1.cty_id={$this->bkg_from_city_id} AND c2.cty_id={$this->bkg_to_city_id}
                LEFT JOIN route ON route.rut_from_city_id=c1.cty_id AND  route.rut_to_city_id=c2.cty_id AND rut_active=1
                LEFT JOIN rate ON rate.rte_route_id=route.rut_id AND rate.rte_status=1
                WHERE (route.rut_id IS NOT NULL AND route.rut_estm_distance<900) OR (rate.rte_id IS NOT NULL) OR
                SQRT(POW(69.1 * (c1.cty_lat - c2.cty_lat), 2) + POW(69.1 * (c2.cty_long - c1.cty_long) * COS(c1.cty_lat / 57.3), 2))<500";
		$recordset	 = DBUtil::queryAll($sql);
		Yii::app()->cache->set($key, $recordset, 86400 * 30, new CacheDependency("routes"));
		result:
		Logger::create("getQuote After validateRouteDistance:\t", CLogger::LEVEL_PROFILE);
		if (count($recordset) > 0)
		{
			return true;
		}
		else
		{
			$this->addError("bkg_route_id", "Route not supported");
			return false;
		}
	}

	public function adminValidateTime($attribute, $params)
	{
		if ($this->bkg_pickup_date != '')
		{
			$diff = strtotime($this->bkg_pickup_date) - time();
			if ($diff < 60)
			{
				$this->addError($attribute, 'Departure time should not be in past');
				return false;
			}
		}
		return true;
	}

	public function validateTime1($attribute, $params)
	{
		if ($this->bkg_pickup_date_date1 !== null && $this->bkg_pickup_date_time1 != null)
		{
			DateTimeFormat::concatDateTime($this->bkg_pickup_date_date1, $this->bkg_pickup_date_time1, $date);

			$diff		 = floor((strtotime($date) - time()) / 60);
			$allowedDiff = Config::getMinPickupTime($this->bkg_booking_type);
			$allowedDiff = ($this->bkg_agent_id == 450 || $this->bkg_agent_id == 18190) ? 4 * 60 : $allowedDiff;
			if ($diff < $allowedDiff)
			{
				$this->addError($attribute, 'Departure time should be at least ' . $allowedDiff . ' minutes hence');
				return false;
			}
		}
		return true;
	}

	public function validateReturnDate()
	{
		if ($this->bkg_pickup_date != '' && $this->bkg_return_date != '')
		{
			$duration				 = Route::model()->getRoundtripEstimatedMinimumDurationbyCities($this->bkg_from_city_id, $this->bkg_to_city_id, 30);
			$estimatedMinTriptime	 = date('Y-m-d H:i:s', strtotime("+$duration minutes", strtotime($this->bkg_pickup_date)));
			if ($estimatedMinTriptime > $this->bkg_return_date)
			{
				$returnDateEstimated = DateTimeFormat::DateTimeToDatePicker($estimatedMinTriptime);
				$returnTimeEstimated = DateTimeFormat::DateTimeToTimePicker($estimatedMinTriptime);
				$this->addError('bkg_return_date_time', "Trip cannot end earlier than $returnDateEstimated $returnTimeEstimated. Round trip drive will take that much time");
				return false;
			}
		}
	}

	public function validateTimeVendorCancel($attribute, $params)
	{
		if ($this->bkg_pickup_date != null)
		{
			$diff	 = floor((strtotime($this->bkg_pickup_date) - time()) / 60);
			$minTime = Config::getMinPickupTime($this->bkg_booking_type);
			if ($diff < $minTime)
			{
				$this->addError($attribute, "Departure time should be at least $minTime minutes to cancel");
				return false;
			}
		}
		return true;
	}

	public function checkTimeTripStart($attribute, $params)
	{
		if ($this->bkg_pickup_date != null)
		{
			$diff = floor((strtotime($this->bkg_pickup_date) - time()) / 3600);
			if (abs($diff) > 1)
			{
				$this->addError($attribute, 'Pickup time should be less than or equal to one hour. Please contact our customer support');
				return false;
			}
		}
		return true;
	}

	public function validateTimeConsumerEdit($attribute, $params)
	{
		if ($this->bkg_pickup_date != null)
		{
			$diff = floor((strtotime($this->bkg_pickup_date) - time()) / 3600);
			if ($diff < 36)
			{
				$this->addError('bkg_pickup_date_date', 'Pickup time should be atleast 36 hours to modify. Please contact our customer support.');
				return false;
			}
		}
		if ($this->bkg_booking_type == 2)
		{
			if ($this->bkg_pickup_date >= $this->bkg_return_date)
			{
				$this->addError('bkg_return_date_date', 'Return date cannot be earlier than Pickup date');
				return false;
			}
			else
			{
				return true;
			}
		}
		return true;
	}

	public function validateRoute($attribute, $params)
	{
		$rmodel = Route::model()->getbyCities($this->bkg_from_city_id, $this->bkg_to_city_id);
		if (!$rmodel)
		{
			$this->addError($attribute, 'Sorry! Route does not exist');
			return false;
		}
		return true;
	}

	public function checkReturnDate($attribute, $params)
	{
		if ($this->bkg_booking_type == 2 && $this->bkg_return_date == '')
		{
			$this->addError($attribute, 'Please enter return date');
			return false;
		}
		return true;
	}

	public function checkStatus($attribute, $params)
	{
		if ($this->bkg_status == 15 && $this->bkg_agent_id > 0)
		{
			$this->addError('bkg_agent_id', 'Can not select agent on create quote');
			return false;
		}
		else
		{
			return true;
		}
	}

	public function validateFollowupTiming($attribute, $params)
	{
		$success = false;
		$this->bkgTrail->validate();
		if ($this->bkgTrail->bkg_followup_date == "" && $this->bkg_agent_id == '')
		{
			$this->addError("bkgTrail", "Followup time is required");
		}
		if ($this->bkgTrail->bkg_followup_date == "")
		{
			$success = true;
			goto result;
		}

		$now			 = Filter::getDBDateTime();
		$fullDur		 = round((strtotime($this->bkg_pickup_date) - strtotime($now)) / 60);
		$allowedMinutes	 = max([round($fullDur * 0.16), 20]);
		$followupDur	 = round((strtotime($this->bkgTrail->bkg_followup_date) - strtotime($now)) / 60);
		$maxFollowupTime = date('d/m/Y H:i', strtotime("+$allowedMinutes  minute", strtotime($now)));
		$success		 = (($followupDur / $fullDur) <= 0.16);
		if (!$success)
		{
			$this->addError('bkgTrail', 'Follow up timing should be less than ' . $maxFollowupTime);
		}
		else
		{
			$this->bkgTrail->bkg_followup_active = 1;
		}
		result:
		return $success;
	}

	public function beforeValidate()
	{
		if (Booking::isDayRental($this->bkg_booking_type))
		{
			$this->bkg_to_city_id = $this->bkg_from_city_id;
		}
		$this->encodeAttributes();
		return parent::beforeValidate();
	}

	public function afterFind()
	{
		parent::afterFind();
		$this->decodeAttributes();
	}

	public function encodeAttributes()
	{
		if (is_array($this->bookingRoutes) && count($this->bookingRoutes) > 0)
		{
			$route = $this->bookingRoutes[0];
			if ($route->brt_pickup_date_date == "" && $route->brt_pickup_datetime != "")
			{
				$route->parsePickupDateTime($route->brt_pickup_datetime);
			}

			if ($this->bookingRoutes[0]->brt_from_city_id != "" && $this->bookingRoutes[(count($this->bookingRoutes) - 1)]->brt_to_city_id != "")
			{
				$this->bkg_pickup_date_date	 = $this->bookingRoutes[0]->brt_pickup_date_date;
				$this->bkg_pickup_date_time	 = $this->bookingRoutes[0]->brt_pickup_date_time;
				$this->bkg_from_city_id		 = $this->bookingRoutes[0]->brt_from_city_id;
				$this->bkg_to_city_id		 = $this->bookingRoutes[(count($this->bookingRoutes) - 1)]->brt_to_city_id;
			}
		}
		if (DateTimeFormat::concatDateTime($this->bkg_pickup_date_date, $this->bkg_pickup_date_time, $pickupTime))
		{
			$this->bkg_pickup_date = $pickupTime;
		}
		if (DateTimeFormat::concatDateTime($this->bkg_return_date_date, $this->bkg_return_date_time, $returnTime))
		{
			$this->bkg_return_date = $returnTime;
		}
	}

	public function decodeAttributes()
	{
		$this->parsePickupDateTime($this->bkg_pickup_date);
		$this->parseReturnDateTime($this->bkg_return_date);
	}

	public function parsePickupDateTime($dateTime)
	{
		if (DateTimeFormat::parseDateTime($dateTime, $date, $time))
		{
			$this->bkg_pickup_date_date	 = $date;
			$this->bkg_pickup_date_time	 = $time;
		}
	}

	public function parseReturnDateTime($dateTime)
	{
		if (DateTimeFormat::parseDateTime($dateTime, $date, $time))
		{
			$this->bkg_return_date_date	 = $date;
			$this->bkg_return_date_time	 = $time;
		}
	}

	public function validatePartnerUpload($attribute, $params)
	{
		$dayDiff = 7;
		$error	 = 0;
		if (($this->bkg_create_date1 == '' || $this->bkg_create_date2 == '') && ($this->bkg_pickup_date1 == '' || $this->bkg_pickup_date2 == ''))
		{
			$this->addError('bkg_create_date1', 'Please filter with a date range');
			$this->addError('bkg_pickup_date1', 'Please filter with a date range');
			$error++;
		}
		if ($this->bkg_create_date1 != '' && $this->bkg_create_date2 != '')
		{
			$dataDiff	 = date_diff(date_create($this->bkg_create_date1), date_create($this->bkg_create_date2));
			$dateDiff	 = $dataDiff->days;
			if ($dateDiff > $dayDiff)
			{
				$this->addError('bkg_create_date1', "Date range cannot be more than $dayDiff days");
				$error++;
			}
		}
		if ($this->bkg_pickup_date1 != '' && $this->bkg_pickup_date2 != '')
		{
			$dataDiff	 = date_diff(date_create($this->bkg_pickup_date1), date_create($this->bkg_pickup_date2));
			$dateDiff	 = $dataDiff->days;
			if ($dateDiff > $dayDiff)
			{
				$this->addError('bkg_pickup_date1', "Date range cannot be more than $dayDiff days");
				$error++;
			}
		}
		if ($error > 0)
		{
			return false;
		}
		return true;
	}

	public function validateAgentBooking($attribute, $params)
	{
		$error = 0;

		if ($this->bkgUserInfo->bkg_user_fname == '')
		{
			$this->addError('first_name', 'Please provide customer first name');
			$error++;
		}
		if ($this->bkgUserInfo->bkg_contact_no == '')
		{
			$this->addError('customer_mobile_country_code', 'Please provide customer mobile numbers ');
			$error++;
		}
		if ($this->bkgUserInfo->bkg_user_email == '')
		{
			$this->addError('customer_email', 'Please provide customer Email Address');
			$error++;
		}

		if ($this->bkgUserInfo->bkg_contact_no != '')
		{
			$phone		 = "+" . $this->bkgUserInfo->bkg_country_code . $this->bkgUserInfo->bkg_contact_no;
			$phonenumber = new libphonenumber\LibPhone($phone);
			$a			 = $phonenumber->toE164();
			$a			 = $phonenumber->toInternational();
			$a			 = $phonenumber->toNational();
			if (!$phonenumber->validate())
			{
				$this->addError('customer_mobile', 'Please provide valid customer mobile');
				$error++;
			}
		}
		if ($error > 0)
		{
			return false;
		}
		return true;
	}

	public function validateMMTConfirm($attribute, $params)
	{
		$error = false;
		if ($this->bkg_agent_id != 18190)
		{
			$this->addError('bkg_id', 'Invalid booking');
			$error = true;
		}

		return $error;
	}

	public function validateMMTCancel($attribute, $params)
	{
		$error = false;
		if ($this->bkg_agent_id != 18190)
		{
			$error = true;
			$this->addError('bkg_id', 'Invalid booking');
		}
		elseif (!in_array($this->bkg_status, [2, 3, 5]))
		{
			$strCancel = 'Booking not confirmed or already cancelled';
			if (in_array($this->bkg_status, array(6, 7)))
			{
				$strCancel = "Booking already marked as completed";
			}

			$error = true;
			$this->addError('bkg_status', $strCancel);
		}
		return $error;
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
// NOTE: you may need to adjust the relation name and the related
// class name for the relations automatically generated below.

		return array(
			'bkgFromCity'		 => array(self::BELONGS_TO, 'Cities', 'bkg_from_city_id'),
			'bkgToCity'			 => array(self::BELONGS_TO, 'Cities', 'bkg_to_city_id'),
			'bookingRoutes'		 => array(self::HAS_MANY, 'BookingRoute', 'brt_bkg_id'),
			'bkgBcb'			 => array(self::BELONGS_TO, 'BookingCab', 'bkg_bcb_id'),
			'upBkgFromCity'		 => array(self::BELONGS_TO, 'Cities', 'up_bkg_from_city_id'),
			'upBkgToCity'		 => array(self::BELONGS_TO, 'Cities', 'up_bkg_to_city_id'),
			'downBkgFromCity'	 => array(self::BELONGS_TO, 'Cities', 'down_bkg_from_city_id'),
			'downBkgToCity'		 => array(self::BELONGS_TO, 'Cities', 'down_bkg_to_city_id'),
			'ratings'			 => array(self::HAS_MANY, 'Ratings', 'rtg_booking_id'),
			'bkgPref'			 => array(self::HAS_ONE, 'BookingPref', 'bpr_bkg_id'),
			'bkgAgent'			 => array(self::BELONGS_TO, 'Agents', 'bkg_agent_id'),
			'bkgCorporateAgent'	 => array(self::BELONGS_TO, 'Agents', 'bkg_agent_id'),
			'bkgUserInfo'		 => array(self::HAS_ONE, 'BookingUser', 'bui_bkg_id'),
			'bkgInvoice'		 => array(self::HAS_ONE, 'BookingInvoice', 'biv_bkg_id'),
			'bkgAddInfo'		 => array(self::HAS_ONE, 'BookingAddInfo', 'bad_bkg_id'),
			'bkgTrack'			 => array(self::HAS_ONE, 'BookingTrack', 'btk_bkg_id'),
			'bkgTrail'			 => array(self::HAS_ONE, 'BookingTrail', 'btr_bkg_id'),
			'bookingTrackLog'	 => array(self::HAS_MANY, 'BookingTrackLog', 'btl_bkg_id'),
			'bkgPf'				 => array(self::HAS_ONE, 'BookingPriceFactor', 'bpf_bkg_id'),
			'bkgSvcClassVhcCat'	 => array(self::BELONGS_TO, 'SvcClassVhcCat', 'bkg_vehicle_type_id'),
			'bpayBkg'			 => array(self::HAS_MANY, 'BookingPayDocs', 'bpay_bkg_id'),
			'bkgVehicleType'	 => array(self::BELONGS_TO, 'VehicleTypes', 'bkg_vht_id')
		);
	}

	public function attributeLabels()
	{
		return array(
			'bkg_id'							 => 'Bkg',
			'bkg_booking_id'					 => 'Booking Id',
			'bkg_name'							 => 'Name',
			'bkg_pickup_date'					 => 'Pickup Date/Time',
			'bkg_pickup_date_date'				 => 'Pickup Date',
			'bkg_pickup_date_time'				 => 'Pickup Time',
			'pickup1'							 => 'House/Apartment no',
			'pickup2'							 => 'Street Detail',
			'bkg_booking_type'					 => 'Booking Type',
			'bkg_from_city_id'					 => 'Source City',
			'bkg_to_city_id'					 => 'Destination City',
			'bkg_from_city'						 => 'Source City',
			'bkg_to_city'						 => 'Destination City',
			'bkg_pickup_address'				 => 'Pick up Address',
			'bkg_drop_address'					 => 'Drop Address',
			'bkg_instruction_to_driver_vendor'	 => 'Additional Instruction to Driver/Vendor',
			'bkg_invoice'						 => 'Invoice Required',
			'bkg_pickup_lat'					 => 'Pickup Latitude',
			'bkg_pickup_long'					 => 'Pickup Longitude',
			'bkg_vehicle_type_id'				 => 'Car Model',
			'bkg_spl_req_other'					 => 'Other',
			'bkg_spl_req_carrier'				 => 'Require vehicle with Carrier'
			. '',
			'new_remark'						 => 'Add Remark',
			'bkg_modified_on'					 => 'Modified On',
			'bkg_status'						 => 'Status',
			'bkg_active'						 => 'Active',
			'bkg_create_date'					 => 'Booking Date/Time',
			'chk_user_msg'						 => 'Send Sms to',
			'bkg_return_date'					 => 'Return Date/Time',
			'bkg_return_date_date'				 => 'Return Date',
			'bkg_return_date_time'				 => 'Return Time',
			'bkg_agent_id'						 => 'Partner ID',
			'bkg_message'						 => 'Add Message',
			'up_bkg_id'							 => 'Up Booking Id',
			'down_bkg_id'						 => 'Down Booking Id',
			'up_bkg_from_city_id'				 => 'Up Source City',
			'down_bkg_from_city_id'				 => 'Down Source City',
			'up_bkg_to_city_id'					 => 'Up Destination City',
			'down_bkg_to_city_id'				 => 'Down Destination City',
			'up_bkg_pickup_date'				 => 'Up Pickup Date/Time',
			'down_bkg_pickup_date'				 => 'Down Pickup Date/Time',
			'bkg_user_message'					 => 'Add Remark',
			'bkg_driver_message'				 => 'Add Driver Remark',
			'bkg_cab_message'					 => 'Add Vehicle Remark',
			'bkg_vendor_confirm'				 => 'Vendor Confirm',
			'bkg_trip_distance'					 => 'Trip Distance',
			'bkg_status_name'					 => 'Booking Status',
			'bkg_bcb_id'						 => 'Trip Id',
			'bkg_vendor_name'					 => 'Vendor Name',
			'up_bkg_booking_id'					 => 'Up Booking Id',
			'down_bkg_booking_id'				 => 'Down Booking Id',
			'IsCustomerCancel'					 => 'Customer initiated cancellations',
			'IsGozoCancel'						 => 'Gozo intiated cancellations',
			'bkg_shuttle_id'					 => 'Shuttle',
			'bkg_service_class'					 => 'Service Class',
			'trip_id'							 => 'Booking Id/Trip Id/Booking Agent Id',
			'bkg_user_email1'					 => 'Email',
			'bkg_contact_no1'					 => 'Phone',
			'bkg_name'							 => 'Name',
			'search'							 => 'Others(Pickup/Drop Address,Instruction to Driver/Vendor)'
		);
	}

	public function beforeSave()
	{
		parent::beforeSave();

		if ($this->bkg_booking_type == 7 && $this->isNewRecord)
		{
			$slt_id = $this->bkg_shuttle_id;
			if ($slt_id > 0)
			{
				$resultSet = Shuttle::model()->getAvailableSeatbyId($slt_id);

				if ($resultSet['available_seat'] <= 0)
				{
					$errors = ['bkg_shuttle_id' => [0 => 'All seats are booked for this shuttle.']];
					throw new CHttpException(500, json_encode($errors));
					return false;
				}
			}
			else
			{
				return false;
			}
		}

		return true;
	}

	public function afterSave()
	{
		parent::afterSave();

		if (isset($this->bkg_id) && $this->bkg_id != '')
		{
			$gmv	 = ($this->bkgInvoice->bkg_total_amount != null) ? $this->bkgInvoice->bkg_total_amount : 0;
			$vamt	 = ($this->bkgInvoice->bkg_vendor_amount != null) ? $this->bkgInvoice->bkg_vendor_amount : 0;
			$stax	 = ($this->bkgInvoice->bkg_service_tax != null) ? $this->bkgInvoice->bkg_service_tax : 0;
			$amt	 = ($gmv - $vamt - $stax);
			if ($amt < 0)
			{
				$this->bkgTrail->bkg_non_profit_flag = 1;
			}
			else
			{
				$this->bkgTrail->bkg_non_profit_flag = 0;
			}
		}
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria = new CDbCriteria;

		$criteria->compare('bkg_id', $this->bkg_id);
		$criteria->compare('bkg_booking_id', $this->bkg_booking_id, true);
		$criteria->compare('bkg_bcb_id', $this->bkg_bcb_id);
		$criteria->compare('bkg_pickup_date', $this->bkg_pickup_date, true);
		$criteria->compare('bkg_return_date', $this->bkg_return_date, true);
		$criteria->compare('bkg_trip_distance', $this->bkg_trip_distance, true);
		$criteria->compare('bkg_trip_duration', $this->bkg_trip_duration, true);
		$criteria->compare('bkg_booking_type', $this->bkg_booking_type);
		$criteria->compare('bkg_vehicle_type_id', $this->bkg_vehicle_type_id);
		$criteria->compare('bkg_agent_id', $this->bkg_agent_id);
		$criteria->compare('bkg_agent_ref_code', $this->bkg_agent_ref_code, true);
		$criteria->compare('bkg_from_city_id', $this->bkg_from_city_id);
		$criteria->compare('bkg_to_city_id', $this->bkg_to_city_id);
		$criteria->compare('bkg_pickup_address', $this->bkg_pickup_address, true);
		$criteria->compare('bkg_drop_address', $this->bkg_drop_address, true);
		$criteria->compare('bkg_pickup_lat', $this->bkg_pickup_lat, true);
		$criteria->compare('bkg_pickup_long', $this->bkg_pickup_long, true);
		$criteria->compare('bkg_dropup_lat', $this->bkg_dropup_lat, true);
		$criteria->compare('bkg_dropup_long', $this->bkg_dropup_long, true);
		$criteria->compare('bkg_status', $this->bkg_status);
		$criteria->compare('bkg_transfer_type', $this->bkg_transfer_type);
		$criteria->compare('bkg_fp_id', $this->bkg_fp_id);
		$criteria->compare('bkg_flexxi_type', $this->bkg_flexxi_type);
		$criteria->compare('bkg_instruction_to_driver_vendor', $this->bkg_instruction_to_driver_vendor, true);
		$criteria->compare('bkg_active', $this->bkg_active);
		$criteria->compare('bkg_modified_on', $this->bkg_modified_on, true);
		$criteria->compare('bkg_create_date', $this->bkg_create_date, true);
		$criteria->compare('bkg_reconfirm_flag', $this->bkg_reconfirm_flag);
		$criteria->compare('bkg_admin_id', $this->bkg_admin_id);
		$criteria->compare('bkg_cancel_id', $this->bkg_cancel_id);
		$criteria->compare('bkg_cancel_delete_reason', $this->bkg_cancel_delete_reason, true);
		$criteria->compare('bkg_return_id', $this->bkg_return_id);
		$criteria->compare('brtBcb.bcb_vendor_id', $this->bkg_vendor_id);
		$criteria->compare('bcbVendor.vnd_name', $this->bkg_vendor_name);

//brtBcb.bcb_vendor_id as bkg_vendor_id

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return Booking the static model class
	 */
	public static function model($className = __CLASS__)
	{
		return parent::model($className);
	}

	public static function isDayRental($tripType)
	{
		$rentalValues = Booking::model()->rental_types;
		return in_array($tripType, array_keys($rentalValues));
	}

	public static function getNewInstance()
	{
		$model					 = new Booking('new');
		$model->bkgBcb			 = new BookingCab();
		$model->bkgUserInfo		 = new BookingUser();
		$model->bkgInvoice		 = new BookingInvoice();
		$model->bkgTrail		 = new BookingTrail();
		$model->bkgTrack		 = new BookingTrack();
		$model->bkgAddInfo		 = new BookingAddInfo();
		$model->bkgPref			 = new BookingPref();
		$model->bkgPf			 = new BookingPriceFactor();
		$model->bookingTrackLog	 = new BookingTrackLog();
		$model->bpayBkg			 = new BookingPayDocs();
		return $model;
	}

	public function populateFromLead($lead, $isAllowed = false)
	{
		if ($lead instanceof BookingTemp)
		{
			$leadModel = $lead;
		}
		else
		{
// BookingTemp Data
			$leadModel = BookingTemp::model($lead);
		}

		$data = $leadModel->attributes;

// Remove not required keys
		$arrRemoveKeys	 = ['bkg_id', 'bkg_create_date', 'bkg_modified_on', 'bkg_status', 'bkg_is_related_booking'];
		$data			 = array_diff_key($data, array_flip($arrRemoveKeys));

// Set Data
		$this->attributes					 = $data;
		$this->bookingRoutes				 = $leadModel->getRoutes();
		$this->bkgUserInfo->attributes		 = $data;
		$this->bkgUserInfo->bkg_user_fname	 = $data['bkg_user_name'];
		$this->bkgInvoice->attributes		 = $data;
		$this->bkgTrail->attributes			 = $data;
		$this->bkgTrack->attributes			 = $data;
		$this->bkgAddInfo->attributes		 = $data;
		$this->bkgPref->attributes			 = $data;
		$this->bkgPf->attributes			 = $data;
		if ($leadModel->bkg_cav_id > 0)
		{
			$this->bkg_cav_id			 = $leadModel->bkg_cav_id;
			$this->bkgPref->bpr_is_flash = 1;
		}
// Booking
		$this->bkg_lead_id = $leadModel->bkg_id;
		$this->loadDefaults();
		if ($this->bkgUserInfo->bkg_contact_id > 0)
		{
			$this->bkgTrail->bkg_tags = Contact::getTags($this->bkgUserInfo->bkg_contact_id);
		}
		$this->loadQuote($includeNightAllowance = true, $isAllowed);
		if ($this->bkgPref->bkg_is_gozonow != $data['bkg_is_gozonow'])
		{
			$this->bkgPref->bkg_is_gozonow = $data['bkg_is_gozonow'];
		}
	}

	public function loadDefaults()
	{
		if ($this->bkg_booking_id == '')
		{
			$this->bkg_booking_id = rand();
		}
		$this->bkgInvoice->getInvoiceCity($this);
// BookingPref
		$this->bkgPref->loadDefault($this);
// BookingUser
		$this->bkgUserInfo->loadDefault();

// BookingTrail
		$this->bkgTrail->loadDefault($this);
	}

	public function loadQuote($includeNightAllowance = true, $isAllowed = false)
	{
		if ($this->bkg_booking_type == 7)
		{
			$slt_id							 = $this->bkg_shuttle_id;
			$this->bkg_shuttle_id			 = $slt_id;
			$shuttleData					 = Shuttle::model()->getDetailbyId($slt_id);
// Booking
			$this->populateFromShuttle($shuttleData);
// BookingInvoice
			$this->bkgInvoice->populateFromShuttle($shuttleData);
// BookingTrack
			$this->bkgTrack->bkg_garage_time = $shuttleData['trip_duration'];
		}
		else
		{
			$carType = $this->bkg_vehicle_type_id;
			$quotes	 = Quote::populateFromModel($this, $carType, false, $includeNightAllowance, $isAllowed);
//$quotes		 = $this->getQuote($carType);
			$quote	 = $quotes[$carType];

			if ($this->bkg_cav_id > 0)
			{
				$km_rate						 = $quote->routeRates->ratePerKM;
				$routeRate						 = CabAvailabilities::getQuoteRate($this->bkg_cav_id);
				$quote->routeRates				 = $routeRate;
				$quote->routeRates->ratePerKM	 = $km_rate;
			}
			$this->quote = $quote;
// Booking
			$this->populateFromQuote($quote);
		}
	}

	public function addNew($includeNightAllowance = true, $isAllowed = false)
	{
		$this->loadQuote($includeNightAllowance, $isAllowed);
		Logger::profile("Quote Initiated");

		$this->loadDefaults();
		Logger::profile("Defaults Initiated");

		$this->createQuote();
		Logger::profile("Quote Created");
	}

	public function populateFromQuote(Quote $quote)
	{
// Quote
		$routes			 = $quote->routes;
		$routeDistance	 = $quote->routeDistance;
		$routeDuration	 = $quote->routeDuration;

// Routes
		$firstRoute	 = $routes[0];
		$lastRoute	 = $routes[(count($routes) - 1)];
		$endTime	 = date('Y-m-d H:i:s', strtotime('+' . $lastRoute['brt_trip_duration'] . ' minutes', strtotime($lastRoute['brt_pickup_datetime'])));

// Booking

		$this->bkg_trip_distance	 = $routeDistance->quotedDistance;
		$this->bkg_trip_duration	 = $routeDuration->totalMinutes;
		$this->bkg_from_city_id		 = $firstRoute['brt_from_city_id'];
		$this->bkg_to_city_id		 = $lastRoute['brt_to_city_id'];
		$this->bkg_pickup_address	 = $firstRoute['brt_from_location'];
		$this->bkg_drop_address		 = $lastRoute['brt_to_location'];
		$this->bkg_return_date		 = $endTime;

// BookingInvoice
		$this->bkgInvoice->populateFromQuote($quote);

// BookingTrack
		$this->bkgTrack->populateFromQuote($quote);

// BookingPriceFactor
		$this->bkgPf->populateFromQuote($quote);
	}

	public function populateFromShuttle($shuttleData)
	{
		$distance	 = $shuttleData['trip_distance'];
		$duration	 = $shuttleData['trip_duration'];
		$pickupTime	 = $shuttleData['slt_pickup_datetime'];

		$endTime = date('Y-m-d H:i:s', strtotime('+' . $duration . ' minutes', strtotime($pickupTime)));

		$this->bkg_pickup_date		 = $shuttleData['slt_pickup_datetime'];
		$this->bkg_from_city_id		 = $shuttleData['slt_from_city'];
		$this->bkg_to_city_id		 = $shuttleData['slt_to_city'];
		$this->bkg_pickup_address	 = $shuttleData['slt_pickup_location'];
		$this->bkg_drop_address		 = $shuttleData['slt_drop_location'];
		$this->bkg_pickup_lat		 = $shuttleData['slt_pickup_lat'];
		$this->bkg_pickup_long		 = $shuttleData['slt_pickup_long'];
		$this->bkg_dropup_lat		 = $shuttleData['slt_drop_lat'];
		$this->bkg_dropup_long		 = $shuttleData['slt_drop_long'];
		$this->bkg_shuttle_id		 = $shuttleData['slt_id'];
		$this->bkg_vehicle_type_id	 = $shuttleData['cab_data']['scv_id'];
		$this->bkg_trip_distance	 = $distance;
		$this->bkg_trip_duration	 = $duration;
		$this->bkg_return_date		 = $endTime;
	}

	public function createNew()
	{
		$success	 = false;
		$transaction = DBUtil::beginTransaction();
		try
		{
			$isGozonow	 = $this->bkgPref->bkg_is_gozonow;
// Booking
			$this->setscenario('checkDuplicatePartnerRefId');
			$result		 = $this->save();
			if (!$result)
			{
				$errors = $this->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

// BookingRoute
			$refModels = $this->bookingRoutes;

// BookingRoute Validation
			$errors = BookingRoute::validateRoutes($refModels, $this->bkg_booking_type, $this->bkg_transfer_type);
			if (count(array_filter($errors, function ($value) {
								return $value !== false;
							})) > 0)
			{
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

//
// BookingRoutes
			foreach ($refModels as $routeModel)
			{
				$routeModel->brt_bkg_id = $this->bkg_id;
				if (in_array($this->bkg_booking_type, [9, 10, 11]))
				{
					$routeModel->brt_trip_distance	 = $this->bkg_trip_distance;
					$routeModel->brt_trip_duration	 = $this->bkg_trip_duration;
					$routeModel->trip_distance		 = $this->bkg_trip_distance;
					$routeModel->trip_duration		 = $this->bkg_trip_duration;
				}
				$routeModel->tripType = $this->bkg_booking_type;

				$result = $routeModel->save();
				if (!$result)
				{
					$errors = $routeModel->getErrors();
					throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
				}
			}
// BookingUser
			$refModel				 = $this->bkgUserInfo;
			$refModel->bui_bkg_id	 = $this->bkg_id;
			$refModel->bkg_user_id	 = null;

			$result = $refModel->save();

			if (!$result)
			{
				$errors = $refModel->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}
			if ($this->bkg_agent_id == Config::get('Mobisign.partner.id') || $this->bkg_agent_id == Config::get('Kayak.partner.id') || $this->bkg_agent_id == Config::get('transferz.partner.id'))
			{
				goto skipusercontact;
			}


// Link Booking User
			$user_id = (Yii::app()->user->getId() > 0) ? Yii::app()->user->getId() : '';

			if ($this->bkgPref->bpr_rescheduled_from > 0)
			{
				$rbuiModel	 = BookingUser::model()->getByBkgId($this->bkgPref->bpr_rescheduled_from);
				$user_id	 = ($rbuiModel) ? $rbuiModel->bkg_user_id : $user_id;
			}
			if ($user_id == '')
			{
				$userModel = Users::model()->linkUserByEmail($this->bkg_id, Booking::Platform_User);
				if (empty($userModel->usr_contact_id))
				{
					$userModel->usr_contact_id = $contactId;
				}
			}
			else
			{
				$userModel = Users::model()->findByPk($user_id);
			}

			if ($userModel->usr_contact_id == '' && $userModel != '')
			{
				$userModel->usr_contact_id = $this->bkgUserInfo->bkg_contact_id;
				if (!$userModel->save())
				{
					throw new Exception(json_encode($userModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}
			}



			$contactId = ($this->bkgUserInfo->bkg_contact_id == '') ? $userModel->usr_contact_id : $this->bkgUserInfo->bkg_contact_id;
			if ($contactId)
			{
				$emlModel	 = ContactEmail::model()->findByConId($contactId);
				$phnModel	 = ContactPhone::model()->findByConId($contactId);
				if ($emlModel || $phnModel)
				{
					$refModel->bkg_email_verified	 = $emlModel[0]->eml_is_verified ? $emlModel[0]->eml_is_verified : '0';
					$refModel->bkg_phone_verified	 = $phnModel[0]->phn_is_verified ? $phnModel[0]->phn_is_verified : '0';
				}
				else
				{
					$refModel->bkg_email_verified	 = $userModel->usr_email_verify;
					$refModel->bkg_phone_verified	 = $userModel->usr_mobile_verify;
				}
			}

			if ($userModel)
			{
//$userModel->usr_refer_code = Users::getUniqueReferCode($userModel);

				if (Yii::app()->request->cookies['gozo_refferal_id']->value != '')
				{
					$referralCode											 = Yii::app()->request->cookies['gozo_refferal_id']->value;
					Users::processReferralCode($userModel, $referralCode);
					Yii::app()->request->cookies['gozo_refferal_id']->value	 = null;
				}

				if ($userModel->usr_refer_code == '')
				{
					Users::model()->getRefercode($userModel->user_id);
				}
				if ($this->bkg_agent_id == '' || $this->bkg_agent_id == NULL)
				{
					$refModel->bkg_user_id = $userModel->user_id;
				}
				$result = $refModel->save();
				if (!$result)
				{
					$errors = $refModel->getErrors();
					throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
				}
			}

			skipusercontact:
// BookingPref
			$refModel					 = $this->bkgPref;
			$refModel->bpr_bkg_id		 = $this->bkg_id;
			$refModel->bkg_is_gozonow	 = $isGozonow;

			if (!$refModel->bkg_cancel_rule_id || $isGozonow)
			{

				$svcModelCat					 = SvcClassVhcCat::model()->getVctSvcList('object', 0, 0, $this->bkg_vehicle_type_id);
				$cancelRuleId					 = CancellationPolicy::getCancelRuleId($this->bkg_agent_id, $svcModelCat->scv_id, $this->bkg_from_city_id, $this->bkg_to_city_id, $this->bkg_booking_type, $isGozonow);
				$refModel->bkg_cancel_rule_id	 = $cancelRuleId;
			}

			$result = $refModel->save();
			if (!$result)
			{
				$errors = $refModel->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

// BookingInvoice
			$refModel				 = $this->bkgInvoice;
			$refModel->biv_bkg_id	 = $this->bkg_id;
			$refModel->populateAmount(true, false, true, false, $this->bkg_agent_id);
			$refModel->chargeInternationFee($this->bkgUserInfo->bkg_country_code, $this->bkgPref->bkg_send_sms);
			$result					 = $refModel->save();
			if (!$result)
			{
				$errors = $refModel->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

// BookingTrail
			$refModel							 = $this->bkgTrail;
			$createDate							 = Filter::getDBDateTime();
			$pickupDate							 = $this->bkg_pickup_date;
			$expireTime							 = BookingTrail::calculateQuoteExpiryTime($createDate, $pickupDate);
			$refModel->btr_bkg_id				 = $this->bkg_id;
			$refModel->bkg_quote_expire_date	 = $expireTime;
			$isRealtedBooking					 = $this->findRelatedBooking($this->bkg_id);
			$refModel->bkg_is_related_booking	 = (($isRealtedBooking) ? 1 : 0);
			if ($this->bkgUserInfo->bkg_contact_no != '')
			{
				$phoneNo = $this->bkgUserInfo->bkg_contact_no;
				if ($this->bkg_agent_id == 30228)
				{
					$phoneNo = $this->bkgUserInfo->bkg_country_code . $this->bkgUserInfo->bkg_contact_no;
				}
				$cttId = Contact::getByEmailPhone($this->bkgUserInfo->bkg_user_email, $phoneNo, false);
				if ($cttId > 0)
				{
					$refModel->bkg_tags = Contact::getTags($cttId);
				}
			}
			if ($contactId > 0 && $refModel->bkg_tags == '')
			{
				$refModel->bkg_tags = Contact::getTags($contactId);
			}
			$result = $refModel->save();
			if (!$result)
			{
				$errors = $refModel->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

// BookingPriceFactor
			$refModel				 = $this->bkgPf;
			$refModel->bpf_bkg_id	 = $this->bkg_id;
			$result					 = $refModel->save();
			if (!$result)
			{
				$errors = $refModel->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

// BookingAddInfo
			$refModel				 = $this->bkgAddInfo;
			$refModel->bad_bkg_id	 = $this->bkg_id;
			$result					 = $refModel->save();
			if (!$result)
			{
				$errors = $refModel->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

// BookingTrack
			$refModel				 = $this->bkgTrack;
			$refModel->btk_bkg_id	 = $this->bkg_id;

			$refModel->bkg_trip_otp	 = strtolower(rand(100100, 999999));
			$result					 = $refModel->save();

			if (!$result)
			{
				$errors = $refModel->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

// BookingCab
			$refModel		 = $this->bkgBcb;
			$vendorAmount	 = $this->bkgInvoice->bkg_vendor_amount;

			$arrBkgIds = [$this->bkg_id];
			if ($this->bkg_booking_type == 7)
			{
				$refModel		 = $this->getRelatedShuttleTrip();
				$vendorAmount	 = Shuttle::getCabVendorAmountbyId($this->bkg_shuttle_id);
				if (!$refModel)
				{
					$refModel	 = new BookingCab();
					$result		 = $refModel->createTrip($arrBkgIds, $vendorAmount);
				}
			}
			else
			{
				$result = $refModel->createTrip($arrBkgIds, $vendorAmount);
			}
			if (!$result)
			{
				$errors = $refModel->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

// Booking
			$this->bkg_bcb_id		 = $refModel->bcb_id;
			$this->bkg_booking_id	 = $this->generateBookingid($this);
			$result					 = $this->save();
			if (!$result)
			{
				$errors = $refModel->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}

// booking messages
			if ($this->bkg_agent_id > 0)
			{
				BookingMessages::model()->setDefaultAgentNotificationForBooking($this->bkg_agent_id, $this->bkg_id);
			}

//update BookingRoutes
			BookingRoute::model()->setBcbIdForNewBooking($this->bkg_id, $this->bkg_bcb_id);

			BookingTrail::impBookingFollowup($this->bkg_id, true, true);

			DBUtil::commitTransaction($transaction);
			$success = true;
		}
		catch (Exception $exc)
		{
			DBUtil::rollbackTransaction($transaction);
			if ($exc->getCode() == ReturnSet::ERROR_VALIDATION)
			{
				$this->addErrors(json_decode($exc->getMessage()));
			}
			else
			{
				$this->addError('bkg_id', $exc->getMessage());
			}
		}
		return $success;
	}

	public function createQuote()
	{

		if ($this->bkgPref->bkg_is_gozonow == 1)
		{
			return $this->createGozonow();
		}
		$this->bkg_status = 15;
		if (Yii::app()->request->cookies['gozo_qr_id']->value != "")
		{
			$this->bkg_qr_id = Yii::app()->request->cookies['gozo_qr_id']->value;
		}


		$result = $this->createNew();

		if (!$result)
		{

			throw new Exception(json_encode($this->getErrors()), ReturnSet::ERROR_VALIDATION);
#throw new CHttpException(ReturnSet::ERROR_VALIDATION, json_encode($this->getErrors()));
//throw new Exception($this->getErrors(), ReturnSet::ERROR_VALIDATION);
		}



		BookingSub::cancellingRelatedQuotedShuttle($this->bkg_id);
		$desc			 = "Quote created";
		$processedRoute	 = BookingLog::model()->logRouteProcessed($this->quote, $this->bkg_id);

		$desc	 .= " - $processedRoute";
		$eventid = BookingLog::BOOKING_CREATED;
		BookingLog::model()->createLog($this->bkg_id, $desc, UserInfo::getInstance(), $eventid);
		BookingPriceFactor::model()->getQuotedFactor($this->bkg_id);
		BookingTemp::setInactiveRelatedLeads($this->bkg_id);
		Booking::stopAutoAssignDuplicateQuote($this->bkg_id);
		BookingPref::setBlockAutoAssignmentLog($this);

		return true;
	}

	public function createGozonow()
	{
		$this->bkg_status = 2;
		if (Yii::app()->request->cookies['gozo_qr_id']->value != "")
		{
			$this->bkg_qr_id = Yii::app()->request->cookies['gozo_qr_id']->value;
		}
		$this->bkgTrail->bkg_gnow_created_at = new CDbExpression('NOW()');

		$result = $this->createNew();
		if (!$result)
		{
			throw new Exception(json_encode($this->getErrors()), ReturnSet::ERROR_VALIDATION);
#throw new CHttpException(ReturnSet::ERROR_VALIDATION, json_encode($this->getErrors()));
//throw new Exception($this->getErrors(), ReturnSet::ERROR_VALIDATION);
		}

		BookingSub::cancellingRelatedQuotedShuttle($this->bkg_id);
		$desc			 = "Gozonow Booking created";
		$processedRoute	 = BookingLog::model()->logRouteProcessed($this->quote, $this->bkg_id);

		$desc		 .= " - $processedRoute";
		$eventid	 = BookingLog::BOOKING_CREATED;
		BookingLog::model()->createLog($this->bkg_id, $desc, UserInfo::getInstance(), $eventid);
		BookingPriceFactor::model()->getQuotedFactor($this->bkg_id);
		$emailObj	 = new emailWrapper();
		$emailResult = $emailObj->mailGnowCreated($this->bkg_id);

		return true;
	}

	public function getMonthList()
	{
		$arrJSON	 = array();
		$monthList	 = ['01' => 'January', '02' => 'February', '03' => 'March', '04' => 'April', '05' => 'May', '06' => 'June', '07' => 'July', '08' => 'Auguest', '09' => 'September', '10' => 'October', '11' => 'November', '12' => 'December'];
		foreach ($monthList as $key => $val)
		{
			$arrJSON[] = array("id" => $key, "text" => $val);
		}
		$data = CJSON::encode($arrJSON);
		return $data;
	}

	public function getYearList()
	{
		$arrJSON = array();
		for ($i = 2010; $i < (date('Y') + 5); $i++)
		{
			$arrJSON[] = array("id" => $i, "text" => "" . $i . "");
		}
		$data = CJSON::encode($arrJSON);
		return $data;
	}

	public function appendRemarks()
	{
		if ($this->new_remark != '')
		{
			$new_remark	 = $this->new_remark;
			$prev_remark = $this->bkg_remark;
			$dt			 = date('Y-m-d H:i:s');
			$userInfo	 = UserInfo::getInstance();
			$status		 = $this->bkg_status;

			if ($new_remark != '')
			{
				if (is_string($prev_remark))
				{
					$newcomm = CJSON::decode($prev_remark);
					if ($prev_remark != '' && CJSON::decode($prev_remark) == '')
					{
						$newcomm = array(array(0 => '1', 1 => $this->bkg_create_date, 2 => $prev_remark, 3 => '2'));
					}
				}
				elseif (is_array($prev_remark))
				{
					$newcomm = $prev_remark;
				}
				if (!$newcomm)
				{
					$newcomm = array();
				}
				array_unshift($newcomm, array(0 => $userInfo->userId, 1 => $dt, 2 => $new_remark, 3 => $status));
				$this->bkg_remark = CJSON::encode($newcomm);
			}
		}
	}

	public function uploadAttachment()
	{
		$uploadedFile = CUploadedFile::getInstance($this, "fileImage");

		if ($uploadedFile != '')
		{
			$crdate		 = date('YmdHis', strtotime($this->bkg_create_date));
			$fileName	 = $this->bkg_booking_id . '_' . $crdate . '_' . $uploadedFile;

			$this->bkgAddInfo->bkg_file_path = DIRECTORY_SEPARATOR . 'attachments' . DIRECTORY_SEPARATOR . $fileName;
			$uploadedFile->saveAs(PUBLIC_PATH . DIRECTORY_SEPARATOR . 'attachments' . DIRECTORY_SEPARATOR . $fileName);
		}
	}

	public function fetchListByUser($userId)
	{
		$sql = "SELECT bkg_id, vct_id, vct_image 
				FROM booking 
				INNER JOIN booking_user ON bkg_id = bui_bkg_id 
				INNER JOIN svc_class_vhc_cat ON scv_id = bkg_vehicle_type_id 
				INNER JOIN service_class ON scc_id = scv_scc_id 
				INNER JOIN vehicle_category ON scv_vct_id = vct_id AND vct_active = 1
				WHERE 1 AND bkg_pickup_date >= '2018-04-01 00:00:00' AND bkg_user_id = {$userId} 
				AND (`bkg_status` IN (2,3,5,6,7,9) OR (bkg_pickup_date > NOW() AND `bkg_status` IN (1,15)))";

		$count			 = DBUtil::queryScalar("SELECT COUNT(*) FROM ($sql) abc", DBUtil::SDB());
		$dataprovider	 = new CSqlDataProvider($sql, [
			'db'			 => DBUtil::SDB(),
			'totalItemCount' => $count,
			'sort'			 => [
				'defaultOrder' => 'bkg_create_date DESC, bkg_pickup_date DESC'
			], 'pagination'	 => ['pageSize' => 10],
		]);
		return $dataprovider;
	}

	public function fetchListbyUser_OLD($userId, $status = 1)
	{
		if ($status != 0)
		{
			$bkgStatus = "`bkg_status` = '" . $status . "'";
		}
		else
		{
			//$bkgStatus = "`bkg_status` IN (1,2,3,5,6,7,9,15)";
			$bkgStatus = "(`bkg_status` IN (2,3,5,6,7,9) OR (b.bkg_pickup_date > NOW() AND `bkg_status` IN(1,15)))";
		}
		$qry = "SELECT b.*,bkgAddInfo.*,bkgInvoice.*,bkgUser.*,bkgTrack.*,bkgTrail.*,`bkgFromCity`.`cty_name`, `bkgFromCity`.`cty_id`,`bkgToCity`.`cty_name`, `bkgToCity`.`cty_id`,
          `bookingRoutes`.`brt_from_city_id`,`bookingRoutes`.`brt_to_city_id`, MAX(`bookingRoutes`.`brt_pickup_datetime`)  AS brt_pickup_datetime, `bookingRoutes`.`brt_id`,
          `bkgBcb`.`bcb_id`, `bkgBcb`.`bcb_bkg_id1`, `bkgBcb`.`bcb_vendor_id`, `bkgBcb`.`bcb_brt_id`, `bkgBcb`.`bcb_trip_status`, `bkgBcb`.`bcb_vendor_rating`, `bkgBcb`.`bcb_vendor_trips`,
		  `bkgBcb`.`bcb_vendor_amount`, `bkgBcb`.`bcb_vendor_collected`, `bkgBcb`.`bcb_driver_id`, `bkgBcb`.`bcb_driver_rating`, `bkgBcb`.`bcb_driver_trips`, `bkgBcb`.`bcb_driver_name`,
		  `bkgBcb`.`bcb_driver_phone`, `bkgBcb`.`bcb_cab_id`, `bkgBcb`.`bcb_cab_rating`, `bkgBcb`.`bcb_cab_trips`, `bkgBcb`.`bcb_vhc_number`, `bkgBcb`.`bcb_cab_number`, `bkgBcb`.`bcb_start_time`,
		  `bkgBcb`.`bcb_end_time`, `bkgBcb`.`bcb_trip_kms`, `bkgBcb`.`bcb_start_lat`, `bkgBcb`.`bcb_start_long`, `bkgBcb`.`bcb_end_lat`, `bkgBcb`.`bcb_end_long`, `bkgBcb`.`bcb_active`, `bkgBcb`.`bcb_denied_reason_id`,
		  `bkgBcb`.`bcb_trip_type`, `bkgBcb`.`bcb_matched_type`, `bkgBcb`.`bcb_pending_status`, `bkgBcb`.`bcb_created`,
          `bcbCab`.`vhc_id`, `bcbCab`.`vhc_type_id`, `bcbCab`.`vhc_number`,bkgPref.bkg_is_gozonow,bkgPref.bpr_rescheduled_from,
		  `bkgVehicleCat`.`vct_id`, `bkgVehicleCat`.`vct_image`, `bkgVehicleCat`.`vct_desc`, `bkgVehicleCat`.`vct_label`, scc_label,scv.scv_model
          ,bkg_vht_id,vht.vht_model,vht.vht_make

                FROM `booking` b
				JOIN `booking_add_info` `bkgAddInfo` ON (`b`.`bkg_id`=`bkgAddInfo`.`bad_bkg_id`)
				JOIN `booking_invoice` `bkgInvoice` ON (`b`.`bkg_id`=`bkgInvoice`.`biv_bkg_id`)
				JOIN `booking_user` `bkgUser` ON (`b`.`bkg_id`=`bkgUser`.`bui_bkg_id`)
				JOIN `booking_track` `bkgTrack` ON (`b`.`bkg_id`=`bkgTrack`.`btk_bkg_id`)
				JOIN `booking_pref` `bkgPref` ON (`b`.`bkg_id`=`bkgPref`.`bpr_bkg_id`)
				JOIN `booking_trail` `bkgTrail` ON (`b`.`bkg_id`=`bkgTrail`.`btr_bkg_id`)
				JOIN `cities` `bkgFromCity` ON (`b`.`bkg_from_city_id`=`bkgFromCity`.`cty_id`) AND (`bkgFromCity`.cty_active=1)
				JOIN `cities` `bkgToCity` ON (`b`.`bkg_to_city_id`=`bkgToCity`.`cty_id`) AND (`bkgToCity`.cty_active=1)
				JOIN `booking_route` `bookingRoutes` ON (`bookingRoutes`.`brt_bkg_id`=`b`.`bkg_id`) AND (`bookingRoutes`.brt_active=1)
				JOIN `booking_cab` `bkgBcb` ON (`b`.`bkg_bcb_id`=`bkgBcb`.`bcb_id`) AND (`bkgBcb`.bcb_active = 1 )
                LEFT OUTER JOIN `vehicles` `bcbCab` ON (`bkgBcb`.`bcb_cab_id`=`bcbCab`.`vhc_id`) AND (`vhc_active` IN (1,2,3))
                
             
                LEFT JOIN `vehicle_types` vht ON vht.vht_id=bcbCab.vhc_type_id


				JOIN svc_class_vhc_cat scv ON scv.scv_id = b.bkg_vehicle_type_id
				INNER JOIN service_class ON scc_id = scv.scv_scc_id
                JOIN `vehicle_category` `bkgVehicleCat` ON (`scv`.`scv_vct_id`=`bkgVehicleCat`.`vct_id`) AND (`vct_active`=1)
				 WHERE ((bkgUser.`bkg_user_id`= '" . $userId . "')
				 AND ( " . $bkgStatus . " ))
				 AND b.bkg_pickup_date >= '2018-04-01 00:00:00'
				 GROUP BY b.bkg_id ORDER BY b.bkg_create_date DESC,b.bkg_pickup_date DESC";

//echo $qry;exit;
		$result = DBUtil::queryAll($qry);
		return $result;
	}

	/**
	 * This method is going to be obsolete for new consumer app
	 * @deprecated
	 */
	public function fetchListbyUserforMob($userId, $sort)
	{
		$status = $this->getBookingStatus();
		if ($sort == 'pk')
		{
			$s1 = 'bkg_pickup_date DESC';
		}
		elseif ($sort == 'bk')
		{
			$s1 = 'bkg_create_date DESC';
		}
		else
		{
			$s1 = 'bkg_pickup_date DESC';
		}

		$sql = "SELECT bkg_id,
            bkg_booking_id,IF((btr.bkg_payment_expiry_time < NOW() AND btr.bkg_payment_expiry_time IS NOT NULL) OR biv.bkg_due_amount = 0 OR bkg_status = 9,1,0) isLockPayment,
            vct.vct_label AS cab_model,
            vct.vct_image as cab_image,
                a.cty_name as from_city,
                b.cty_name as to_city,
                DATE_FORMAT(bkg.bkg_pickup_date,'%d-%m-%Y') pickup_date,
                DATE_FORMAT(bkg.bkg_pickup_date,'%h:%i %p') pickup_time ,
                DATE_FORMAT(bkg.bkg_pickup_date,'%a') pickup_day,
                DATE_FORMAT(bkg.bkg_create_date,'%d-%m-%Y') booking_date,
                DATE_FORMAT(bkg.bkg_create_date,'%h:%i %p') booking_time ,
                DATE_FORMAT(bkg.bkg_create_date,'%a') booking_day,
                if(TIMESTAMPDIFF(MINUTE,NOW(),bkg_pickup_date) >=240,1,0) booking_cancel_flag,
               bkg_status,
               bui.bkg_user_fname bkg_user_name,
               bui.bkg_user_lname,
               bui.bkg_country_code,
               bui.bkg_contact_no,
               ROUND(biv.bkg_advance_amount) bkg_advance_amount,
               ROUND(biv.bkg_due_amount) bkg_due_amount,
               bui.bkg_user_email,
               bkg_pickup_address,
               bkg_drop_address,
               ROUND(biv.bkg_total_amount) bkg_total_amount, r.rtg_customer_overall, rtg_customer_driver, rtg_customer_csr, rtg_customer_car, rtg_customer_review, rtg_customer_date
FROM `booking` `bkg`
JOIN booking_trail btr ON btr.btr_bkg_id = bkg.bkg_id
JOIN booking_invoice biv ON biv.biv_bkg_id = bkg.bkg_id
JOIN booking_user bui  ON bui.bui_bkg_id = bkg.bkg_id
JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg.bkg_vehicle_type_id
JOIN vehicle_category vct ON vct.vct_id = scv.scv_vct_id
JOIN service_class sc ON sc.scc_id = scv.scv_scc_id
JOIN `cities` `a` ON a.cty_id = bkg.bkg_from_city_id
JOIN `cities` `b` ON b.cty_id =bkg.bkg_to_city_id
LEFT JOIN `ratings` `r` ON r.rtg_booking_id=bkg.bkg_id
WHERE bkg_user_id = $userId AND bkg_status IN (2,3,5,6,7,9)
	 AND bkg.bkg_pickup_date >= '2018-04-01 00:00:00'
ORDER BY $s1";

		$Search = DBUtil::queryAll($sql);
		foreach ($Search as $key => $val)
		{
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_status')
				{
					$Search[$key]['bkg_status_name'] = $status[$v];
				}
				if ($k == 'bkg_id')
				{
					$Search[$key]['bkg_route_name'] = BookingRoute::model()->getRouteName($v);
				}
				$Search[$key]['payment_url'] = Yii::app()->createAbsoluteUrl('booking/paynow', ['id' => $Search[$key]['bkg_id'], 'hash' => Yii::app()->shortHash->hash($Search[$key]['bkg_id']), 'platform' => 3]);
			}
		}

		return $Search;
	}

	/**
	 * Customer booking list
	 * @param $userId
	 * @param $sort
	 */
	public static function getListByUser($userId, $sort = "", $pageNumber = 0)
	{

		$limitRange = 50;

		if ($pageNumber > 0)
		{
			$pageNumber = ($pageNumber + $limitRange);
		}
		else
		{
			$pageNumber = 0;
		}
//		$orderBy = 'bkg_pickup_date DESC';
//		if ($sort == 'bk')
//		{
//			$orderBy = 'bkg_create_date DESC';
//		}
		$orderBy	 = 'bkg_create_date DESC';
		$sqlParams	 = [':usrId' => $userId];
		$sql		 = "SELECT	bkg_id,
                        bkg_booking_id,
                        bkg_pickup_date,
                        bkg_create_date,
                        bkg_return_date,
                        bkg_trip_distance,
                        bkg_trip_duration,
                        bkg_booking_type,
                        bkg_status,
                        bkg_user_fname,
                        bkg_user_lname,
                        bkg_total_amount,
						bkg_vehicle_type_id,
						bkg_route_city_names,
                        c1.cty_id AS frm_city_code,
                        c1.cty_name AS frm_city,
                        c2.cty_name AS to_city,
                        c2.cty_id AS to_city_code,
						bpr_rescheduled_from,
						bkg_is_gozonow
                    FROM `booking`
                    INNER JOIN `booking_invoice` ON booking_invoice.biv_bkg_id = booking.bkg_id
                    INNER JOIN `booking_user` ON booking_user.bui_bkg_id = booking.bkg_id AND booking_user.bkg_user_id = :usrId
					INNER JOIN `booking_pref` ON booking_pref.bpr_bkg_id=booking.bkg_id
                    INNER JOIN `cities` c1 ON c1.cty_id = booking.bkg_from_city_id
                    INNER JOIN `cities` c2 ON c2.cty_id = booking.bkg_to_city_id
                    WHERE booking.bkg_pickup_date >= '2018-04-01 00:00:00' AND (booking.bkg_status IN(2, 3, 5, 6, 7, 9) OR (booking.bkg_pickup_date > NOW() AND booking.bkg_status IN (1,15)))";
		$sql		 .= " ORDER BY $orderBy";
		$sql		 .= " LIMIT $pageNumber, $limitRange";
		return DBUtil::query($sql, DBUtil::SDB(), $sqlParams);

//		$result		 = DBUtil::command($sql, DBUtil::SDB())->setFetchMode(PDO::FETCH_OBJ)->queryAll(true, $sqlParams);
//		return $result;
	}

	/**
	 * This function is used for getting the booking list
	 * @param type $userId
	 * @param type $sort
	 * @param type $pageNumber
	 * @return type
	 */
	public static function getByUserId($userId, $sort, $pageNumber)
	{
		$returnSet	 = new ReturnSet();
		$bookingData = Booking::getListByUser($userId, $sort, $pageNumber);
		$response	 = new \Stub\booking\ListResponse();
		$response->getData($bookingData);
		$data		 = Filter::removeNull($response->bookings);
		if (count($bookingData) == 0)
		{
			$returnSet->setStatus(true);
			$returnSet->setMessage("Bookings not available.");
			$returnSet->setErrors(ReturnSet::ERROR_NO_RECORDS_FOUND);
			goto bookList;
		}
		$returnSet->setStatus(true);
		$returnSet->setData($data);
		bookList:
		return $returnSet;
	}

	public function fetchListbyUserforMob_OLD($userId, $sort)
	{
		$status = $this->getBookingStatus();
		if ($sort == 'pk')
		{
			$s1 = 'bkg_pickup_date DESC';
		}
		elseif ($sort == 'bk')
		{
			$s1 = 'bkg_create_date DESC';
		}
		else
		{
			$s1 = 'bkg_pickup_date DESC';
		}

		$sql = "SELECT bkg_id,
            bkg_booking_id,IF((btr.bkg_payment_expiry_time < NOW() AND btr.bkg_payment_expiry_time IS NOT NULL) OR biv.bkg_due_amount = 0 OR bkg_status = 9,1,0) isLockPayment,
            vct.vct_label AS cab_model,
            vct.vct_image as cab_image,
                a.cty_name as from_city,
                b.cty_name as to_city,
                DATE_FORMAT(bkg.bkg_pickup_date,'%d-%m-%Y') pickup_date,
                DATE_FORMAT(bkg.bkg_pickup_date,'%h:%i %p') pickup_time ,
                DATE_FORMAT(bkg.bkg_pickup_date,'%a') pickup_day,
                DATE_FORMAT(bkg.bkg_create_date,'%d-%m-%Y') booking_date,
                DATE_FORMAT(bkg.bkg_create_date,'%h:%i %p') booking_time ,
                DATE_FORMAT(bkg.bkg_create_date,'%a') booking_day,
                if(TIMESTAMPDIFF(MINUTE,NOW(),bkg_pickup_date) >=240,1,0) booking_cancel_flag,
               bkg_status,
               bui.bkg_user_fname bkg_user_name,
               bui.bkg_user_lname,
               bui.bkg_country_code,
               bui.bkg_contact_no,
               ROUND(biv.bkg_advance_amount) bkg_advance_amount,
               ROUND(biv.bkg_due_amount) bkg_due_amount,
               bui.bkg_user_email,
               bkg_pickup_address,
               bkg_drop_address,
               ROUND(biv.bkg_total_amount) bkg_total_amount, r.rtg_customer_overall, rtg_customer_driver, rtg_customer_csr, rtg_customer_car, rtg_customer_review, rtg_customer_date
			   FROM `booking` `bkg`
				JOIN booking_trail btr ON btr.btr_bkg_id = bkg.bkg_id
				JOIN booking_invoice biv ON biv.biv_bkg_id = bkg.bkg_id
				JOIN booking_user bui  ON bui.bui_bkg_id = bkg.bkg_id
JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg.bkg_vehicle_type_id
JOIN vehicle_category vct ON vct.vct_id = scv.scv_vct_id
JOIN service_class sc ON sc.scc_id = scv.scv_scc_id
				JOIN `cities` `a` ON a.cty_id = bkg.bkg_from_city_id
				JOIN `cities` `b` ON b.cty_id =bkg.bkg_to_city_id
LEFT JOIN `ratings` `r` ON r.rtg_booking_id=bkg.bkg_id
WHERE bkg_user_id = $userId AND bkg_status IN (2,3,5,6,7,9)
	 AND bkg.bkg_pickup_date >= '2018-04-01 00:00:00'
ORDER BY $s1";

		$Search = DBUtil::queryAll($sql);
		foreach ($Search as $key => $val)
		{
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_status')
				{
					$Search[$key]['bkg_status_name'] = $status[$v];
				}
				if ($k == 'bkg_id')
				{
					$Search[$key]['bkg_route_name'] = BookingRoute::model()->getRouteName($v);
				}
				$Search[$key]['payment_url'] = Yii::app()->createAbsoluteUrl('booking/paynow', ['id' => $Search[$key]['bkg_id'], 'hash' => Yii::app()->shortHash->hash($Search[$key]['bkg_id']), 'platform' => 3]);
			}
		}

		return $Search;
	}

	public function lastTripRating($userId)
	{
		$sql	 = "select rtg_customer_overall as rating, bkg_id, date_add(bkg_pickup_date,INTERVAL bkg_trip_duration MINUTE) as completion_date,
                bkg_booking_id, vct_label cab_model,
                vct_image as cab_image from booking
				join booking_user on booking.bkg_id=booking_user.bui_bkg_id
                left join ratings on rtg_booking_id = bkg_id
                join svc_class_vhc_cat scv on scv.scv_id = booking.bkg_vehicle_type_id
                join vehicle_category on vct_id = scv.scv_vct_id
                where bkg_user_id = $userId
                and bkg_status IN (6,7) order by completion_date desc limit 0,1";
		$record	 = DBUtil::queryRow($sql);
		if ($record)
		{
			$record['bkg_route_name'] = BookingRoute::model()->getRouteName($record['bkg_id']);
		}
		return $record;
	}

	public function fetchListbyAgentforMob($userId, $sort)
	{
		$status = $this->getBookingStatus();
		if ($sort == 'pk')
		{
			$s1 = 'bkg_pickup_date DESC';
		}
		elseif ($sort == 'bk')
		{
			$s1 = 'bkg_create_date DESC';
		}
		else
		{
			$s1 = 'bkg_pickup_date DESC';
		}
		$cdb = Yii::app()->db->createCommand()
				->select("bkg_id,
            bkg_booking_id,
            vct.vct_label cab_model,
            vct.vct_image as cab_image,
                a.cty_name as from_city,
                b.cty_name as to_city,
                DATE_FORMAT(bkg.bkg_pickup_date,'%d-%m-%Y') pickup_date,
                DATE_FORMAT(bkg.bkg_pickup_date,'%h:%i %p') pickup_time ,
                DATE_FORMAT(bkg.bkg_pickup_date,'%a') pickup_day,
                DATE_FORMAT(bkg.bkg_create_date,'%d-%m-%Y') booking_date,
                DATE_FORMAT(bkg.bkg_create_date,'%h:%i %p') booking_time ,
                DATE_FORMAT(bkg.bkg_create_date,'%a') booking_day,
               bkg_status,
               bkg_user_fname,
               bkg_user_lname,
               bkg_country_code,
               bkg_contact_no,
               bkg_advance_amount,
               bkg_due_amount,
               bkg_user_email,
               bkg_pickup_address,
               bkg_drop_address,
               bkg_total_amount, r.rtg_customer_overall, rtg_customer_driver, rtg_customer_csr, rtg_customer_car, rtg_customer_review, rtg_customer_date")
				->from('booking bkg')
				->join('booking_user bui', 'bui.bui_bkg_id=bkg.bkg_id')
				->join('booking_invoice biv', 'biv.biv_bkg_id=bkg.bkg_id')
				->join('svc_class_vhc_cat scv', 'scv.scv_id=bkg.bkg_vehicle_type_id')
				->join('vehicle_category vct', 'vct.vct_id = scv.scv_vct_id')
				->join('cities a', 'a.cty_id = bkg.bkg_from_city_id')
				->join('cities b', 'b.cty_id =bkg.bkg_to_city_id')
				->join('ratings r', 'r.rtg_booking_id=bkg.bkg_id')
				->where("bkg_agent_id = $userId AND bkg_status IN (2,3,5,6,7,9)")
				->order($s1);

		$Search = $cdb->queryAll();
		foreach ($Search as $key => $val)
		{
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_status')
				{
					$Search[$key]['bkg_status_name'] = $status[$v];
				}
				if ($k == 'bkg_id')
				{
					$Search[$key]['bkg_route_name'] = BookingRoute::model()->getRouteName($v);
				}
			}
		}

		return $Search;
	}

	public function getBookingStatus($stid = 0)
	{
		$arrStatus = $this->getActiveBookingStatus() + [
			4	 => 'Confirmed',
			10	 => 'Cancelled (Unverified)',
			11	 => 'Unable to confirm',
			12	 => 'Assigned Old',
			13	 => 'Converted to Lead'
		];
		if ($stid != 0)
		{
			return $arrStatus[$stid];
		}
		else
		{
			return $arrStatus;
		}
	}

	public function getReconfirmStatus($id = 0)
	{
		$arrStatus = [0	 => 'RECONFIRM PENDING',
			1	 => 'RECONFIRMED'];
		if ($id != 0)
		{
			return $arrStatus[$id];
		}
		else
		{
			return $arrStatus;
		}
	}

	public function getSmartMatchReconfirmStatus($id = 0)
	{
		$arrStatus = [
			0	 => 'RECONFIRM PENDING',
			1	 => 'RECONFIRMED'
		];
		if ($id != 0)
		{
			return $arrStatus[$id];
		}
		else
		{
			return $arrStatus;
		}
	}

	public function getCancelReasonList($type = '')
	{
		$reasons = ['Customer cancelled, plan changed',
			'Customer cancelled, found better price',
			'Customer cancelled due to delay in car assignment',
			'Vendor cancelled so gozo had to cancel',
			'Gozo cancelled as customer is not reachable',
			'Others'];
		foreach ($reasons as $reason)
		{
			$reasonList[$reason] = $reason;
		}
		return $reasonList;
	}

	public function getCancelReasonListForCustomer($type = '')
	{
		$reasons = [
			'Plan changed',
			'Found better price',
			'Delay in car assignment',
			'Others'];
		foreach ($reasons as $reason)
		{
			$reasonList[$reason] = $reason;
		}
		return $reasonList;
	}

	public function getDeleteReasonList($type = '')
	{
		$reasons = [
			'Duplicate booking',
			'Fake Data, Customer not reachable',
			'Test booking, internal cancel',
			'Others'];
		foreach ($reasons as $reason)
		{
			$reasonList[$reason] = $reason;
		}
		return $reasonList;
	}

	/**
	 *
	 * @param integer $stid
	 * @return string
	 */
	public function getBookingCode($stid = 0)
	{
		$arrStatus = [
			1	 => 'Quoted',
			2	 => 'Confirmed',
			3	 => 'In Progress',
			4	 => 'Completed',
			5	 => 'Cancelled',
			6	 => 'Quote Expried'
		];
		if ($stid != 0)
		{
			return $arrStatus[$stid];
		}
		else
		{
			return $arrStatus;
		}
	}

	/**
	 *
	 * @return array
	 */
	public function getBookingCodeStatus($status = 0)
	{
		$status	 = ($status > 0) ? $status : $this->bkg_status;
		$desc	 = '';
		$code	 = null;
		switch ($status)
		{
			case 15:
				$code	 = BookingSub::CODE_STATUS_QUOTED;
				break;
			case 2:
				$code	 = BookingSub::CODE_STATUS_CONFIRMED;
				break;
			case 3:
				$code	 = BookingSub::CODE_STATUS_CONFIRMED;
				break;
			case 5:
				if ($this->bkgTrack->bkg_ride_start > 0)
				{
					$code = BookingSub::CODE_STATUS_INPROGRESS;
				}
				else
				{
					$code = BookingSub::CODE_STATUS_CONFIRMED;
				}
				break;
			case 6:
				$code	 = BookingSub::CODE_STATUS_COMPLETED;
				break;
			case 7:
				$code	 = BookingSub::CODE_STATUS_COMPLETED;
				break;
			case 9:
				$code	 = BookingSub::CODE_STATUS_CANCELLED;
				break;
			case 1:
				$code	 = BookingSub::CODE_STATUS_QUOTE_EXPRIED;
				break;
		}
		$desc	 = $this->getBookingCode($code);
		$result	 = ['code' => $code, 'desc' => $desc];
		return $result;
	}

	public function getPartnerDetails($status = 0)
	{
		$status = ($status > 0) ? $status : $this->bkg_agent_id;
		if ($status != 0)
		{
			$agtId	 = 1;
			$agtName = Agents::model()->findByPk($this->bkg_agent_id)->agt_fname;
// $agtName = $getDeatils;
		}
		else
		{
			$agtId = 0;
		}
		$result = ['isAgtId' => $agtId, 'name' => $agtName];
		return $result;
	}

	public function getTrackDel()
	{
		if ($this->bkgTrack->bkg_is_trip_verified == 1)
		{
			$val = 2;
		}
		else
		{
			$val = $this->bkgPref->bkg_trip_otp_required;
		}
		return $val;
	}

	public function getActiveBookingStatus($stid = 0)
	{
		$arrStatus = [
			1	 => 'Unverified',
			15	 => 'Quoted',
			2	 => 'New',
			3	 => 'Assigned',
			5	 => 'Allocated',
			6	 => 'Completed',
			7	 => 'Settled',
			8	 => 'Deleted',
			9	 => 'Cancelled',
			13	 => 'Convert To Lead'
		];

		if ($stid != 0)
		{
			return $arrStatus[$stid];
		}
		else
		{
			return $arrStatus;
		}
	}

	public function getBkgStatus($stid = 0)
	{
		$arrStatus = [
			2	 => 'New',
			3	 => 'Assigned',
			5	 => 'Allocated',
			6	 => 'Completed',
			7	 => 'Settled',
			9	 => 'Cancelled',
		];

		if ($stid != 0)
		{
			return $arrStatus[$stid];
		}
		else
		{
			return $arrStatus;
		}
	}

	public static function getMyCallTabCategories($stid = 0)
	{
		$arrStatus = [
			80	 => 'Currently Viewing assigned quote/lead',
			10	 => 'Active Bookings',
			20	 => 'Pending Quotation',
			30	 => 'Pending Leads',
			40	 => 'Past Bookings',
			50	 => 'Booking Remarks',
			60	 => 'Lead Remarks',
			70	 => 'Follow Up',
				//90	 => 'Follow Up Remarks'
		];

		if ($stid != 0)
		{
			return $arrStatus[$stid];
		}
		else
		{
			return $arrStatus;
		}
	}

	public function getSmartMatchBookingStatus($stid = 0)
	{
		$arrStatus = [
			1	 => 'U',
			2	 => 'N',
			3	 => 'A',
			5	 => 'O',
			6	 => 'CMPL',
			7	 => 'SETT',
			8	 => 'DEL',
			9	 => 'CAN',
			13	 => 'CONLEAD'
		];

		if ($stid != 0)
		{
			return $arrStatus[$stid];
		}
		else
		{
			return $arrStatus;
		}
	}

	public function getUserBookingStatus($stid = 0)
	{
		$arrStatus = [
			1	 => 'Quote Expired',
			2	 => 'Confirmed',
			3	 => 'Confirmed',
			5	 => 'Driver Assigned',
			6	 => 'Completed',
			7	 => 'Completed',
			8	 => 'Deleted',
			9	 => 'Cancelled',
			15	 => 'Quote Created'
		];
		if ($stid != 0)
		{
			return $arrStatus[$stid];
		}
		else
		{
			return $arrStatus;
		}
	}

	public function getBookingType($bktype = 0, $postfix = '')
	{
		$arrBktype = [
			1	 => 'One Way' . ' ' . $postfix,
			2	 => 'Round Trip/Multi City ', //'Round' . ' ' . $postfix,
			3	 => 'Round Trip/Multi City ', //'Multi City' . ' ' . $postfix,
			4	 => 'Airport Transfer',
			5	 => 'Package',
			6	 => 'Flexxi' . ' ' . $postfix,
			7	 => 'Shuttle',
			8	 => 'Custom' . ' ' . $postfix,
			9	 => 'Day Rental 4hr-40km',
			10	 => 'Day Rental 8hr-80km',
			16	 => 'Day Rental 10hr-100km',
			11	 => 'Day Rental 12hr-120km',
			12	 => 'Airport Packages',
			14	 => 'Point to point (within-the-city)',
			15	 => 'Local Transfer'
		];
		if ($bktype != 0)
		{
			return trim($arrBktype[$bktype]);
		}
		else
		{
			return $arrBktype;
		}
	}

	public function getCustomerBookingType($type)
	{
		$arrList = $this->userTripList;
		return $arrList[$type];
	}

	public function getFlagSouce()
	{
		$flagSource = [
			'201'	 => 'Bookings with Missing Driver',
			'202'	 => 'Bookings still un-assigned',
			'205'	 => 'Bookings need accounts attention',
			'206'	 => 'Unverified Bookings',
			'208'	 => 'Drivers Missing Documents',
			'210'	 => 'Vendors Missing Documents',
			'211'	 => 'Vendors Bank Details Missing',
			'218'	 => 'Bookings not picked-up by any vendors',
			'219'	 => 'Bookings Reconfirm Pending',
			'224'	 => 'Delegated to Operation Manager',
			'225'	 => 'Bookings in Manual Assignment',
			'226'	 => 'Bookings in Critical Assignment',
			'227'	 => 'SOS Alert Bookings',
			'228'	 => 'Risk Bookings',
			'229'	 => 'Pickup Overdue',
			'230'	 => 'Completion Overdue',
			'231'	 => 'Refund Approvals Pending',
			'233'	 => 'B2B Bookings (Auto Cancel ON)',
			'234'	 => 'Uncommon Route Bookings',
			'250'	 => 'Driver not logged-in before pickup',
			'251'	 => 'Driver not left for pickup',
			'252'	 => 'Bookings (Auto Cancel ON)',
			'253'	 => 'VIP/ VVIP Bookings',
			'1011'	 => 'Tentative Booking',
			'102'	 => 'Followup Pending',
			'103'	 => 'Reconfirmed',
			'104'	 => 'Reconfirm Pending',
			'105'	 => 'No Show',
			'106'	 => 'Booking Not Profitable',
			'107'	 => 'Changed Vendor Amount',
			'108'	 => 'Accounting flag',
			'109'	 => 'Manual Assignment',
			'110'	 => 'Unapproved Car',
			'111'	 => 'Unapproved Driver',
			'112'	 => 'RE 1/- Sale Booking',
			'114'	 => 'RE 199/- Sale Booking',
			'113'	 => 'Delegated Assignment',
			'250'	 => 'Bookings missing Driver app login',
			'115'	 => 'Partner API Sync Error',
			'116'	 => 'Booking created by QR',
			'117'	 => 'Self Created',
			'120'	 => 'Whatsapp Promo Message',
			'121'	 => 'Whatsapp Promo H',
			'130'	 => 'Double Back Offer (DBO)',
		];
		return $flagSource;
	}

	public function getInitialName()
	{
		return strtoupper(trim(substr($this->bkgUserInfo->bkg_user_fname, 0, 1)) . '' . trim(substr($this->bkgUserInfo->bkg_user_lname, 0, 1)));
	}

	public function getPlatform($platform = '')
	{

		/*  public function getContactNumber()
		  {
		  $phone = '';
		  if ($this->bkg_contact_no != '')
		  {
		  $phone = $this->bkg_country_code . $this->bkg_contact_no;
		  }
		  return $phone;
		  } */

		/*   public function getAlternateNumber()
		  {
		  $phone = '';
		  if ($this->bkg_alt_contact_no != '')
		  {
		  $phone = $this->bkg_alt_country_code . $this->bkg_alt_contact_no;
		  }
		  return $phone;
		  } */

		$qry		 = "SELECT DISTINCT(bkg.bkg_id), bcb.bcb_id, bcb.bcb_vendor_id, bkg.bkg_booking_id as bookingId, bcb.bcb_vendor_amount as vendor_amount,
                booking_invoice.bkg_due_amount, booking_invoice.bkg_gozo_amount, bkg.bkg_pickup_address as pickup_location, bkg.bkg_drop_address as drop_location,
                CONCAT(booking_user.bkg_user_fname,' ',booking_user.bkg_user_lname) as user_name, bkg.bkg_pickup_date as pickup_datetime, booking_user.bkg_country_code as country_code,
                drv.drv_name as driver_name, vhc.vhc_number as cab_number,
				booking_user.bkg_contact_no as contact_no, booking_user.bkg_user_email as email,
                booking_invoice.bkg_total_amount as amount, vct.vct_desc as cab_type, bkg.bkg_instruction_to_driver_vendor as special_instruction, vht.vht_model as cab_assigned,
                MAX(booking_log.blg_created) as vendor_assign_date
                FROM `booking_cab` bcb
                JOIN booking bkg ON bcb.bcb_id = bkg.bkg_bcb_id
				JOIN booking_invoice ON booking_invoice.biv_bkg_id=bkg.bkg_id
				JOIN booking_user ON booking_user.bui_bkg_id=bkg.bkg_id
                JOIN `booking_log` ON booking_log.blg_booking_id=bkg.bkg_id AND booking_log.blg_active=1 AND booking_log.blg_event_id IN (7)
                LEFT JOIN vendors agt ON agt.vnd_id=bcb.bcb_vendor_id
                LEFT JOIN `vehicles` vhc ON vhc.vhc_id=bcb.bcb_cab_id
                LEFT JOIN `vehicle_types` vht ON vht.vht_id=vhc.vhc_type_id
                LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id
                JOIN `svc_class_vhc_cat` scv ON bkg.bkg_vehicle_type_id = scv.scv_id
                JOIN `vehicle_category` vct ON scv.scv_vct_id=vct.vct_id
                WHERE bcb.bcb_id = '$bcb_id' GROUP BY bkg.bkg_id ORDER BY bkg.bkg_pickup_date";
		$recordset	 = DBUtil::queryAll($qry);
		foreach ($recordset as $key => $val)
		{
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_id')
				{
					$recordset[$key]['bkg_route_name'] = BookingRoute::model()->getRouteName($v);
				}
			}
		}
		return $recordset;
	}

	public function getVendorDetailById($bcb_id)
	{
		$sql = "SELECT booking_cab.bcb_vendor_id,MIN(booking.bkg_pickup_date) as pickup_datetime,
                booking_invoice.bkg_gozo_amount,MAX(booking_log.blg_created) as vendor_assign_date
                FROM `booking_cab`
                INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id AND booking.bkg_active=1 AND booking_cab.bcb_active=1
                INNER JOIN `vendors` ON vendors.vnd_id=booking_cab.bcb_vendor_id
                JOIN `booking_log` ON booking_log.blg_booking_id=booking.bkg_id AND booking_log.blg_active=1 AND booking_log.blg_event_id IN (7)
                WHERE booking_cab.bcb_id=$bcb_id GROUP BY booking_cab.bcb_id";
		return DBUtil::queryRow($sql);
	}

	/*
	 * @deprecated since version 05-01-2022
	 */

	public function getDetailbyId1($bookingid)
	{
		$bookingModel	 = Booking::model()->findByPk($bookingid);
		$maskNo			 = Yii::app()->params['customerToDriver'];
		if ($bookingModel->bkg_agent_id == 450 || $bookingModel->bkg_agent_id == 18190)
		{
			$maskNo = Yii::app()->params['customerToDriverforMMT'];
		}
		$qry = "SELECT DISTINCT(bkg.bkg_id),
			            bkg.bkg_booking_id as bookingId,
						r.rtg_customer_overall,
						biv.bkg_vendor_amount as vendor_amount,
						bkg.bkg_pickup_address as pickup_location,
						bkg.bkg_drop_address as drop_location,
					    CONCAT(bui.bkg_user_fname,' ',bui.bkg_user_lname) as user_name,
						bkg.bkg_pickup_date as pickup_datetime,
						bui.bkg_country_code as country_code,
						if(bkg_status > 4, if(bkg.bkg_pickup_date < NOW() AND bkg_ride_start = 1, phn.phn_phone_no,'$maskNo'),phn.phn_phone_no) as driver_phone,
						drv.drv_name as driver_name,
						vhc.vhc_number as cab_number,
						bui.bkg_contact_no as contact_no,
						bui.bkg_user_email as email,
						biv.bkg_total_amount as amount,
						vct.vct_label cab_type,
						bkg.bkg_instruction_to_driver_vendor as special_instruction,
						vht.vht_model as cab_assigned
                FROM `booking` bkg
				JOIN booking_invoice biv ON biv.biv_bkg_id = bkg.bkg_id
				JOIN booking_track btk ON btk.btk_bkg_id = bkg.bkg_id
				JOIN booking_user bui ON bui.bui_bkg_id = bkg.bkg_id
				JOIN booking_cab bcb ON bcb.bcb_id = bkg.bkg_bcb_id
                LEFT JOIN vendors agt ON agt.vnd_id=bcb.bcb_vendor_id
                LEFT JOIN `vehicles` vhc ON vhc.vhc_id=bcb.bcb_cab_id
                LEFT JOIN `vehicle_types` vht ON vht.vht_id=vhc.vhc_type_id
                LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id
				LEFT JOIN contact ctt ON ctt.ctt_id=drv.drv_contact_id
                LEFT JOIN contact_phone phn ON phn.phn_contact_id=ctt.ctt_id AND phn.phn_is_primary=1 AND phn.phn_active=1
                JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg.bkg_vehicle_type_id
                JOIN `vehicle_category` vct ON scv.scv_vct_id=vct.vct_id
                LEFT JOIN ratings r ON r.rtg_booking_id = bkg.bkg_id
                WHERE bkg.bkg_booking_id = '$bookingid'";

		$recordset = DBUtil::queryRow($qry);
		foreach ($recordset as $key => $val)
		{
			if ($key == 'bkg_id')
			{
				$recordset['bkg_route_name'] = BookingRoute::model()->getRouteName($val);
			}
		}
		return $recordset;
	}

	public static function pickupCurrentDiff($bcbId)
	{
		$params["bcb_id"]	 = $bcbId;
		$qry				 = "SELECT DISTINCT(bkg.bkg_id), bcb.bcb_id,  TIMESTAMPDIFF(MINUTE,NOW() , bkg_pickup_date) as diff "
				. " FROM booking_cab bcb"
				. " INNER JOIN booking bkg ON bcb.bcb_id=bkg.bkg_bcb_id"
				. " WHERE bcb.bcb_id = $bcbId GROUP BY bkg.bkg_id ORDER BY bkg.bkg_pickup_date";
		$recordset			 = DBUtil::queryRow($qry);

		return $recordset;
	}

	public function getDetailbyId($bcb_id)
	{
		$qry = "SELECT DISTINCT(bkg.bkg_id), bcb.bcb_id, bcb.bcb_vendor_id, bkg.bkg_booking_id as bookingId, bcb.bcb_vendor_amount as vendor_amount,
				bkginv.bkg_due_amount, bkginv.bkg_gozo_amount, bkg.bkg_pickup_address as pickup_location, bkg.bkg_drop_address as drop_location,bkg.bkg_pickup_date,
				CONCAT(bkguser.bkg_user_fname,' ',bkguser.bkg_user_lname) as user_name, bkg.bkg_pickup_date as pickup_datetime, bkguser.bkg_country_code as country_code,
				phn.phn_phone_no as driver_phone, drv.drv_name as driver_name, vhc.vhc_number as cab_number, bkguser.bkg_contact_no as contact_no, bkguser.bkg_user_email as email,
				bkginv.bkg_total_amount as amount, vht1.vct_desc as cab_type, bkg.bkg_instruction_to_driver_vendor as special_instruction, vht.vht_model as cab_assigned,
				MAX(booking_log.blg_created) as vendor_assign_date,TIMESTAMPDIFF(MINUTE,NOW() , bkg_pickup_date) as diff
				FROM `booking_cab` bcb
				JOIN booking bkg ON bcb.bcb_id = bkg.bkg_bcb_id
				JOIN booking_user bkguser ON bkg.bkg_id = bkguser.bui_bkg_id
				JOIN booking_invoice bkginv ON bkg.bkg_id = bkginv.biv_bkg_id
				JOIN `booking_log` ON booking_log.blg_booking_id=bkg.bkg_id AND booking_log.blg_active=1 AND booking_log.blg_event_id IN (7)
				JOIN vendors agt ON agt.vnd_id=bcb.bcb_vendor_id
				LEFT JOIN `vehicles` vhc ON vhc.vhc_id=bcb.bcb_cab_id
				LEFT JOIN `vehicle_types` vht ON vht.vht_id=vhc.vhc_type_id
				LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id and drv.drv_id = drv.drv_ref_code
				LEFT JOIN contact_profile cp ON cp.cr_is_driver = drv.drv_id and cp.cr_status =1
				LEFT JOIN contact ctt on ctt.ctt_id = cp.cr_contact_id and ctt.ctt_id = ctt.ctt_ref_code and ctt.ctt_active =1
				LEFT JOIN contact_phone phn ON phn.phn_contact_id=ctt.ctt_id AND phn.phn_is_primary=1 AND phn.phn_active=1
				JOIN svc_class_vhc_cat scv ON bkg.bkg_vehicle_type_id=scv.scv_id
				JOIN `vehicle_category` vht1 ON scv.scv_vct_id=vht1.vct_id
				WHERE bcb.bcb_id = '$bcb_id' GROUP BY bkg.bkg_id ORDER BY bkg.bkg_pickup_date";

		$recordset = DBUtil::queryAll($qry);
		foreach ($recordset as $key => $val)
		{
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_id')
				{
					$recordset[$key]['bkg_route_name'] = BookingRoute::model()->getRouteName($v);
				}
			}

			$customerShow = Filter::customerDataShow($recordset[$key]['bkg_pickup_date']);
			if ($customerShow < 1)
			{
				$recordset[$key]['user_name']	 = "";
				$recordset[$key]['contact_no']	 = "";
				$recordset[$key]['email']		 = "";
			}
		}
		return $recordset;
	}

	public function getDetailbyIdAgent($bookingId)
	{
		try
		{
			if ($bookingId)
			{
				$criteria			 = new CDbCriteria;
				$criteria->compare('bkg_booking_id', $bookingId);
				$criteria->with		 = ['bkgFromCity', 'bkgToCity', 'bkgSvcClassVhcCat'];
				$criteria->together	 = true;
				return $this->find($criteria);
			}
		}
		catch (Exception $ex)
		{
			throw new Exception("Request can not be proceed", ReturnSet::ERROR_REQUEST_CANNOT_PROCEED);
		}
	}

	public function getDetailbyIdCustomer($bookingId)
	{
		$criteria			 = new CDbCriteria;
		$criteria->compare('bkg_id', $bookingId);
		$criteria->with		 = ['bkgFromCity', 'bkgToCity'];
		$criteria->together	 = true;
		return $this->find($criteria);
	}

	public function getBkgIdByBookingId($bookingId)
	{
		$criteria = new CDbCriteria;
		$criteria->addCondition("`bkg_booking_id` = '" . $bookingId . "'");
		return $this->find($criteria);
	}

	public function updateBookingStatus($bkid, $status)
	{
		if ($bkid != '' && $bkid != 0 & $status != 0)
		{
			$model				 = Booking::model()->findByPk($bkid);
			$model->bkg_status	 = $status;
			$model->scenario	 = 'updatestatus';
			if ($model->save())
			{
				return $model->bkg_id;
			}
			else
			{
				return false;
			}
		}
	}

	public function updatePaymentExpiry($bkid)
	{
		$model											 = Booking::model()->findByPk($bkid);
		$exptime										 = $model->bkgTrail->bkg_payment_expiry_time;
		$model->bkgUserInfo->bkg_user_last_updated_on	 = new CDbExpression('NOW()');
		if ($exptime < date('Y-m-d H:i:s'))
		{
			$model->bkgTrail->scenario					 = 'updatepaymentexpiry';
			$model->bkgTrail->bkg_payment_expiry_time	 = new CDbExpression("DATE_ADD(NOW(), INTERVAL 6 HOUR)");
			if ($model->bkgTrail->save())
			{
				if ($model->bkgUserInfo->save())
				{
					return $model->bkg_id;
				}
			}
		}
		return false;
	}

	public function lockPaymentOption($bkid)
	{
		$model											 = Booking::model()->findByPk($bkid);
		$exptime										 = $model->bkgTrail->bkg_payment_expiry_time;
		$model->bkgUserInfo->bkg_user_last_updated_on	 = new CDbExpression('NOW()');
		if ($exptime > date('Y-m-d H:i:s'))
		{
			$model->bkgTrail->scenario					 = 'updatepaymentexpiry';
			$model->bkgTrail->bkg_payment_expiry_time	 = new CDbExpression("DATE_SUB(NOW(), INTERVAL 1 HOUR)");
			if ($model->bkgTrail->save())
			{
				if ($model->bkgUserInfo->save())
				{
					return $model->bkg_id;
				}
			}
		}
		return false;
	}

	public function delBooking($bkid, $reason)
	{
		if ($bkid != '' && $bkid != 0 && $reason != '')
		{
			$model							 = Booking::model()->findByPk($bkid);
			$cabModel						 = $model->getBookingCabModel();
			$oldStatus						 = $model->bkg_status;
// $model->bkg_cancel_delete_reason = $model->bkg_cancel_delete_reason . ' ' . $reason;
			$model->bkg_cancel_delete_reason = ($model->bkg_cancel_delete_reason == '') ? $reason : $model->bkg_cancel_delete_reason . '; ' . $reason;
			$status							 = Booking::STATUS_DELETED;
			$model->bkg_status				 = $status;
			$model->scenario				 = 'cancel_delete';
			$pendingStatus					 = 1;
			$success						 = $cabModel->updatePendingStatus($pendingStatus);
			if ($model->validate())
			{
				$model->save();
//				QuotesSituation::setCancelData($bkid);
				$newStatus = $model->bkg_status;
				return ['oldStatus' => $oldStatus, 'newStatus' => $newStatus];
			}
		}
		return false;
	}

	public function addRemarks($bkid, $remark)
	{
		/* @var $model Booking  */
		if ($bkid != '' && $bkid != 0 && $remark != '')
		{
			$model = Booking::model()->findByPk($bkid);

			if ($remark != '')
			{
				$new_remark	 = $remark;
				$prev_remark = $model->bkg_remark;
				$dt			 = date('Y-m-d H:i:s');
				$user		 = UserInfo::getInstance()->getUserId();
				$status		 = $model->bkg_status;

				if ($new_remark != '')
				{
					if (is_string($prev_remark))
					{
						$newcomm = CJSON::decode($prev_remark);
						if ($prev_remark != '' && CJSON::decode($prev_remark) == '')
						{
							$newcomm = array(array(0 => '1', 1 => $model->bkg_create_date, 2 => $prev_remark, 3 => '2'));
						}
					}
					elseif (is_array($prev_remark))
					{
						$newcomm = $prev_remark;
					}
					if ($newcomm == false)
					{
						$newcomm = array();
					}
					array_unshift($newcomm, array(0 => $user, 1 => $dt, 2 => $new_remark, 3 => $status));
					$model->bkg_remark = CJSON::encode($newcomm);
				}
			}

			$model->scenario = 'add_remarks';
			if ($model->validate())
			{
				$model->save();

				return $model->bkg_id;
			}
			else
			{
				return false;
			}
		}
	}

	public function canBookingMmt($id, $reason1, $reasonId)
	{
		$reason		 = trim($reason1);
		$model		 = Booking::model()->findByPk($id);
		$oldModel	 = clone $model;
		$userInfo	 = UserInfo::getInstance();
		$success	 = $this->canBooking($id, $reason, $reasonId, $userInfo);
		if ($success)
		{
			$bkgid	 = $success;
			$desc	 = "Booking cancelled by agent.";
			$eventid = BookingLog::BOOKING_CANCELLED;
			BookingLog::model()->createLog($bkgid, $desc, $userInfo, $eventid, $oldModel);
			return true;
		}
		return false;
	}

	/**
	 *
	 * @param integer $bkgId
	 * @param string $reasonText
	 * @param integer $reasonId
	 * @param UserInfo $userInfo
	 * @return boolean
	 * @throws Exception
	 */
	public function canBooking($bkgId, $reasonText, $reasonId = 0, UserInfo $userInfo = null, $cancelStatus = null, $isReschduled = 0)
	{
		if ($userInfo == null)
		{
			$userInfo = UserInfo::getInstance();
		}
		Logger::writeToConsole("BkgId: " . $bkgId);
		if ($bkgId != '' && $bkgId != 0)
		{
			Logger::setModelCategory(__CLASS__, __FUNCTION__);
			$model = $this->findByPk($bkgId);

			if ($model->bkgInvoice->bkg_advance_amount == '' && $model->bkg_agent_id == 18190)
			{
				BookingScheduleEvent::preCanBooking($bkgId);
			}

			Logger::writeToConsole("Adv Amount: " . $model->bkgInvoice->bkg_advance_amount . ", Agent: " . $model->bkg_agent_id);

			$transaction	 = DBUtil::beginTransaction();
			$vendorId		 = $model->bkgBcb->bcb_vendor_id;
			$driverNumber	 = $model->bkgBcb->bcb_driver_phone;
			try
			{
				$cabmodel						 = $model->bkgBcb;
				$model->bkg_cancel_id			 = $reasonId;
				$model->bkg_cancel_delete_reason = $reasonText;

				$isGozoNowUnConfirmed		 = (($model->bkg_status == 2 || $model->bkg_status == 10) && $model->bkg_reconfirm_flag == 0 && $model->bkgPref->bkg_is_gozonow == 1 ) ? 1 : 0;
				$isTransferzGnowUnConfirmed	 = ($model->bkg_status == 2 && $model->bkgPref->bkg_is_gozonow == 1 && $model->bkg_agent_id == Config::get('transferz.partner.id')) ? 1 : 0;
				$status						 = ((($model->bkg_status == 1 || $model->bkg_status == 15) && ($model->bkgInvoice->bkg_advance_amount == 0)) || $isGozoNowUnConfirmed || $isTransferzGnowUnConfirmed || ($model->bkgPref->bkg_is_fbg_type == 1 && $reasonId == 42)) ? Booking::STATUS_VERIFY_CANCELLED : Booking::STATUS_CANCELLED;
				$model->scenario			 = 'cancel_delete_new';

				Logger::writeToConsole("BkgStatus: " . $model->bkg_status . ", Status: " . $status);

				$refId = $model->bkg_return_id;
				if ($model->validate())
				{
					if ($refId != '' && $refId != 0)
					{
						$refModel				 = $this->findByPk($refId);
						$refModel->bkg_return_id = 0;
						$refModel->save();
					}
					$prvStatus								 = $model->bkg_status;
					$model->bkg_status						 = $status;
					$model->scenario						 = 'cancel_delete_new';
					$refId									 = $model->bkg_return_id;
					$model->bkg_return_id					 = 0;
					$model->bkgTrail->bkg_cancel_user_type	 = $userInfo->userType;
					$model->bkgTrail->bkg_cancel_user_id	 = $userInfo->userId;
					$model->bkgTrail->btr_cancel_date		 = new CDbExpression('NOW()');
					$succ									 = $model->save();
					if (!$succ)
					{
						throw new Exception(json_encode($model->getErrors()), 1);
					}
					else
					{
						Logger::writeToConsole("Booking::STATUS_CANCELLED Reason - " . $reasonId);
						if ($status == Booking::STATUS_CANCELLED)
						{
							QuotesSituation::setCancelData($model->bkg_id);
							QuotesZoneSituation::setCancelData($model->bkg_id);
						}
						Logger::beginProfile("Creating log for Booking Id: " . $model->bkg_id);
						if ($reasonId > 0)
						{
							$reasonDesc	 = CancelReasons::model()->findByPk($reasonId)->cnr_reason;
							$reasonText	 = $reasonDesc . ' : ' . $reasonText;
//if driver no show then gooff flag on
							if ($reasonId == 22)
							{
								$bcbId	 = $model->bkgBcb->bcb_id;
								$flag	 = 2;
								BookingCab::updateVendorCanceltype($bcbId, $flag);
							}
						}

						BookingLog::model()->createLog($model->bkg_id, $reasonText, $userInfo, BookingLog::BOOKING_CANCELLED);
						$currentDate							 = date('Y-m-d', strtotime(date('Y-m-d H:i:s')));
						$currentTime							 = date('H:i:s', strtotime(date('Y-m-d H:i:s')));
						$model->bkgTrail->bkg_followup_date		 = $currentDate . ' ' . $currentTime;
						$model->bkgTrail->bkg_followup_comment	 = 'Follow Completed.';
						$model->bkgTrail->bkg_followup_active	 = 0;
						if ($model->bkgTrail->save())
						{
							if ($model->bkgTrail->bkg_followup_date != null || $model->bkgTrail->bkg_followup_date != "")
							{
								if ($reasonId == 22 || $userInfo->userType == 4)
								{
									$userInfo->userType = UserInfo::TYPE_SYSTEM;
								}
								$desc = 'Follow up flag complete @ ' . date('d/m/Y', strtotime($model->bkgTrail->bkg_followup_date)) . ' at ' . date('h:i A', strtotime($model->bkgTrail->bkg_followup_date)) . '.';
								BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, BookingLog::FOLLOWUP_COMPLETE, false, false);
							}
						}
						Logger::endProfile("Creating log for Booking Id: " . $model->bkg_id);

						Logger::writeToConsole("Vendor compensation on booking cancellation. bkg_status - " . $model->bkg_status);
// Vendor compensation
						$remarks	 = "Vendor compensation on booking cancellation";
						$timeAdded	 = 24;

						if ($model->bkgBcb->bcb_vendor_id > 0)
						{
							//$vndJson = CJSON::encode(['vndid' => $model->bkgBcb->bcb_vendor_id]);
							BookingScheduleEvent::add($model->bkg_id, BookingScheduleEvent::BOOKING_VND_COMPENSATION, $remarks, null, date('Y-m-d H:i:s', strtotime('+' . $timeAdded . ' hours')));
						}
					}

					$model->refresh();

					Logger::writeToConsole("Model Refresh. bkg_status - $status - " . $model->bkg_status);
					//$isOperatorPartner = OperatorApiTracking::isBookingCancelEvent($model->bkg_id);
					if ($status == Booking::STATUS_CANCELLED && $model->bkgBcb->bcb_vendor_id === Config::get('hornok.operator.id'))
					{
						$operatorId	 = Operator::getOperatorId($model->bkg_booking_type);
						$objOperator = Operator::getInstance($operatorId);

						/* @var $objOperator Operator */
						$objOperator = $objOperator->cancelBooking($model->bkg_id, $operatorId);
					}

					if ($model->bkg_bcb_id > 0 && $model->bkg_status != 1 && $model->bkg_status != 10)
					{
						Logger::writeToConsole("bkg_bcb_id. bkg_status - " . $model->bkg_status);
						$timeLeftForPickup = Filter::getTimeDiff($model->bkg_pickup_date);
						Logger::beginProfile("Notify vendor and driver for Booking Id: " . $model->bkg_id);
						if ($timeLeftForPickup > 240)
						{
							$reason = 'Booking cancelled from the trip. Trip #' . $model->bkg_bcb_id;
							if (count($model->bkgBcb->bookings) > 1)
							{
								$reason = 'Another booking cancelled from the trip. Old Trip #' . $model->bkg_bcb_id;
							}
							if ($model->bkgBcb->bcb_vendor_id == '')
							{
								Booking::model()->regenarateTripId($model, $reason);
							}
							if ($model->bkgBcb->bcb_vendor_id > 0 && count($model->bkgBcb->bookings) > 1)
							{
								$bkgId = Booking::model()->canVendor($model->bkg_bcb_id, $reason, $userInfo, [], $reasonId);
							}
							else
							{
								if ($model->bkgBcb->bcb_vendor_id != '' && $this->event_by != 2)
								{
									$firstCity	 = Cities::getName($model->bkg_from_city_id);
									$pickupDate	 = date("d M Y h:i A", strtotime($model->bkg_pickup_date));
									$lastCity	 = Cities::getName($model->bkg_to_city_id);
									$payLoadData = ['tripId' => $model->bkg_bcb_id, 'EventCode' => Booking::CODE_VENDOR_DENY];

									$success = AppTokens::model()->notifyVendor($model->bkgBcb->bcb_vendor_id, $payLoadData, "Trip Id: " . $model->bkg_bcb_id . ", " . $firstCity . "-" . $lastCity . ", " . $pickupDate, $model->bkg_bcb_id . " has been cancelled");
								}
								if ($model->bkgBcb->bcb_driver_id != '' && $this->event_by != 2)
								{
									$firstCity		 = Cities::getName($model->bkg_from_city_id);
									$pickupDate		 = date("d F Y", strtotime($model->bkg_pickup_date));
									$pickupTime		 = date("h:i A", strtotime($model->bkg_pickup_date));
									$lastCity		 = Cities::getName($model->bkg_to_city_id);
//$message		 = "Booking Id:" . $model->bkg_booking_id . " (Trip Id: " . $model->bkg_bcb_id . ") , " . $firstCity . "-" . $lastCity . ", dated  " . $pickupDate . " at " . $pickupTime . " has been cancelled .";
//$payLoadData	 = ['tripId' => $model->bkg_bcb_id, 'EventCode' => Booking::CODE_USER_CANCEL];
//$success		 = AppTokens::model()->notifyDriver($model->bkgBcb->bcb_driver_id, $payLoadData, $notificationId, $message, null, "Gozo Cabs");
									$userInfo		 = UserInfo::getInstance();
									$type			 = $this->userArr[$userInfo->userType];
									$message		 = "Booking " . $model->bkg_booking_id . " Cancelled by $type";
									$image			 = null;
									$bkgID			 = $model->bkg_booking_id;
									$notificationId	 = substr(round(microtime(true) * 1000), -5);
									$payLoadData	 = ['EventCode' => Booking::CODE_USER_CANCEL];

									$success = AppTokens::model()->notifyDriver($model->bkgBcb->bcb_driver_id, $payLoadData, $notificationId, $message, $image, "Booking Cancelled", $bkgID);
								}
							}
						}
						else
						{
							Logger::writeToConsole("Booking cancelled. Old Trip #. bkg_status - " . $model->bkg_status);
							$reason		 = ' Booking cancelled. Old Trip #' . $model->bkg_bcb_id;
							$oldCabModel = $cabmodel;
							if ($model->bkgBcb->bcb_vendor_id == '')
							{
								Booking::model()->regenarateTripId($model, $reason);
							}
							if ($model->bkgBcb->bcb_vendor_id > 0 && count($model->bkgBcb->bookings) > 1)
							{
								Booking::model()->vendorUnassignAndRegenarateCab($model, $oldCabModel, $reason, null, $cancelStatus);
							}
						}
						Logger::endProfile("Notify vendor and driver for Booking Id: " . $model->bkg_id);
					}

					Logger::writeToConsole("Trip Type - " . $model->bkgBcb->bcb_trip_type);

					if ($model->bkgBcb->bcb_trip_type == 1)
					{
						Logger::beginProfile("update booking status for Booking Id: " . $model->bkg_id);
						$pendingStatus	 = 1;
						$success		 = $cabmodel->updatePendingStatus($pendingStatus);

						$triptype		 = 0;
						$tripTypeStatus	 = $cabmodel->updateTripTypeStatus($triptype);
						Logger::endProfile("update booking status for Booking Id: " . $model->bkg_id);
					}

					Logger::writeToConsole("Commit Transaction - " . $model->bkg_status);

					$model->refresh();
					DBUtil::commitTransaction($transaction);
					Logger::beginProfile("Calculate refund for Booking Id: " . $model->bkg_id);
					Logger::trace("Booking::calculateRefund started");

					if ($isReschduled == 1)
					{
						goto skipreschedule;
					}

					$cancelCharges	 = $model->calculateRefund();
					Logger::trace("Booking::calculateRefund end   cancel charge: {$cancelCharges->charges}");
					Logger::endProfile("Calculate refund for Booking Id: " . $model->bkg_id . "cancel Charges:" . $cancelCharges->charges . "slabs:" . array_values($cancelCharges->slabs)[1]);
					$responce		 = true;
					$refundAmount	 = $cancelCharges->refund;

					$cusPenalizedRule = CancelReasons::getCustomerPenalizeRuleById($reasonId);
					if ($cancelCharges->charges == 0 && ($model->bkgInvoice->bkg_net_advance_amount >= $model->bkgInvoice->bkg_admin_fee) && $model->bkgTrail->bkg_platform == 2 && $cusPenalizedRule > 1 && ($model->bkg_agent_id == '' || $model->bkg_agent_id == null))
					{
						$adminAssistedMarkup	 = $model->bkgInvoice->bkg_admin_fee;
						$cancelCharges->charges	 = $adminAssistedMarkup;
						$refundAmount			 = ($cancelCharges->refund - $adminAssistedMarkup);
						Logger::trace("Inside AdminFee condition cancelcharge: {$cancelCharges->charges}");
					}
//////////////////////
					/**
					 * DoubleBack type booking check
					 */
					//$isDBOApplicable = 0;
//					if (($model->bkg_agent_id == 18190 || $model->bkg_agent_id == 450 || $model->bkg_agent_id == NULL) && UserInfo::getUserType() == UserInfo::TYPE_ADMIN && UserInfo::getUserId() > 0)
//					{
//						$dboRefund		 = $model->bkgTrail->getDBORefundable();
//						$maxrefundable	 = Config::get('dbo.maxrefundable');
//						$check			 = CancelReasons::isDboApplicable($reasonId);
//						if ($check)
//						{
//							if ($dboRefund > 0 && !empty($maxrefundable))
//							{
//								$isDBOApplicable = $model->bkgTrail->btr_is_dbo_applicable;
//								$refundAmount	 += min($dboRefund, $maxrefundable);
//								if ($model->bkg_agent_id == 18190 || $model->bkg_agent_id == 450)
//								{
//									$refundAmount = $dboRefund;
//								}
//							}
//						}
//					}
					$applicableDBOCompensation = CancelReasons::applicableDBOCompensation($model->bkg_cancel_id);
					if ($applicableDBOCompensation)
					{
						if ($model->bkg_agent_id == null && $model->bkgTrail->btr_is_dbo_applicable == 1 && $model->bkgTrail->btr_dbo_amount > 0 && UserInfo::getUserType() == UserInfo::TYPE_ADMIN && UserInfo::getUserId() > 0)
						{
							$getDBOCompensation	 = $model->bkgTrail->btr_dbo_amount;
							$remarks			 = "Compensation given to user wallet Rs " . $getDBOCompensation . " against booking id " . $model->bkg_id;
							AccountTransactions::addDboCompensationAmount($model->bkg_id, $model->bkgUserInfo->bkg_user_id, $model->bkg_pickup_date, $getDBOCompensation, $remarks, $model, $userInfo);
							Users::notifyDBO($model->bkg_id);
						}
					}
//$cancelChargesNew = CancellationPolicy::initiateRequest($model);
//If mmt cancel the booking 2 or 1 hours before the pickup without push driver info (cancellation won't be charged)
					if ($model->bkg_agent_id == 18190)
					{
						$isCancellationApplicable = GoMmt::isCancelChargesApplicable($model);
						if ($isCancellationApplicable == false)
						{
							$cancelCharges->charges	 = 0;
							$refundAmount			 = $model->bkgInvoice->bkg_advance_amount;
							goto skip;
						}
					}
//if refund equal to zero then we will refund 10.5% of advance amount.
					if ($model->bkg_agent_id == 18190 && $refundAmount == 0)
					{
						$refundAmount			 = round($model->bkgInvoice->bkg_advance_amount * 0.105);
						$cancelCharges->charges	 = ($model->bkgInvoice->bkg_advance_amount - $refundAmount);
					}
					skip:
					if ($refundAmount > 0)
					{
						$useUserWallet = Config::get('user.useWallet');

						if (Yii::app()->params['refundApprovalsRequired'] == 1 && $reasonId != 33 && $useUserWallet == 0)
						{
							$responce = false;
							$model->setRefundApprovalStatus($refundAmount);
							$model->setAccountingFlag("Could not refund. Amount to refund: $refundAmount. Need manual attention");
						}
						else
						{
#### START BLOCK Refund directly without BookingScheduleEvent
							$checkRefund = AccountTransactions::checkRefund($model->bkg_id, $refundAmount);

							if ($refundAmount > 0 && $model->bkgInvoice->bkg_net_advance_amount > 0 && ($checkRefund == '' || $checkRefund == null || $checkRefund == false))
							{

								$success = $model->refund($refundAmount, "Refund on booking cancelation", UserInfo::model());
								if ($success)
								{
									$cancelReasons = CancelReasons::model()->excludeCancellationCharge($model->bkg_cancel_id);
									if ($cancelReasons == true && $model->bkg_agent_id == NULL)
									{
										Booking::RefundFromWalletToSource($model);
									}
								}
							}
#### END BLOCK Refund directly without BookingScheduleEvent
#
//							$dataArray	 = array('refundAmount' => $refundAmount);
//							$refundData	 = CJSON::encode($dataArray);
//							BookingScheduleEvent::add($model->bkg_id, BookingScheduleEvent::REFUND_PROCESS, "Refund on booking cancelation", $refundData);
						}
					}

					if ($cancelCharges->charges > 0)
					{
						Logger::beginProfile("Cancellation charges for Booking Id: " . $model->bkg_id . "cancel Charges" . $cancelCharges->charges . "slabs" . array_values($cancelCharges->slabs)[1]);
//AccountTransactions::model()->AddCancellationCharge($model->bkg_id, $model->bkg_pickup_date, $cancelCharges->charges, UserInfo::model());
						/*
						  Gozocoins will not be issued to customers in case of cancellation charged .
						 * As per discussion with Deepesh Arora
						 * */
//						if ($refundArr->promoAmount > 0)
//						{
//							$model->issueGozoCoins($refundArr->promoAmount, UserInfo::model());
//						}

						$chargePartnerCredit = ($cancelCharges->refund < 0) ? abs($cancelCharges->refund) : 0;
						if ($chargePartnerCredit > 0 && $model->bkg_agent_id != 34928)
						{
							$model->updateAdvance1($chargePartnerCredit, $userInfo->userType, PaymentType::TYPE_AGENT_CORP_CREDIT);
							$model->chargePartnerWalletOnCancellation($chargePartnerCredit, $model->bkg_pickup_date, UserInfo::model());
						}

						Logger::trace("processCancelCharge started cancelCharge: {$cancelCharges->charges}");
						$model->bkgInvoice->processCancelCharge($cancelCharges->charges, $model->bkg_agent_id);
						Logger::trace("processCancelCharge end");
						Logger::endProfile("Cancellation charges for Booking Id: " . $model->bkg_id);
						ServiceCallQueue::followupForPenalized($cancelCharges->charges, $model->bkg_cancel_id, $model->bkg_id);
					}

					skipreschedule:

					$scvVctId = SvcClassVhcCat::model()->getCatIdBySvcid($model->bkg_vehicle_type_id);
					if ($model->bkg_booking_type == 1 && $scvVctId == VehicleCategory::SHARED_SEDAN_ECONOMIC && $model->bkg_flexxi_type == 2)
					{
						Logger::beginProfile("Update vendor amount for Booking Id: " . $model->bkg_id);
						$cabmodel		 = $model->getBookingCabModel();
						$promoterBooking = Booking::model()->findByPk($model->bkg_fp_id);
//$profit          = Booking::model()->getFlexxiProfitAmount($cabmodel->bcb_id);
						$profit			 = BookingInvoice::model()->getFlexxiProfitAmount($cabmodel->bcb_id);
						if ($profit > 0)
						{
							$cabmodel->bcb_vendor_amount = $promoterBooking->bkgInvoice->bkg_vendor_amount + $profit;
							$cabmodel->save();
						}
						Logger::endProfile("Update vendor amount for Booking Id: " . $model->bkg_id);
					}


					if ($model->bkg_agent_id > 0 && $cancelCharges->commission > 0)
					{
						Logger::beginProfile("Commission for Booking Id: " . $model->bkg_id);
						$res = AccountTransactions::model()->AddCommission($model->bkg_pickup_date, $model->bkg_id, $model->bkg_agent_id, $cancelCharges->commission, UserInfo::model());
						Logger::endProfile("Commission for Booking Id: " . $model->bkg_id);
					}
					if ($model->bkg_agent_id == 1273 || $model->bkg_agent_id == 454)
					{
						$typeAction = PartnerApiTracking::VENDOR_CANCELLATION;
					}

					if ($model->bkg_status != 10)
					{
						if ($model->bkg_agent_id == 18190)
						{
							$typeAction = '';
							if ($userInfo->userType == 4 || $userInfo->userType == 10)
							{
								$typeAction = AgentApiTracking::TYPE_TRIP_CANCELLED;
								if ($model->bkgTrack->bkg_is_no_show != 1)
								{
									if ($model->bkg_cancel_id == 21)
									{
										$data = AgentMessages::model()->pushApiCall($model, AgentApiTracking::TYPE_NO_SHOW);
										if ($data->status != 1)
										{
											$desc = "Booking canceled by gozo team but updation failed from GO-MMT, please contact with GO-MMT team";
											ServiceCallQueue::mmtSupportCBR($bkgId, $desc);
										}
									}
									else
									{
										$data = AgentMessages::model()->pushApiCall($model, $typeAction);
										if ($data->status != 1)
										{
											$desc = "Booking canceled by gozo team but updation failed from GO-MMT, please contact with GO-MMT team";
											ServiceCallQueue::mmtSupportCBR($bkgId, $desc);
										}
									}
								}
							}
						}
						else
						{
							if (($userInfo->userType == 4 || $userInfo->userType == 10) && ($model->bkg_agent_id > 0 && Agents::isApiKeyAvailable($model->bkg_agent_id)))
							{
								$typeAction = PartnerApiTracking::CANCEL;
								AgentMessages::model()->pushApiCall($model, $typeAction);
							}
						}
					}
					Logger::beginProfile("Push notification for Booking Id: " . $model->bkg_id);

//push won't sent for booking which marked as no show

					Logger::endProfile("Push notification for Booking Id: " . $model->bkg_id);

					Logger::beginProfile("Customer profile for Booking Id: " . $model->bkg_id);
					CustomerProfile::model()->setCustomerDetailsOnCancelBooking($model->bkg_id);
					Logger::endProfile("Customer profile for Booking Id: " . $model->bkg_id);
					if (in_array($prvStatus, [3, 5]))
					{
						Logger::beginProfile("Vendor profile for Booking Id: " . $model->bkg_id);
						$vendorId = $model->bkgBcb->bcb_vendor_id;
						VendorProfile::model()->setVendorDetailsOnCancelBooking($vendorId, $bkgId);
						Logger::endProfile("Vendor profile for Booking Id: " . $model->bkg_id);
					}

//new cancel logic

					$bookingId	 = $model->bkg_booking_id;
					$msgCom		 = new smsWrapper();
					if ($status == Booking::STATUS_CANCELLED && $model->bkgInvoice->bkg_total_amount > 0)
					{
						Logger::beginProfile("Inform customer cancel Booking Id: " . $model->bkg_id);
						$CustNumbernew = $model->bkgUserInfo->bkg_contact_no;
						if ($CustNumbernew != '' && $reasonId != 28)
						{
							$CustNumbercode = $model->bkgUserInfo->bkg_country_code;
							//$msgCom->informCustomerCancelled($CustNumbercode, $CustNumbernew, $bookingId, $reasonId);
							notificationWrapper::customerBookingCancelled($model->bkg_id, true, false, $CustNumbercode, $CustNumbernew, $reasonId);
						}
						if ($vendorId > 0)
						{
							$vendorModel		 = Vendors::model()->resetScope()->findByPk($vendorId);
							$vendorNumbercode	 = '91';
							$vendorNumbernew	 = ContactPhone::getContactPhoneById($vendorModel->vnd_contact_id);
							// WhatsappLog
							$response			 = WhatsappLog::tripCancelToVendorDriver($model->bkg_id, UserInfo::TYPE_VENDOR);
							if ($response['status'] == 3)
							{
								$msgCom->informVendorCustomerCancelledNew($vendorNumbercode, $vendorNumbernew, $bookingId, $reasonId);
							}
						}
						$calWH = Filter::CalcWorkingHour(new CDbExpression('NOW()'), $model->bkg_pickup_date);
						if ($model->bkgBcb->bcb_driver_id != '' && $calWH <= 1)
						{
							$driverNumbercode = '91';

							// WhatsappLog
							$response = WhatsappLog::tripCancelToVendorDriver($model->bkg_id, UserInfo::TYPE_DRIVER);
							if ($response['status'] == 3)
							{
								$msgCom->informDriverCustomerCancelledNew($driverNumbercode, $model->bkgBcb->bcb_driver_id, $bookingId, $model->bkg_id, $status);
							}
						}

						Logger::endProfile("Inform customer cancel Booking Id: " . $model->bkg_id);
					}

					/*					 * *** S2S for kayak cancel booking ************************ */
					if ($status == Booking::STATUS_CANCELLED && $model->bkg_agent_id == Config::get('Kayak.partner.id'))
					{
						/** @var ChannelPartner $pushDataToKayak */
						$typeAction		 = PartnerApiTracking::CANCEL;
						$pushDataToKayak = ChannelPartner::pushDataTokayak($model, $typeAction);
					}
					/*
					 * Ref Mantis 4497. Its paused as discussed with Abhishek ji.  He will discuss with Alok sir
					 */
//					if ($model->bkgPref->bkg_is_gozonow == 1 && $model->bkgInvoice->bkg_advance_amount > 0)
//					{
//						BookingSub::setAccountingFlagForZeroCancellationPenalty($model->bkg_id, $userInfo);
//					}
					Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
					return $model->bkg_id;
				}
				else
				{
					throw new Exception("Error : " . json_encode($model->getErrors()));
				}
			}
			catch (Exception $e)
			{
				Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
				DBUtil::rollbackTransaction($transaction);
				$eventId = BookingLog::REMARKS_ADDED;
				BookingLog::model()->createLog($model->bkg_id, 'Error in booking cancelling:' . $e->getMessage(), $userInfo, $eventId);
				Logger::create('Error in booking cancelling:' . $e->getMessage(), CLogger::LEVEL_ERROR);
				Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
				return false;
			}
			Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
			return false;
		}
	}

//obsolute
	public function chargePartnerOnCancellation($chargePartnerCredit, $date, $userInfo)
	{
		$this->refresh();
		if ($chargePartnerCredit > 0 && $this->bkg_agent_id > 0 && ($this->bkg_status != 1 && $this->bkg_status != 10))
		{
			$remarks = "Partner credits additional Rs.$chargePartnerCredit charged on booking cancelled";
			$success = AccountTransactions::model()->addCoinsToPartner($date, $this->bkg_agent_id, $this->bkg_id, $chargePartnerCredit, $remarks);
			AccountTransactions::model()->addCoinsToBooking($date, $this->bkg_agent_id, $this->bkg_id, $chargePartnerCredit, $remarks);
			if ($success)
			{
				$params['blg_ref_id']					 = $this->bkg_agent_id;
				$remarks								 = "Partner credits additional Rs.$chargePartnerCredit charged on booking cancelled.";
				BookingLog::model()->createLog($this->bkg_id, $remarks, $userInfo, BookingLog::BOOKING_CANCELLED, '', $params);
				$totCredit								 = AccountTransDetails::getTotalPartnerCredit($this->bkg_id);
				$this->bkgInvoice->bkg_corporate_credit	 = $totCredit;
				$this->bkgInvoice->save();
			}
		}
	}

	/**
	 *
	 * @param int $chargePartnerCredit
	 * @param string $date
	 * @param UserInfo $userInfo
	 */
	public function chargePartnerWalletOnCancellation($chargePartnerCredit, $date, $userInfo)
	{
		$transaction = DBUtil::beginTransaction();
		try
		{
			$this->refresh();
			if ($chargePartnerCredit > 0 && $this->bkg_agent_id > 0 && ($this->bkg_status != 1 && $this->bkg_status != 10))
			{
				$remarks	 = "Partner wallet additional Rs.$chargePartnerCredit charged on booking cancelled";
//		$actModel	 = AccountTransactions::model()->addWalletToPartner($date, $this->bkg_agent_id, $this->bkg_id, $chargePartnerCredit, $remarks);
//		if (!$actModel)
//		{
//		    throw new Exception("Failed to add Partner wallet additional charged on booking cancelle", ReturnSet::ERROR_FAILED);
//		}
				$actModel	 = AccountTransactions::model()->addWalletToBooking($date, $this->bkg_agent_id, $this->bkg_id, $chargePartnerCredit, $remarks);
				if (!$actModel)
				{
					throw new Exception("Failed to add Partner wallet additional charged on booking cancelle", ReturnSet::ERROR_FAILED);
				}

				if ($actModel->hasErrors())
				{
					throw new Exception(json_encode($actModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}
//Booking log
				$params['blg_ref_id']					 = $this->bkg_agent_id;
				$remarks								 = "Partner wallet additional Rs.$chargePartnerCredit charged on booking cancelled.";
				BookingLog::model()->createLog($this->bkg_id, $remarks, $userInfo, BookingLog::BOOKING_CANCELLED, '', $params);
				$totCredit								 = AccountTransactions::getTotalPartnerWallet($this->bkg_id);
				$this->bkgInvoice->bkg_corporate_credit	 = $totCredit;
				$this->bkgInvoice->save();
				DBUtil::commitTransaction($transaction);
			}
		}
		catch (Exception $e)
		{
			DBUtil::rollbackTransaction($transaction);
			throw $e;
		}
	}

	public function issueGozoCoins($coins, UserInfo $userInfo)
	{
		$remarks	 = "Refund against cancellation of Booking Id: " . $this->bkg_booking_id;
		$userCredits = new UserCredits();
		$userCredits->add($this->bkgUserInfo->bkg_user_id, $coins, $remarks, $this->bkg_id);
		BookingLog::model()->createLog($this->bkg_id, "Gozo coins of Rs.$coins added against cancellation.", $userInfo, BookingLog::BOOKING_CANCELLED);
	}

	public function canVendor($bcbid, $reason, UserInfo $userInfo = null, $bkgids = [], $reasonId = 9)
	{
		if ($bcbid != '' && $bcbid != 0 && $reason != '')
		{
			$succResult	 = ["success" => false];
			$eventBy	 = $this->event_by;
			$cabmodel	 = BookingCab::model()->findByPk($bcbid);

			$vendorId	 = $cabmodel->bcb_vendor_id;
			$bcount		 = count($cabmodel->bookings);
			$first_city	 = Cities::getName($cabmodel->bookings[0]->bkg_from_city_id);
			$pickup_date = $cabmodel->bookings[0]->bkg_pickup_date;
			$vendor_id	 = $cabmodel->bcb_vendor_id;
			$vendor_amt	 = $cabmodel->bcb_vendor_amount;

			if ($userInfo->userType != UserInfo::TYPE_VENDOR)
			{
				$cabmodel->scenario = 'unassignvendor';
				if (!$cabmodel->validate())
				{
					return ['success' => false, 'errors' => $cabmodel->getErrors()];
				}
			}

			$last_city = Cities::getName($cabmodel->bookings[$bcount - 1]->bkg_to_city_id);

			/* @var $cabmodel BookingCab */
			$vendorNumbernew = ContactPhone::getContactPhoneById($cabmodel->bcbVendor->vndContact->ctt_id);
			$vendorName		 = $cabmodel->bcbVendor->vnd_name;
			$cabType1		 = '';
			if ($cabmodel->bcb_cab_id != '')
			{
				$cabType1 = $cabmodel->bcbCab->vhcType->getVehicleModel();
			}
			if ($cabmodel->bcb_cab_id != '')
			{
				$vehicleModel = $cabmodel->bcbCab->vhcType->vht_model;
				if ($cabmodel->bcbCab->vhc_type_id === Config::get('vehicle.genric.model.id'))
				{
					$vehicleModel = OperatorVehicle::getCabModelName($cabmodel->bcb_vendor_id, $cabmodel->bcb_cab_id);
				}

				$cab = $vehicleModel . " - " . $cabmodel->bcbCab->vhc_number;
			}
			if ($cabmodel->bcb_driver_id != '')
			{
				$driver = $cabmodel->bcbDriver->drv_name . " - " . $cabmodel->bcbDriver->drv_phone;
			}
			$models = $cabmodel->bookings;
			if ($cabmodel)
			{
				$bcb_row	 = BookingCab::model()->getBkgIdByTripId($bcbid);
				$bookingIDs	 = $bcb_row['bkg_ids'];
//Logger::create('$bookingIDsSSS ===>' . $bookingIDs, CLogger::LEVEL_TRACE);
				$reasonArray = [2, 3, 5, 7, 9, 12, 13, 14, 15, 16, 17]; // added  new reasonId =17

				if ($cabmodel->bcb_trip_type != 1)
				{
					$reasonArr	 = [10];
					$reasonArray = array_merge($reasonArray, $reasonArr);
				}
//Logger::create('$reasonId ===>' . $reasonId, CLogger::LEVEL_TRACE);
				$total_booking_amount = 0;
				foreach ($models as $key => $model)
				{
					$total_booking_amount += $model->bkgInvoice->bkg_total_amount;
				}
				$assignMode = $cabmodel->bcb_assign_mode;

				if ($vendorId != Config::get('hornok.operator.id'))
				{
					$statModel	 = VendorStats::model()->getbyVendorId($vendorId);
					$dependency	 = $statModel->vrs_dependency;
					$dependency	 = (($dependency == '' || $dependency == null) ? 0 : $dependency);
					if (in_array($reasonId, $reasonArray))
					{
						$modelAccountTransStatus = BookingCab::model()->penaltyToVendor($bcbid, $vendorId, $bookingIDs, $vendor_amt, $total_booking_amount);
						if (!$modelAccountTransStatus)
						{
							throw new Exception("Failed to penalize vendor (Accounting)");
						}
					}
				}

				$cabmodel->bcb_bkg_id1	 = $bookingIDs;
				$suc					 = $cabmodel->update();
				Logger::create('booking model===>canVendor===> .$bcbid= ' . $bcbid
						. ' ::$suc= ' . $cabmodel->bcb_bkg_id1, CLogger::LEVEL_TRACE);

				$eventid	 = BookingLog::VENDOR_UNASSIGNED;
				$transaction = DBUtil::beginTransaction();
				$matchStart	 = 0;
				foreach ($models as $key => $model)
				{
					try
					{
						if (!in_array($model->bkg_status, [3, 5, 6, 7]))
						{
							continue;
						}
						$oldModel = clone $model;

						$newCabModel = new BookingCab('matchtrip');

						$scvVctId = SvcClassVhcCat::model()->getCatIdBySvcid($model->bkg_vehicle_type_id);
						if (($model->bkg_booking_type == 1 && $scvVctId != VehicleCategory::SHARED_SEDAN_ECONOMIC) || $model->bkg_booking_type != 1)
						{
							$newCabModel->bcb_bkg_id1 = $model->bkg_id;
						}
						elseif ($model->bkg_booking_type == 1 && $scvVctId == VehicleCategory::SHARED_SEDAN_ECONOMIC && $key == 0)
						{
							$newCabModel->bcb_bkg_id1 = $bookingIDs;
						}

						$newCabModel->bcb_trip_status	 = BookingCab::STATUS_VENDOR_UNASSIGNED;
						$maxAllowedVA					 = $cabmodel->bcb_max_allowable_vendor_amount;

						if ($maxAllowedVA <= 0 || $maxAllowedVA == '')
						{
							$maxAllowedVA = $cabmodel->bcb_vendor_amount;
						}

						if ($model->bkgBcb->bcb_trip_type == 1)
						{
							$newCabModel->bcb_vendor_amount = min([$cabmodel->bcb_vendor_amount, $maxAllowedVA]);
						}
						else
						{
							$bcbAmount						 = $cabmodel->bcb_vendor_amount;
							$bkgAmount						 = $model->bkgInvoice->bkg_vendor_amount;
							$newCabModel->bcb_vendor_amount	 = min([max(array($bcbAmount, $bkgAmount)), $maxAllowedVA]);
						}
#$newCabModel->bcb_vendor_amount	 = $model->bkgInvoice->bkg_vendor_amount;
						$scvVctId = SvcClassVhcCat::model()->getCatIdBySvcid($model->bkg_vehicle_type_id);
						if (($model->bkg_booking_type == 1 && $scvVctId != VehicleCategory::SHARED_SEDAN_ECONOMIC) || $model->bkg_booking_type != 1)
						{
							$newCabModel->bcb_bkg_id1 = $model->bkg_id;
						}
						elseif ($model->bkg_booking_type == 1 && $scvVctId == VehicleCategory::SHARED_SEDAN_ECONOMIC && $key == 0)
						{
							$newCabModel->bcb_bkg_id1 = $bookingIDs;
						}
						$newCabModel->bcb_trip_status = BookingCab::STATUS_VENDOR_UNASSIGNED;

// condition added for match trip start
						if ($model->bkgBcb->bcb_trip_type == 1)
						{
							$newCabModel->bcb_trip_type	 = 1;
							$newCabModel->bcb_bkg_id1	 = $bookingIDs;
							$booking_arr				 = explode(",", $bookingIDs);
							if ($matchStart > 0)
							{
								$CurrentBcbId		 = Booking::checkCurrentTripId($booking_arr[0]);
								$newCabModel->bcb_id = $CurrentBcbId;
								goto skip;
							}
							$matchStart = $matchStart + 1;
						}
// condition added for match trip end

						$newCabModel->save();
						skip:
						BookingRoute::model()->setBookingCabStartEndTime($newCabModel->bcb_id, $newCabModel->bcb_bkg_id1);

						$stage = '';
						if ($userInfo->userType == UserInfo::TYPE_VENDOR)
						{
							$step					 = BookingCab::model()->getVendorUnassignStep($bcbid);
							$stage					 = " in self-unassign-stage$step ";
							$updateLastUnassignDate	 = VendorStats::updateLastUnassignDate($vendorId, $step, $userInfo->userType);
						}

						if ($userInfo->userType == UserInfo::TYPE_SYSTEM || $userInfo->userType == UserInfo::TYPE_ADMIN)
						{
							$updateLastUnassignDate = VendorStats::updateLastUnassignDate($vendorId, $step, $userInfo->userType);
						}

						$model->bkg_bcb_id									 = $newCabModel->bcb_id;
						$model->bkg_cancel_delete_reason					 = ($model->bkg_cancel_delete_reason == '') ? $reason : $model->bkg_cancel_delete_reason . '; ' . $reason;
						$desc												 = "Vendor unassigned (" . $vendorName . ")" . $stage . "| Trip Vendor Amount:₹" . $vendor_amt . "[Reason ID:" . $reasonId . " : TXT :" . $reason . "]";
						$refid												 = $model->bkg_return_id;
						$model->bkg_status									 = Booking::STATUS_VERIFY;
						$model->bkgTrail->bkg_vendor_request_cnt			 = 0;
						$model->bkgTrail->btr_cab_assigned_sent_email_cnt	 = 0;
						$model->bkgTrail->bkg_cancel_user_type				 = $userInfo->userType;
						$model->bkgTrail->bkg_cancel_user_id				 = $userInfo->userId;
						$model->scenario									 = 'cancel_delete';
						if ($model->validate())
						{
							$model->bkg_return_id = 0;

							$routeModels = $model->bookingRoutes;
							foreach ($routeModels as $routeModel)
							{
								$routeModel->scenario	 = 'unassignvendor';
								$routeModel->brt_bcb_id	 = $newCabModel->bcb_id;
//$routeModel->validate();
								$routeModel->save();
							}
							$model->bkgTrail->btr_vendor_last_unassigned = new CDbExpression('NOW()');
							if ($model->save() && $model->bkgTrail->save())
							{
								$succResult["success"] = true;

//mark manual assigment =1 if working min <60
								$workingMins = DBUtil::CalcWorkingMinutes(DBUtil::getCurrentTime(), $model->bkg_pickup_date);
								if ($workingMins < 60)
								{
									$model->bkgPref->bkg_manual_assignment = 1;
									if ($model->bkgPref->save())
									{
										$eventId = BookingLog::REMARKS_ADDED;
										BookingLog::model()->createLog($model->bkg_id, 'Manual assignment set due to Vendor/Admin unassignment', $userInfo, $eventId);
									}
								}
							}
// Logger::create('booking model===>$succResult===> .$bcbid= ' . $bcbid	. ' ::$suc= ' . json_encode($succResult["success"]), CLogger::LEVEL_TRACE);
							$params = array('blg_vendor_id' => $vendorId);
							BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, $eventid, $oldModel, $params);
							if ($cabmodel->bcb_driver_id != '')
							{
								BookingLog::model()->createLog($model->bkg_id, 'Driver ( ' . $driver . ' )', $userInfo, BookingLog::DRIVER_UNASSIGNED, $oldModel, $params);
								$userInfo		 = UserInfo::getInstance();
								$type			 = $this->userArr[$userInfo->userType];
								$message		 = "Booking " . $model->bkg_booking_id . " Updated by $type";
								$image			 = null;
								$bkgID			 = $model->bkg_booking_id;
								$notificationId	 = substr(round(microtime(true) * 1000), -5);
								if ($vendorId != Config::get('hornok.operator.id'))
								{
									$payLoadData = ['EventCode' => Booking::CODE_VENDOR_CANCEL_NOTIFICATION];
									$success	 = AppTokens::model()->notifyDriver($cabmodel->bcb_driver_id, $payLoadData, $notificationId, $message, $image, "Vendor Cancelled", $bkgID);
								}
							}

							if ($cabmodel->bcb_cab_id != '')
							{
								BookingLog::model()->createLog($model->bkg_id, 'Cab ( ' . $cab . ' )', $userInfo, BookingLog::CAB_UNASSIGNED, $oldModel, $params);
							}
							BookingCab::resetBidStartTime($newCabModel->bcb_id);

							if ($vendorId != Config::get('hornok.operator.id'))
							{
								if ($succResult["success"] && $userInfo->userType != UserInfo::TYPE_VENDOR)
								{
									if ($vendorId != '' && $eventBy != 2)
									{
										$msgCom = new smsWrapper();
										$msgCom->informVendorCustomerCancelled('91', $vendorNumbernew, $model->bkg_booking_id, $cabType, $model->bkgFromCity->cty_name, $model->bkgToCity->cty_name, $date, $time);
									}
								}
							}
//							if ($succResult["success"] && $userInfo->userType == UserInfo::TYPE_VENDOR)
//							{
//
//								$vendorAssignDt = $model->bkgTrail->bkg_assigned_at;
//								$pickupDt       = $model->bkg_pickup_date;
//								$status	        = VendorStats::model()->updateDeniedDuty($vendor_id, $reasonId,$vendorAssignDt,$pickupDt);
//
//							}

							if ($refid != '' && $refid != 0)
							{
								$refModel				 = Booking::model()->findByPk($refid);
								$refModel->bkg_return_id = 0;
								$refModel->save();
							}

//check other vendor those are bidded priviously
							$previousCabId = BookingCab::checkPrvCabid($bookingIDs, $vendorId);

							if ($previousCabId > 0)
							{
//modify booking vendor request data if vendor bid already there
//$modifyVendorRequest = BookingVendorRequest::modifyAssignStatus($previousCabId,$vendorId);
//copy bid of those old vendor
								$copyBid = BookingVendorRequest::copyPrvBid($previousCabId, $newCabModel->bcb_id, $vendorId);
							}
						}
						DBUtil::commitTransaction($transaction);
					}
					catch (Exception $e)
					{
						DBUtil::rollbackTransaction($transaction);
						$eventId = BookingLog::REMARKS_ADDED;
						BookingLog::model()->createLog($model->bkg_id, 'Error in vendor cancelling:' . $e->getMessage(), $userInfo, $eventId);
						Logger::pushTraceLogs();
						Logger::Error('Error in vendor cancelling:' . $e->getMessage());
						return false;
					}
					if ($model->bkg_agent_id != null && $model->bkgPref->bpr_vnd_recmnd == 1 && $model->bkgInvoice->bkg_advance_amount == 0)
					{
						$userInfo->userType	 = UserInfo::TYPE_SYSTEM;
						$text				 = "Booking unassigned by Cab Operator";
						$bkgid				 = Booking::model()->canBooking($model->bkg_id, $text, 17, $userInfo);
						$desc				 = "Booking cancelled by system.";
						$eventid			 = BookingLog::BOOKING_CANCELLED;
						BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, $eventid);

						if ($vendorId != Config::get('hornok.operator.id'))
						{
							$emailObj = new emailWrapper();
							$emailObj->bookingCancellationMail($model->bkg_id);
						}
					}
				}

				if ($vendorId != Config::get('hornok.operator.id'))
				{
					if ($succResult["success"])
					{
						if ($vendorId != '' && $reasonId == 36 && $eventBy != 2)
						{
							$payLoadData = ['tripId' => $bcbid, 'EventCode' => Booking::CODE_VENDOR_DENY];
							$success	 = AppTokens::model()->notifyVendor($vendorId, $payLoadData, "Booking is auto unassigned as cab/driver details is not allocated on time. To Reassign the booking contact Gozo team", "Booking Unassigned");
						}
						if ($vendorId != '' && $eventBy != 2 && $reasonId != 36)
						{
							$payLoadData = ['tripId' => $bcbid, 'EventCode' => Booking::CODE_VENDOR_DENY];
							$success	 = AppTokens::model()->notifyVendor($vendorId, $payLoadData, "Trip Id: " . $bcbid . ", " . $first_city . "-" . $last_city . ", " . date("d M Y h:i A", strtotime($pickup_date)), $bcbid . " has been cancelled", "Booking Unassigned");
						}
					}
				}
			}
			if ($userInfo->userType == UserInfo::TYPE_VENDOR)
			{

				return ['success' => $succResult, 'errors' => $model->getErrors()];
			}
			else
			{
				return $succResult;
			}
		}
		if ($userInfo->userType == UserInfo::TYPE_VENDOR)
		{
			return ['success' => false];
		}
		else
		{
			return false;
		}
	}

	public static function lastminCancelFlagUpdate($pickupDate, $bcbid, $vendorId)
	{
		$cancelTime		 = date('Y-m-d h:i:s');
		$pickupTimeDiff	 = round(abs($pickupDate - $cancelTime) / 60, 2) . " minute";
		$assignTime		 = BookingVendorRequest::getAssignDate($bcbid, $vendorId);
		$assignTimeDiff	 = round(abs($cancelTime - $assignTime) / 60, 2) . " minute";

		if ($pickupTimeDiff < 90 || $assignTimeDiff > 15)
		{
			$to_time	 = strtotime("2008-12-13 10:42:00");
			$from_time	 = strtotime("2008-12-13 10:21:00");
			echo round(abs($to_time - $from_time) / 60, 2) . " minute";
		}
	}

	/**
	 * function checkCurrentTripId show current trip id against particular bookingId
	 * @param type $bookingId
	 * @return type tripId
	 */
	public static function checkCurrentTripId($bookingId)
	{
		$sql = "SELECT bkg_bcb_id FROM booking WHERE bkg_id = $bookingId ";
		return DBUtil::queryScalar($sql);
	}

	public static function checkCurrentBookingId($tripId)
	{
		$sql = "SELECT bkg_id FROM booking WHERE bkg_bcb_id = $tripId ";
		return DBUtil::queryScalar($sql);
	}

	public function markComplete($bkid, $view = 0, $obuModel = '', UserInfo $userInfo = null)
	{
		if ($userInfo == null)
		{
			$userInfo = UserInfo::getInstance();
		}
		if ($bkid != '' && $bkid != 0)
		{
			$model = Booking::model()->findByPk($bkid);
			if ($model->bkg_status == Booking::STATUS_PROCESSED)
			{
				$oldModel	 = clone $model;
				$cabmodel	 = $model->getBookingCabModel();
				if ($cabmodel->bcb_vendor_id != '' && $cabmodel->bcb_driver_id != '' && $cabmodel->bcb_cab_id != '')
				{
					$transaction = DBUtil::beginTransaction();
					try
					{
						$status				 = Booking::STATUS_COMPLETED;
						$model->bkg_status	 = $status;
						$model->scenario	 = 'updatestatus';
						if ($model->validate())
						{
							$model->save();
							Logger::trace("Booking ID :" . $model->bkg_id . "status change");
							$model->bkgTrail->btr_mark_complete_date = new CDbExpression('NOW()');
							$model->bkgTrail->bkg_followup_active	 = 0;
							if ($model->bkgTrail->bkg_escalation_status == 1 && $model->bkgTrail->btr_escalation_level != 3)
							{
								$model->bkgTrail->btr_escalation_level	 = 3;
								$escalationLbl							 = $model->bkgTrail->escalation[$model->bkgTrail->btr_escalation_level]['color'];
								$escalationDesc							 = "Level : $escalationLbl |";
								$model->bkgTrail->updateEscalation("Complete Booking", $userInfo, $escalationDesc);

								Logger::trace("Booking ID :" . $model->bkg_id . "escalation updated");
							}
							if ($model->bkgTrail->save())
							{
								$desc = 'Follow up flag complete @ ' . date('d/m/Y', strtotime($model->bkgTrail->bkg_followup_date)) . ' at ' . date('h:i A', strtotime($model->bkgTrail->bkg_followup_date)) . '.';
								BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, BookingLog::FOLLOWUP_COMPLETE, false, false);
							}
							Logger::trace("Booking ID :" . $model->bkg_id . " follow up completed");
							VendorStats::model()->updateVerndorLastBkgComp($model->bkgBcb->bcb_vendor_id);

							/** @var Booking $bkgid */
							Booking::sendInvoice($model->bkg_id);

#$model		 = Booking::model()->findByPk($bkid);
#$cabmodel	 = $model->getBookingCabModel();

							$model->refresh();
							$cabmodel->refresh();

							$cabmodel->bcb_trip_status = BookingCab::STATUS_TRIP_PARTIALLY_COMPLETED;

							$cabmodel->setScenario('updatetripstatus');
							$cabmodel->save();
							$bkgid	 = $bkid;
							$desc	 = "Booking marked as completed.";

							$eventid = BookingLog::BOOKING_MARKED_COMPLETED;

							BookingLog::model()->createLog($bkgid, $desc, $userInfo, $eventid, $oldModel);

							if ($model->bkgTrack->bkg_ride_complete == 0)
							{
								notificationWrapper::customerNotifyTripCompleted($model->bkg_id);
							}
							/* @var $model Booking  */
//update accounts details
							$bkgamt								 = $model->bkgInvoice->bkg_total_amount;
							$vndamt								 = $cabmodel->bcb_vendor_amount;
							$gzamount1							 = $model->bkgInvoice->bkg_gozo_amount;
							$gzamount							 = ($gzamount1 == '') ? $bkgamt - $vndamt : $gzamount1;
							$model->bkgInvoice->bkg_gozo_amount	 = round($gzamount);
							$model->scenario					 = 'vendor_collected_update';
							$success1							 = false;
							if ($model->bkgTrack->bkg_ride_complete != 1 && $model->bkgPref->bkg_is_fbg_type != 1)
							{
								$model->bkgInvoice->updateInvoice($model->bkgInvoice->bkg_vendor_actual_collected);
							}
							Logger::trace("Booking ID :" . $model->bkg_id . " Invoice fields updated");
							if ($model->validate())
							{
								$success	 = $model->save();
								$success1	 = true;
							}

							if ($model->bkgInvoice->bkg_promo1_id > 0)
							{
								$sql = "SELECT COUNT(1) FROM promos WHERE prm_applicable_nexttrip=1 AND prm_id=" . $model->bkgInvoice->bkg_promo1_id;
								$res = DBUtil::command($sql)->queryScalar();
								if ($res > 0)
								{
									$pruId = PromoUsers::model()->checkPromoAndUser($model->bkgInvoice->bkg_promo1_id, $model->bkgUserInfo->bkg_user_id);
									if ($pruId == 0)
									{
										PromoUsers::addUser($model->bkgInvoice->bkg_promo1_id, $model->bkgUserInfo->bkg_user_id, 0, 1, date('Y-m-d') . " 00:00:00", date('Y-m-d', strtotime('+1 year')) . " 00:00:00", 1, 1);
									}
									else
									{
										$promoUserModel						 = PromoUsers::model()->findByPk($pruId);
										$promoUserModel->pru_next_trip_apply = 0;
										$promoUserModel->save();
									}
								}
							}
							Logger::trace("Booking ID :" . $model->bkg_id . " Promo applied");
							$customerProfile					 = new CustomerProfile();
							$customerProfile->csp_user_id		 = $model->bkgUserInfo->bkg_user_id;
							$customerProfile->csp_booking_id	 = $model->bkg_id;
							$customerProfile->csp_attribute_type = CustomerProfile::TYPE_COMPLETIONS;
							$customerProfile->csp_value_str		 = $desc;
							$customerProfile->csp_value_int		 = $model->bkg_bcb_id;
							$customerProfile->save();
							$success							 = true;
							Logger::trace("Booking ID :" . $model->bkg_id . " Customer profile updated");
							if ($cabmodel->bcb_vendor_id != '' && ($cabmodel->getLowestBookingStatus() == 7 || $cabmodel->getLowestBookingStatus() == 6) && $cabmodel->bcb_pending_status == 0)
							{
								$bcount = count($cabmodel->bookings);

								$cabmodel->bcb_trip_status	 = BookingCab::STATUS_TRIP_COMPLETED;
								$cabmodel->setScenario('updatetripstatus');
								$cabmodel->save();
								$date						 = new DateTime($model->bkg_pickup_date);
								$duration					 = $model->bkg_trip_duration | 120;
								$date->add(new DateInterval('PT' . $duration . 'M'));

								$first_city	 = Cities::getName($cabmodel->bookings[0]->bkg_from_city_id);
								$pickup_date = date("d M Y h:i A", strtotime($cabmodel->bookings[0]->bkg_pickup_date));
								$last_city	 = Cities::getName($cabmodel->bookings[$bcount - 1]->bkg_to_city_id);

								$approved = $cabmodel->isCabDriverApproved();
								if ($cabmodel->bcb_lock_vendor_payment != 1)
								{
									if ($approved)
									{
										$cabmodel->releaseVendorPayment();
									}
									else
									{
										$cabmodel->lockVendorPayment();
									}
								}

								if ($cabmodel->bcb_trip_status == 6)
								{

									BookingScheduleEvent::add($model->bkg_id, BookingScheduleEvent::MARK_COMPLETE_PROCESS, "Booking Mark Complete");

									$findmatchBooking = Booking::model()->getMatchBookingIdbyTripId($cabmodel->bcb_id);
									foreach ($findmatchBooking as $valBookingID)
									{
										if (!$approved)
										{
											$drvdetails	 = Drivers::model()->getDriverInfo($cabmodel->bcb_driver_id);
											$cardetails	 = Vehicles::model()->getDetailListbyId($cabmodel->bcb_cab_id);
											$payLoadData = ['tripId' => $cabmodel->bcb_id, 'EventCode' => Booking::CODE_MISSING_PAPERWORK];
											$success	 = AppTokens::model()->notifyVendor($cabmodel->bcb_vendor_id, $payLoadData, "Please submit papers for the Car (" . $cardetails['vhc_number'] . ") and Driver (" . $drvdetails['drv_name'] . ") so we can release payment for booking ID " . $valBookingID['bkg_booking_id'], "Payment not released");
										}
									}
								}
								$cabmodel->bcbVendor->vendorStats->setLockedAmount();
							}

							if ($model->bkgUserInfo->bkg_user_id > 0 && $model->bkg_agent_id == null)
							{
								$obj				 = \Users::model();
								$succCredits		 = $obj->addCreditRefererOnFirstBooking($model->bkgUserInfo->bkg_user_id);
								$succesCreditsactive = UserCredits::model()->activateOnBookingCompleted($model->bkg_id, $model->bkgUserInfo->bkg_user_id);
							}
//Penalty to Vendor for OTP Not Verified
							$vendor_id = $cabmodel->bcb_vendor_id;

							$isOtpRequired		 = ($model->bkg_agent_id > 0) ? $model->bkgAgent->agt_otp_required : $model->bkgPref->bkg_trip_otp_required;
							$isBookingVerified	 = $model->bkgTrack->bkg_is_trip_verified;
							$isArrivedPickup	 = $model->bkgTrack->bkg_arrived_for_pickup;
							$isRideStart		 = $model->bkgTrack->bkg_ride_start;
							$isRideCompleted	 = $model->bkgTrack->bkg_ride_complete;
							$isDrvAppRequired	 = $model->bkgPref->bkg_driver_app_required;
							if (in_array($model->bkgAgent->agt_id, [10158, 9291, 8841, 9001, 8482, 35108]))
							{
								goto skipForShuttle;
							}

							if ($isDrvAppRequired == 1 && $isRideStart != 1 && $model->bkg_booking_type != 7)
							{
								$penaltyType = PenaltyRules::PTYPE_RIDE_NOT_STARTED_BY_DRIVER;

// send notification to vendor.
								$notificationId		 = substr(round(microtime(true) * 1000), -5);
								$notificationMessage = $remarks;
								$notificationTitle	 = "Ride not started by driver";
								$payLoadData		 = ['EventCode' => BookingTrack::TRIP_START];
								if (!empty($vnd_id))
								{

									$notiSuccess = AppTokens::model()->notifyVendor($vnd_id, $payLoadData, $notificationMessage, $notificationTitle);
								}
							}
							skipForShuttle:

// Apply Driver App Penalty


							Booking::driverAppUsagePenalty($model->bkg_id);

							BookingTrail::updateProfitFlag($cabmodel->bcb_id);

							if ($vendor_id != "")
							{
								$showVendorSticky = VendorStats::updateStickyScore($vendor_id);
							}

							BookingInvoice::model()->processPromoCoins($model->bkg_id);

							if ($model->bkgUserInfo->bkg_user_id > 0 && $model->bkg_trip_distance > 0)
							{
								UserCategoryMaster::addCoinsOnComplete($model->bkg_id, $model->bkgUserInfo->bkg_user_id, $model->bkg_trip_distance);
							}
// add vendor coin if gozo now booking start here
							$isGozoNow	 = $model->bkgPref->bkg_is_gozonow;
//							if ($isGozoNow == 1)
//							{
//								$addVendorCoin = VendorCoins::earnCoin($cabmodel->bcb_vendor_id, VendorCoins::TYPE_GOZONOW, $model->bkg_id);
//							}
//add vendor coin if gozo now booking end here 
							ServiceCallQueue::closeTaggedBookingCBR($model->bkg_id);
							DBUtil::commitTransaction($transaction);
							$spiceId	 = Config::get('spicejet.partner.id');
							$quickRideId = Config::get('QuickRide.partner.id');
							$sugerboxId	 = Config::get('sugerbox.partner.id');
							$transferzId = Config::get('transferz.partner.id');

							if ($spiceId == $model->bkg_agent_id || $transferzId == $model->bkg_agent_id || $quickRideId == $model->bkg_agent_id || $sugerboxId == $model->bkg_agent_id)
							{
								$btlData	 = BookingTrackLog::model()->getByBkg($model->bkg_id, BookingTrack::TRIP_STOP);
								$TrackModel	 = BookingTrackLog::model()->findByPk($btlData[0]['btl_id']);
								if (!$TrackModel)
								{
									$typeAction = AgentApiTracking::TYPE_TRIP_END;
									AgentMessages::model()->pushApiCall($model, $typeAction);
								}
							}

							return true;
						}
						else
						{
							throw new Exception("Booking not validate.\n\t\t" . json_encode($model->getErrors()));
						}
					}
					catch (Exception $e)
					{
						Logger::exception($e);
						DBUtil::rollbackTransaction($transaction);
					}
				}
			}
			return false;
		}
	}

	public function markSettle($bkid)
	{
		if ($bkid != '' && $bkid != 0)
		{
			$model		 = Booking::model()->findByPk($bkid);
			$cabmodel	 = $model->getBookingCabModel();
			if ($cabmodel->bcb_vendor_id != '' && $cabmodel->bcb_driver_id != '' && $cabmodel->bcb_cab_id != '')
			{
				$status									 = Booking::STATUS_SETTELED;
				$model->bkg_status						 = $status;
				$model->bkgTrail->bkg_followup_active	 = 0;
				$model->scenario						 = 'updatestatus';
				if ($model->bkgTrail->save())
				{
					$desc = 'Follow up flag complete @ ' . date('d/m/Y', strtotime($model->bkgTrail->bkg_followup_date)) . ' at ' . date('h:i A', strtotime($model->bkgTrail->bkg_followup_date)) . '.';
					BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, BookingLog::FOLLOWUP_COMPLETE, false, false);
				}
				$success = ($model->save()) ? true : false;
				if ($success)
				{
					$bcount		 = count($cabmodel->bookings);
					$first_city	 = Cities::getName($cabmodel->bookings[0]->bkg_from_city_id);
					$pickup_date = date("d M Y h:i A", strtotime($cabmodel->bookings[0]->bkg_pickup_date));
					$last_city	 = Cities::getName($cabmodel->bookings[$bcount - 1]->bkg_to_city_id);
					$payLoadData = ['tripId' => $cabmodel->bcb_id, 'EventCode' => Booking::CODE_SETTLED];
					$success	 = AppTokens::model()->notifyVendor($cabmodel->bcb_vendor_id, $payLoadData, "Trip Id: " . $cabmodel->bcb_id . ", " . $first_city . "-" . $last_city . ", " . $pickup_date, $cabmodel->bcb_id . " has been marked as settled.");
				}
				return true;
			}
			return false;
		}
	}

	public function confirmVerification($vcode)
	{
		if (strtolower($this->bkgUserInfo->bkg_verification_code) == strtolower($vcode))
		{
			if ($this->validate())
			{
				$this->confirmBooking();
				$this->sendConfirmation();
				return true;
			}
		}
		else
		{
			return false;
		}
	}

	/**
	 *
	 * @param boolean $setReconfirm
	 * @param boolean $sentMessage
	 * @param integer $bkgId
	 * @return ReturnSet
	 * @throws Exception
	 */
	public function confirm($setReconfirm = true, $sentMessage = true, $bkgId = null, $userInfo = null, $isAllowed = false)
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		$returnSet = new ReturnSet();
		if ($userInfo == null)
		{
			$userInfo = UserInfo::getInstance();
		}
		$transaction = DBUtil::beginTransaction();
		try
		{
			if ($bkgId == null)
			{
				$model = $this;
			}
			else
			{
				$model		 = Booking::model()->findByPk($bkgId);
				$bcbModel	 = BookingCab::model()->findByPk($model->bkg_bcb_id);
			}

			if (in_array($model->bkg_status, [2, 3, 5, 6, 7]) && $model->bkgPref->bkg_is_gozonow != 1)
			{
				throw new Exception(json_encode("Booking already confirmed"), ReturnSet::ERROR_VALIDATION);
			}

			if (in_array($model->bkg_status, [9, 10]))
			{
				throw new Exception(json_encode("Booking expired/cancelled"), ReturnSet::ERROR_VALIDATION);
			}

			if (in_array($model->bkg_status, [1, 15]) == false && $model->bkgPref->bkg_is_gozonow != 1)
			{
				throw new Exception(json_encode("Booking not valid"), ReturnSet::ERROR_VALIDATION);
			}
			$bookingStatus			 = ($bcbModel->bcb_vendor_id == null) ? 2 : 3;
			$model->bkg_status		 = $bookingStatus;
			$msg					 = "Booking id " . $model->bkg_id . " status " . $model->bkg_status;
			Logger::info("Booking status" . $msg);
			$model->bkg_booking_id	 = Booking::model()->generateBookingid($model);
			Logger::info("genrated booking id" . $model->bkg_booking_id);
			$model->scenario		 = 'confirmBooking';
			if (!$model->save())
			{
				throw new Exception(json_encode($model->getErrors()), ReturnSet::ERROR_VALIDATION);
			}

			if ($model->bkg_agent_id == null || $model->bkg_agent_id == 1249)
			{
//addPromoCode for return;
				$rulePrm		 = Config::get('booking.promo.settings');
				$validDateArr	 = json_decode($rulePrm);
				if ($validDateArr->enabled == 1)
				{
					PromoUsers::addUser($validDateArr->promoId, $model->bkgUserInfo->bkg_user_id, 0, 1, date('Y-m-d H:i:s'), date('Y-m-d H:i:s', strtotime('+' . $validDateArr->promoValidity . ' hours')), 1, 1);
				}
			}
//======================

			Logger::trace("Promo Id : " . $model->bkgInvoice->bkg_promo1_id);

			if (($model->bkgInvoice->bkg_promo1_id != '' && $model->bkgInvoice->bkg_promo1_id != 0) || $model->bkgInvoice->bkg_temp_credits > 0)
			{
				$model->bkgInvoice->applyPromoCoins();
			}
			if ($model->bkgTrail->bkg_create_type == '')
			{
				$model->bkgTrail->updateCreateType($userInfo, $model->bkg_status, $model->lead_id);
			}
			$model->bkgTrail->updateConfirmType($userInfo);
			$model->bkgPf->updateDynamicCounter();

			if ($model->bkgInvoice->bkg_promo1_id == 197)
			{
				$model->bkgAddInfo->bkg_spl_req_other .= ', Provide complimentary 2 bottles of water and 1 pack of cookies in car';
				$model->bkgAddInfo->save();
			}

			Logger::info("before reconfirmation booking status" . $model->bkg_id);
			if ($setReconfirm)
			{
				Logger::info("setReconfirm flag check for bookingId" . $model->bkg_id);
				$model->setReconfirm();
			}
			Logger::info("after reconfirmation booking status" . $model->bkg_id);

			$bookingPhone	 = $model->bkgUserInfo->bkg_country_code . $model->bkgUserInfo->bkg_contact_no;
			$bookingEmail	 = $model->bkgUserInfo->bkg_user_email;
			$ustID			 = UsersSourceTracking::model()->getUstByContact($bookingPhone, $bookingEmail);
			// Logger::info('599==UST==ERROR:' .'==bookingPhone=='.$bookingPhone.'==bookingEmail=='.$bookingEmail.'==bookingID=='.$model->bkg_id."==SESSID==".Yii::app()->request->cookies['tkrid']->value."==UST==".$ustID."|||");
			if ($ustID && $model->bkg_agent_id != 18190)
			{
//                if($ustID == 599)
//                {
//                   Logger::info('==bookingPhone=='.$bookingPhone.'==bookingEmail=='.$bookingEmail.'==bookingID=='.$model->bkg_id."==SESSID==".Yii::app()->request->cookies['tkrid']->value."==UST==".$ustID."++|||++");
//                }
				$model->bkgPref->bpr_ust_id = $ustID;
				$model->bkgPref->save();
			}







			/*
			 * GozoDoubleBack type booking check
			 */
//			if ($model->bkgInvoice->bkg_advance_amount > 0 && $model->bkg_reconfirm_flag == 1)
//			{
//				if ($model->bkg_agent_id == null && Yii::app()->params['dboMaster'] == 1 && (strtotime(Yii::app()->params['dboLastDate']) >= strtotime($model->bkg_pickup_date)))
//				{
//					$model->bkgTrail->updateDBO($model->bkg_pickup_date);
//				}
//			}
			########## Skip double back for flash sale booking ##################################
			if ($model->bkg_cav_id != '' && $model->bkgPref->bpr_is_flash == 1)
			{
				goto skipdbo;
			}
			########## Skip double back for flash sale booking ##################################

			$dboSettings = Config::get('dbo.settings');
			$data		 = CJSON::decode($dboSettings);
			if ($model->bkg_pickup_date >= $data['dboStartDate'] && $model->bkg_pickup_date <= $data['dboEndDate'])
			{
				if ($model->bkgInvoice->bkg_advance_amount > 0 && $model->bkg_reconfirm_flag == 1 && $model->bkg_agent_id == null)
				{
					$model->bkgTrail->updateDBOStatus($model->bkg_pickup_date, $model->bkgInvoice->bkg_advance_amount, $model);
				}
			}

			skipdbo:
			if ($sentMessage)
			{
				$model->confirmMessages();
			}
			DBUtil::commitTransaction($transaction);

			$model->refresh();

			if ($model->bkgPref->bkg_is_gozonow == 1 && $model->bkg_status == 2)
			{
				BookingCab::assignPreferredVendorDriverCab($model->bkg_bcb_id);
			}



			BookingsDataCreated::model()->setData($model->bkg_id);
			BookingPriceFactor::model()->getQuotedFactor($model->bkg_id);
			$userId		 = $model->bkgUserInfo->bkg_user_id;
			$bkgId		 = $model->bkg_id;
			$brt		 = BookingRoute::model()->getRouteName($model->bkg_id);
			$value_int	 = $model->bkg_booking_type;
			CustomerProfile::model()->updateAttr($userId, $bkgId, CustomerProfile::TYPE_BOOKINGS, $brt, $value_int);
			CustomerProfile::model()->updateAttr($userId, $bkgId, CustomerProfile::TYPE_CITIES_LIST, $model->bkg_from_city_id, $value_int);
			Logger::info("before confirmBookingContact " . $model->bkg_id . " advance amount " . $model->bkgInvoice->bkg_advance_amount);
			if ($model->bkg_agent_id != 18190 && $model->bkg_agent_id != 1111 && $model->bkg_agent_id != 38236 && $model->bkg_agent_id != 35108)
			{
				self::confirmBookingContact($model->bkg_id);
				Logger::info("before confirmBookingContact " . $model->bkg_id . " advance Amount " . $model->bkgInvoice->bkg_advance_amount);
			}
			if ($isAllowed)
			{
// booking confirm request saved for Iread Start
				$IReadBooking	 = new Stub\common\IReadBooking();
				$IReadBooking	 = $IReadBooking->setConfirmData($model);
				$IReadresponse	 = Filter::removeNull($IReadBooking);
				IRead::setQuoteRequest($IReadresponse);
// booking confirm requst saved for Iread Ends
			}
			Logger::info("after confirmBookingContact " . $model->bkg_id . " advance amount " . $model->bkgInvoice->bkg_advance_amount);
			QuotesSituation::setConFirmData($bkgId);
			Logger::info("after QuotesSituation setConFirmData " . $model->bkg_id . " advance amount " . $model->bkgInvoice->bkg_advance_amount);
			QuotesZoneSituation::setConFirmData($bkgId);
			Logger::info("after QuotesZoneSituation setConFirmData " . $model->bkg_id . " advance amount " . $model->bkgInvoice->bkg_advance_amount);

			Logger::info("after final commit" . $model->bkg_id . " advance amount" . $model->bkgInvoice->bkg_advance_amount);
			$returnSet->setStatus(true);
			CabAvailabilities::processBooking($bkgId);
			Logger::info("after CabAvailabilities processBooking " . $model->bkg_id . " advance amount " . $model->bkgInvoice->bkg_advance_amount);

			/*			 * *** S2S for kayak confirm booking************************ */
			if ($model->bkg_agent_id == Config::get('Kayak.partner.id'))
			{
				/** @var ChannelPartner $pushDataToKayak */
				$typeAction		 = PartnerApiTracking::CONFIRM_BOOKING;
				$pushDataToKayak = ChannelPartner::pushDataTokayak($model, $typeAction);
			}

			BookingTrail::impBookingFollowup($model->bkg_id, true, false);
		}
		catch (Exception $ex)
		{
			DBUtil::rollbackTransaction($transaction);
			Logger::info("Error " . json_encode($ex->getMessage()));
			$returnSet = ReturnSet::setException($ex);
		}
		Logger::info("Last line Booking->confirm Bkgid=" . $model->bkg_id . "  :: Status:" . $model->bkg_status);
#Logger::profileMaxTime(500);
		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
		Logger::info("Executed Last line Booking->confirm Bkgid=" . $model->bkg_id . "  :: Status:" . $model->bkg_status);
		return $returnSet;
	}

	/**
	 *
	 * @param integer $bkgId
	 * @return boolean
	 */
	public function confirmMessages($bkgId = null)
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		$success = false;
		if ($bkgId == null)
		{
			$model = $this;
		}
		else
		{
			/* @var $model Booking */
			$model = Booking::model()->findByPk($bkgId);
		}
		$modelSchedule = BookingScheduleEvent::getScheduleBooking($model->bkg_id, BookingScheduleEvent::CONFIRM_MESSAGE);

		if ($model->bkg_status != 2)
		{
			if ($modelSchedule != null)
			{
				$statusName					 = $model->getActiveBookingStatus($model->bkg_status);
				$statusName					 .= ($model->bkg_reconfirm_flag == 1) ? " Reconfirmed" : '';
				$modelSchedule->bse_remarks	 = "Booking is in $statusName state";
			}
			goto skipNotify;
		}
		if ($model->bkg_agent_id > 0 && ($model->bkg_agent_id != 450 || $model->bkg_agent_id != 18190))
		{
			$emailObj = new emailWrapper();

			//sent email without  payment
			$emailObj->gotBookingemail($model->bkg_id, UserInfo::TYPE_SYSTEM, $model->bkg_agent_id);

			//sent email with  payment
			$emailObj->gotBookingAgentUser($model->bkg_id);

			// with price (should go to agent)
			$response = WhatsappLog::bookingDetailsToCustomer($model->bkg_id);

			$response = WhatsappLog::bookingPaymentReceivedByCustomer($model->bkg_id);

			if (!$response || $response['status'] == 3)
			{
				//without  payment
				$smsObj = new smsWrapper();
				$smsObj->gotBooking($model, UserInfo::TYPE_SYSTEM);
			}



			$success = true;
		}
		else
		{
			// sent email for booking confirmed
//			emailWrapper::confirmBooking($model->bkg_id);
//			$response	 = WhatsappLog::bookingDetailsToCustomer($model->bkg_id);
//			$response	 = WhatsappLog::bookingPaymentReceivedByCustomer($model->bkg_id);
//			if (!$response || $response['status'] == 3)
//			{
//				// sent sms for booking confirmed
//				smsWrapper::paymentSuccessMsgCustomer($model->bkg_id);
//				$success = true;
//			}

			self::notifyConfirmBookingB2C($model->bkg_id);

			self::notifyBookingPaymentReceivedByCustomerB2C($model->bkg_id);

			$success = true;
		}
		skipNotify:

		if ($modelSchedule != null)
		{
			$modelSchedule->bse_event_status = BookingScheduleEvent::STATUS_PROCESSED;
			$modelSchedule->bse_update_date	 = new CDbExpression('NOW()');
			$modelSchedule->save();
		}


		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
		return $success;
	}

	public function confirmBooking($logType = '', $status = true, $bkg_Id = '')
	{
		$userInfo	 = UserInfo::getInstance();
		$success	 = true;
		if ($bkg_Id == '')
		{
			$bkg_Id = $this->bkg_id;
		}

		$model = Booking::model()->findByPk($bkg_Id);

		$bcbModel = BookingCab::model()->findByPk($model->bkg_bcb_id);
		if (($model->bkg_status == 1 || $model->bkg_status == 15) && $status)
		{
			$prevStatus			 = $model->bkg_status;
			$confirmType		 = $model->bkgTrail->getConfirmType();
			$bookingStatus		 = ($bcbModel->bcb_vendor_id == null) ? 2 : 3;
			$model->bkg_status	 = $bookingStatus;

			$model->bkgTrail->bkg_confirm_type		 = $confirmType;
			$model->bkgTrail->bkg_confirm_user_type	 = $userInfo->userType;
			$model->bkgTrail->bkg_confirm_user_id	 = $userInfo->userType == UserInfo::TYPE_CONSUMER ? $model->bkgUserInfo->bkg_user_id : $userInfo->userId;
			$model->bkgTrail->bkg_confirm_datetime	 = new CDbExpression('NOW()');

			$model->bkg_booking_id = Booking::model()->generateBookingid($model);

			$model->scenario = 'updatestatus';
			$success		 = $model->save();
			$model->bkgTrail->save();
			$model->bkgPf->updateDynamicCounter();

//			if ($model->bkgInvoice->bkg_advance_amount > 0 && $model->bkg_reconfirm_flag == 1)
//			{
//				if (Yii::app()->params['dboMaster'] == 1 && (strtotime(Yii::app()->params['dboLastDate']) >= strtotime($model->bkg_pickup_date)))
//				{
//					$model->bkgTrail->updateDBO($model->bkg_pickup_date);
//				}
//			}
			/* Double back */

			########## Skip double back for flash sale booking ##################################
			if ($model->bkg_cav_id != '' && $model->bkgPref->bpr_is_flash == 1)
			{
				goto skipdbo;
			}
			########## Skip double back for flash sale booking ##################################
			$dboSettings = Config::get('dbo.settings');
			$data		 = CJSON::decode($dboSettings);
			if ($model->bkg_pickup_date >= $data['dboStartDate'] && $model->bkg_pickup_date <= $data['dboEndDate'])
			{
				if ($model->bkgInvoice->bkg_advance_amount > 0 && $model->bkg_reconfirm_flag == 1 && $model->bkg_agent_id == null)
				{
					$model->bkgTrail->updateDBOStatus($model->bkg_pickup_date, $model->bkgInvoice->bkg_advance_amount, $model);
				}
			}

			skipdbo:
		}

		BookingsDataCreated::model()->setData($this->bkg_id);

		$time		 = Filter::getExecutionTime();
		$profiling	 = isset($GLOBALS['enableProfiling']) ? $GLOBALS['enableProfiling'] : true;
		if ($success && $profiling)
		{
			if ($bkg_Id == '')
			{
				$brt = BookingRoute::model()->getRouteName($model->bkg_id);
			}
			else
			{
				$brt = BookingRoute::model()->getRouteName($bkg_Id);
			}
			$customerProfile					 = new CustomerProfile();
			$customerProfile->csp_user_id		 = $model->bkgUserInfo->bkg_user_id;
			$customerProfile->csp_booking_id	 = $model->bkg_id;
			$customerProfile->csp_attribute_type = CustomerProfile::TYPE_BOOKINGS;
			$customerProfile->csp_value_str		 = $brt;
			$customerProfile->csp_value_int		 = $model->bkg_booking_type;
			$customerProfile->save();

			$customerProfile					 = new CustomerProfile();
			$customerProfile->csp_user_id		 = $model->bkgUserInfo->bkg_user_id;
			$customerProfile->csp_booking_id	 = $model->bkg_id;
			$customerProfile->csp_attribute_type = CustomerProfile::TYPE_CITIES_LIST;
			$customerProfile->csp_value_str		 = $model->bkg_from_city_id;
			$customerProfile->csp_value_int		 = $model->bkg_booking_type;
			$customerProfile->save();
			$time								 = Filter::getExecutionTime();

			if ($bkg_Id == '')
			{
				BookingTemp::setInactiveRelatedLeads($model->bkg_id);
			}
			else
			{
				BookingTemp::setInactiveRelatedLeads($bkg_Id);
			}

			$time = Filter::getExecutionTime();
		}


//$this->sendConfirmation($logType);
//return true;
		return $success;
	}

	/**
	 *
	 * @param integer $bkgId
	 * @return boolean
	 */
	public function setReconfirm($bkgId = null)
	{
		$success = false;
		if ($bkgId == null)
		{
			$model = $this;
		}
		else
		{
			/* @var $model Booking */
			$model = Booking::model()->findByPk($bkgId);
		}

		if ($model->bkg_reconfirm_flag == 1)
		{
			$success = true;
			goto end;
		}
		$model->bkg_reconfirm_flag = 1;
//$model->bkgTrail->updateConfirmType(UserInfo::getInstance());
		if ($model->bkgTrail->bkg_confirm_datetime == null)
		{
			$model->bkgTrail->bkg_confirm_datetime = new CDbExpression('NOW()');
		}
		if ($model->save())
		{
			$model->bkgTrail->save();
			$type		 = UserInfo::getUserTypeDesc();
			$desc		 = "Reconfirmed by {$type}.";
			$userInfo	 = UserInfo::getInstance();
			BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, BookingLog::RECONFIM_BOOKING);
			$success	 = true;
// for auto closing the lead / quote from service call queue
			if ($model->bkg_agent_id == null)
			{
				ServiceCallQueue::autoCloseRelatedLeadQuote($model->bkg_id);
			}
			$modelSchedule = BookingScheduleEvent::getScheduleBooking($model->bkg_id, BookingScheduleEvent::CONFIRM_MESSAGE);
			if ($modelSchedule == null)
			{
				$modelSchedule					 = new BookingScheduleEvent();
				$modelSchedule->bse_event_status = BookingScheduleEvent::STATUS_PENDING;
				$modelSchedule->bse_bkg_id		 = $model->bkg_id;
				$modelSchedule->bse_event_id	 = BookingScheduleEvent::CONFIRM_MESSAGE;
				$modelSchedule->save();
			}
		}
		end:
		return $success;
	}

	public function sendConfirmation($logType = '')
	{
		if ($this->bkgUserInfo->bkg_contact_no != '' && $this->bkgPref->bkg_send_sms == 1)
		{
			$msgCom = new smsWrapper();
			$msgCom->gotBooking($this, $logType);
		}
		if ($this->bkgUserInfo->bkg_user_email != '' && $this->bkgPref->bkg_send_email == 1)
		{
			$emailCom = new emailWrapper();
			$emailCom->gotBookingemail($this->bkg_id, $logType);
		}
		if ($this->bkg_agent_id > 0)
		{
			$emailCom1 = new emailWrapper();
			$emailCom1->gotBookingAgentUser($this->bkg_id);
		}
	}

	public function convertUnverifiedToquote($status = true, $bkg_Id = '')
	{
		$userInfo	 = UserInfo::getInstance();
		$success	 = true;
		if ($bkg_Id == '')
		{
			$model = Booking::model()->findByPk($this->bkg_id);
		}
		else
		{
			$model = Booking::model()->findByPk($bkg_Id);
		}
		if (($model->bkg_status == 1) && $status)
		{
			$prevStatus			 = $model->bkg_status;
//$confirmType							 = $model->bkgTrail->getConfirmType($model->bkg_status, $model->bkgTrail->bkg_create_type);
			$model->bkg_status	 = 15;
//$model->bkgTrail->bkg_confirm_type		 = $confirmType;
//$model->bkgTrail->bkg_confirm_user_type	 = $userInfo->userType;
//$model->bkgTrail->bkg_confirm_user_id	 = $userInfo->userType == 1 ? $model->bkgUserInfo->bkg_user_id : $userInfo->userId;
//$model->bkgTrail->bkg_confirm_datetime	 = new CDbExpression('NOW()');

			if ($prevStatus == 1)
			{
				$model->bkg_booking_id = Booking::model()->generateBookingid($model);
			}
			$model->scenario = 'updatestatus';
			$success		 = $model->save();
//$model->bkgTrail->save();
		}
		return $success;
	}

	public function findByUsernBookingid($bkg_id, $userid)
	{
		$criteria		 = new CDbCriteria;
		$criteria->compare('bkg_id', $bkg_id);
		$criteria->compare('bkgusr.bkg_user_id', $userid);
		$criteria->join	 = "JOIN booking_user bkgusr ON bkg_id = bkgusr.bui_bkg_id";
// $criteria->join   = "LEFT JOIN booking_invoice bkginv ON bkg_id = bkginv.biv_bkg_id";
// $criteria->join   = "LEFT JOIN booking_trail bkgtrl ON bkg_id = bkgtrl.btr_bkg_id";
		return $this->find($criteria);
	}

	public function findByUsernBookingid1($bkg_id, $userid)
	{
		$sql	 = "select bkg.*,bkgusr.* from booking bkg
                join booking_user bkgusr on bkg.bkg_id = bkgusr.bui_bkg_id
                where bkgusr.bkg_user_id = '" . $userid . "' and bkg.bkg_id = '" . $bkg_id . "'";
		$record	 = DBUtil::queryRow($sql);
		return $record;
	}

	public function findByBookingid($booking_id = null)
	{
		if ($booking_id != '')
		{
			$criteria = new CDbCriteria;
			$criteria->compare('bkg_booking_id', $booking_id);
			return $this->find($criteria);
		}
		return null;
	}

	public function travellersMonthly($month = 1, $type = '')
	{
		$sql = "Select
            IF(users.usr_name <> '', concat(users.usr_name,' ', users.usr_lname), concat(booking_user.bkg_user_fname,' ' ,booking_user.bkg_user_lname)) AS name,
            booking_user.bkg_contact_no AS phone,
            booking_user.bkg_user_email AS email,
            MAX(bkg_pickup_date) as max_date,
            MIN(bkg_pickup_date) as min_date,
            datediff(MAX(bkg_pickup_date), MIN(bkg_pickup_date)) no_of_days,
            if(booking_user.bkg_user_id IS NULL, if(booking_user.bkg_contact_no = '',booking_user.bkg_user_email,booking_user.bkg_contact_no),booking_user.bkg_user_id) as user_id,
            count(bkg_pickup_date) as count_trip
                 FROM `booking`
				 JOIN booking_user ON booking_user.bui_bkg_id=booking.bkg_id
					 JOIN users ON bkg_user_id = users.user_id
                 WHERE bkg_status IN(2,3,5,6,7)
                 GROUP BY user_id
					HAVING  max_date < date_sub(NOW(),INTERVAL $month MONTH)";

		$sqlCount = "Select
					count(*) as cnt,MAX(bkg_pickup_date) as max_date
					FROM `booking`
					JOIN booking_user ON booking_user.bui_bkg_id=booking.bkg_id
					JOIN users ON bkg_user_id = users.user_id
					WHERE bkg_status IN(2,3,5,6,7)
					GROUP BY user_id
					HAVING  max_date < date_sub(NOW(),INTERVAL $month MONTH)";
		if ($type == 'command')
		{
			return DBUtil::query($sql, DBUtil::SDB());
		}
		else
		{
			$count			 = DBUtil::command("SELECT COUNT(*) FROM ($sqlCount) a", DBUtil::SDB())->queryScalar();
			$dataprovider	 = new CSqlDataProvider($sql, [
				'db'			 => DBUtil::SDB(),
				'totalItemCount' => $count,
				'sort'			 => ['attributes'	 => ['count_trip', 'bkg_contact_no', 'max_date', 'min_date', 'no_of_days', 'bkg_user_name'],
					'defaultOrder'	 => 'count_trip DESC, max_date DESC'], 'pagination'	 => ['pageSize' => 50],
			]);

			return $dataprovider;
		}
	}

	public function vendorWeeklyReport($date1 = '', $date2 = '', $status, $vendorId, $type = 'data')
	{
		$sql = "SELECT booking.bkg_id ,booking.bkg_booking_id ,booking.bkg_status ,
                        (if(booking.bkg_status IN(2,3,8,9,10,1,15), vht1.vct_desc,vht.vht_model )) vht_model , vht1.vct_label AS serviceClass,
                        booking_invoice.bkg_total_amount , booking.bkg_create_date ,booking.bkg_pickup_date ,
                        booking.bkg_return_date ,CONCAT(fromCity.cty_name,' - ',toCity.cty_name) as cities ,
                        fromCity.cty_name as fromCity ,toCity.cty_name as toCity ,vendors.vnd_name as vendor_name ,
                        booking_cab.bcb_vendor_id as vendor_id ,vendors.vnd_create_date ,drivers.drv_name as drv_name ,
                        IF(booking.bkg_status = '6',FLOOR((booking_invoice.bkg_total_amount)/10),0) as commission ,
                        IF(booking.bkg_booking_type = '1',1,IF(booking.bkg_return_date is NULL,1,(TIMESTAMPDIFF(DAY,booking.bkg_pickup_date,booking.bkg_return_date)+ 1))) as no_of_days,
                        bkg_gozo_amount AS gozo_amount
                        FROM booking
						JOIN booking_invoice ON booking_invoice.biv_bkg_id=booking.bkg_id
						JOIN booking_cab ON booking_cab.bcb_id=booking.bkg_bcb_id
						JOIN cities as fromCity ON fromCity.cty_id=booking.bkg_from_city_id
						JOIN cities as toCity ON toCity.cty_id=booking.bkg_to_city_id
						JOIN svc_class_vhc_cat scv ON scv.scv_id=booking.bkg_vehicle_type_id
						JOIN `vehicle_category` vht1 ON vht1.vct_id = scv.scv_vct_id
						INNER JOIN service_class sc ON scv.scv_scc_id = sc.scc_id
                        LEFT JOIN vendors ON vendors.vnd_id=booking_cab.bcb_vendor_id
                        LEFT JOIN vehicles ON vehicles.vhc_id=booking_cab.bcb_cab_id
                        LEFT JOIN vehicle_types vht ON vht.vht_id=vehicles.vhc_type_id
                        LEFT JOIN drivers ON drivers.drv_id=booking_cab.bcb_driver_id
                        WHERE booking.bkg_active=1";

		$sqlCount = "SELECT count(*) FROM booking JOIN booking_cab ON booking_cab.bcb_id=booking.bkg_bcb_id	WHERE booking.bkg_active=1 ";

		if (isset($status) && $status != 0)
		{
			$sql		 .= " AND booking.bkg_status=$status";
			$sqlCount	 .= " AND booking.bkg_status=$status";
		}
		if ((isset($date1) && $date1 != '') && (isset($date2) && $date2 != ''))
		{
			$sql		 .= " AND (booking.bkg_create_date BETWEEN '$date1 00:00:00' AND '$date2 23:59:59')";
			$sqlCount	 .= " AND (booking.bkg_create_date BETWEEN '$date1 00:00:00' AND '$date2 23:59:59')";
		}
		if (isset($vendorId) && $vendorId > 0)
		{
			$sql		 .= " AND booking_cab.bcb_vendor_id=$vendorId";
			$sqlCount	 .= " AND booking_cab.bcb_vendor_id=$vendorId";
		}
		if ((isset($from) && $from != '') && (isset($to) && $to != ''))
		{
			$sql		 .= " AND booking_cab.bkg_id IN (SELECT bkg_id FROM booking WHERE bkg_from_city_id='" . $from . "' AND bkg_to_city_id='" . $to . "')";
			$sqlCount	 .= " AND booking_cab.bkg_id IN (SELECT bkg_id FROM booking WHERE bkg_from_city_id='" . $from . "' AND bkg_to_city_id='" . $to . "')";
		}
		if ($type == 'data')
		{
			$count			 = DBUtil::command($sqlCount, DBUtil::SDB())->queryScalar();
			$dataprovider	 = new CSqlDataProvider($sql, [
				'totalItemCount' => $count,
				'db'			 => DBUtil::SDB(),
				'sort'			 => ['attributes'	 => ['bkg_user_fname', 'bkg_booking_id', 'from_city_name', 'to_city_name', 'bkg_total_amount', 'bkg_create_date', 'bkg_pickup_date', 'bkg_return_date'],
					'defaultOrder'	 => ''], 'pagination'	 => ['pageSize' => 25],
			]);
			return $dataprovider;
		}
		elseif ($type == 'command')
		{
			$sql .= " ORDER BY booking.bkg_create_date DESC";
			return DBUtil::queryAll($sql);
		}
	}

	public function weeklyReport($date1 = '', $date2 = '', $vendorStatus, $type = 'data')
	{
		$sql = "
				SELECT
				bkg.bkg_id,
					   bkg.bkg_booking_id,
					   bkg.bkg_status,
					   biv.bkg_total_amount,
					   bkg.bkg_create_date,
					   bkg.bkg_pickup_date,
					   bkg.bkg_return_date,
				CONCAT(fromCity.cty_name, ' - ', toCity.cty_name)  AS cities,
				fromCity.cty_name  AS fromCity,
				toCity.cty_name  AS toCity,
				agt.vnd_name  AS vendor_name,
				(bcb.bcb_vendor_id) AS vendor_id,
					   agt.vnd_create_date,
					   (if(bkg.bkg_status IN (2, 3,8,9,1,15,10), vht1.vct_desc, vht.vht_model)),
				 vht1.vct_label AS serviceClass,
				drv.drv_name AS drv_name,
				IF(bkg_status = '6', FLOOR((biv.bkg_total_amount) / 10), 0)   AS commission,
				IF(bkg_booking_type = '1',  1,  IF(bkg_return_date IS NULL,  1, (TIMESTAMPDIFF(DAY, bkg_pickup_date, bkg_return_date) + 1)))  AS no_of_days
                        FROM `booking` bkg
				JOIN booking_invoice biv ON bkg.bkg_id = biv.biv_bkg_id
				JOIN cities fromCity ON bkg.bkg_from_city_id = fromCity.cty_id
				JOIN cities toCity ON bkg.bkg_to_city_id = toCity.cty_id
				JOIN booking_cab bcb ON bcb.bcb_id = bkg.bkg_bcb_id
                            LEFT JOIN vendors agt ON agt.vnd_id=bcb.bcb_vendor_id
                            LEFT JOIN `vehicles` vhc ON vhc.vhc_id=bcb.bcb_cab_id
                            LEFT JOIN `vehicle_types` vht ON vht.vht_id=vhc.vhc_type_id
                            LEFT JOIN `drivers` drv ON drv.drv_id=bcb.bcb_driver_id
					 JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg.bkg_vehicle_type_id
					 JOIN `vehicle_category` vht1 ON vht1.vct_id = scv.scv_vct_id
					 INNER JOIN service_class sc ON scv.scv_scc_id = sc.scc_id
				WHERE bkg.bkg_active = 1
			";
		if (isset($vendorStatus) && $vendorStatus != '' && $vendorStatus != 0)
		{
			$sql .= " AND bkg.bkg_status='" . $vendorStatus . "'";
		}
		if (($date1 != '' && $date1 != '') && ($date2 != '' && $date2 != ''))
		{
			$sql .= " AND (bkg.bkg_create_date BETWEEN ' $date1 00:00:00' AND '$date2 23:59:59') ";
		}
		if ($type == 'data')
		{
			$count			 = DBUtil::command("SELECT COUNT(*) FROM ($sql) abc", DBUtil::SDB())->queryScalar();
			$dataprovider	 = new CSqlDataProvider($sql, [
				'totalItemCount' => $count,
				'sort'			 => ['attributes'	 => ['bkg_user_name', 'bkg_booking_id', 'from_city_name', 'to_city_name', 'bkg_total_amount', 'bkg_create_date', 'bkg_pickup_date', 'bkg_return_date'],
					'defaultOrder'	 => 'bkg_create_date DESC'], 'pagination'	 => ['pageSize' => 25],
			]);
			return $dataprovider;
		}
		elseif ($type == 'command')
		{
			return DBUtil::queryAll($sql, DBUtil::SDB());
		}
	}

	public function dailyReport($date1 = '', $date2 = '', $vendorStatus, $type = 'data')
	{
		$removeVal	 = '"';
		$sql		 = "
			SELECT bkg.bkg_route_city_names,
			bkg.bkg_booking_id,
			bkg.bkg_status,
			biv.bkg_total_amount,
			'' AS fromCity,
			'' AS toCity,
			'' as cities,
			agt.vnd_name   AS vendor_name,
			bkg.bkg_status,
			vct1.vct_label  AS serviceClass,
			drv_name,
			IF(bkg_status = '6', FLOOR((biv.bkg_total_amount) / 10), 0)   AS commission,
			IF( bkg_booking_type = '1',1,IF(bkg_return_date IS NULL, 1,(TIMESTAMPDIFF(DAY, bkg_pickup_date, bkg_return_date) + 1)))  AS no_of_days
                        FROM `booking` bkg
			JOIN booking_invoice biv ON bkg.bkg_id = biv.biv_bkg_id
			JOIN booking_cab bcb ON bcb.bcb_id = bkg.bkg_bcb_id
			JOIN `svc_class_vhc_cat` scv ON scv.scv_id = bkg.bkg_vehicle_type_id
			JOIN `vehicle_category` vct1 ON vct1.vct_id = scv.scv_vct_id
			JOIN service_class sc ON scv.scv_scc_id = sc.scc_id
                            LEFT JOIN vendors agt ON agt.vnd_id=bcb.bcb_vendor_id
                            LEFT JOIN `vehicles` vhc ON vhc.vhc_id=bcb.bcb_cab_id
                            LEFT JOIN `vehicle_types` vht ON vht.vht_id=vhc.vhc_type_id
                            LEFT JOIN `drivers` drv ON drv.drv_id=bcb.bcb_driver_id
			WHERE  1";

		$sqlCount = '
				SELECT bkg.bkg_id
				FROM `booking` bkg
				JOIN booking_invoice biv ON bkg.bkg_id = biv.biv_bkg_id
				JOIN booking_cab bcb ON bcb.bcb_id = bkg.bkg_bcb_id
				WHERE  bkg.bkg_active = 1
			';

		if (isset($vendorStatus) && $vendorStatus != '' && $vendorStatus != 0)
		{
			$sql		 .= " AND bkg.bkg_status='" . $vendorStatus . "'";
			$sqlCount	 .= " AND bkg.bkg_status='" . $vendorStatus . "'";
		}
		if (($date1 != '' && $date1 != '') && ($date2 != '' && $date2 != ''))
		{
			$sql		 .= " AND (bkg.bkg_create_date BETWEEN '" . $date1 . " 00:00:00' AND '" . $date2 . " 23:59:59') ";
			$sqlCount	 .= " AND (bkg.bkg_create_date BETWEEN '" . $date1 . " 00:00:00' AND '" . $date2 . " 23:59:59') ";
		}
		if ($type == 'data')
		{
			$count			 = DBUtil::command("SELECT COUNT(*) FROM ($sqlCount) abc", DBUtil::SDB())->queryScalar();
			$dataprovider	 = new CSqlDataProvider($sql, [
				'db'			 => DBUtil::SDB(),
				'totalItemCount' => $count,
				'sort'			 => ['attributes'	 => ['bkg_user_name', 'bkg_booking_id', 'from_city_name', 'to_city_name', 'bkg_total_amount', 'bkg_create_date', 'bkg_pickup_date', 'bkg_return_date'],
					'defaultOrder'	 => 'bkg_create_date DESC'], 'pagination'	 => ['pageSize' => 25],
			]);
			return $dataprovider;
		}
		elseif ($type == 'command')
		{
			return DBUtil::queryAll($sql, DBUtil::SDB());
		}
	}

	public function runningTotalReport($date1 = '', $date2 = '', $dateType = '1', $type = '')
	{
		$dateTypeCriteria	 = $dateType == '1' ? 'bkg_create_date' : 'bkg_pickup_date';
		$where				 = "";
		if ($date1 != '' && $date2 != '')
		{
			$where = " AND ($dateTypeCriteria BETWEEN '$date1 00:00:00' AND '$date2 23:59:59')";
		}
		if ($dateType == '1')
		{
			$select = "SELECT DATE($dateTypeCriteria) AS date,
					COUNT(*) AS b_count,
					FLOOR(SUM(bkg_total_amount) / COUNT(*)) AS avg_booking_amount,
					SUM(IF(bkg_status IN ('6', '2'), 1, 0)) AS trips_booked,
					SUM(IF(date(bkg_pickup_date) = date(bkg_create_date) AND bkg_ride_start=1, 1, 0)) AS trips_started,
					SUM(IF(bkg_status = '6' and date(bkg_pickup_date) = date(bkg_create_date), 1, 0)) AS trips_completed ";
		}
		else
		{
			$select = "SELECT DATE($dateTypeCriteria) AS date,
					COUNT(*) AS b_count,
					FLOOR(SUM(bkg_total_amount) / COUNT(*)) AS avg_booking_amount,
					SUM(IF(bkg_status IN ('6', '2'), 1, 0)) AS trips_booked,
					SUM(IF(bkg_ride_start=1, 1, 0)) AS trips_started,
					SUM(IF(bkg_status = '6', 1, 0)) AS trips_completed ";
		}
		if ($type == '')
		{

			$sql = "$select
					FROM booking JOIN booking_invoice ON booking_invoice.biv_bkg_id = bkg_id
					JOIN booking_track ON booking_track.btk_bkg_id = booking.bkg_id
					WHERE 1 $where GROUP BY date";

			$sqlCount = "SELECT	DATE($dateTypeCriteria) AS date
						FROM booking JOIN booking_invoice ON booking_invoice.biv_bkg_id = bkg_id
						JOIN booking_track ON booking_track.btk_bkg_id = booking.bkg_id
						WHERE 1 $where 	GROUP BY date";

			$count			 = DBUtil::queryScalar("SELECT COUNT(*)  FROM ($sqlCount) abc", DBUtil::SDB());
			$dataprovider	 = new CSqlDataProvider($sql, [
				'totalItemCount' => $count,
				'db'			 => DBUtil::SDB(),
				'sort'			 => ['attributes'	 => ['date', 'b_count', 'avg_booking_amount', 'trips_booked', 'trips_started', 'trips_completed'],
					'defaultOrder'	 => 'date desc'
				],
				'pagination'	 => ['pageSize' => 50],
			]);
			return $dataprovider;
		}
		else
		{
			$sql = "$select
					FROM booking JOIN booking_invoice ON booking_invoice.biv_bkg_id = bkg_id
					JOIN booking_track ON booking_track.btk_bkg_id = booking.bkg_id
					WHERE 1 $where GROUP BY date ORDER BY  date desc ";
			return DBUtil::query($sql, DBUtil::SDB());
		}
	}

	public function cabDetailsReport($date1 = '', $date2 = '')
	{
		$criteria			 = new CDbCriteria;
		$criteria->select	 = "*,DATE_ADD(bkg_pickup_date,INTERVAL bkg_trip_duration HOUR) as cab_free_time";
		if ($date1 != '' && $date2 != '')
		{
			$criteria->addBetweenCondition('DATE(DATE_ADD(bkg_pickup_date,INTERVAL bkg_trip_duration HOUR))', $date1, $date2, 'AND');
		}
		$criteria->addIncondition('bkg_status', [2, 3, 5]);
		$criteria->order	 = "DATE(cab_free_time)";
		$criteria->together	 = true;
		$dataProvider		 = new CActiveDataProvider($this->together(), array('criteria' => $criteria, 'pagination' => ['pageSize' => 50]));
		return $dataProvider;
	}

	public function pickupReportData($fromDate = '', $toDate = '', $from = '', $to = '', $vendor = '', $platform = '', $bkgType = '')
	{
		$whereBtr = '';
		if ($from != '')
		{
			$where1 = " AND bkg.bkg_from_city_id = '$from'";
		}
		if ($to != '')
		{
			$where2 = " AND bkg.bkg_to_city_id = '$to'";
		}
		if ($vendor != '')
		{
			$where3 = " AND bcb.bcb_vendor_id = '$vendor'";
		}
		if ($platform != '')
		{
			$where4		 = " AND btr.bkg_platform = '$platform'";
			$whereBtr	 = " INNER JOIN booking_trail btr ON btr.btr_bkg_id=bkg.bkg_id and  bkg.bkg_active=1 AND (bkg.bkg_pickup_date BETWEEN '$fromDate 00:00:00' AND '$toDate 23:59:59')";
		}
		if ($this->bkg_agent_id != '')
		{
			$where5 .= " AND bkg.bkg_agent_id=$this->bkg_agent_id";
		}

		if (count($bkgType) > 0)
		{
			$bkgTypeStr	 = implode(",", $bkgType);
			$where6		 .= " AND bkg.bkg_booking_type IN ($bkgTypeStr) ";
		}

		$where = $where1 . $where2 . $where3 . $where4 . $where5 . $where6;

		$sql1				 = "SELECT bkg.bkg_status,count(*) as count,sum(biv.bkg_total_amount) as sum
						FROM `booking` bkg
						$whereBtr
						INNER JOIN booking_invoice biv ON bkg.bkg_id=biv.biv_bkg_id and  bkg.bkg_active=1 AND (bkg.bkg_pickup_date BETWEEN '$fromDate 00:00:00' AND '$toDate 23:59:59')
						INNER JOIN booking_cab bcb ON bcb.bcb_id=bkg.bkg_bcb_id AND bcb.bcb_active>0
					    WHERE 1  $where
						GROUP BY `bkg_status`";
		$report['status']	 = DBUtil::queryAll($sql1, DBUtil::SDB3());
		return $report;
	}

	public function pickupReportCountNew($fromDate = '', $toDate = '', $from = '', $to = '', $vendor = '', $platform = '')
	{
		$where = "";
		if ($from != '')
		{
			$where1 = " AND bkg_from_city_id = '$from'";
		}
		if ($to != '')
		{
			$where2 = " AND bkg_to_city_id = '$to'";
		}
		if ($vendor != '')
		{
			$where3 = " AND bcb_vendor_id = '$vendor'";
		}
		if ($platform != '')
		{
			$where4 = " AND btr.bkg_platform = '$platform'";
		}
		if ($this->bkg_agent_id != '')
		{
			$where5 .= " AND bkg_agent_id=$this->bkg_agent_id";
		}
		$where = $where1 . $where2 . $where3 . $where4 . $where5;

		$sql = "SELECT count(*) as cntTotal,sum(biv.bkg_total_amount) as totAmount
                                FROM `booking` bkg
								 JOIN booking_trail btr ON btr.btr_bkg_id=bkg.bkg_id
								 JOIN booking_invoice biv ON bkg.bkg_id=biv.biv_bkg_id
                                 JOIN booking_cab bcb ON bcb.bcb_id=bkg.bkg_bcb_id
                                LEFT JOIN vendors agt ON agt.vnd_id=bcb.bcb_vendor_id
                                WHERE bkg.bkg_active=1 AND date(bkg.bkg_pickup_date) BETWEEN '$fromDate' AND '$toDate' AND bkg_status IN(2,3,5,6,7) $where
                                ";

		$sql = DBUtil::queryAll($sql, DBUtil::SDB());
		return $sql;
	}

	public function accountReport($date1 = '', $date2 = '', $from = '', $to = '', $vendor = '', $platform = '')
	{
		$criteria = new CDbCriteria;
		if ($from != '')
		{
			$criteria->compare('bkg_from_city_id', $from);
		}
		if ($to != '')
		{
			$criteria->compare('bkg_to_city_id', $to);
		}
		if ($vendor != '')
		{
			$criteria->compare('bcb_vendor_id', $this->bcb_vendor_id);
		}
		if ($platform != '')
		{
			$criteria->compare('bkg_platform', $platform);
		}
		if (($date1 != '' && $date1 != '1970-01-01') && ($date2 != '' && $date2 != '1970-01-01'))
		{
			$criteria->addBetweenCondition('bkg_pickup_date ', $date1, $date2, 'AND');
		}
		$criteria->addCondition('bkg_status=6');
		$criteria->together	 = true;
		$criteria->with		 = ['bkgBcb'];

		$dataProvider = new CActiveDataProvider($this->together(), ['criteria'	 => $criteria, 'pagination' => ['pageSize' => 50], 'sort'		 => array(
				'defaultOrder' => 'bkg_pickup_date  DESC'
			),]);

		return $dataProvider;
	}

	public function accountReportCount($date1 = '', $date2 = '', $from = '', $to = '', $vendor = '', $platform = '')
	{
		$where = "";
		if ($from != '')
		{
			$where1 = " AND bkg_from_city_id = '$from'";
		}
		if ($to != '')
		{
			$where2 = " AND bkg_to_city_id = '$to'";
		}
		if ($vendor != '')
		{
			$where3 = " AND bkg_vendor_id = '$vendor'";
		}
		if ($platform != '')
		{
			$where4 = " AND bkg_platform = '$platform'";
		}
		$where		 = $where1 . $where2 . $where3 . $where4;
//		$sql = Yii::app()->db->createCommand()
//				->select("bkg_status,count(*) as count,sum(bkg_total_amount) as sum,(SELECT SUM(bkg_total_amount) FROM booking WHERE date(bkg_pickup_date) BETWEEN '$date1' AND '$date2' $where AND bkg_status IN (2,3,5,6,7)) as total_amount,(SELECT count(*) FROM booking WHERE date(bkg_pickup_date) BETWEEN '$date1' AND '$date2' $where AND bkg_status IN (2,3,5,6,7)) as total_count")
//				->from('booking')
//				->where("date(bkg_pickup_date) BETWEEN '$date1' AND '$date2'" . $where . "AND bkg_status=6")
//				->group('bkg_status')
////->text;
//				->queryAll();
		$sql		 = "SELECT   bkg_status,count(*) AS count,sum(booking_invoice.bkg_total_amount) AS sum,
         (SELECT SUM(booking_invoice.bkg_total_amount) FROM   booking INNER JOIN booking_invoice ON booking.bkg_id = booking_invoice.biv_bkg_id
          WHERE  date(bkg_pickup_date) BETWEEN '" . $date1 . "' AND '" . $date2 . "' $where AND bkg_status IN (2, 3, 5, 6, 7))
           AS total_amount,
         (SELECT count(*)FROM   booking
          WHERE  date(bkg_pickup_date) BETWEEN '" . $date1 . "' AND '" . $date2 . "' $where AND bkg_status IN (2, 3, 5, 6, 7))
           AS total_count
        FROM     booking INNER JOIN booking_invoice ON booking.bkg_id = booking_invoice.biv_bkg_id
        WHERE    date(bkg_pickup_date) BETWEEN '" . $date1 . "' AND '" . $date2 . "' $where AND bkg_status = 6
        GROUP BY `bkg_status`";
		$recordall	 = DBUtil::queryAll($sql);
		return $recordall;
	}

	public function accountReportCountNew($date1 = '', $date2 = '', $from = '', $to = '', $vendor = '', $platform = '')
	{
		$where = "";
		if ($from != '')
		{
			$where1 = " AND bkg_from_city_id = '$from'";
		}
		if ($to != '')
		{
			$where2 = " AND bkg_to_city_id = '$to'";
		}
		if ($vendor != '')
		{
			$where3 = " AND bkg_vendor_id = '$vendor'";
		}
		if ($platform != '')
		{
			$where4 = " AND bkg_platform = '$platform'";
		}
		$where	 = $where1 . $where2 . $where3 . $where4;
//		$sql = Yii::app()->db->createCommand()
//				->select("count(*) as cntTotal,sum(bkg_total_amount) as totAmount")
//				->from('booking')
//				->where("date(bkg_pickup_date) BETWEEN '$date1' AND '$date2'" . $where . "AND bkg_status=6")
//				->queryRow();
		$sql	 = "SELECT count(*) as cntTotal,sum(booking_invoice.bkg_total_amount) as totAmount
                FROM booking INNER JOIN booking_invoice ON booking.bkg_id = booking_invoice.biv_bkg_id
                WHERE date(bkg_pickup_date) BETWEEN '" . $date1 . "' AND '" . $date2 . "' $where  AND bkg_status=6";

		$recordrow = DBUtil::queryRow($sql);
		return $recordrow;
	}

	public function cancellationReport($date1 = '', $date2 = '', $from = '', $to = '', $vendor = '', $pickupdateFrom = '', $pickupdateTo = '')
	{
		$sql		 = "SELECT bkg_cancel_delete_reason,count(bkg_id) as booking_count FROM booking INNER JOIN booking_cab ON booking.bkg_bcb_id = booking_cab.bcb_id WHERE  bkg_status = 9";
		$sqlCount	 = "SELECT bkg_id FROM booking INNER JOIN booking_cab ON booking.bkg_bcb_id = booking_cab.bcb_id WHERE  bkg_status = 9 ";
		if (($date1 != '' && $date1 != '1970-01-01') && ($date2 != '' && $date2 != '1970-01-01'))
		{
			$sql		 .= " AND bkg_create_date BETWEEN '$date1' AND '$date2'";
			$sqlCount	 .= " AND bkg_create_date BETWEEN '$date1' AND '$date2'";
		}
		if (($pickupdateFrom != '' && $pickupdateTo != '1970-01-01') && ($pickupdateFrom != '' && $pickupdateTo != '1970-01-01'))
		{
			$sql		 .= " AND bkg_pickup_date BETWEEN '$pickupdateFrom' AND '$pickupdateTo'";
			$sqlCount	 .= " AND bkg_pickup_date BETWEEN '$pickupdateFrom' AND '$pickupdateTo'";
		}
		if ($vendor != '')
		{
			$sql		 .= " AND bcb_vendor_id = '$vendor'";
			$sqlCount	 .= " AND bcb_vendor_id = '$vendor'";
		}
		$sql			 .= " GROUP BY bkg_cancel_delete_reason";
		$sqlCount		 .= " GROUP BY bkg_cancel_delete_reason";
		$count			 = DBUtil:: command("SELECT COUNT(*) FROM ($sqlCount) abc", DBUtil::SDB())->queryScalar();
		$dataprovider	 = new CSqlDataProvider($sql, [
			'totalItemCount' => $count,
			'db'			 => DBUtil::SDB(),
			'sort'			 => ['attributes'	 => ['bkg_cancel_delete_reason', 'booking_count'],
				'defaultOrder'	 => 'booking_count DESC'], 'pagination'	 => ['pageSize' => 100],
		]);
		return $dataprovider;
	}

	public function cancellationReportCount($date1 = '', $date2 = '', $from = '', $to = '', $vendor = '', $pickupdateFrom = '', $pickupdateTo = '')
	{
		$where = "";
		if (($date1 != '' && $date1 != '1970-01-01') && ($date2 != '' && $date2 != '1970-01-01'))
		{
			$where1 = " AND bkg_create_date BETWEEN '$date1' AND '$date2'";
		}
		if (($pickupdateFrom != '' && $pickupdateTo != '1970-01-01') && ($pickupdateFrom != '' && $pickupdateTo != '1970-01-01'))
		{
			$where2 = " AND bkg_pickup_date BETWEEN '$pickupdateFrom' AND '$pickupdateTo'";
		}
		if ($vendor != '')
		{
			$where3 = " AND bcb_vendor_id = '$vendor'";
		}
		$where	 = $where1 . $where2 . $where3;
		$sql	 = "SELECT   bkg_status, count(*)  as count	 FROM   booking INNER JOIN booking_cab ON booking.bkg_bcb_id = booking_cab.bcb_id WHERE  bkg_status = 9 $where GROUP BY `bkg_status`";
		return DBUtil::queryAll($sql, DBUtil::SDB());
	}

	public function cancellationReportCountNew($date1 = '', $date2 = '', $from = '', $to = '', $vendor = '', $platform = '', $pickupdateFrom = '', $pickupdateTo = '')
	{
		$where = "";
		if ($from != '')
		{
			$where1 = " AND bkg_from_city_id = '$from'";
		}
		if ($to != '')
		{
			$where2 = " AND bkg_to_city_id = '$to'";
		}
		if ($vendor != '')
		{
			$where3 = " AND bkg_vendor_id = '$vendor'";
		}
		if ($platform != '')
		{
			$where4 = " AND bkg_platform = '$platform'";
		}
		$where	 = $where1 . $where2 . $where3 . $where4;
		$sql	 = Yii::app()->db->createCommand()
				->select("count(*) as cntTotal,sum(bkg_total_amount) as totAmount")
				->from('booking')
				->where("date(bkg_pickup_date) BETWEEN '$date1' AND '$date2'" . $where . "AND bkg_status=9")
				->queryRow();
		return $sql;
	}

	public function bookingReportCount($fromDate, $toDate, $from = '', $to = '', $vendor = '', $platform = '', $status = '')
	{
		$where = "";
		if (isset($status) && $status != '')
		{
			$where .= " AND booking.bkg_status='" . $status . "'";
		}
		if ($from != '')
		{
			$where .= " AND bkg_from_city_id = '$from'";
		}
		if ($to != '')
		{
			$where .= " AND bkg_to_city_id = '$to'";
		}
		if ($vendor != '')
		{
			$where .= " AND bkg_bcb_id IN (SELECT bcb_id FROM booking_cab WHERE bcb_active=1 AND bcb_vendor_id='$vendor')";
		}
		if ($platform != '')
		{
			$where .= " AND booking_trail.bkg_platform = '$platform'";
		}
		if ($this->bkg_agent_id != '')
		{
			$where .= " AND bkg_agent_id=$this->bkg_agent_id";
		}
		if (($fromDate != '' && $toDate != ''))
		{
			$where .= "  AND (bkg_create_date BETWEEN '" . $fromDate . " 00:00:00' AND '" . $toDate . " 23:59:59') ";
		}
		$where	 .= " GROUP BY bkg_status";
		$sql	 = "SELECT bkg_status, COUNT(*) AS count, SUM(booking_invoice.bkg_total_amount) AS sum
					FROM   booking
						   JOIN `booking_invoice` ON booking_invoice.biv_bkg_id = bkg_id
						   JOIN `booking_trail` ON booking_trail.btr_bkg_id = bkg_id
					WHERE  1  $where  ";
		$rows	 = DBUtil::queryAll($sql, DBUtil::SDB());
		return $rows;
	}

	public function vendorReportCount($date1, $date2, $vendorStatus, $vendorId)
	{
		if ($vendorStatus == 0)
		{
			$where1 = "";
		}
		else
		{
			$where1 = " bkg_status = $vendorStatus and";
		}
		if ($vendorId == 0)
		{
			$where2 = "";
		}
		else
		{
			$where2 = " bcb_vendor_id = $vendorId and";
		}
		$where		 = $where1 . $where2;
		$sql		 = "SELECT Count(*)                      AS b_count,
						Sum(IF(bkg.bkg_booking_type = 1, 1, IF(bkg.bkg_return_date IS NULL, 1, (
								Timestampdiff(day, bkg.bkg_pickup_date, bkg.bkg_return_date)
								 + 1 ))))             AS t_days,
						Sum(biv.bkg_total_amount)     AS b_amount,
						(SELECT Floor(Sum(booking_invoice.bkg_total_amount) / 10)
						 FROM   booking
								INNER JOIN booking_invoice
									   ON booking_invoice.biv_bkg_id = booking.bkg_id
                                INNER JOIN booking_cab ON booking_cab.bcb_bkg_id1 = booking.bkg_id
						 WHERE  " . $where2 . " (bkg_create_date) BETWEEN
										'$date1 00:00:00' AND '$date2 00:00:00'
								AND bkg_status = '6') AS commission
				        FROM   `booking` bkg
						JOIN booking_invoice biv
						  ON biv.biv_bkg_id = bkg.bkg_id
						JOIN booking_cab bcb
						  ON bcb.bcb_id = bkg.bkg_bcb_id
				        WHERE  bkg.bkg_active = 1
						AND $where (bkg.bkg_create_date BETWEEN
									'$date1 00:00:00' AND '$date2 23:59:59')";
		$recordset	 = DBUtil::queryRow($sql, DBUtil::SDB());
		return $recordset;
	}

	public function weeklyReportCount($date1, $date2, $vendorStatus)
	{
		if ($vendorStatus == 0)
		{
			$where = "";
		}
		else
		{
			$where = " bkg_status = $vendorStatus and";
		}
		$sql		 = "select count(*) as b_count,sum(IF(bkg_booking_type = 1,1,IF(bkg_return_date is NULL,1,(TIMESTAMPDIFF(DAY,bkg_pickup_date,bkg_return_date)+ 1)))) as t_days, sum(biv.bkg_total_amount) as b_amount, (SELECT FLOOR(SUM(booking_invoice.bkg_total_amount)/10) FROM booking LEFT JOIN booking_invoice ON booking_invoice.biv_bkg_id=booking.bkg_id WHERE (bkg_create_date) BETWEEN '$date1 00:00:00' AND '$date2 23:59:59' and bkg_status='6') as commission
                                FROM `booking` bkg
								 JOIN booking_invoice biv ON biv.biv_bkg_id=bkg.bkg_id
                                 JOIN booking_cab bcb ON bcb.bcb_id=bkg.bkg_bcb_id
                                LEFT JOIN vendors agt ON agt.vnd_id=bcb.bcb_vendor_id
				WHERE bkg.bkg_active=1 AND " . $where . " (bkg.bkg_create_date BETWEEN '$date1 00:00:00'  AND '$date2 23:59:59') ";
		$recordset	 = DBUtil::queryRow($sql, DBUtil::SDB());
		return $recordset;
	}

	public function dailyReportCount($date1, $date2, $vendorStatus)
	{
		$where		 = $vendorStatus == 0 ? "" : " bkg_status = $vendorStatus and";
		$where1		 = ($vendorStatus == 0 || $vendorStatus == 6) ? " and  bkg_status ='6' " : " ";
		$sql		 = "SELECT
						count(*) as b_count,
				sum(IF(bkg_booking_type = 1,1,IF(bkg_return_date is NULL,1,(TIMESTAMPDIFF(DAY,bkg_pickup_date,bkg_return_date)+ 1)))) as t_days,
				sum(biv.bkg_total_amount) as b_amount,
				(SELECT FLOOR(SUM(booking_invoice.bkg_total_amount)/10)
						FROM booking JOIN booking_invoice ON booking.bkg_id=booking_invoice.biv_bkg_id
				        WHERE bkg_create_date BETWEEN '$date1 00:00:00' AND '$date2 23:59:59' $where1) as commission
                        FROM `booking` bkg JOIN booking_invoice biv ON bkg.bkg_id=biv.biv_bkg_id
					    WHERE bkg.bkg_active=1 	AND  $where bkg.bkg_create_date BETWEEN '$date1 00:00:00' AND '$date2 23:59:59'
                                ";
		$recordset	 = DBUtil::queryRow($sql, DBUtil::SDB());
		return $recordset;
	}

	public function gstCollectionReport($date1 = '', $date2 = '', $type = 'data')
	{
		$sql = "SELECT DATE_FORMAT(bkg_pickup_date,'%Y %M') as date,
						IF(bkg_agent_id IS NULL,1249,agt_id) as AgentID,
						IF(bkg_agent_id IS NULL,'B2C',agents.agt_company) as PartnerName,
						stt_name, SUM(IF(bkg_status<>9,bkg_service_tax,0)) as GST,
						SUM(IF(bkg_status<>9,bkg_net_base_amount + bkg_driver_allowance_amount,0)) as BaseFare,
						SUM(IF(bkg_status IN (2, 3, 5, 6, 7), bkg_net_base_amount + IFNULL(bkg_convenience_charge,0) + IFNULL(bkg_extra_total_min_charge,0), 0)) as netBaseAmount,
						SUM(ROUND(IF(bkg_status=9,bkg_advance_amount-bkg_refund_amount,0)/1.05)) as CancelBaseFare,
						SUM(IF(bkg_status=9,bkg_advance_amount-bkg_refund_amount,0) - ROUND(IF(bkg_status=9,bkg_advance_amount-bkg_refund_amount,0)/1.05)) as CancelGST
						FROM booking
						INNER JOIN booking_invoice biv ON biv.biv_bkg_id=bkg_id
						INNER JOIN cities ON cty_id=bkg_from_city_id
						INNER JOIN states ON stt_id=cty_state_id
						LEFT JOIN agents ON bkg_agent_id=agt_id
					WHERE bkg_status IN (3,5,6,7,9) AND bkg_pickup_date BETWEEN '$date1 00:00:00' AND '$date2 23:59:59' AND (bkg_agent_id IS NULL OR bkg_agent_id <> 845)
					GROUP BY bkg_agent_id, stt_id, date ORDER BY agt_company, bkg_pickup_date, stt_name";

		$sqlCount = "SELECT COUNT(*) AS totalGstCollection,DATE_FORMAT(bkg_pickup_date,'%Y %M') as date
						FROM booking
						INNER JOIN booking_invoice biv ON biv.biv_bkg_id=bkg_id
						INNER JOIN cities ON cty_id=bkg_from_city_id
						INNER JOIN states ON stt_id=cty_state_id
						LEFT JOIN agents ON bkg_agent_id=agt_id
					WHERE bkg_status IN (3,5,6,7,9) AND bkg_pickup_date BETWEEN '$date1 00:00:00' AND '$date2 23:59:59'  AND (bkg_agent_id IS NULL OR bkg_agent_id <> 845)
					GROUP BY bkg_agent_id, stt_id,date";

		if ($type == 'data')
		{
			$count			 = DBUtil::command("SELECT COUNT(*) FROM ($sqlCount) abc", DBUtil::SDB())->queryScalar();
			$dataprovider	 = new CSqlDataProvider($sql, [
				'totalItemCount' => $count,
				'db'			 => DBUtil::SDB(),
				'sort'			 => ['attributes' => ['agt_company', 'bkg_pickup_date', 'stt_name']]
			]);

			return $dataprovider;
		}
		else if ($type == 'command')
		{
			$recordset = DBUtil::queryAll($sql, DBUtil::SDB());
			return $recordset;
		}
	}

	public function getByCodenDatenId($bookingdate, $bkgid)
	{
		$criteria		 = new CDbCriteria;
		$criteria->compare('bkg_id', $bkgid);
		$bkgcreatedate	 = date('Y-m-d H:i:s', strtotime($bookingdate));
		$criteria->compare('bkg_create_date', $bkgcreatedate);
		return $this->find($criteria);
	}

	public function getTotalBooking($status, $searchText = "", $create_date1 = "", $create_date2 = "", $city1 = "", $city2 = "")
	{
		$criteria			 = new CDbCriteria;
		$criteria->select	 = "count(*) as total";
		$criteria->compare('bkg_active', 1);
		if ($status != 0)
		{
			$criteria->compare('bkg_status', $status);
		}
		if ($searchText != "")
		{
			$criteria2 = new CDbCriteria;
			$criteria2->addSearchCondition('bkg_booking_id', $searchText);
			$criteria2->addSearchCondition('bkg_user_fname', $searchText, true, 'OR');
			$criteria2->addSearchCondition('bkg_user_lname', $searchText, true, 'OR');
			$criteria2->addSearchCondition('bkg_contact_no', $searchText, true, 'OR');
			$criteria2->addSearchCondition('bkg_user_email', $searchText, true, 'OR');
			$criteria2->addSearchCondition('bkg_remark', $searchText, true, 'OR');
			$criteria->mergeWith($criteria2);
		}
		if ($create_date1 != "")
		{
			$date1					 = DateTime::createFromFormat('m/d/Y', $create_date1)->format('Y-m-d');
			$criteria3				 = new CDbCriteria;
			$criteria3->condition	 = " DATE(bkg_create_date)='$date1'";
			$criteria->mergeWith($criteria3);
		}
		if ($create_date2 != "")
		{
			$date2					 = DateTime::createFromFormat('m/d/Y', $create_date2)->format('Y-m-d');
			$criteria4				 = new CDbCriteria;
			$criteria4->condition	 = " DATE(bkg_pickup_date)='$date2'";
			$criteria->mergeWith($criteria4);
		}
		if ($city1 != "")
		{
			$criteria5 = new CDbCriteria;
			$criteria5->compare('bkg_from_city_id', $city1);
			$criteria->mergeWith($criteria5);
		}
		if ($city2 != "")
		{
			$criteria6 = new CDbCriteria;
			$criteria6->compare('bkg_to_city_id', $city2);
			$criteria->mergeWith($criteria6);
		}
		$data = $this->find($criteria);
		return $data->total;
	}

	public function getBookingDetails($bid, $l_name)
	{
		if ($l_name == "")
		{
			$where = "";
		}
		else
		{
			$where = " booking_user.bkg_user_lname like '%$l_name' and";
		}
		$sql		 = "Select c1.cty_name as from_city, c2.cty_name as to_city, b.bkg_booking_id as booking_id,
			booking_user.bkg_user_fname as user_name, booking_user.bkg_contact_no as user_phone,
			booking_user.bkg_user_email as user_email, booking_user.bkg_alt_contact_no as user_alternate_phone,
			DATE_FORMAT(b.bkg_pickup_date, '%D %b %y %l:%i %p') as pickup_time,
			DATE_FORMAT(b.bkg_return_date, '%D %b %y %l:%i %p') as return_time, DATE_FORMAT(b.bkg_create_date,
			'%D %b %y %l:%i %p') as created, b.bkg_pickup_address as pickup_address, b.bkg_drop_address as drop_address,
			b.bkg_status as status, booking_invoice.bkg_total_amount as amount, v1.vct_desc as cab_type,
			v2.vhc_number as cab_number,d.drv_name as driver_name,
			phn.phn_phone_no as driver_phone, altphn.phn_phone_no as driver_alt_phn
            from booking b LEFT JOIN cities c1 ON b.bkg_from_city_id=c1.cty_id
			INNER JOIN booking_user ON booking_user.bui_bkg_id=b.bkg_id
			INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id=b.bkg_id
			INNER JOIN booking_cab ON booking_cab.bcb_bkg_id1=b.bkg_id
			JOIN cities c2 ON b.bkg_to_city_id=c2.cty_id
            JOIN svc_class_vhc_cat scv ON b.bkg_vehicle_type_id=scv.scv_id
		    JOIN vehicle_category v1 ON scv.scv_vct_id=v1.vct_id
            LEFT JOIN vehicles v2 ON booking_cab.bcb_cab_id=v2.vhc_id
            LEFT JOIN drivers d ON booking_cab.bcb_driver_id=d.drv_id
            where " . $where . " b.bkg_booking_id='$bid'";
		$recordset	 = DBUtil::queryRow($sql);
		return $recordset;
	}

	public function generateBookingid($bmodel)
	{
		$scvVctId = SvcClassVhcCat::model()->getCatIdBySvcid($bmodel->bkg_vehicle_type_id);
		if ($bmodel->bkg_booking_type == 1 && $scvVctId == VehicleCategory::SHARED_SEDAN_ECONOMIC && $bmodel->bkg_flexxi_type == 2)
		{
			$booking_id = 'FS' . substr(date('y'), -1) . str_pad($bmodel->bkg_id, 8, 0, STR_PAD_LEFT);
			return $booking_id;
		}
		elseif ($bmodel->bkg_booking_type == 1 && $scvVctId == VehicleCategory::SHARED_SEDAN_ECONOMIC && $bmodel->bkg_flexxi_type == 1)
		{
			$booking_id = 'FP' . substr(date('y'), -1) . str_pad($bmodel->bkg_id, 8, 0, STR_PAD_LEFT);
			return $booking_id;
		}
		elseif ($bmodel->bkg_status == 15)
		{
			$booking_id = 'QT' . substr(date('y'), -1) . str_pad($bmodel->bkg_id, 8, 0, STR_PAD_LEFT);
			return $booking_id;
		}
		elseif ($bmodel->bkg_status == 2 && $bmodel->bkgPref->bkg_is_fbg_type == 1)
		{
			$booking_id = 'TFR' . substr(date('y'), -1) . str_pad($bmodel->bkg_id, 8, 0, STR_PAD_LEFT);
			return $booking_id;
		}
		elseif ($bmodel->bkg_status == 2 && $bmodel->bkgPref->bkg_is_fbg_type == 2)
		{
			$booking_id = 'CT' . substr(date('y'), -1) . str_pad($bmodel->bkg_id, 8, 0, STR_PAD_LEFT);
			return $booking_id;
		}
		else
		{
			/** @var Booking $bmodel */
			$isMultiWay	 = ($bmodel->bkg_booking_type == 3 && $bmodel->bkg_from_city_id != $bmodel->bkg_to_city_id);
			$bkgIdPrefix = ($isMultiWay) ? 'MW' : $this->booking_types[$bmodel->bkg_booking_type];
			$booking_id	 = $bkgIdPrefix . substr(date('y'), -1) . str_pad($bmodel->bkg_id, 8, 0, STR_PAD_LEFT);
			return $booking_id;
		}
	}

	public function getGAItemName()
	{
		$routeName	 = $this->bkgFromCity->cty_name . " - " . $this->bkgToCity->cty_name;
		$tripType	 = $this->booking_type[$this->bkg_booking_type];
		$cabType	 = $this->bkgSvcClassVhcCat->scv_label;
		$name		 = "{$tripType}: {$routeName} ({$cabType})";
		return $name;
	}

	public function getGAItemId()
	{
		$routeIds	 = $this->bkg_from_city_id . "_" . $this->bkg_to_city_id;
		$tripType	 = $this->booking_types[$this->bkg_booking_type];
		$cabType	 = $this->bkg_vehicle_type_id;
		$name		 = "{$tripType}_{$routeIds}_{$cabType}";
		return $name;
	}

	public function getActionButton($data, $button_type = 'icon', $type = '')
	{
		$UserInfo = UserInfo::getInstance();
//$this->bkgUserInfo = new BookingUser;
		if (sizeof($data) > 0)
		{
			$this->setPrimaryKey($data['bkg_id']);
			$this->refresh();
//			$this->attributes				 = $data;
//			$this->bkgTrail->attributes		 = $data;
//			$this->bkgUserInfo->attributes	 = $data;
//			$this->bkgPref->attributes		 = $data;
		}

#$enableList				 = $this->enablePaymentLink();
#$enablePaymentLink		 = $enableList['enablePaymentLink'];
#$enableConfirmationLink	 = $enableList['enableConfirmLink'];
//echo "button_type-->".$button_type;exit();
//$bkgid = $this->bkg_booking_id;
//$model = Ratings::model()->getRatingbyBookingId($this->bkg_id);
//$rating = $model->rtg_booking_id;
		$rating				 = $this->ratings[0]->rtg_customer_overall;
		$review				 = ($rating > 0) ? '19' : '13';
		$rt					 = $this->bkgTrail->bkg_is_related_booking;
		$autoAssignOn		 = $this->bkgPref->bpr_assignment_level;
		$isRelatedBooking	 = ($rt > 0) ? '23' : '';
		$calWH				 = Filter::CalcWorkingHour(new CDbExpression('NOW()'), $this->bkg_pickup_date);

		$isBkpn	 = '84';
		$isBkvn	 = '85';

		$action		 = [
			1	 => ['10', '3', '49', '95', '1', '22', '32', '33', '40', '41', '42', '24', '82', '83', '84', '85', '87', '102'],
			2	 => ['92', '93', '91', '0', '77', '58', '59', '94', '60', '62', '63', '1', '2', '3', '49', '95', '24', '25', '26', '27', '28', '29', '64', '65', '31', '32', '33', '38', '39', '40', '41', '43', '44', '46', '47', '48', '54', '55', '56', '57', '67', '68', '71', '75', '76', '83', '84', '85', '86', '87', '88', '89', '90', '102', '103'],
			3	 => ['91', '5', '6', '1', '3', '49', '95', '4', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '36', '64', '65', '38', '39', '40', '41', '43', '44', '45', '46', '47', '48', '54', '55', '57', '61', '66', '67', '68', '70', '75', '76', '80', '83', '84', '85', '87', '100', '101', '102', '103'],
			5	 => ['99', '91', '8', '69', '12', '5', '1', '7', '3', '49', '95', '17', '4', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '43', '44', '46', '47', '48', '52', '54', '57', '61', '66', '67', '68', '70', '72', '75', '76', '80', '83', '84', '85', '87', '96', '97', '102', '104'], ///On the way
			6	 => ['9', '3', '49', '95', '16', $review, '20', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '43', '44', '46', '61', '67', '68', '70', '72', '75', '78', '79', '83', '84', '85', '87', '66'], ///completed status
			7	 => ['3', '49', '95', '16', '20', '26', '28', '30', '31', '32', '33', '34', '35', '36', '37', '40', '41', '43', '44', '46', '61', '72', '75', '84', '85', '87', '98'],
			8	 => ['15', '31', '32', '33', '40', '41', '43', '44', '46', '75', '83', '84', '85', '87'],
			9	 => ['15', '20', '27', '29', '31', '32', '33', '40', '41', '43', '44', '61', '66', '73', '74', '78', '79', '80', '83', '84', '85', '87', '96', '97'],
			15	 => ['58', '59', '94', '60', '62', '63', '3', '49', '95', '24', '25', '26', '27', '28', '29', '64', '65', '31', '32', '33', '38', '39', '40', '41', '43', '44', '46', '47', '48', '54', '55', '56', '57', '67', '68', '24', '76', '81', '83', '84', '85', '87', '102']
		];
//		if (strtotime("+30 minute", strtotime($this->bkg_create_date)) < time())
//		{
//			$action[15][] = '24';
//		}
		$act5Pefix	 = ($this->bkg_status == 3) ? "Add" : "Change";
		if ($this->bkg_vehicle_type_id > 0)
		{
			$scvVctId = SvcClassVhcCat::model()->getCatIdBySvcid($this->bkg_vehicle_type_id);
		}
		if ($this->bkgBcb->bcb_cab_id > 0)
		{
			$vsModel = VehicleStats::model()->getbyVehicleID($this->bkgBcb->bcb_cab_id);
		}
		$actionTitle = [
			'0'		 => ['title' => 'Assign Vendor', 'image' => Yii::app()->request->baseUrl . '/images/icon/assign_vendor.png', 'color' => 'info', 'icon' => 'cab', 'visible' => (Yii::app()->user->checkAccess('AssignVendor') || Yii::app()->user->checkAccess('bookingAssignvendor') && $this->bkgPref->bpr_assignment_id == $UserInfo->getUserId()) || (Yii::app()->user->checkAccess('4 - OperationManager')) || (Yii::app()->user->checkAccess('PreAssignAccess')) || (Yii::app()->user->checkAccess('PreAssignVendorWithMargin')) || self::checkTimeAccess($this->bkg_pickup_date)],
			'91'	 => ['title' => 'Ask for Manual Assignment', 'image' => Yii::app()->request->baseUrl . '/images/icon/activation.png', 'color' => 'primary', 'icon' => 'now', 'visible' => true],
			'92'	 => ['title' => 'Reallocate CSR', 'image' => Yii::app()->request->baseUrl . '/images/icon/allocate-self.png', 'color' => 'info', 'icon' => 'cab', 'visible' => ($this::checkSelfReassignment($this->bkg_id, $this->bkg_pickup_date))],
			'94'	 => ['title' => 'Allocate Dispatch CSR', 'image' => Yii::app()->request->baseUrl . '/images/icon/diapatch-csr.png', 'color' => 'info', 'icon' => 'cab', 'visible' => $this->checkAllocateCSRAccess($this->bkg_pickup_date)],
			'58'	 => ['title' => 'Delegate to OM', 'image' => Yii::app()->request->baseUrl . '/images/icon/escalate-om.png', 'color' => 'info', 'icon' => 'cab', 'visible' => ($this->bkgPref->bpr_assignment_level == 1 && $this->bkgPref->bpr_assignment_id == Yii::app()->user->getId())],
			//	'59' => ['title' => 'Allocate CSR', 'image' => Yii::app()->request->baseUrl . '/images/icon/allocate-csr.png', 'color' => 'info', 'icon' => 'cab', 'visible' => $this->checkAllocateCSRAccess()],
			'60'	 => ['title' => 'Self Assignment', 'image' => Yii::app()->request->baseUrl . '/images/icon/allocate-self.png', 'color' => 'info', 'icon' => 'cab', 'visible' => ($this->bkgPref->bpr_assignment_level == 2) && (Yii::app()->user->checkAccess('4 - OperationManager') || Yii::app()->user->checkAccess('preVendorAssignment') || Yii::app()->user->checkAccess('CriticalAssignment'))],
			'1'		 => ['title' => 'Customer Cancel', 'image' => Yii::app()->request->baseUrl . '/images/icon/customer_cancel.png', 'color' => 'warning', 'icon' => 'times', 'visible' => Yii::app()->user->checkAccess('bookingCancel')],
			'2'		 => ['title' => 'Delete Booking', 'image' => Yii::app()->request->baseUrl . '/images/icon/delete_booking.png', 'color' => 'danger', 'icon' => 'ban', 'visible' => Yii::app()->user->checkAccess('bookingDelete')],
			'3'		 => ['title' => 'Edit Booking', 'image' => Yii::app()->request->baseUrl . '/images/icon/edit_booking.png', 'color' => 'success', 'icon' => 'edit', 'visible' => (Yii::app()->user->checkAccess('bookingEdit') && Booking::checkLeadContactAccess($this->bkg_status, $this->bkgTrail->bkg_assign_csr, '', $this->bkgUserInfo->bkg_contact_no, $this->bkgTrail->bkg_create_user_type, $this->bkgTrail->bkg_create_user_id)) || ($this->bkg_status == 7 && Yii::app()->user->checkAccess('SuperAdmin'))],
			'4'		 => ['title' => 'Unassign Vendor', 'image' => Yii::app()->request->baseUrl . '/images/icon/unassign_vendor.png', 'color' => 'warning', 'icon' => 'cab', 'visible' => Yii::app()->user->checkAccess('bookingUnassignvendor')],
			'5'		 => ['title' => $act5Pefix . ' Driver Details', 'image' => Yii::app()->request->baseUrl . '/images/icon/driver_details.png', 'color' => 'danger', 'icon' => 'user-plus', 'visible' => Yii::app()->user->checkAccess('bookingCabDetails')],
			'6'		 => ['title' => 'Remind Vendor', 'image' => Yii::app()->request->baseUrl . '/images/icon/remind_vendor.png', 'color' => 'primary', 'icon' => 'bell', 'visible' => Yii::app()->user->checkAccess('bookingRemindvendor')],
			'7'		 => ['title' => 'Vendor Cancel', 'image' => Yii::app()->request->baseUrl . '/images/icon/vendor_cancel.png', 'color' => 'danger', 'icon' => 'user-times', 'visible' => Yii::app()->user->checkAccess('bookingVendorcancel')],
			'8'		 => ['title' => 'Mark Complete', 'image' => Yii::app()->request->baseUrl . '/images/icon/mark_complete.png', 'color' => 'success', 'icon' => 'check', 'visible' => Yii::app()->user->checkAccess('bookingComplete') && (($this->getPickupDiffinMinutes() + $this->bkg_trip_duration) <= 0) && ($this->bkgPref->bkg_duty_slip_required == 0)],
			'9'		 => ['title' => 'Mark Settled', 'image' => Yii::app()->request->baseUrl . '/images/icon/mark_settled.png', 'color' => 'warning', 'icon' => 'check', 'visible' => Yii::app()->user->checkAccess('bookingSettle')],
			'10'	 => ['title' => 'Mark Verified', 'image' => Yii::app()->request->baseUrl . '/images/icon/manually_verify.png', 'color' => 'success', 'icon' => 'check', 'visible' => Yii::app()->user->checkAccess('bookingVerify') && ($scvVctId != VehicleCategory::SHARED_SEDAN_ECONOMIC) && (UserInfo::getUserId() == $this->bkgTrail->bkg_assign_csr || Yii::app()->user->checkAccess('7 - Admin'))],
			'11'	 => ['title' => 'Send Discount Code', 'image' => Yii::app()->request->baseUrl . '/images/icon/send_discount_code.png', 'color' => 'warning', 'icon' => 'share', 'visible' => Yii::app()->user->checkAccess('bookingSenddiscount')],
			//	'12' => ['title' => 'Mark Complete with Amount', 'image' => Yii::app()->request->baseUrl . '/images/icon/mark_complete_with_amount.png', 'color' => 'primary', 'icon' => 'credit-card', 'visible' => Yii::app()->user->checkAccess('bookingCompletewithamount')],
			'13'	 => ['title' => 'Send Review Link', 'image' => Yii::app()->request->baseUrl . '/images/icon/send_review_link.png', 'color' => 'info', 'icon' => 'star-o', 'visible' => Yii::app()->user->checkAccess('bookingReviewlink')],
			'14'	 => ['title' => 'Show Log', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_log.png', 'color' => 'primary', 'icon' => 'list', 'visible' => true],
			'15'	 => ['title' => 'Undo Action', 'image' => Yii::app()->request->baseUrl . '/images/icon/undo_action.png', 'color' => 'danger', 'icon' => 'undo', 'visible' => (!in_array($this->bkg_flexxi_type, [1, 2]) && Yii::app()->user->checkAccess('bookingUndo'))],
			'16'	 => ['title' => 'Undo Action', 'image' => Yii::app()->request->baseUrl . '/images/icon/undo_action.png', 'color' => 'danger', 'icon' => 'undo', 'visible' => (!in_array($this->bkg_flexxi_type, [1, 2]) && Yii::app()->user->checkAccess('bookingUndo') || ($this->bkg_status == 7 && Yii::app()->user->checkAccess('SuperAdmin')))],
			'17'	 => ['title' => 'Send SMS to Driver', 'image' => Yii::app()->request->baseUrl . '/images/icon/send_SMS_to_driver.png', 'color' => 'info', 'icon' => 'envelope-o', 'visible' => Yii::app()->user->checkAccess('bookingSmsdriver')],
			'18'	 => ['title' => 'Create copies (v1)', 'image' => Yii::app()->request->baseUrl . '/images/icon/copy_booking.png', 'color' => 'info', 'icon' => 'copy', 'visible' => (Yii::app()->user->checkAccess('bookingAdd') && $this->bkg_status != 15)],
			'19'	 => ['title' => 'Reviewed', 'image' => Yii::app()->request->baseUrl . '/images/icon/reviewed.png', 'color' => 'primary', 'icon' => 'star', 'visible' => true],
			'20'	 => ['title' => 'Receipt', 'image' => Yii::app()->request->baseUrl . '/images/icon/receipt.png', 'color' => 'info', 'icon' => 'print', 'visible' => ((Yii::app()->user->checkAccess('bookingReceipt') && $this->bkg_pickup_date >= '2023-04-01 00:00:00') ? true : false)],
			'21'	 => ['title' => 'Add Remarks', 'image' => Yii::app()->request->baseUrl . '/images/icon/add_remarks.png', 'color' => 'info', 'icon' => 'comment', 'visible' => Yii::app()->user->checkAccess('bookingRemarks')],
			'22'	 => ['title' => 'Copy to Lead', 'image' => Yii::app()->request->baseUrl . '/images/icon/copy_to_lead.png', 'color' => 'info', 'icon' => 'retweet', 'visible' => Yii::app()->user->checkAccess('bookingCopytolead')],
			'23'	 => ['title' => 'Related Bookings', 'image' => Yii::app()->request->baseUrl . '/images/icon/related_bookings.png', 'color' => 'primary', 'icon' => 'chain', 'visible' => Yii::app()->user->checkAccess('bookingRelated')],
			'24'	 => ['title' => 'Send Payment Link', 'image' => Yii::app()->request->baseUrl . '/images/icon/send_payment_link.png', 'color' => 'success', 'icon' => 'rupee', 'visible' => true],
			'25'	 => ['title' => 'Resend Confirmation', 'image' => Yii::app()->request->baseUrl . '/images/icon/send_confirmation.png', 'color' => 'info', 'icon' => 'envelope', 'visible' => true],
			'26'	 => ['title' => 'Add Upsell', 'image' => Yii::app()->request->baseUrl . '/images/icon/add_upsell.png', 'color' => 'danger', 'icon' => 'sellsy', 'visible' => ($this->bkgTrail->bkg_upsell_status == 0)],
			//'27' => ['title' => 'Add Escalation', 'image' => Yii::app()->request->baseUrl . '/images/icon/add_escalation.png', 'color' => 'danger', 'icon' => 'exclamation', 'visible' => ($this->bkgTrail->bkg_escalation_status == 0)],
			'28'	 => ['title' => 'Remove Upsell', 'image' => Yii::app()->request->baseUrl . '/images/icon/remove_upsell.png', 'color' => 'success', 'icon' => 'sellsy', 'visible' => ($this->bkgTrail->bkg_upsell_status == 1)],
			//'29' => ['title' => 'Remove Escalation', 'image' => Yii::app()->request->baseUrl . '/images/icon/remove_escalation.png', 'color' => 'success', 'icon' => 'exclamation', 'visible' => ($this->bkgTrail->bkg_escalation_status == 1)],
			'30'	 => ['title' => 'Send Feedback', 'image' => Yii::app()->request->baseUrl . '/images/icon/send_feedback.png', 'color' => 'info', 'icon' => 'share', 'visible' => true],
			'31'	 => ['title' => 'Add Gozo Coins', 'image' => Yii::app()->request->baseUrl . '/images/icon/gozocoins.png', 'color' => 'success', 'icon' => 'gift', 'visible' => ($this->bkgUserInfo->bkg_user_id > 0 && Yii::app()->user->checkAccess('creditAddBooking'))],
			//'32' => ['title' => 'Set accounting flag', 'image' => Yii::app()->request->baseUrl . '/images/icon/set_accounting.png', 'color' => 'success', 'icon' => 'sellsy', 'visible' => ($this->bkgPref->bkg_account_flag == 0) || ($this->bkg_status == 7 && Yii::app()->user->checkAccess('SuperAdmin'))],
//'33' => ['title' => 'Clear accounting flag', 'image' => Yii::app()->request->baseUrl . '/images/icon/clear_account.png', 'color' => 'danger', 'icon' => 'sellsy', 'visible' => ($this->bkgPref->bkg_account_flag > 0) || ($this->bkg_status == 7 && Yii::app()->user->checkAccess('SuperAdmin'))],
			'34'	 => ['title' => 'Mark Car Bad', 'image' => Yii::app()->request->baseUrl . '/images/icon/bad_car.png', 'color' => 'info', 'visible' => ($this->bcb_cab_id <> null && ($this->badCabCount == 0))],
			'35'	 => ['title' => 'Mark Driver Bad', 'image' => Yii::app()->request->baseUrl . '/images/icon/bad_driver.png', 'color' => 'info', 'visible' => ($this->bcb_driver_id <> null && ($this->badDriverCount == 0))],
			'36'	 => ['title' => 'Mark Vendor Bad', 'image' => Yii::app()->request->baseUrl . '/images/icon/bad_vendor.png', 'color' => 'info', 'visible' => ($this->bcb_vendor_id <> null && ($this->badVendorCount == 0))],
			'37'	 => ['title' => 'Tracking Details', 'image' => Yii::app()->request->baseUrl . '/images/icon/uploads.png', 'color' => 'success', 'icon' => 'rupee', 'visible' => true],
			'38'	 => ['title' => 'Unlock Online Payment', 'image' => Yii::app()->request->baseUrl . '/images/icon/payment_unlock.png', 'color' => 'success', 'visible' => ($this->bkgTrail->bkg_payment_expiry_time < date('Y-m-d H:i:s') && $this->bkgTrail->bkg_payment_expiry_time <> null)],
			'39'	 => ['title' => 'Lock Online Payment', 'image' => Yii::app()->request->baseUrl . '/images/icon/payment_lock.png', 'color' => 'danger', 'visible' => ($this->bkgTrail->bkg_payment_expiry_time > date('Y-m-d H:i:s') && $this->bkgTrail->bkg_payment_expiry_time <> null)],
			//'40' => ['title' => 'Add Followup', 'image' => Yii::app()->request->baseUrl . '/images/icon/add_follow_up.png', 'color' => 'danger', 'visible' => ($this->bkgTrail->bkg_followup_active == 0)],
//'41' => ['title' => 'Followup Pending', 'image' => Yii::app()->request->baseUrl . '/images/icon/change_follow_up.png', 'color' => 'success', 'visible' => ($this->bkgTrail->bkg_followup_active == 1)],
			'42'	 => ['title' => 'Assign CSR', 'image' => Yii::app()->request->baseUrl . '/images/icon/lead_report/assign_CSR.png', 'color' => 'danger', 'visible' => ($this->bkg_status == 1)],
			'43'	 => ['title' => 'Block Message', 'image' => Yii::app()->request->baseUrl . '/images/icon/unblocked_msg.png', 'color' => 'danger', 'visible' => ($this->bkgPref->bkg_blocked_msg == 0) ? true : false],
			'44'	 => ['title' => 'Unblock Message', 'image' => Yii::app()->request->baseUrl . '/images/icon/blocked_msg.png', 'color' => 'success', 'visible' => ($this->bkgPref->bkg_blocked_msg == 1) ? true : false],
			'45'	 => ['title' => 'Modify Vendor Amount', 'image' => Yii::app()->request->baseUrl . '/images/editImg.png', 'color' => 'danger', 'visible' => ($this->bkg_status == 3)],
			'46'	 => ['title' => 'Profitability Remarks ', 'image' => Yii::app()->request->baseUrl . '/images/add_remarks.png', 'color' => 'info', 'visible' => ($this->bkgTrail->bkg_non_profit_flag == 1 && $this->bkgTrail->bkg_non_profit_override_flag == 0)],
			'47'	 => ['title' => 'Mark Reconfirmed', 'image' => Yii::app()->request->baseUrl . '/images/icon/send_re_confirmation.png', 'color' => 'warning', 'icon' => 'times', 'visible' => ($this->bkg_reconfirm_flag == 0) && Yii::app()->user->checkAccess('markReconfirmBooking')],
			'48'	 => ['title' => 'Get Reconfirmation', 'image' => Yii::app()->request->baseUrl . '/images/icon/send_re_confirmation.png', 'color' => 'info', 'icon' => 'times', 'visible' => $this->bkg_reconfirm_flag == 0],
			'49'	 => ['title' => 'Edit User Info', 'image' => Yii::app()->request->baseUrl . '/images/icon/user_info_edit.png', 'color' => 'success', 'icon' => 'edit', 'visible' => ($this->bkgUserInfo->bkg_user_id > 0 && ($this->bkg_status != 15 || $this->bkgTrail->bkg_create_user_type == 4 || Yii::app()->user->checkAccess('bookingContactAccess') || $this->bkgTrail->bkg_assign_csr == $userInfo->userId))],
			//'50' => ['title' => $this->bkg_status == 15 ? 'Delete Quoted Booking' : 'Expire Lead', 'image' => Yii::app()->request->baseUrl . '/images/icon/delete_booking.png', 'color' => 'danger', 'icon' => 'ban', 'visible' => Yii::app()->user->checkAccess('bookingVerify')],
			'51'	 => ['title' => 'Edit Booking Information', 'image' => Yii::app()->request->baseUrl . '/images/icon/edit_booking.png', 'color' => 'success', 'icon' => 'edit', 'visible' => Yii::app()->user->checkAccess('bookingEdit')],
			'52'	 => ['title' => 'Send Cab/Driver details', 'image' => Yii::app()->request->baseUrl . '/images/icon/send_driver_cab_details.png', 'color' => 'success', 'icon' => 'edit', 'visible' => true],
			'53'	 => ['title' => 'Show Driver Log', 'image' => Yii::app()->request->baseUrl . '/images/icon/driver/show_details.png', 'color' => 'primary', 'icon' => 'list', 'visible' => true],
			'54'	 => ['title' => 'Change subscriber addresses', 'image' => Yii::app()->request->baseUrl . '/images/icon/address.png', 'color' => 'primary', 'icon' => 'list', 'visible' => (in_array($this->bkg_flexxi_type, [1, 2]))],
			'55'	 => ['title' => 'Match Flexxi booking', 'image' => Yii::app()->request->baseUrl . '/images/matched.png', 'color' => 'primary', 'icon' => 'list', 'visible' => ($this->bkg_flexxi_type == 1 || $this->bkg_flexxi_type == 2)],
			//'56' => ['title' => 'Start Chat', 'image' => Yii::app()->request->baseUrl . '/images/icon/add_remarks.png', 'color' => 'info', 'icon' => 'comment', 'visible' => true],
//'56' => ['title' => 'Get supply from 3rd party vendors (WARNING: Could send 500+ SMS)', 'image' => Yii::app()->request->baseUrl . '/images/icon/sms.png', 'color' => 'info', 'icon' => 'paper-plane', 'visible' => (date('Y-m-d H:i:s', strtotime("+48 hour")) >= $this->bkg_pickup_date)],
			'57'	 => ['title' => 'Availabe 3rd party providers', 'image' => Yii::app()->request->baseUrl . '/images/icon/sms_list.png', 'color' => 'primary', 'icon' => 'list', 'visible' => true],
			'61'	 => ['title' => 'Start Chat', 'image' => Yii::app()->request->baseUrl . '/images/icon/chat.png', 'color' => 'info', 'icon' => 'comment', 'visible' => true],
			'62'	 => ['title' => 'Unblock Auto Assignment', 'image' => Yii::app()->request->baseUrl . '/images/icon/block.png', 'color' => 'info', 'icon' => 'cab', 'visible' => ($this->bkgPref->bkg_block_autoassignment == 1)],
			'63'	 => ['title' => 'Block Auto Assignment', 'image' => Yii::app()->request->baseUrl . '/images/icon/unblock.png', 'color' => 'info', 'icon' => 'cab', 'visible' => ($this->bkgPref->bkg_block_autoassignment == 0) && Yii::app()->user->checkAccess('blockAutoAssignment')],
			'64'	 => ['title' => 'Stop Auto Cancel', 'image' => Yii::app()->request->baseUrl . '/images/icon/enable_autocancel.png', 'color' => 'primary', 'icon' => 'cab', 'visible' => ($this->bkgPref->bkg_autocancel == 0)],
			'65'	 => ['title' => 'Enable Auto Cancel', 'image' => Yii::app()->request->baseUrl . '/images/icon/stop_autocancel.png', 'color' => 'primary', 'icon' => 'cab', 'visible' => ($this->bkgPref->bkg_autocancel == 1)],
			'66'	 => ['title' => 'Add Penalty to Vendor', 'image' => Yii::app()->request->baseUrl . '/images/icon/add_penalty.png', 'color' => 'primary', 'icon' => 'cab', 'visible' => true],
			'69'	 => ['title' => 'Approve Docs And Mark Complete', 'image' => Yii::app()->request->baseUrl . '/images/icon/mark_complete.png', 'color' => 'success', 'icon' => 'edit', 'visible' => Yii::app()->user->checkAccess('bookingComplete') && ($this->checkPickupTime == 1) && ($this->bkgPref->bkg_duty_slip_required == 1)],
			'67'	 => ['title' => 'Duty slip Required', 'image' => Yii::app()->request->baseUrl . '/images/icon/dutySlipOn.png', 'color' => 'danger', 'icon' => 'edit', 'visible' => ($this->bkgPref->bkg_duty_slip_required == 1)],
			'68'	 => ['title' => 'Duty slip Not Required', 'image' => Yii::app()->request->baseUrl . '/images/icon/dutySlipOff.png', 'color' => 'success', 'icon' => 'edit', 'visible' => ($this->bkgPref->bkg_duty_slip_required == 0)],
			'70'	 => ['title' => 'View Duty Slip', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_log.png', 'color' => 'info', 'icon' => 'edit', 'visible' => true],
			'71'	 => ['title' => 'Snooze CSR Allocation', 'image' => Yii::app()->request->baseUrl . '/images/icon/snooze.png', 'color' => 'info', 'icon' => 'edit', 'visible' => ($this->bkgPref->bpr_assignment_level == 1 && $this->bkgPref->bpr_assignment_id == Yii::app()->user->getId() && $calWH > 14 && $this->bkgPref->bkg_critical_assignment == 0)],
			//bookingTrack change data//Yii::app()->user->checkAccess('sosTurnOff') &&
			'72'	 => ['title' => 'Turn off SOS', 'image' => Yii::app()->request->baseUrl . '/images/icon/sos_off.png', 'color' => 'danger', 'icon' => 'edit', 'visible' => (Yii::app()->user->checkAccess('sosTurnOff') && ($this->bkgTrack->bkg_sos_sms_trigger == 2 || $this->bkgTrack->bkg_drv_sos_sms_trigger == 2) && $this->bkg_status != 15)],
			'73'	 => ['title' => 'Approve Refund', 'image' => Yii::app()->request->baseUrl . '/images/icon/apvrnd.png', 'color' => 'success', 'icon' => 'edit', 'visible' => (Yii::app()->user->checkAccess('refundApproval') && $this->bkg_status == 9 && ($this->bkgInvoice->biv_refund_approval_status == 1 || $this->bkgInvoice->biv_refund_approval_status == 2))],
			'74'	 => ['title' => 'Disapprove Refund', 'image' => Yii::app()->request->baseUrl . '/images/icon/rejrnd.png', 'color' => 'danger', 'icon' => 'edit', 'visible' => (Yii::app()->user->checkAccess('refundApproval') && $this->bkg_status == 9 && ($this->bkgInvoice->biv_refund_approval_status == 1 || $this->bkgInvoice->biv_refund_approval_status == 3))],
			'75'	 => ['title' => 'No Show', 'image' => Yii::app()->request->baseUrl . '/images/icon/rejrnd.png', 'color' => 'success', 'icon' => 'edit', 'visible' => ($this->bkgTrack->bkg_is_no_show == 1)],
			'76'	 => ['title' => 'Create copies (v2)', 'image' => Yii::app()->request->baseUrl . '/images/icon/copy_booking.png', 'color' => 'info', 'icon' => 'copy', 'visible' => (Yii::app()->user->checkAccess('bookingAdd') && in_array($this->bkg_status, [15, 2, 3, 5]))],
			'77'	 => ['title' => 'Manually Trigger Assignment', 'image' => Yii::app()->request->baseUrl . '/images/icon/assign_vendor.png', 'color' => 'info', 'icon' => 'cab', 'visible' => ($this->bkgBcb->bcb_is_max_out == 0 && ($this->bkgPref->bkg_manual_assignment == 1 || Yii::app()->user->checkAccess('MaxOutBooking') || $this->bkgTrail->bkg_assign_csr == $UserInfo->getUserId() || $this->bkgPref->bpr_assignment_id == $UserInfo->getUserId()))],
			'78'	 => ['title' => 'Refund from Booking', 'image' => Yii::app()->request->baseUrl . '/images/icon/rejrnd.png', 'color' => 'warning', 'icon' => 'rupee', 'visible' => (((($this->bkgInvoice->bkg_advance_amount - $this->bkgInvoice->bkg_refund_amount) > 0 && $this->bkg_status == 9 ) || ($this->bkgInvoice->bkg_advance_amount + $this->bkgInvoice->bkg_vendor_collected - $this->bkgInvoice->bkg_refund_amount > $this->bkgInvoice->bkg_total_amount - 1 && $this->bkg_status == 6 )) && (Yii::app()->user->checkAccess('refundProcessing') ))],
			'79'	 => ['title' => 'Refund from Wallet', 'image' => Yii::app()->request->baseUrl . '/images/icon/rejrnd.png', 'color' => 'danger', 'icon' => 'rupee', 'visible' => ((($this->bkgInvoice->bkg_refund_amount) > 0 && 1) && (Yii::app()->user->checkAccess('refundProcessing') ))],
			'80'	 => ['title' => 'Car Verify', 'image' => Yii::app()->request->baseUrl . '/images/icon/carVerify.png', 'color' => 'danger', 'icon' => 'edit', 'visible' => true],
			'81'	 => ['title' => 'Expire Quote', 'image' => Yii::app()->request->baseUrl . '/images/icon/sos_off.png', 'color' => 'danger', 'icon' => 'edit', 'visible' => true],
			'83'	 => ['title' => 'Partner API Sync', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_log.png', 'color' => 'danger', 'icon' => 'sellsy', 'visible' => (($this->bkg_agent_id > 0) && (Yii::app()->user->checkAccess('PartnerTrackingDetails')))],
			'84'	 => ['title' => 'BKPN', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_log.png', 'color' => 'info', 'icon' => 'sellsy', 'visible' => false],
			'85'	 => ['title' => 'BKVN', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_log.png', 'color' => 'info', 'icon' => 'sellsy', 'visible' => false],
			'86'	 => ['title' => 'Notify Vendor', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_log.png', 'color' => 'info', 'icon' => 'sellsy', 'visible' => Yii::app()->user->checkAccess('PreAssignAccess')],
			'87'	 => ['title' => 'View Archive Mail', 'color' => 'danger', 'icon' => 'share', 'visible' => true],
			'88'	 => ['title' => 'Assign with > Gozo NOW', 'image' => Yii::app()->request->baseUrl . '/images/icon/activation.png', 'color' => 'primary', 'icon' => 'now', 'visible' => ($this->bkgPref->bkg_is_gozonow == 0 && $this->bkg_reconfirm_flag == 1 && $this->bkg_status == 2 && (Yii::app()->user->checkAccess('activateGozoNow') || $this->bkgPref->bkg_manual_assignment == 1 || $this->bkgPref->bkg_critical_assignment == 1))],
			'89'	 => ['title' => 'Show Gozo now bids', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_list.png', 'color' => 'primary', 'icon' => 'now', 'visible' => ((($this->bkgPref->bkg_is_gozonow == 2 && $this->bkg_reconfirm_flag == 1) || ($this->bkgPref->bkg_is_gozonow == 1 && $this->bkg_agent_id == Config::get('transferz.partner.id'))) && $this->bkg_status == 2 && (Yii::app()->user->checkAccess('activateGozoNow') || $this->bkgPref->bkg_manual_assignment == 1 || $this->bkgPref->bkg_critical_assignment == 1))],
			'90'	 => ['title' => 'Re-notify vendors for Gozo Now', 'image' => Yii::app()->request->baseUrl . '/images/icon/reactivation.png', 'color' => 'primary', 'icon' => 'now', 'visible' => ((($this->bkgPref->bkg_is_gozonow == 2 && $this->bkg_reconfirm_flag == 1) || $this->bkgPref->bkg_is_gozonow == 1) && $this->bkg_status == 2 && (Yii::app()->user->checkAccess('activateGozoNow') || $this->bkgPref->bkg_manual_assignment == 1 || $this->bkgPref->bkg_critical_assignment == 1))],
			'93'	 => ['title' => 'Self Dispatch Assignment', 'image' => Yii::app()->request->baseUrl . '/images/icon/allocate-self.png', 'color' => 'info', 'icon' => 'cab', 'visible' => ( (in_array($this->bkgPref->bpr_assignment_level, [2, 3]) || $this->bkgPref->bkg_critical_assignment == 1 || self::checkTimeAccess($this->bkg_pickup_date) ) && ($this->bkg_status == 2) && ($this::checkDTMAssignmentLead($this->bkg_id)) )],
			'95'	 => ['title' => 'Edit Traveller Info', 'image' => Yii::app()->request->baseUrl . '/images/icon/user_traveler_edit.png', 'color' => 'success', 'icon' => 'edit', 'visible' => Yii::app()->user->checkAccess('editTravellerInfo')],
			'96'	 => ['title' => 'Customer No Show', 'image' => Yii::app()->request->baseUrl . '/images/icon/customerNoShow.png', 'color' => 'success', 'icon' => 'edit', 'visible' => true],
			'97'	 => ['title' => 'Driver No Show', 'image' => Yii::app()->request->baseUrl . '/images/icon/vendorNoshow.png', 'color' => 'success', 'icon' => 'edit', 'visible' => true],
			'99'	 => ['title' => 'Operator API Sync', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_log.png', 'color' => 'danger', 'icon' => 'sellsy', 'visible' => true],
			'100'	 => ['title' => 'Block Auto UnAssignment', 'image' => Yii::app()->request->baseUrl . '/images/icon/block.png', 'color' => 'info', 'icon' => 'cab', 'visible' => ($this->bkgBcb->bcb_block_autounassignment == 0 ) && (Yii::app()->user->checkAccess('blockAutoUnassignment'))],
			'101'	 => ['title' => 'Unblock Auto UnAssignment', 'image' => Yii::app()->request->baseUrl . '/images/icon/block.png', 'color' => 'info', 'icon' => 'cab', 'visible' => ($this->bkgBcb->bcb_block_autounassignment == 1) && (Yii::app()->user->checkAccess('blockAutoUnassignment'))],
			'102'	 => ['title' => 'Send Booking Details to Customer', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_log.png', 'color' => 'info', 'icon' => 'cab', 'visible' => (in_array($this->bkg_status, [1, 15, 2, 3, 5]) && (empty($this->bkg_agent_id) || $this->bkg_agent_id == 1249) && 1)],
			'103'	 => ['title' => 'Allow CNG Vehicle', 'image' => Yii::app()->request->baseUrl . '/images/icon/add_upsell.png', 'color' => 'danger', 'icon' => 'sellsy', 'visible' => ($this->bkgPref->bkg_cng_allowed == 0) && (Yii::app()->user->checkAccess('allowCNGVehicle'))],
			'104'	 => ['title' => 'Driver Custom Event Trigger', 'image' => Yii::app()->request->baseUrl . '/images/icon/show_log.png', 'color' => 'danger', 'icon' => 'sellsy', 'visible' => ($this->bkg_agent_id > 0 && ($this::checkOneHrsPicktime($this->bkg_pickup_date)))],
		];

		$bkid	 = $this->bkg_id;
		$btn	 = '<div class="btn-group1">';

		if (isset($action[$this->bkg_status]))
		{
			foreach ($action[$this->bkg_status] as $key)
			{
				if (!$actionTitle[$key]['visible'])
				{
					continue;
				}
				if (($button_type == 'label-edit' || $button_type == 'label-user-edit') && ($key == 3 || $key == 49))
				{
					continue;
				}
				$css = '';
				if ($button_type != 'icon')
				{
					$css = "btn btn-{$actionTitle[$key]['color']} btn-sm mb5 mr5";
				}
				$btnView = ($button_type == 'icon') ? "<img src='{$actionTitle[$key]['image']}' style='cursor:pointer'>" : $actionTitle[$key]['title'];
				$hash	 = Yii::app()->shortHash->hash($bkid);

//if (in_array($this->bkg_status, [2, 15]) && (($key == '24' && !$enablePaymentLink ) || ($key == '25' && !$enableConfirmationLink )) && !Yii::app()->user->checkAccess('7 - Admin'))
//{
//	$btn .= "<a class=\"$css disabled\" id=\"bkaction_{$bkid}_{$key}\" onclick=\"#\" title=\"{$actionTitle[$key]['title']}\" style=\"\">$btnView</a>";
//}
//else
//{

				$btn .= "<a class=\"$css\" id=\"bkaction_{$bkid}_{$key}\" onclick=\"adminAction($key,$bkid,{$this->bkg_status},'$hash');\" title=\"{$actionTitle[$key]['title']}\" style=\"\">$btnView</a>";
//}
			}
		}
		$defaultButtons = ['21', '14', '18', '11', '99'];
		foreach ($defaultButtons as $defKey)
		{
			$cssDef = '';
			if ($button_type != 'icon')
			{
				$cssDef = "btn btn-{$actionTitle[$defKey]['color']} btn-sm mb5 mr5";
			}
			if ($actionTitle[$defKey]['visible'])
			{
				$btnView1	 = ($button_type == 'icon') ? "<img src='{$actionTitle[$defKey]['image']}' style='cursor:pointer'>" : $actionTitle[$defKey]['title'];
				$btn		 .= "<a class=\"$cssDef\" id=\"bkaction_{$bkid}_$defKey\" onclick=\"adminAction($defKey,$bkid,{$this->bkg_status},{$this->mycallPage});\" title=\"{$actionTitle[$defKey]['title']}\" style=\"\">$btnView1</a>";
			}
		}

		if ($isRelatedBooking == '23' && $actionTitle['23']['visible'])
		{
			$key4	 = 23;
			$css4	 = '';
			if ($button_type != 'icon')
			{
				$css4 = "btn btn-{$actionTitle[$key4]['color']} btn-sm mb5 mr5";
			}
			$btnView4	 = ($button_type == 'icon') ? "<img src='{$actionTitle[$key4]['image']}' style='cursor:pointer'>" : $actionTitle[$key4]['title'];
			$btn		 .= "<a class=\"$css4\" id=\"bkaction_{$bkid}_94\" onclick=\"adminAction($key4,$bkid,{$this->bkg_status});\" title=\"{$actionTitle[$key4]['title']}\" style=\"\">$btnView4</a>";
		}

		$btn1 = '';
		if ($isBkpn == '84')
		{
			$key4	 = 84;
			$css4	 = '';
			if ($button_type != 'icon')
			{
				$css4 = "btn btn-{$actionTitle[$key4]['color']} btn-sm mt5 mr5";
			}
			$btnView4	 = ($button_type == 'icon') ? "<img src='{$actionTitle[$key4]['image']}' style='cursor:pointer'>" : $actionTitle[$key4]['title'];
			$paymentUrl	 = BookingUser::getPaymentLinkByPhone($bkid);
			$btn1		 .= "<a class=\"$css4\" id=\"bkaction_{$bkid}_94\" href=\"$paymentUrl\" target=\"_blank\" title=\"{$actionTitle[$key4]['title']}\" style=\"\">$btnView4</a>";
		}

		if ($isBkvn == '85')
		{
			$key4	 = 85;
			$css4	 = '';
			if ($button_type != 'icon')
			{
				$css4 = "btn btn-{$actionTitle[$key4]['color']} btn-sm mt5 mr5";
			}
			$btnView4 = ($button_type == 'icon') ? "<img src='{$actionTitle[$key4]['image']}' style='cursor:pointer'>" : $actionTitle[$key4]['title'];

			if (isset($this->bkgBcb->bcb_vendor_id))
			{
				$hashBkgId	 = Yii::app()->shortHash->hash($bkid);
				$hashVndId	 = Yii::app()->shortHash->hash($this->bkgBcb->bcb_vendor_id);
				$vendorLink	 = '/bkvn/' . $hashBkgId . '/' . $hashVndId;
				$btn1		 .= "<a class=\"$css4\" id=\"bkaction_{$bkid}_94\" href=\"$vendorLink\" target=\"_blank\" title=\"{$actionTitle[$key4]['title']}\" style=\"\">$btnView4</a>";
			}
			else
			{
				$btn1 .= "<a class=\"$css4\" id=\"bkaction_{$bkid}_94\" onclick=\"adminAction($key4,$bkid,{$this->bkg_status});\" title=\"{$actionTitle[$key4]['title']}\" style=\"\">$btnView4</a>";
			}
		}


		$btn .= "</div>";
		if ($type != '')
		{
			return $btn1;
		}
		else
		{
			return $btn;
		}
	}

	public function checkAllocateCSRAccess($bkgPickupDate = "")
	{
		$isOM			 = Yii::app()->user->checkAccess('4 - OperationManager');
		$checkRBACAccess = Yii::app()->user->checkAccess('preVendorAssignment') || Yii::app()->user->checkAccess('CriticalAssignment');
		$checkTimeAccess = $bkgPickupDate != "" ? self::checkTimeAccess($bkgPickupDate) : false;
		$checkAccess	 = ($checkTimeAccess || $checkRBACAccess || ($isOM && ($this->bkgPref->bkg_critical_assignment == 1 || $this->bkgPref->bkg_critical_score >= 0.84 || in_array($this->bkgPref->bpr_assignment_level, [2, 3]) || in_array($this->bkg_booking_type, [4, 9, 10, 11, 12, 14, 15]))));
		return $checkAccess;
	}

	public function getcustDetails_old($vendorId, $status, $time = '', $flag = null)
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		$uberAgentId = Yii::app()->params['uberAgentId'];
		$pickup		 = '';

		if ($time != '')
		{
			$pickup = ' AND bkg.bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 960 MINUTE)';
		}
		if ($flag == null)
		{
			$flagCondition = '';
		}
		else
		{
			$flagCondition = ($flag == null) ? '' : ' AND (';
			foreach ($flag as $value)
			{
				$flagCondition	 .= ($value == 1) ? " (bkg.bkg_pickup_date > '" . Filter::getDBDateTime() . "') OR" : '';
				$flagCondition	 .= ($value == 2) ? ' (bkgtrack.bkg_ride_start = 1 AND  bkgtrack.bkg_ride_complete = 0 ) OR' : '';
				$flagCondition	 .= ($value == 3) ? ' (bkgtrack.bkg_ride_complete = 1) OR' : '';
				$flagCondition	 .= ($value == 4) ? ' (bkgpref.bkg_cng_allowed = 1) OR' : '';
			}
			$flagCondition	 = substr($flagCondition, 0, -2);
			$flagCondition	 .= ($flag == null) ? '' : ")";
		}


		$qry = "SELECT DISTINCT (bkg.bkg_id), count(1) tot, GetUnassignPenaltySlabs(bkgtrail.bkg_assigned_at, bkg.bkg_pickup_date, bcb.bcb_vendor_amount, bcb.bcb_assign_mode, vrs_dependency) as cancelSlabs, bkg.bkg_flexxi_type, IF(bkg.bkg_flexxi_type IN(1,2),true,false) isFlexxi,
				bkgpref.bkg_duty_slip_required AS is_duty_slip_required,
				IF(bkgpref.bkg_cng_allowed =1 AND (bkgaddinfo.bkg_num_large_bag < 2 OR bkgaddinfo.bkg_num_large_bag >1 ) ,1,0 ) AS is_cng_allowed,
				bcb.bcb_id, bkg.bkg_booking_id, bcb.bcb_vendor_amount AS vendor_amount, bkg.bkg_modified_on,
				bkg.bkg_pickup_address, bkg.bkg_drop_address,bkg.bkg_pickup_lat,bkg.bkg_pickup_long, bkgusr.bkg_user_fname as bkg_user_name, bkg.bkg_trip_distance,
				bkginvoice.bkg_night_pickup_included, bkginvoice.bkg_night_drop_included, vht.vht_model AS bkg_cab_assigned,
				agt.vnd_name AS bkg_vendor_name, bkg.bkg_status, IFNULL(bkgaddinfo.bkg_no_person,0) bkg_no_person, bkginvoice.bkg_driver_allowance_amount,
				bkginvoice.bkg_parking_charge,bkgusr.bkg_user_lname, bkg.bkg_pickup_date,bkgusr.bkg_country_code AS bkg_country_code, phn.phn_phone_no AS bkg_driver_number,
				drv.drv_name AS bkg_driver_name, vhc.vhc_number AS bkg_cab_number, bkg.bkg_trip_duration,
				IF(bkgtrack.bkg_is_trip_verified=1,2,bkgpref.bkg_trip_otp_required) bpr_trip_otp_required ,
				agt.vnd_id AS bkg_vendor_id,
				IF(bkg.bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 240 MINUTE), bkgusr.bkg_contact_no, '') AS bkg_contact_no,
				IF(bkgusr.bkg_alt_contact_no IS NULL,'',bkgusr.bkg_alt_contact_no) as bkg_alternate_contact, bkgusr.bkg_user_email,
				bkgtrack.bkg_ride_start, bkgtrack.bkg_ride_complete, bkginvoice.bkg_total_amount, vct.vct_desc AS bkg_cab_type, bkg.bkg_booking_type,
				bkg.bkg_instruction_to_driver_vendor, bkginvoice.bkg_advance_amount, bkginvoice.bkg_due_amount, vhc.vhc_id, drv.drv_id,
				bkginvoice.bkg_is_toll_tax_included,bkgpref.bkg_is_gozonow isGozoNow,
				MAX(IF(bkg_return_date IS NOT NULL, bkg_return_date, DATE_ADD(bkg.bkg_pickup_date, INTERVAL bkg.bkg_trip_duration MINUTE))) AS trip_completion_time,
				bkginvoice.bkg_is_state_tax_included, bkg.bkg_reconfirm_flag as bkg_reconfirm_id, bkgtrack.bkg_is_no_show,bkgpref.bkg_driver_app_required,
				vct.vct_label cab_model_assigned, 1 AS show_total_amount, IFNULL(rtg.rtg_vendor_customer,0) rtg_vendor_customer,
				IFNULL(rtg.rtg_vendor_csr,0) rtg_vendor_csr, IFNULL(rtg.rtg_vendor_review,0) rtg_vendor_review,
				brt1.brt_pickup_datetime, brt1.brt_trip_duration, IF(bkg.bkg_agent_id > 0, 1, 0) AS is_agent,
				IF(bkg.bkg_agent_id =$uberAgentId,'UBER',IF(bkg.bkg_agent_id is null,'','B2B')) As agent_name,
				IF(vct.vct_id IN(5, 6), '1', '0') AS is_assured, vct.vct_label AS cab_model, bkgpref.bkg_is_gozonow
				FROM `booking_cab` bcb
				INNER JOIN booking bkg ON bcb.bcb_id = bkg.bkg_bcb_id AND bcb.bcb_active = 1 AND bkg.bkg_active = 1
				INNER JOIN booking_route brt1 ON brt1.brt_bkg_id = bkg.bkg_id AND brt1.brt_active = 1
				JOIN booking_user bkgusr ON bkg.bkg_id = bkgusr.bui_bkg_id
				JOIN booking_add_info bkgaddinfo ON bkg.bkg_id = bkgaddinfo.bad_bkg_id
				JOIN booking_invoice bkginvoice ON bkg.bkg_id = bkginvoice.biv_bkg_id
				JOIN booking_trail bkgtrail ON bkg.bkg_id = bkgtrail.btr_bkg_id
				JOIN booking_track bkgtrack ON bkg.bkg_id = bkgtrack.btk_bkg_id
				JOIN booking_pref bkgpref ON bkg.bkg_id = bkgpref.bpr_bkg_id
				INNER JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
				LEFT JOIN vendor_stats ON vrs_vnd_id=agt.vnd_id
				LEFT JOIN `vehicles` vhc ON vhc.vhc_id = bcb.bcb_cab_id
				LEFT JOIN `vehicle_types` vht ON vht.vht_id = vhc.vhc_type_id
				INNER JOIN `svc_class_vhc_cat` scv ON bkg.bkg_vehicle_type_id = scv.scv_id
				INNER JOIN `vehicle_category` vct ON scv.scv_vct_id = vct.vct_id
				INNER JOIN `service_class` sc ON sc.scc_id = scv.scv_scc_id
				LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id AND drv.drv_id = drv.drv_ref_code AND drv.drv_active =1
				LEFT JOIN contact_profile cp ON cp.cr_is_driver = drv.drv_id AND cp.cr_status =1
				LEFT JOIN contact ctt ON ctt.ctt_id = cp.cr_contact_id and ctt.ctt_active =1 AND ctt.ctt_id = ctt.ctt_ref_code
				LEFT JOIN contact_phone phn ON phn.phn_contact_id=ctt.ctt_id AND phn.phn_is_primary=1 AND phn.phn_active=1
				LEFT JOIN `ratings` rtg ON
				bkg.bkg_id = rtg.rtg_booking_id
				WHERE
				bcb.bcb_vendor_id = '$vendorId' AND bkg.bkg_status IN ('$status') $pickup $flagCondition
				GROUP BY
				bkg.bkg_id
				ORDER BY
			 	bcb.bcb_id,bkg.bkg_flexxi_type,
				bkg.bkg_pickup_date";

		Logger::create('QUERY ::: ' . $qry);
		$recordset = DBUtil::queryAll($qry, DBUtil::SDB());

		foreach ($recordset as $key => $val)
		{
			if ($val['agent_name'] == 'UBER')
			{
				$recordset[$key]['bkg_pickup_date'] = BookingCab::model()->getPickupDateTime("Y-m-d H:i:s", $recordset[$key]['bkg_pickup_date'], $uberAgentId);
			}

			if ($val['tot'] > 1)
			{
				$recordset[$key]['bkg_route_name'] = BookingRoute::getRouteFullNameByBcb($val['bcb_id']);
			}
			else
			{
				$recordset[$key]['bkg_route_name'] = BookingRoute::getRouteCityFullName($val['bkg_id']);
			}
			if ($recordset[$key]['bkg_route_name'] == '')
			{
				$recordset[$key]['bkg_route_name'] = BookingRoute::getRouteCityFullName($val['bkg_id']);
			}
//			if ($recordset[$key]['bkg_pickup_lat'] != "")
//			{
//				$recordset[$key]['bkg_pickup_lat'] = Cities::model()->getCtyLatLongWithBound($val['bkg_id']);
//			}
			$recordset[$key]['bkg_driver_allowance_amount']	 = (int) $val['bkg_driver_allowance_amount'];
			$recordset[$key]['bkg_parking_charge']			 = (int) $val['bkg_parking_charge'];

			if ($status == 5)
			{
				$recordset[$key]['canceledAllowed']	 = (int) (($val['bkg_is_gozonow'] == 1) ? 0 : 1);
				$recordset[$key]['reassign']		 = (int) (($val['bkg_is_gozonow'] == 1) ? 0 : 1);
			}
		}

		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
		return $recordset;
	}

	public function getcustDetails($vendorId, $status, $time = '', $flag = null)
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		$uberAgentId = Yii::app()->params['uberAgentId'];
		$pickup		 = '';

		if ($time != '')
		{
			$pickup = ' AND bkg.bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 960 MINUTE)';
		}
		if ($flag == null)
		{
			$flagCondition = '';
		}
		else
		{
			$flagCondition = ($flag == null) ? '' : ' AND (';
			foreach ($flag as $value)
			{
				$flagCondition	 .= ($value == 1) ? " (bkg.bkg_pickup_date > '" . Filter::getDBDateTime() . "') OR" : '';
				$flagCondition	 .= ($value == 2) ? ' (bkgtrack.bkg_ride_start = 1 AND  bkgtrack.bkg_ride_complete = 0 ) OR' : '';
				$flagCondition	 .= ($value == 3) ? ' (bkgtrack.bkg_ride_complete = 1) OR' : '';
				$flagCondition	 .= ($value == 4) ? ' (bkgpref.bkg_cng_allowed = 1) OR' : '';
			}
			$flagCondition	 = substr($flagCondition, 0, -2);
			$flagCondition	 .= ($flag == null) ? '' : ")";
		}


		$qry		 = "SELECT DISTINCT (bkg.bkg_id), count(1) tot, GetUnassignPenaltySlabs(bkgtrail.bkg_assigned_at, bkg.bkg_pickup_date, bcb.bcb_vendor_amount, bcb.bcb_assign_mode, vrs_dependency) as cancelSlabs, bkg.bkg_flexxi_type, IF(bkg.bkg_flexxi_type IN(1,2),true,false) isFlexxi,
				bkgpref.bkg_duty_slip_required AS is_duty_slip_required,
				IF(bkgpref.bkg_cng_allowed =1 AND (bkgaddinfo.bkg_num_large_bag < 2 OR bkgaddinfo.bkg_num_large_bag >1 ) ,1,0 ) AS is_cng_allowed,
				bcb.bcb_id, bkg.bkg_booking_id, bcb.bcb_vendor_amount AS vendor_amount, bkg.bkg_modified_on,
				bkg.bkg_pickup_address, bkg.bkg_drop_address,bkg.bkg_pickup_lat,bkg.bkg_pickup_long, bkgusr.bkg_user_fname as bkg_user_name, bkg.bkg_trip_distance,
				bkginvoice.bkg_night_pickup_included, bkginvoice.bkg_night_drop_included, vht.vht_model AS bkg_cab_assigned,
				agt.vnd_name AS bkg_vendor_name, bkg.bkg_status, IFNULL(bkgaddinfo.bkg_no_person,0) bkg_no_person, bkginvoice.bkg_driver_allowance_amount,
				bkginvoice.bkg_parking_charge,bkgusr.bkg_user_lname, bkg.bkg_pickup_date,bkgusr.bkg_country_code AS bkg_country_code, phn.phn_phone_no AS bkg_driver_number,
				drv.drv_name AS bkg_driver_name, vhc.vhc_number AS bkg_cab_number, bkg.bkg_trip_duration,
				IF(bkgtrack.bkg_is_trip_verified=1,2,bkgpref.bkg_trip_otp_required) bpr_trip_otp_required ,
				agt.vnd_id AS bkg_vendor_id,
				IF(bkg.bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 240 MINUTE), bkgusr.bkg_contact_no, '') AS bkg_contact_no,
				IF(bkgusr.bkg_alt_contact_no IS NULL,'',bkgusr.bkg_alt_contact_no) as bkg_alternate_contact, bkgusr.bkg_user_email,
				bkgtrack.bkg_ride_start, bkgtrack.bkg_ride_complete, bkginvoice.bkg_total_amount, TRIM(SUBSTRING_INDEX(scv.scv_label, '(', 1))  AS bkg_cab_type, bkg.bkg_booking_type,
				bkg.bkg_instruction_to_driver_vendor, bkginvoice.bkg_advance_amount, bkginvoice.bkg_due_amount, vhc.vhc_id, drv.drv_id,
				bkginvoice.bkg_is_toll_tax_included,bkgpref.bkg_is_gozonow isGozoNow,
				MAX(IF(bkg_return_date IS NOT NULL, bkg_return_date, DATE_ADD(bkg.bkg_pickup_date, INTERVAL bkg.bkg_trip_duration MINUTE))) AS trip_completion_time,
				bkginvoice.bkg_is_state_tax_included, bkg.bkg_reconfirm_flag as bkg_reconfirm_id, bkgtrack.bkg_is_no_show,bkgpref.bkg_driver_app_required,
				TRIM(SUBSTRING_INDEX(scv.scv_label, '(', 1)) AS cab_model_assigned, 1 AS show_total_amount, IFNULL(rtg.rtg_vendor_customer,0) rtg_vendor_customer,
				IFNULL(rtg.rtg_vendor_csr,0) rtg_vendor_csr, IFNULL(rtg.rtg_vendor_review,0) rtg_vendor_review,
				brt1.brt_pickup_datetime, brt1.brt_trip_duration, IF(bkg.bkg_agent_id > 0, 1, 0) AS is_agent,
				IF(bkg.bkg_agent_id =$uberAgentId,'UBER',IF(bkg.bkg_agent_id is null,'','B2B')) As agent_name,
				IF(vct.vct_id IN(5, 6), '1', '0') AS is_assured, TRIM(SUBSTRING_INDEX(scv.scv_label, '(', 1)) AS cab_model, bkgpref.bkg_is_gozonow,sc.scc_label AS cab_lavel, vht.vht_make
				FROM `booking_cab` bcb
				INNER JOIN booking bkg ON bcb.bcb_id = bkg.bkg_bcb_id AND bcb.bcb_active = 1 AND bkg.bkg_active = 1
				INNER JOIN booking_route brt1 ON brt1.brt_bkg_id = bkg.bkg_id AND brt1.brt_active = 1
				JOIN booking_user bkgusr ON bkg.bkg_id = bkgusr.bui_bkg_id
				JOIN booking_add_info bkgaddinfo ON bkg.bkg_id = bkgaddinfo.bad_bkg_id
				JOIN booking_invoice bkginvoice ON bkg.bkg_id = bkginvoice.biv_bkg_id
				JOIN booking_trail bkgtrail ON bkg.bkg_id = bkgtrail.btr_bkg_id
				JOIN booking_track bkgtrack ON bkg.bkg_id = bkgtrack.btk_bkg_id
				JOIN booking_pref bkgpref ON bkg.bkg_id = bkgpref.bpr_bkg_id
				INNER JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
				LEFT JOIN vendor_stats ON vrs_vnd_id=agt.vnd_id
				LEFT JOIN `vehicles` vhc ON vhc.vhc_id = bcb.bcb_cab_id
				LEFT JOIN vcv_cat_vhc_type vcvt ON vcvt.vcv_vht_id = vhc.vhc_type_id
				LEFT JOIN `vehicle_category` vhl ON vhl.vct_id = vcvt.vcv_vct_id
				LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id AND drv.drv_id = drv.drv_ref_code AND drv.drv_active =1
				LEFT JOIN contact_profile cp ON cp.cr_is_driver = drv.drv_id AND cp.cr_status =1
				LEFT JOIN contact ctt ON ctt.ctt_id = cp.cr_contact_id and ctt.ctt_active =1 AND ctt.ctt_id = ctt.ctt_ref_code
				LEFT JOIN contact_phone phn ON phn.phn_contact_id=ctt.ctt_id AND phn.phn_is_primary=1 AND phn.phn_active=1
				LEFT JOIN `svc_class_vhc_cat` scv ON bkg.bkg_vehicle_type_id = scv.scv_id
				LEFT JOIN `vehicle_category` vct ON scv.scv_vct_id = vct.vct_id
				INNER JOIN `service_class` sc ON sc.scc_id = scv.scv_scc_id
				LEFT JOIN `vehicle_types` vht ON vht.vht_id = scv.scv_model
				LEFT JOIN `ratings` rtg ON
				bkg.bkg_id = rtg.rtg_booking_id
				WHERE
				bcb.bcb_vendor_id = '$vendorId' AND bkg.bkg_status IN ('$status') $pickup $flagCondition
				GROUP BY
				bkg.bkg_id
				ORDER BY
			 	bkg.bkg_pickup_date";
//print_r($qry);exit;
		Logger::create('QUERY ::: ' . $qry);
		$recordset	 = DBUtil::queryAll($qry, DBUtil::SDB());

		foreach ($recordset as $key => $val)
		{
			if ($val['agent_name'] == 'UBER')
			{
				$recordset[$key]['bkg_pickup_date'] = BookingCab::model()->getPickupDateTime("Y-m-d H:i:s", $recordset[$key]['bkg_pickup_date'], $uberAgentId);
			}

			if ($val['tot'] > 1)
			{
				$recordset[$key]['bkg_route_name'] = BookingRoute::getRouteFullNameByBcb($val['bcb_id']);
			}
			else
			{
				$recordset[$key]['bkg_route_name'] = BookingRoute::getRouteCityFullName($val['bkg_id']);
			}
			if ($recordset[$key]['bkg_route_name'] == '')
			{
				$recordset[$key]['bkg_route_name'] = BookingRoute::getRouteCityFullName($val['bkg_id']);
			}
//			if ($recordset[$key]['bkg_pickup_lat'] != "")
//			{
//				$recordset[$key]['bkg_pickup_lat'] = Cities::model()->getCtyLatLongWithBound($val['bkg_id']);
//			}
			$recordset[$key]['bkg_driver_allowance_amount']	 = (int) $val['bkg_driver_allowance_amount'];
			$recordset[$key]['bkg_parking_charge']			 = (int) $val['bkg_parking_charge'];
			if ($val['vht_make'] != '' || $val['vht_make'] != NULL)
			{
				$vhtTypeModel = '-' . $val['vht_make'] . ' ' . $val['bkg_cab_assigned'];
			}

			$recordset[$key]['cab_model'] = $val['cab_model'] . ' (' . $val['cab_lavel'] . $vhtTypeModel . ')';
			if ($status == 5)
			{
				$recordset[$key]['canceledAllowed']	 = (int) (($val['bkg_is_gozonow'] == 1) ? 0 : 1);
				$recordset[$key]['reassign']		 = (int) (($val['bkg_is_gozonow'] == 1) ? 0 : 1);
			}
		}

		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
		return $recordset;
	}

	/**
	 * @deprecated since version 10-10-2019
	 * @author ramala
	 */
	public function getTripDetails($tripId, $status = NULL, $vendorId = 0)
	{
		$uberAgentId = Yii::app()->params['uberAgentId'];
		$condition	 = "2, 3, 5";
		if ($status != NULL)
		{
			$condition = "6,7";
		}


		$row		 = AccountTransDetails::getTotTransByVndId($vendorId);
		$totTrans	 = ($row['totTrans'] > 0) ? $row['totTrans'] : 0;
		$vndIsFreeze = ($row['vnd_is_freeze'] > 0) ? $row['vnd_is_freeze'] : 0;

		$qry = "SELECT DISTINCT
                bkg.bkg_id,
                IF(bkg_flexxi_type=1,true,false) isPromoter,
				IF(bkg_flexxi_type IN(1,2),true,false) isFlexxi,
                bcb.bcb_id,
                bkg.bkg_return_date,
                bkg.bkg_booking_id,
                bkg.bkg_modified_on,
                bkg.bkg_pickup_address,
                bkg.bkg_drop_address,
                bkguser.bkg_user_fname AS bkg_user_name,
                bkg.bkg_trip_distance,
                vht.vht_model AS bkg_cab_assigned,
                bkg.bkg_status,
                bkgaddinfo.bkg_no_person,
                bkguser.bkg_user_lname,
                bkg.bkg_pickup_date,
                bkguser.bkg_country_code,
				bkginv.bkg_night_pickup_included,
				bkginv.bkg_night_drop_included,
                bkginv.bkg_rate_per_km_extra,
                bkginv.bkg_extra_km_charge,
                bkginv.bkg_extra_km,
                bkginv.bkg_extra_toll_tax,
                bkginv.bkg_extra_state_tax,
                bkginv.bkg_parking_charge,
                bkginv.bkg_driver_allowance_amount,
                drv.drv_phone AS bkg_driver_number,
                drv.drv_name AS bkg_driver_name,
                vhc.vhc_number AS bkg_cab_number,
                bkg.bkg_trip_duration,
                IF(
                    bkg.bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 240 MINUTE),
                    bkguser.bkg_contact_no,
                    '') AS bkg_contact_no,
                    bkguser.bkg_alt_contact_no as bkg_alternate_contact,
                    bkguser.bkg_user_email,
                    bkgtrack.bkg_ride_start,
                    IF(bkgtrack.bkg_ride_start>0,bkgtrack.bkg_ride_complete,1) as bkg_ride_complete,
                    IF(bkgtrack.bkg_ride_start>0 AND DATE_ADD(bkg.bkg_pickup_date , INTERVAL (bkg.bkg_trip_duration/2) MINUTE) < NOW() ,bkgtrack.bkg_ride_complete,1) as bkg_ride_complete_old,
                    bkginv.bkg_total_amount,
                    bkginv.bkg_service_tax,
                    bkginv.bkg_service_tax_rate,
                    vht1.vht_model AS bkg_cab_type,
                    bkg.bkg_booking_type,
                    bkg.bkg_instruction_to_driver_vendor,
                    bkginv.bkg_advance_amount,
                    bkginv.bkg_due_amount,
                    vhc.vhc_id,
                    drv.drv_id,
                    bkginv.bkg_is_toll_tax_included,
                    DATE_ADD(
                        brt1.brt_pickup_datetime,
                            INTERVAL brt1.brt_trip_duration MINUTE
                    ) AS trip_completion_time,
                    bkginv.bkg_is_state_tax_included,
                    bkg.bkg_reconfirm_flag as bkg_reconfirm_id,
                    bkgtrack.bkg_is_no_show,
					bpr.bkg_duty_slip_required is_duty_slip_required, bpr.bkg_cng_allowed, bpr.bkg_driver_app_required, bpr.bkg_driver_app_required is_driver_app_required,

                    CONCAT(
                        CASE vht1.vht_car_type WHEN 1 THEN 'COMPACT' WHEN 2 THEN 'SUV' WHEN 3 THEN 'SEDAN' WHEN 4 THEN 'Tempo Traveller' WHEN 5 THEN 'Maruti Swift Dzire' WHEN 6 THEN 'Toyota Innova' WHEN 11 THEN 'Flexxi Sedan' ELSE ''
                    END
                ) cab_model,
                CONCAT(
                    CASE vht.vht_car_type WHEN 1 THEN 'COMPACT' WHEN 2 THEN 'SUV' WHEN 3 THEN 'SEDAN' WHEN 4 THEN 'Tempo Traveller' WHEN 11 THEN 'Flexxi Sedan' ELSE ''
                END
            ) cab_model_assigned,
           0 AS show_total_amount,
            rtg.rtg_vendor_customer,
            rtg.rtg_vendor_csr,
            rtg.rtg_vendor_review,
            brt1.brt_pickup_datetime,
            brt1.brt_trip_duration,
            IF(bkg.bkg_agent_id > 0, 1, 0) AS is_agent,
			IF(bkg.bkg_agent_id =$uberAgentId,'UBER',IF(bkg.bkg_agent_id is null,'','B2B')) As agent_name,
            IF(
                vht1.vht_car_type IN(5, 6),
                '1',
                '0'
            ) AS is_assured,
			if(bkgtrack.bkg_is_trip_verified=1,2,bpr.bkg_trip_otp_required) bpr_trip_otp_required,
			concat(ct1.cty_name, ' - ', group_concat(ct2.cty_name SEPARATOR ' - ')) AS bkg_route_name,
			IF(DATE_ADD(NOW(), INTERVAL 13 HOUR) >= bkg.bkg_pickup_date,0,1) AS is_biddable,
			bvr.bvr_id,bkg.bkg_booking_type,
			bvr.bvr_bid_amount,
			bcb.bcb_vendor_amount AS max_bid_amount,
			(bcb.bcb_vendor_amount * 0.7) AS min_bid_amount,
			(CASE WHEN (($vndIsFreeze = 1) AND ($totTrans > 0) AND bkginv.bkg_advance_amount <= (bkginv.bkg_total_amount * 0.3)) THEN '1' WHEN ($vndIsFreeze = 1) THEN '2' ELSE '0' END) AS payment_due,
         (CASE ((CASE WHEN (($vndIsFreeze = 1) AND ($totTrans > 0) AND bkginv.bkg_advance_amount <= (bkginv.bkg_total_amount * 0.3)) THEN '1' WHEN ($vndIsFreeze = 1) THEN '2' ELSE '0' END)) WHEN '1' THEN CONCAT('Your amount due is ', ABS($totTrans), '. Please send payment immediately') WHEN '2' THEN 'Your Gozo Account is temporarily frozen. Please contact your Account Manager or Gozo Team to have it resolved.' WHEN '0' THEN '' END) AS payment_msg,
			bcb.bcb_vendor_amount AS vendor_ammount,
			ROUND(bcb.bcb_vendor_amount * 0.98) AS recommended_vendor_amount
            FROM
                `booking` bkg
             JOIN booking_cab bcb ON
                bkg.bkg_bcb_id = bcb.bcb_id
         	LEFT JOIN booking_vendor_request bvr ON bvr.bvr_bcb_id = bcb.bcb_id AND bvr_vendor_id = $vendorId
             JOIN booking_user bkguser ON
                bkg.bkg_id = bkguser.bui_bkg_id
             JOIN booking_add_info bkgaddinfo ON
                bkg.bkg_id = bkgaddinfo.bad_bkg_id
             JOIN booking_invoice bkginv ON
                bkg.bkg_id = bkginv.biv_bkg_id
             JOIN booking_track bkgtrack ON
                bkg.bkg_id = bkgtrack.btk_bkg_id
             JOIN booking_trail bkgtrail ON
                bkg.bkg_id = bkgtrail.btr_bkg_id
	        JOIN booking_pref bpr ON
	        bkg.bkg_id = bpr.bpr_bkg_id

            INNER JOIN booking_route brt1 ON
                brt1.brt_bkg_id = bkg.bkg_id AND brt1.brt_active = 1
            INNER JOIN cities ct1 ON ct1.cty_id = brt1.brt_from_city_id
            INNER JOIN cities ct2 ON ct2.cty_id = brt1.brt_to_city_id
            INNER JOIN(
                SELECT
                    MAX(brt2.brt_pickup_datetime) AS MAX,
                    brt2.brt_bkg_id
                FROM
                    booking_route brt2
                WHERE
                    brt2.brt_active = 1
                GROUP BY
                    brt2.brt_bkg_id
            ) a
            ON
                brt1.brt_pickup_datetime = MAX AND bkg.bkg_id = a.brt_bkg_id
            LEFT JOIN vendors agt ON
                agt.vnd_id = bcb.bcb_vendor_id
            LEFT JOIN `vehicles` vhc ON
                vhc.vhc_id = bcb.bcb_cab_id
            LEFT JOIN `vehicle_types` vht ON
                vht.vht_id = vhc.vhc_type_id
            LEFT JOIN `drivers` drv ON
                drv.drv_id = bcb.bcb_driver_id
            LEFT JOIN `vehicle_types` vht1 ON
                bkg.bkg_vehicle_type_id = vht1.vht_id
            LEFT JOIN `ratings` rtg ON
                bkg.bkg_id = rtg.rtg_booking_id
			LEFT JOIN `agents` agts ON
                bkg.bkg_agent_id = agts.agt_id

            WHERE
                bkg.bkg_bcb_id = $tripId AND bkg.bkg_status IN($condition)
            ORDER BY
                bkg.bkg_pickup_date,bkg.bkg_flexxi_type DESC";

		$recordset = DBUtil::queryAll($qry);
		foreach ($recordset as $key => $val)
		{
			if ($val['agent_name'] == 'UBER')
			{
				$recordset[$key]['bkg_pickup_date'] = BookingCab::model()->getPickupDateTime("Y-m-d H:i:s", $recordset[$key]['bkg_pickup_date'], $uberAgentId);
			}
			if ($val['bkg_id'] > 0)
			{
				$recordset[$key]['bkg_instruction_to_driver_vendor'] = Booking::model()->getFullInstructionsByid($val['bkg_id']);
			}
			if ($val['bkg_agent_id'] > 0 && $val['is_duty_slip_required'] == 0)
			{
				$agentModel									 = Agents::model()->findByPk($val['bkg_agent_id']);
				$recordset[$key]['is_duty_slip_required']	 = $agentModel->agt_duty_slip_required;
			}
			if ($val['bkg_agent_id'] > 0 && $val['is_driver_app_required'] == 0)
			{
				$agentModel									 = Agents::model()->findByPk($val['bkg_agent_id']);
				$recordset[$key]['is_driver_app_required']	 = $agentModel->agt_driver_app_required;
			}
			if ($val['bkg_cng_allowed'] > 0)
			{
				$recordset[$key]['bkg_cng_allowed'] = (int) $val['bkg_cng_allowed'];
			}
			$recordset[$key]['bkg_driver_allowance_amount']	 = (int) $val['bkg_driver_allowance_amount'];
			$recordset[$key]['bkg_parking_charge']			 = (int) $val['bkg_parking_charge'];
			$recordset[$key]['bpr_trip_otp_required']		 = (int) $val['bpr_trip_otp_required'];
//$recordset[$key]['totTrans']                     = $totTrans;
		}
		return $recordset;
	}

	public static function getTripDetails1($tripId, $status = NULL, $vendorId = 0, $isApp = 0)
	{

		if ($tripId == "" || $tripId == null)
		{
			throw new Exception("Required data missing", ReturnSet::ERROR_INVALID_DATA);
		}
		$uberAgentId = Yii::app()->params['uberAgentId'];
		$condition	 = ($status != NULL) ? "6,7" : "2, 3, 5";
		$bsmModel	 = BookingSmartmatch::model()->find('bsm_bcb_id=:id', ['id' => $tripId]);
		if ($bsmModel != NUll)
		{
			$from	 = "booking_smartmatch bsm
					LEFT JOIN `booking` bkg ON (bkg.bkg_id=bsm.bsm_upbooking_id OR bkg.bkg_id=bsm.bsm_downbooking_id)
					LEFT JOIN booking_cab bcb ON bcb.bcb_id = bsm.bsm_bcb_id";
			$where	 = "bsm.bsm_bcb_id = $tripId AND bkg.bkg_status IN($condition)";
		}
		else
		{
			$from	 = "`booking` bkg
					  LEFT JOIN booking_cab bcb ON bkg.bkg_bcb_id = bcb.bcb_id";
			$where	 = "bkg.bkg_bcb_id = $tripId AND bkg.bkg_status IN($condition)";
		}
		$row			 = AccountTransDetails::getTotTransByVndId($vendorId);
		$totTrans		 = ($row['totTrans'] > 0) ? $row['totTrans'] : 0;
		$vndIsFreeze	 = ($row['vnd_is_freeze'] > 0) ? $row['vnd_is_freeze'] : 0;
// check smart Match 
		$bookingCab		 = BookingCab::model()->findByPk($tripId);
		$bookingCabType	 = $bookingCab->bcb_trip_type;
		if ($bookingCabType == 0)
		{
			$group = "GROUP BY vhc.vhc_id,bkg.bkg_id";
		}
		else
		{
			$group = "GROUP BY bkg.bkg_id";
		}
		$vndDriverApp	 = 0;
		$vndPenaltyCount = 0;
		$vndStickyScr	 = 0;
		$vndInfoSql		 = "SELECT vnd_cat_type,vnd_active,vnp_is_freeze,vnp_cod_freeze,vnp_accepted_zone,vnp_home_zone,vnp_excluded_cities, vnp_oneway, vnp_round_trip, vnp_multi_trip, vnp_airport, vnp_package, vnp_flexxi,
                            vnp_daily_rental,vnp_boost_enabled,IF(vnp_is_allowed_tier LIKE '%1%',1,0) value,IF(vnp_is_allowed_tier LIKE '%2%',2,0) valuePlus,
                            IF(vnp_is_allowed_tier LIKE '%3%',3,0) plus,IF(vnp_is_allowed_tier LIKE '%4%',4,0) selectTier,IF(vnp_is_allowed_tier LIKE '%5%',5,0) selectPlus,IF(vnp_is_allowed_tier LIKE '6%',6,0) cng
							FROM vendors INNER JOIN vendor_pref ON vnp_vnd_id = vnd_id WHERE vnd_id = $vendorId";

		$vndInfo = DBUtil::queryRow($vndInfoSql, DBUtil::SDB());

		$vndInfo['vnp_accepted_zone']	 = ($vndInfo['vnp_accepted_zone'] == '') ? -1 : trim($vndInfo['vnp_accepted_zone'], ',');
		$vndInfo['vnp_excluded_cities']	 = ($vndInfo['vnp_excluded_cities'] == '') ? -1 : trim($vndInfo['vnp_excluded_cities'], ',');
		$vndInfo['vnp_home_zone']		 = ($vndInfo['vnp_home_zone'] == '') ? -1 : trim($vndInfo['vnp_home_zone'], ',');
		$vndBoostEnable					 = ($vndInfo['vnp_boost_enabled'] > 0) ? $vndInfo['vnp_boost_enabled'] : 0;
		$vendorStatus					 = $vndInfo['vnd_active'];

		$acptBidPercent		 = ($vndBoostEnable > 0) ? 3 : 5;
		$calRecomendedAmount = "IF(bkg_critical_assignment=1 OR bkg_manual_assignment=1 , ROUND(bcb.bcb_vendor_amount * 0.98), ROUND(bcb.bcb_vendor_amount * 0.98))";
		$vndStatInfo		 = VendorStats::model()->fetchMetric($vendorId);

		$vndRating		 = ($vndStatInfo['vrs_vnd_overall_rating'] == null) ? 0 : $vndStatInfo['vrs_vnd_overall_rating'];
		$vndStickyScr	 = ($vndStatInfo['vrs_sticky_score'] == null) ? 4 : $vndStatInfo['vrs_sticky_score'];
		$vndPenaltyCount = $vndStatInfo['vrs_penalty_count'];
		$vndDriverApp	 = $vndStatInfo['vrs_driver_app_used'];
		$vndDependency	 = ($vndStatInfo['vrs_dependency'] == null) ? 0 : $vndStatInfo['vrs_dependency'];
		$vndBoostPercent = ($vndStatInfo['vrs_boost_percentage'] == null) ? 0 : $vndStatInfo['vrs_boost_percentage'];

		$acceptableAmount	 = "ROUND(bcb.bcb_vendor_amount * 0.01 * (100 - $acptBidPercent))";
		$calculateSMTSql	 = "CalculateSMT(bcb_vendor_amount + SUM(bkg_gozo_amount),bcb.bcb_vendor_amount,
					    $acceptableAmount, $vndRating, $vndStickyScr, $vndPenaltyCount, $vndDriverApp, $vndDependency, $vndBoostPercent)";

		$validateAcceptableAmountSQL = "IF(bkg_critical_assignment=1 OR bkg_manual_assignment=1, bcb.bcb_vendor_amount, IF($calculateSMTSql>0, $acceptableAmount, 0))";
		$isAcceptAllowed			 = "IsDirectAcceptAllowed('{$vndInfo['vnp_home_zone']}', GROUP_CONCAT(DISTINCT fzc.zct_zon_id), GROUP_CONCAT(DISTINCT tzc.zct_zon_id), bkg_manual_assignment, $calculateSMTSql, bkg_critical_score, MIN(bkg.bkg_pickup_date), GREATEST(IFNULL(bcb_bid_start_time, MAX(bkg_confirm_datetime)), MAX(bkg_confirm_datetime)))";

		$qry = "SELECT DISTINCT bkg.bkg_id,bkg.bkg_bcb_id as totalTripDuration,bkg.bkg_booking_type,bcb.bcb_trip_type as matchType,
						GetUnassignPenaltySlabs(bkgtrail.bkg_assigned_at, bkg.bkg_pickup_date, bcb.bcb_vendor_amount, bcb.bcb_assign_mode, $vndDependency) as cancelSlabs,
						IF(bkg_flexxi_type=1,true,false) isPromoter,
						IF(bkg_flexxi_type IN(1,2),true,false) isFlexxi,
						IF(bkgaddinfo.bkg_no_person > 0,bkgaddinfo.bkg_no_person,vct.vct_capacity) AS seatingCapacity,
						IF(bkgaddinfo.bkg_num_large_bag > 0,bkgaddinfo.bkg_num_large_bag,vct.vct_big_bag_capacity) AS bigBagCapacity,
						IF(bkgaddinfo.bkg_num_small_bag > 0,bkgaddinfo.bkg_num_small_bag,vct.vct_small_bag_capacity) AS bagCapacity,
						bkg_spl_req_carrier, bkg_spl_req_senior_citizen_trvl,
						bkg_spl_req_kids_trvl, bkg_spl_req_woman_trvl,
						bkg_spl_req_driver_english_speaking, bkg_spl_req_driver_hindi_speaking,
						bkg_spl_req_lunch_break_time,
						bkg_num_large_bag, bkg_num_small_bag,
						bcb.bcb_id,bkg.bkg_booking_id,
						bkg.bkg_return_date, bkg.bkg_modified_on,
						bkg.bkg_pickup_address,
						MAX(IF(bkg.bkg_return_date IS NOT NULL, bkg.bkg_return_date, DATE_ADD(bkg.bkg_pickup_date, INTERVAL bkg.bkg_trip_duration MINUTE))) AS trip_completion_time,
						bkg.bkg_drop_address,
						 ct1.cty_display_name AS from_city,
						ct2.cty_display_name AS to_city,
						bkguser.bkg_user_fname AS bkg_user_name,
						bkguser.bkg_user_fname,
						bkg.bkg_trip_distance,
						vht.vct_desc AS bkg_cab_assigned,
						bkg.bkg_status,
						bkgaddinfo.bkg_no_person,
						bkgaddinfo.bkg_flight_no,
						bkguser.bkg_user_lname,
						bkg.bkg_pickup_date,
						bkguser.bkg_country_code,
						bkginv.bkg_night_pickup_included,
						bkginv.bkg_night_drop_included,
						bkginv.bkg_rate_per_km_extra,
						bkginv.bkg_extra_km_charge,
						bkginv.bkg_extra_km,
						bkginv.bkg_extra_toll_tax,
						bkginv.bkg_extra_state_tax,
						bkginv.bkg_parking_charge,
						bkginv.bkg_quoted_vendor_amount,
						bkginv.bkg_vendor_actual_collected,
						bkginv.bkg_driver_allowance_amount,
						 bkginv.bkg_promo1_id, bkginv.bkg_promo1_code, bkginv.bkg_promo2_id, bkginv.bkg_promo2_code, bkginv.bkg_discount_amount, bkginv.bkg_discount_amount,
						phn.phn_phone_no AS bkg_driver_number,
						drv.drv_name AS bkg_driver_name,
						vhc.vhc_number AS bkg_cab_number,
						bkg.bkg_trip_duration,
						IF(bkg.bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 240 MINUTE), bkguser.bkg_contact_no,'') AS bkg_contact_no,
						bkguser.bkg_contact_no,
						bkguser.bkg_alt_contact_no as bkg_alternate_contact,
						bkguser.bkg_user_email,
						bkgtrack.bkg_ride_start,
						bkgtrack.bkg_ride_complete,
						vehicle_types.vht_make,
						vehicle_types.vht_model,
						IF(bkgtrack.bkg_ride_start>0 AND DATE_ADD(bkg.bkg_pickup_date , INTERVAL (bkg.bkg_trip_duration/2) MINUTE) < NOW() ,bkgtrack.bkg_ride_complete,1) as bkg_ride_complete_old,
						CONCAT(
						CASE
             WHEN     (TIMESTAMPDIFF(MINUTE,NOW(), bkg.bkg_pickup_date) > 0) AND
						((TIMESTAMPDIFF(MINUTE,NOW(),DATE_ADD(bkg.bkg_pickup_date, INTERVAL bkg.bkg_trip_duration MINUTE))) > 0)
             THEN 0
						WHEN (TIMESTAMPDIFF(MINUTE,NOW(), bkg.bkg_pickup_date) < 0)
                  AND ((TIMESTAMPDIFF( MINUTE,NOW(),DATE_ADD(bkg.bkg_pickup_date,INTERVAL bkg.bkg_trip_duration MINUTE))) > 0)
             THEN 1
						WHEN (TIMESTAMPDIFF(MINUTE,NOW(), bkg.bkg_pickup_date) < 0)
                  AND ((TIMESTAMPDIFF(MINUTE,NOW(),DATE_ADD(bkg.bkg_pickup_date,INTERVAL bkg.bkg_trip_duration MINUTE))) < 0)
             THEN 2
						ELSE 0
						END)
						AS is_start_overDue,
						bkginv.bkg_base_amount,
						bkginv.bkg_total_amount,
						bkginv.bkg_net_advance_amount,
						bkginv.bkg_advance_amount,
						bkginv.bkg_due_amount,
						bkginv.bkg_service_tax,
						bkginv.bkg_service_tax_rate,
						bkginv.bkg_is_airport_fee_included as isAirportEntryFeeIncluded,
						bkginv.bkg_airport_entry_fee,
						vct.vct_desc AS bkg_cab_type,
						bkg.bkg_booking_type,
						bkg.bkg_instruction_to_driver_vendor,
						scc.scc_desc, scc.scc_vnd_desc,
						scc.scc_id,
						TRIM(SUBSTRING_INDEX(scv.scv_label, '(', 1)) AS cab_label,
						scv.scv_label AS cab_label_with_class,scv.scv_label,
						vhc.vhc_id,
						drv.drv_id,
						bkginv.bkg_is_toll_tax_included,
						IF(bkg.bkg_return_date IS NULL, DATE_ADD(bkg.bkg_pickup_date, INTERVAL bkg.bkg_trip_duration MINUTE), bkg.bkg_return_date) AS trip_completion_time,
						bkginv.bkg_is_state_tax_included,
						bkg.bkg_reconfirm_flag as bkg_reconfirm_id,
						bkgtrack.bkg_is_no_show,
			bpr.bkg_duty_slip_required is_duty_slip_required, bpr.bkg_driver_app_required is_driver_app_required,
			bpr.bkg_cng_allowed AS is_cng_allowed ,bpr.bkg_driver_app_required,
			IF(bpr.bkg_is_gozonow IN(1,2),1,0) isGozoNow,
						TRIM(SUBSTRING_INDEX(scv.scv_label, '(', 1)) AS cab_model,
						vht.vct_label cab_model_assigned,
						'0' AS show_total_amount,
						rtg.rtg_vendor_customer,
						rtg.rtg_vendor_csr,
						rtg.rtg_vendor_review,
						bkg.bkg_pickup_date as brt_pickup_datetime,
						bkg.bkg_trip_duration as brt_trip_duration,
						IF(bkg.bkg_pickup_lat > 0, bkg.bkg_pickup_lat, ct1.cty_lat) AS pickup_lat,
						IF(bkg.bkg_pickup_long > 0, bkg.bkg_pickup_long, ct1.cty_long) AS pickup_long,
						IF(bkg.bkg_dropup_lat > 0, bkg.bkg_dropup_lat, ct2.cty_lat) AS drop_lat,
						IF(bkg.bkg_dropup_long > 0, bkg.bkg_dropup_long, ct2.cty_long) AS drop_long,
						bkg.bkg_from_city_id as brt_from_city_id, bkg.bkg_to_city_id as brt_to_city_id,
						bpr.bpr_vnd_ctrl_trip AS hasTripCtrl,
						IF(bkg.bkg_agent_id > 0, 1, 0) AS is_agent,
						IF(bkg.bkg_agent_id =$uberAgentId,'UBER',IF(bkg.bkg_agent_id is null,'','B2B')) As agent_name,
						IF( vct.vct_id IN(5, 6), '1', '0' ) AS is_assured,
						if(bkgtrack.bkg_is_trip_verified=1,2,bpr.bkg_trip_otp_required) bpr_trip_otp_required,
						IF((bkg.bkg_booking_type IN (4,12,15)) OR ($isAcceptAllowed AND bkg.bkg_reconfirm_flag=1 AND bkg_block_autoassignment=0), IF(bkg_status IN (3,5), 1,IF($vendorStatus=2,1,0)),1) AS is_biddable,
						bvr.bvr_id,bkg.bkg_booking_type,bcb_trip_type,
						bvr.bvr_bid_amount,bcb.bcb_vendor_amount AS max_bid_amount,(bcb.bcb_vendor_amount * 0.7) AS min_bid_amount,
						(CASE
						WHEN (($vndIsFreeze = 1) AND ($totTrans > 0) AND bkginv.bkg_advance_amount <= (bkginv.bkg_total_amount * 0.3)) THEN '1'
						WHEN ($vndIsFreeze = 1) THEN '2'
						ELSE '0' END) AS payment_due,
						(CASE
						WHEN (($vndIsFreeze = 1) AND ($totTrans > 0) AND bkginv.bkg_advance_amount <= (bkginv.bkg_total_amount * 0.3)) THEN CONCAT('Your amount due is ', ABS($totTrans), '. Please send payment immediately')
						WHEN ($vndIsFreeze = 1) THEN 'Your Gozo Account is temporarily frozen. Please contact your Account Manager or Gozo Team to have it resolved.'
						ELSE ''
						END) AS payment_msg,
						bcb.bcb_vendor_amount AS vendor_ammount,
						$validateAcceptableAmountSQL AS acptAmount,
						scc.scc_label AS cab_lavel,
						$calRecomendedAmount AS recommended_vendor_amount,
						IF(bcb.bcb_max_allowable_vendor_amount>0,bcb.bcb_max_allowable_vendor_amount,(bcb.bcb_vendor_amount+(bkginv.bkg_gozo_amount-bkginv.bkg_credits_used))) AS maxAllowableVendorAmount
						FROM
						$from
						LEFT JOIN booking_vendor_request bvr ON bvr.bvr_bcb_id = bcb.bcb_id AND bvr_vendor_id = $vendorId
						INNER JOIN booking_user bkguser ON bkg.bkg_id = bkguser.bui_bkg_id
						LEFT JOIN booking_add_info bkgaddinfo ON bkg.bkg_id = bkgaddinfo.bad_bkg_id
						INNER JOIN booking_invoice bkginv ON bkg.bkg_id = bkginv.biv_bkg_id
						INNER JOIN booking_track bkgtrack ON bkg.bkg_id = bkgtrack.btk_bkg_id
						INNER JOIN booking_trail bkgtrail ON bkg.bkg_id = bkgtrail.btr_bkg_id
						INNER JOIN booking_pref bpr ON bkg.bkg_id = bpr.bpr_bkg_id
						LEFT JOIN cities ct1 ON ct1.cty_id = bkg.bkg_from_city_id
						LEFT JOIN cities ct2 ON ct2.cty_id = bkg.bkg_to_city_id
						LEFT JOIN zone_cities fzc ON fzc.zct_cty_id=ct1.cty_id AND fzc.zct_active=1
						LEFT JOIN zone_cities tzc ON tzc.zct_cty_id=ct2.cty_id AND tzc.zct_active=1
			LEFT JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
			LEFT JOIN `vehicles` vhc ON vhc.vhc_id = bcb.bcb_cab_id
						LEFT JOIN vcv_cat_vhc_type vcvt ON vcvt.vcv_vht_id = vhc.vhc_type_id
						LEFT JOIN vehicle_category vht ON vht.vct_id = vcvt.vcv_vct_id
						LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id and drv.drv_id = drv.drv_ref_code
						LEFT JOIN contact_profile cp ON cp.cr_is_driver = drv.drv_id and cp.cr_status =1
						LEFT JOIN contact ctt on ctt.ctt_id = cp.cr_contact_id and ctt.ctt_id = ctt.ctt_ref_code and ctt.ctt_active=1
						LEFT JOIN contact_phone phn ON phn.phn_contact_id=ctt.ctt_id AND phn.phn_is_primary=1 AND phn.phn_active=1
						LEFT JOIN svc_class_vhc_cat scv ON bkg.bkg_vehicle_type_id = scv.scv_id
						LEFT JOIN `vehicle_category` vct ON scv.scv_vct_id = vct.vct_id
						LEFT JOIN service_class scc ON scc.scc_id = scv.scv_scc_id
						LEFT JOIN vehicle_types ON vehicle_types.vht_id = scv.scv_model
			LEFT JOIN `ratings` rtg ON bkg.bkg_id = rtg.rtg_booking_id
			LEFT JOIN `agents` agts ON bkg.bkg_agent_id = agts.agt_id
		WHERE    $where $group
		ORDER BY bkg.bkg_pickup_date, bkg.bkg_flexxi_type DESC";

		Logger::create("Query:- " . $qry, CLogger::LEVEL_INFO);
		$recordset = DBUtil::queryAll($qry);

		foreach ($recordset as $key => $val)
		{

			$bkgs			 = BookingCab::model()->getBkgIdByTripId($val['totalTripDuration']);
			$timeDuration	 = Filter::getTimeDurationbyMinute($val['bkg_trip_duration']);
			$tripDay		 = Filter::getTripDayByRoute(implode(",", $bkgs));
			$tripDayString	 = $tripDay . (($tripDay > 1) ? " days" : " day");
			$tot			 = $timeDuration . '(' . $tripDayString . ')';

			$routeName								 = implode(" - ", BookingCab::getRouteNameListById($recordset[$key]['bcb_id']));
			$recordset[$key]['bkg_route_city_names'] = $routeName;

			$recordset[$key]['totalTripDuration'] = $tot;

			if ($val['agent_name'] == 'UBER')
			{
				$recordset[$key]['bkg_pickup_date'] = BookingCab::model()->getPickupDateTime("Y-m-d H:i:s", $recordset[$key]['bkg_pickup_date'], $uberAgentId);
			}


			if ($val['bkg_id'] > 0)
			{
				$recordset[$key]['bkg_instruction_to_driver_vendor'] = Booking::model()->getFullInstructionsByid($val['bkg_id'], $isApp);
			}
			if ($val['bkg_agent_id'] > 0 && $val['is_duty_slip_required'] == 0)
			{
				$agentModel									 = Agents::model()->findByPk($val['bkg_agent_id']);
				$recordset[$key]['is_duty_slip_required']	 = $agentModel->agt_duty_slip_required;
			}
			if ($val['bkg_agent_id'] > 0 && $val['is_driver_app_required'] == 0)
			{
				$agentModel									 = Agents::model()->findByPk($val['bkg_agent_id']);
				$recordset[$key]['is_driver_app_required']	 = $agentModel->agt_driver_app_required;
			}
			if ($val['is_cng_allowed'] > 0)
			{
				$recordset[$key]['is_cng_allowed'] = $val['is_cng_allowed'];
			}
			if ($val['bkg_driver_app_required'] > 0)
			{
				$recordset[$key]['bkg_driver_app_required'] = (int) $val['bkg_driver_app_required'];
			}
			$hashBkgId										 = Yii::app()->shortHash->hash($val['bkg_id']);
			$hashVndId										 = Yii::app()->shortHash->hash($vendorId);
//$recordset[$key]['bkvn_url']	 ='http://gozo-server.ddns.net:6172'.'/bkvn/'. $hashBkgId . '/' . $hashVndId;
			$recordset[$key]['bkvn_url']					 = Yii::app()->params['fullBaseURL'] . '/bkvn/' . $hashBkgId . '/' . $hashVndId;
			$recordset[$key]['seatingCapacity']				 = (int) $val['seatingCapacity'];
			$recordset[$key]['bagCapacity']					 = (int) $val['bagCapacity'];
			$recordset[$key]['bigBagCapacity']				 = (int) $val['bigBagCapacity'];
			$recordset[$key]['hasTripCtrl']					 = (int) $val['hasTripCtrl'];
			$recordset[$key]['bkg_driver_allowance_amount']	 = (int) $val['bkg_driver_allowance_amount'];
			$recordset[$key]['bkg_parking_charge']			 = (int) $val['bkg_parking_charge'];
			$recordset[$key]['bpr_trip_otp_required']		 = (int) $val['bpr_trip_otp_required'];
			$recordset[$key]['bkg_route_name']				 = BookingRoute::getRouteCityFullName($val['bkg_id']);
			$sccVndDesc										 = json_decode($recordset[$key]['scc_vnd_desc']);
			if (in_array($recordset[$key]['bkg_booking_type'], [2, 3]))
			{
				$pickupdata						 = BookingRoute::model()->getPickupLatLngByBkgId($val['bkg_id']);
				$recordset[$key]['pickup_lat']	 = $pickupdata['pickup_lat'];
				$recordset[$key]['pickup_long']	 = $pickupdata['pickup_long'];
			}
			$recordset[$key]['isAirportEntryFeeIncluded']		 = (int) $val['isAirportEntryFeeIncluded'];
			$recordset[$key]['bkg_instruction_to_driver_vendor'] = (($recordset[$key]['scc_id'] != ServiceClass::CLASS_ECONOMIC) ? (($recordset[$key]['bkg_instruction_to_driver_vendor'] != '') ? $recordset[$key]['bkg_instruction_to_driver_vendor'] . ", " . implode(", ", $sccVndDesc) : implode(", ", $sccVndDesc)) : ($recordset[$key]['bkg_instruction_to_driver_vendor']));
			$hashBkgId											 = Yii::app()->shortHash->hash($val['bkg_id']);
			$hashVndId											 = Yii::app()->shortHash->hash($vendorId);
//$recordset[$key]['bkvn_url']	 ='http://gozo-server.ddns.net:6172'.'/bkvn/'. $hashBkgId . '/' . $hashVndId;
			$recordset[$key]['bkvn_url']						 = Yii::app()->params['fullBaseURL'] . '/bkvn/' . $hashBkgId . '/' . $hashVndId;

			if ($recordset[$key]['bkg_status'] < 5)
			{
				$recordset[$key]['bkg_pickup_address']	 = 'xxxxxxx' . ', ' . $recordset[$key]['from_city'];
				$recordset[$key]['bkg_drop_address']	 = 'xxxxxxx' . ', ' . $recordset[$key]['to_city'];
				$recordset[$key]['pickup_lat']			 = round($recordset[$key]['pickup_lat'], 2);
				$recordset[$key]['pickup_long']			 = round($recordset[$key]['pickup_long'], 2);
			}
			else
			{
				$recordset[$key]['bkg_pickup_address']	 = $recordset[$key]['bkg_pickup_address'];
				$recordset[$key]['bkg_drop_address']	 = $recordset[$key]['bkg_drop_address'];
				$recordset[$key]['pickup_lat']			 = $recordset[$key]['pickup_lat'];
				$recordset[$key]['pickup_long']			 = $recordset[$key]['pickup_long'];
			}

			/* $customerShow = Filter::customerDataShow($recordset[$key]['bkg_pickup_date']);

			  if ($customerShow < 1)
			  {
			  //$recordset[$key]['bkg_user_name']	 = "";
			  //	$recordset[$key]['bkg_user_fname']	 = "";
			  //	$recordset[$key]['bkg_user_lname']	 = "";
			  //$recordset[$key]['bkg_contact_no']	 = "";
			  //$recordset[$key]['bkg_user_email']	 = "";
			  } */

			Logger::create("IS OVER DUE ==>" . $recordset[$key]['is_start_overDue'] . " bkgID ==>" . $recordset[$key]['bkg_id']);
		}

		return $recordset;
	}

	/**
	 * @deprecated since version 10-10-2019
	 * @author ramala
	 */
	public function getcustDetails1($vendorId, $status, $sort, $time = '')
	{
		if ($sort == 'pk')
		{
			$s1 = "bkg.bkg_pickup_date DESC";
		}
		elseif ($sort == 'mk')
		{
			$s1 = "bkg.bkg_modified_on DESC";
		}
		else
		{
			$s1 = "bkg.bkg_pickup_date DESC";
		}
		$pickup = '';
		if ($time != '')
		{
			$pickup = ' and bkg.bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 960 MINUTE)';
		}
		$qry		 = "SELECT DISTINCT(bkg.bkg_id), bkg.bkg_booking_id, bkg.bkg_vendor_amount, bkg.bkg_modified_on,
			bkg.bkg_pickup_address, bkg.bkg_drop_address, bkguser.bkg_user_fname, bkg.bkg_trip_distance,
			vht.vht_model as bkg_cab_assigned, agt.vnd_name as bkg_vendor_name, bkg.bkg_status,
			bkg.bkg_no_person, bkg.bkg_user_lname, bkg.bkg_pickup_date, bkg.bkg_country_code,
			drv.drv_phone as bkg_driver_number, drv.drv_name as bkg_driver_name,
			vhc.vhc_number as bkg_cab_number, bkg.bkg_trip_duration, agt.vnd_id as bkg_vendor_id,
			IF(bkg.bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 240 MINUTE),bkg.bkg_contact_no,'') as bkg_contact_no,
			bkg.bkg_alt_contact_no, bkg.bkg_user_email, bkg.bkg_total_amount, vht1.vht_model as bkg_cab_type, bkg.bkg_booking_type,
			bkg.bkg_instruction_to_driver_vendor, bkg.bkg_advance_amount, bkg.bkg_due_amount,
			vhc.vhc_id, drv.drv_id, bkg.bkg_is_toll_tax_included, bkg.bkg_is_state_tax_included,
			bkg_reconfirm_flag, bkg_no_show,
			concat(CASE vht1.vht_car_type WHEN 1 then 'COMPACT' WHEN 2 THEN 'SUV' When 3 then 'SEDAN' When 4 then 'Tempo Traveller' ELSE '' END) cab_model,
			concat(CASE vht.vht_car_type WHEN 1 then 'COMPACT' WHEN 2 THEN 'SUV' When 3 then 'SEDAN' When 4 then 'Tempo Traveller' ELSE '' END) cab_model_assigned,
			0 as show_total_amount,
			brt1.brt_pickup_datetime, brt1.brt_trip_duration , IF(vht1.vht_car_type IN (5,6) ,'1','0') as is_assured
                    FROM `booking` bkg INNER JOIN booking_user bkguser ON bkg.bkg_id = bkguser.bui_bkg_id
                    JOIN booking_cab bcb ON bcb.bcb_id=bkg.bkg_bcb_id
                    INNER JOIN booking_route brt1 ON brt1.brt_bkg_id = bkg.bkg_id AND brt1.brt_active=1
                    INNER JOIN (SELECT MAX(brt2.brt_pickup_datetime) as max, brt2.brt_bkg_id FROM booking_route brt2 WHERE brt2.brt_active=1 GROUP BY brt2.brt_bkg_id) a ON brt1.brt_pickup_datetime = max AND bkg.bkg_id = a.brt_bkg_id
                    LEFT JOIN vendors agt ON agt.vnd_id=bcb.bcb_vendor_id
                    LEFT JOIN `vehicles` vhc ON vhc.vhc_id=bcb.bcb_cab_id
                    LEFT JOIN `vehicle_types` vht ON vht.vht_id=vhc.vhc_type_id
                    LEFT JOIN `drivers` drv ON drv.drv_id=bcb.bcb_driver_id
                    LEFT JOIN `vehicle_types` vht1 ON bkg.bkg_vehicle_type_id=vht1.vht_id
                    WHERE bcb.bcb_vendor_id = $vendorId and bcb.bcb_active = 1 and bkg.bkg_status IN ($status) and bkg.bkg_active = 1" . $pickup . " GROUP BY bkg.bkg_id ORDER BY " . $s1;
		$recordset	 = DBUtil::queryAll($qry);
		foreach ($recordset as $key => $val)
		{
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_id')
				{
					$recordset[$key]['bkg_route_name'] = BookingRoute::model()->getRouteName($v);
				}
			}
		}
		return $recordset;
	}

	public function getDriverListing($driverId)
	{
		$uberAgentId		 = Yii::app()->params['uberAgentId'];
#$condition		 = "  AND ( DATE(bkg_pickup_date) BETWEEN DATE_SUB(CURDATE(), INTERVAL 5 DAY) AND DATE_ADD(CURDATE(), INTERVAL 5 DAY) )";
//$custMaskedPhone = Yii::app()->params['driverToCustomer'];
		$driverToCustomer	 = CJSON::decode(Config::get('mask.customer.driver.number'), true);
		$custMaskedPhone	 = $driverToCustomer['driverToCustomer'];
		$qry				 = "SELECT
                    bkg_id,
                    bkg_booking_id,
                    bkg_vendor_amount,
                    bkg_modified_on,
                    bkg_pickup_address,
                    bkg_drop_address,
                    bkg_user_fname AS bkg_user_name,
					bkg_user_lname,
                    c1.cty_name AS bkg_from_city,
                    c2.cty_name AS bkg_to_city,
                    v.vct_desc AS bkg_cab_type,
                    a.vnd_name AS bkg_vendor_name,
                    bkg_status,
                    bkg_no_person,
                    bkg_pickup_date,
                    bcb_driver_phone AS bkg_driver_number,
                    d.drv_name AS bkg_driver_name,
                    v1.vhc_number AS bkg_cab_number,
                    bkg_trip_duration,
                    bcb_vendor_id AS bkg_vendor_id,
					IF(bkg_pickup_date < NOW(),concat(bkg_country_code,bkg_contact_no),'$custMaskedPhone') AS bkg_contact_no,
                    '' bkg_country_code,
                    bkg_alt_contact_no  AS bkg_alternate_contact,
                    bkg_user_email,
                    bkg_total_amount,
                    v2.vht_model AS bkg_cab_assigned,
                    bkg_booking_type,
                    bkg_instruction_to_driver_vendor,
                    ( (  bkg_advance_amount + bkg_credits_used - bkg_refund_amount  ) + bkg_vendor_collected ) AS bkg_advance_paid,
                    bkg_due_amount,
                    bkg_create_date,
                    bkg_trip_duration,
                    bkg_trip_distance,
                    bkg_ride_start,
                    bkg_ride_complete,
                    bkg_rate_per_km_extra,
                    bkg_additional_charge,
                    bkg_additional_charge_remark,
                    bkg_vendor_collected,
                    bkg_service_tax_rate,
                    bkg_start_odometer,
                    bkg_end_odometer,
					bkg_night_pickup_included,
					bkg_night_drop_included,
					bkg_agent_id,
		    IF(bkg_flexxi_type IN (1,2),1,0) as is_flexxi,
		    (CASE WHEN bkg_flexxi_type=1 THEN 'Promoter' WHEN bkg_flexxi_type='2' THEN 'Subscriber' ELSE 'None' END ) as bkg_flexxi_type
		    FROM booking
			     INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id = booking.bkg_id
                 INNER JOIN booking_user ON booking_user.bui_bkg_id = booking.bkg_id
                 INNER JOIN booking_track ON booking_track.btk_bkg_id = booking.bkg_id AND bkg_ride_complete = 0

				INNER JOIN booking_pref ON booking_pref.bpr_bkg_id = booking.bkg_id
					JOIN booking_add_info ON booking_add_info.bad_bkg_id = booking.bkg_id
					JOIN booking_cab ON bcb_id = bkg_bcb_id AND bkg_active = 1 AND bcb_active = 1 AND bkg_status IN(5)
					JOIN cities c1 ON bkg_from_city_id = c1.cty_id
					JOIN cities c2 ON bkg_to_city_id = c2.cty_id
                 JOIN svc_class_vhc_cat scv ON scv.scv_id = booking.bkg_vehicle_type_id
                 JOIN vehicle_category v ON scv.scv_vct_id = v.vct_id
                LEFT JOIN vehicles v1 ON bcb_cab_id = v1.vhc_id
                LEFT JOIN drivers d ON bcb_driver_id = d.drv_id
                LEFT JOIN vendors a ON bcb_vendor_id = a.vnd_id
                LEFT JOIN vehicle_types v2 ON v1.vhc_type_id = v2.vht_id
                WHERE
                    bcb_driver_id IN(SELECT
				d3.drv_id
			    FROM
				drivers d1
				INNER JOIN drivers d2 ON d2.drv_id = d1.drv_ref_code
				INNER JOIN drivers d3 ON d3.drv_ref_code = d2.drv_id
			    WHERE
				d1.drv_id = $driverId)  AND d.drv_id = d.drv_ref_code
                   ORDER BY bkg_pickup_date DESC LIMIT 100";

		$resultSet	 = DBUtil::command($qry)->query();
		$recordset	 = [];
		$key		 = 0;
		foreach ($resultSet as $val)
		{
			$recordset[$key] = $val;
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_id')
				{
					$recordset[$key]['bkg_route_name'] = BookingRoute::model()->getRouteName($v);
				}
//Show customer logic start
				$showCustomer			 = 0;
				$pickuptime				 = $recordset[$key]['bkg_pickup_date'];
				$minutesToPickup		 = Filter::getTimeDiff($pickuptime);
				$workingMinutesToPickup	 = Filter::CalcWorkingMinutes(Filter::getDBDateTime(), $pickuptime);

				if ($minutesToPickup < 60 || $workingMinutesToPickup < 120)
				{
					$showCustomer = 1;
				}

				if ($showCustomer == 0)
				{
					$recordset[$key]['bkg_user_name']	 = "";
					$recordset[$key]['bkg_user_lname']	 = "";
					$recordset[$key]['bkg_contact_no']	 = "";
					$recordset[$key]['bkg_user_email']	 = "";
				}

//Show customer logic end
				if ($k == 'bkg_agent_id')
				{
					if (($v != null || $v != '') && $v == $uberAgentId)
					{
						$recordset[$key]['bkg_pickup_date'] = BookingCab::model()->getPickupDateTime("Y-m-d H:i:s", $recordset[$key]['bkg_pickup_date'], $v);
					}
				}
			}
			$key++;
		}
		return $recordset;
	}

	public function getOfflineDriverListingCurrent($bkgId)
	{
		$qry = "SELECT bkg_status as bookingStatus, bkg_id as oldBookingId , booking_cab.bcb_driver_id as driverId
                FROM booking
                LEFT JOIN  booking_cab ON booking_cab.bcb_id = booking.bkg_bcb_id
                WHERE      booking.bkg_id = $bkgId";

		$recordSet = DBUtil::queryRow($qry);

		return $recordSet;
	}

	/* ----Service Tier Phase 2 Checked------- */

	/**
	 * @deprecated
	 * New service : Drivers::getCurrentListBookings($driverId)
	 * From 19/03/20
	 */
	public function getDriverListingCurrent($driverId, $bkgId, $flag)
	{
		$uberAgentId		 = Yii::app()->params['uberAgentId'];
//$custMaskedPhone = Yii::app()->params['driverToCustomer'];
		$driverToCustomer	 = CJSON::decode(Config::get('mask.customer.driver.number'), true);
		$custMaskedPhone	 = $driverToCustomer['driverToCustomer'];
		$qry				 = "SELECT
      IF(btk_last_event IS NULL, 0,btk_last_event) btl_event_type_id
       , bkg_bcb_id
	   , bkg_id
       , bkg_booking_id
       , bkg_vendor_amount
       , bkg_modified_on
       , bkg_pickup_address
       , bkg_drop_address
	   , 0 AS is_flexxi
	   , bkg_flexxi_type
	   , brt_from_latitude
	   , brt_from_longitude
       , brt_to_latitude
       , brt_to_longitude
       , IF(brt_from_latitude IS NULL, 0, brt_from_latitude) AS bkg_pickup_lat
       , IF(brt_from_longitude IS NULL, 0, brt_from_longitude) AS bkg_pickup_long
       , c1.cty_name AS bkg_from_city
       , c2.cty_name AS bkg_to_city
       , c2.cty_lat AS dest_cty_lat
       , c2.cty_long AS dest_cty_long
       , bkg_user_fname AS bkg_user_name
       , bkg_user_lname
       , IF(btk_last_event =101,concat(bkg_country_code,bkg_contact_no),'$custMaskedPhone') AS bkg_contact_no
       , bkg_alt_contact_no  AS bkg_alternate_contact
       , bkg_user_email
       , bkg_country_code
       , a.vnd_name AS bkg_vendor_name
       , bkg_status
       , bkg_no_person
       , bkg_pickup_date
       , bkg_total_amount
       , v2.vht_model AS bkg_cab_assigned
       , bkg_booking_type
       , bkg_instruction_to_driver_vendor
       , bcb_driver_phone AS bkg_driver_number
       , d.drv_name AS bkg_driver_name
       , booking_track.bkg_drv_sos_sms_trigger AS drv_sos_trigger
	   , v1.vhc_number AS bkg_cab_number
       , bkg_trip_duration
       , bcb_vendor_id AS bkg_vendor_id
	   , bcb_driver_id AS bkg_driver_id
       , bkg_due_amount
       , bkg_create_date
	   , v.vct_desc AS bkg_cab_type
       , bkg_trip_distance
       , bkg_additional_charge
       , bkg_additional_charge_remark
       , bkg_vendor_collected
       , bkg_service_tax_rate
       , bkg_start_odometer
       , bkg_end_odometer
       , bkg_trip_otp  AS bpr_trip_otp
       , bkg_is_trip_verified AS bpr_is_trip_verified
	   , bpr.bkg_no_show
       , bpr.bkg_trip_otp_required AS bpr_trip_otp_required
	   , bpr.bkg_duty_slip_required AS is_duty_slip_required
       , IF(btk_last_event= 203,1,0) as bkg_arrived_for_pickup
       , bkg_night_pickup_included
       , bkg_night_drop_included
       , bkg_agent_id
       , ((IFNULL(bkg_advance_amount,0) + IFNULL(bkg_credits_used,0) - IFNULL(bkg_refund_amount,0)) + IFNULL(bkg_vendor_collected,0)) AS bkg_advance_paid
       , IF(bkg_vehicle_type_id != " . VehicleCategory::SHARED_SEDAN_ECONOMIC . ", bkg_rate_per_km_extra, 0) AS bkg_rate_per_km_extra

,booking_invoice.bkg_trip_waiting_charge,booking_invoice.bkg_extra_pickup_charge,booking_invoice.bkg_extra_drop_charge
FROM   booking
			JOIN booking_route ON booking_route.brt_bkg_id = booking.bkg_id
			JOIN booking_invoice ON booking.bkg_id = booking_invoice.biv_bkg_id
			JOIN booking_user ON booking.bkg_id = booking_user.bui_bkg_id
			JOIN booking_add_info ON booking.bkg_id = booking_add_info.bad_bkg_id
			JOIN booking_track ON booking.bkg_id = booking_track.btk_bkg_id AND booking_track.bkg_ride_complete = 0
			JOIN booking_pref bpr On booking.bkg_id = bpr.bpr_bkg_id AND bpr.bkg_no_show = 0
			JOIN booking_cab ON bcb_id = bkg_bcb_id

			JOIN cities c1 ON bkg_from_city_id = c1.cty_id
			JOIN cities c2 ON bkg_to_city_id = c2.cty_id
	   JOIN svc_class_vhc_cat scv ON bkg_vehicle_type_id = scv.scv_id
       JOIN vehicle_category v ON scv.scv_vct_id = v.vct_id
       LEFT JOIN vehicles v1 ON bcb_cab_id = v1.vhc_id
       LEFT JOIN drivers d ON bcb_driver_id = d.drv_id
	   LEFT JOIN vendors a ON bcb_vendor_id = a.vnd_id
       LEFT JOIN vehicle_types v2 ON v1.vhc_type_id = v2.vht_id
	   WHERE bkg_status IN (5) AND bcb_driver_id = $driverId  AND ((booking.bkg_bcb_id IN (SELECT booking.bkg_bcb_id
					FROM   `booking`
					WHERE  booking.bkg_id = $bkgId)) OR (
       booking.bkg_id =  $bkgId)) ORDER BY `bkg_pickup_date` ASC";
		$recordset			 = DBUtil::queryAll($qry);
		foreach ($recordset as $key => $val)
		{
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_id')
				{
					$eventType								 = BookingTrackLog::model()->getEventTypeByBkg($v);
					$recordset[$key]['ttg_event_type']		 = ($eventType > 0) ? $eventType : '0';
					$recordset[$key]['bkg_start_odometer']	 = BookingTrack::model()->getOdometerReading($v);
					$recordset[$key]['bkg_route_name']		 = BookingRoute::model()->getRouteName($v);
				}
				if ($k == 'bkg_agent_id')
				{
					if (($v != null || $v != '') && $v == $uberAgentId)
					{
						$recordset[$key]['bkg_pickup_date'] = BookingCab::model()->getPickupDateTime("Y-m-d H:i:s", $recordset[$key]['bkg_pickup_date'], $v);
					}
				}
			}
			$recordset[$key]['btl_event_type_id'] = (int) $recordset[$key]['btl_event_type_id'];
		}

		return $recordset;
	}

	public function assigncabdriver($userInfo, $desc, $eventid)
	{
		$model				 = $this;
		$model->scenario	 = 'assigncabdriver';
		$model->bkg_status	 = Booking::STATUS_PROCESSED;
		try
		{
			if ($model->save())
			{
				if ($model->bkgTrail->btr_cab_assign_fdate == null || $model->bkgTrail->btr_cab_assign_fdate == "")
				{
					$model->bkgTrail->btr_cab_assign_fdate = new CDbExpression('NOW()');
				}
				$model->bkgTrail->btr_driver_approved_status	 = $this->bkgBcb->bcbDriver->drv_approved;
				$model->bkgTrail->btr_vehicle_approved_status	 = $this->bkgBcb->bcbCab->vhc_approved;
				$model->bkgTrail->btr_cab_assign_ldate			 = new CDbExpression('NOW()');
				$model->bkgTrail->save();
				$bcbModel										 = $model->bkgBcb;
				$oldModel										 = clone $model;
				$success										 = false;
				BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, $eventid, $oldModel, $params);
				if ($bcbModel->bkg_driver_cab_message != '')
				{
					$driverCabMessage			 = $bcbModel->bkg_driver_cab_message;
					$eventId					 = BookingLog::REMARKS_ADDED;
					$params						 = [];
					$params['blg_driver_id']	 = $bcbModel->bcb_driver_id;
					$params['blg_vehicle_id']	 = $bcbModel->bcb_cab_id;
					$remark						 = (!$bcbModel->bcbCab->getVehicleApproveStatus() || !$bcbModel->bcbDriver->getDriverApproveStatus()) ? 'Unapproved cab/driver assigned. Reason: ' : '';
					if (isset($driverCabMessage) && $driverCabMessage != '')
					{
						$remark .= $driverCabMessage;
						BookingLog::model()->createLog($model->bkg_id, $remark, $userInfo, $eventId, $oldModel, $params);
					}
				}

				//notificationWrapper::customerNotifyDriverDetails(null, $model);
//				$notificationId	 = substr(round(microtime(true) * 1000), -5);
//				$payLoadData1	 = ['bookingId' => $model->bkg_id, 'EventCode' => Booking::CODE_CABDRIVER_ASSIGNED];
//				$success1		 = AppTokens::model()->notifyConsumer($model->bkgUserInfo->bkg_user_id, $payLoadData1, $notificationId, "(" . $model->bkg_booking_id . ") " . $model->bkgFromCity->cty_name . " to " . $model->bkgToCity->cty_name . " on " . $model->bkg_pickup_date, "Driver/ Cab details updated " . $model->bkg_booking_id);

				if ($model->bkgBcb->bcb_driver_id != '')
				{
					$type			 = $this->userArr[$userInfo->userType];
					$message		 = "Booking " . $model->bkg_booking_id . " Updated by $type";
					$image			 = null;
					$bkgID			 = $model->bkg_booking_id;
					$notificationId	 = substr(round(microtime(true) * 1000), -5);
					$payLoadData	 = ['EventCode' => Booking::CODE_CABDRIVER_UNASSIGNED];
					$success		 = AppTokens::model()->notifyDriver($model->bkgBcb->bcb_driver_id, $payLoadData, $notificationId, $message, $image, "Booking Updated", $bkgID);
					$success1		 = AppTokens::model()->notifyConsumer($model->bkgUserInfo->bkg_user_id, $payLoadData1, $notificationId, "(" . $model->bkg_booking_id . ") " . $model->bkgFromCity->cty_name . " to " . $model->bkgToCity->cty_name . " on " . $model->bkg_pickup_date, "Driver details updated " . $model->bkg_booking_id);
				}

				if ($model->bkg_agent_id > 0 && Agents::isApiKeyAvailable($model->bkg_agent_id))
				{
					$pickupDt	 = $model->bkg_pickup_date;
					$dateDiff	 = ceil((strtotime($pickupDt) - strtotime(date('Y-m-d H:i:s'))) / 60);

					$ptnSettingsVal		 = PartnerSettings::getValueById($model->bkg_agent_id);
					$agentScheduleTime	 = $ptnSettingsVal['pts_drv_share_min'];
					BookingScheduleEvent::addPushDriverDetailsEvent($model->bkg_id, $model->bkg_pickup_date, $agentScheduleTime);
					goto end;
				}
				end:
				return true;
			}
		}
		catch (Exception $e)
		{
			$model->addError('bkg_id', $e->getMessage());
			return false;
		}
		return false;
	}

	/**
	 * @deprecated since version 14-10-2019
	 * @author ramala
	 */
	public function sendPickupAlert($email, $type)
	{
		if ($type == 1)
		{
			$where			 = " AND fromBrt.brt_pickup_datetime BETWEEN NOW() AND DATE_ADD( NOW() , INTERVAL 240 MINUTE )";
			$subjectSuffix	 = "  in < 4hours";
		}
		else
		{
			$where			 = " AND fromBrt.brt_pickup_datetime <= DATE_FORMAT(IF(DATE_FORMAT(now(),'%H') >= 19, DATE_ADD(NOW(), INTERVAL 1 DAY), NOW()),'%Y-%m-%d 12:00:00')";
			$subjectSuffix	 = " DUE BEFORE 12PM";
		}

		/* $sql	 = "SELECT
		  booking.bkg_booking_id,
		  bui.bkg_user_fname,
		  bui.bkg_user_lname,
		  booking.bkg_status,
		  booking.bkg_pickup_address,
		  booking.bkg_drop_address,
		  fromCity.cty_name as from_city,
		  toCity.cty_name as to_city,
		  vendors.vnd_name as vendor_name,
		  contact_phone.phn_phone_no as vendor_phone,
		  booking_cab.bcb_vendor_id as vendor_id,
		  vehicle_types.vht_model as cab_type,
		  booking.bkg_pickup_date
		  FROM
		  (SELECT brt_bcb_id, MIN(brt_id) as minBrt, MAX(brt_id) as maxBrt FROM booking_route
		  WHERE brt_active=1 GROUP BY brt_bcb_id) brtBCB
		  INNER JOIN booking_route fromBrt ON fromBrt.brt_id=minBrt
		  INNER JOIN booking_route toBrt ON toBrt.brt_id=maxBrt
		  INNER JOIN booking_cab ON bcb_id=brtBCB.brt_bcb_id
		  INNER JOIN booking ON bkg_bcb_id=bcb_id
		  INNER JOIN booking_user as bui ON bui.bui_bkg_id=bkg_id
		  INNER JOIN booking_invoice as biv ON biv.biv_bkg_id=bkg_id
		  JOIN vehicle_types ON vehicle_types.vht_id=booking.bkg_vehicle_type_id
		  LEFT JOIN vendors ON vendors.vnd_id=booking_cab.bcb_vendor_id
		  LEFT JOIN contact ON contact.ctt_id = vendors.vnd_contact_id
		  LEFT JOIN contact_phone ON contact_phone.phn_contact_id = contact.ctt_id AND contact_phone.phn_is_primary=1
		  JOIN cities fromCity ON fromCity.cty_id=fromBrt.brt_from_city_id
		  JOIN cities toCity ON toCity.cty_id=toBrt.brt_to_city_id WHERE  bkg_status IN (2,3)
		  AND (  booking_cab.bcb_driver_id IS NULL OR  booking_cab.bcb_cab_id IS NULL)  " . $where;
		  $rows	 = DBUtil::query($sql, DBUtil::SDB());
		  if (count($rows) == 0)
		  {
		  return false;
		  }
		  foreach ($rows as $row)
		  {
		  $status		 = $this->getBookingStatus($row['bkg_status']);
		  $userName	 = $row['bkg_user_fname'] . ' ' . $row['bkg_user_lname'];
		  $mailbody	 .= "<tr><td>{$row['bkg_booking_id']}</td><td>{$userName}</td><td>{$row['from_city']}</td><td>{$row['to_city']}</td><td>{$row['bkg_pickup_date']}</td>
		  <td>{$status}</td><td>{$row['vendor_name']}</td><td>{$row['vendor_phone']}</td><td style='max-width: 120px'>{$row['cab_type']}</td><td style='max-width: 170px'>{$row['bkg_pickup_address']}</td><td style='max-width: 170px'>{$row['bkg_drop_address']}</td></tr>";
		  }
		  $mail	 = "<style>td {border: solid 1px #777; padding: 5px }</style>
		  <b>Call Center team -</b> <br><br>
		  These bookings below are missing an assignment for Driver Name, Driver phone and Cab number.
		  If any of these 3 fields are empty for a booking, you need to call the Vendor immediately and <b>get the information of driver and Cab ASAP</b>.
		  Gozo needs to provide Driver name, Driver phone and Cab number to customer atleast 3 hours before pick up time.
		  <br><br>
		  This report will be run every 30 minutes so please be checking email regularly.
		  <br><table style='border: solid 1px #777; padding: 5px; border-collapse: collapse'>"
		  . '<tr style="font-weight: bold"><td>Booking ID</td><td>Customer Name</td><td>From</td><td>To</td><td>Pickup Time</td>
		  <td>Status</td><td>Vendor Name</td><td>Vendor Phone</td>
		  <td>Cab Type</td><td>Pickup Address</td><td >Drop Area</td></tr>'
		  . $mailbody
		  . '</table>';
		  $body	 = $mail;
		  $subject = date('d/M/Y H:i:s') . ' - ALERT - DRIVER INFO MISSING FOR PICKUP' . $subjectSuffix;
		  $mail	 = new EIMailer();
		  $mail->clearView();
		  $mail->clearLayout();
		  $mail->setFrom('info@aaocab.com', 'Info Gozocabs');
		  $mail->setTo($email, 'Callcenter Gozocabs');
		  $mail->setBody($body);
		  $mail->setSubject($subject);
		  if ($mail->sendServicesEmail(0))
		  {
		  $delivered = "Email sent successfully";
		  }
		  else
		  {
		  $delivered = "Email not sent";
		  }
		  echo $delivered;

		  $usertype	 = EmailLog::Admin;
		  $subject	 = date('d/M/Y H:i:s') . ' - ALERT - DRIVER INFO MISSING FOR PICKUP' . $subjectSuffix;
		  emailWrapper::createLog($email, $subject, $body, "", $usertype, $delivered, '', '', '', EmailLog::SEND_SERVICE_EMAIL, 0); */
	}

	public function sentDriverAssignmentAlert()
	{
		$sql = "SELECT (booking_cab.bcb_vendor_id),vendors.vnd_name as 'vendor name', contact_phone.phn_phone_no as 'vendor phone',COUNT(1) as bookingCount, bkg_bcb_id
				FROM booking
				INNER JOIN booking_cab ON booking_cab.bcb_id=booking.bkg_bcb_id AND booking_cab.bcb_active=1
				INNER JOIN vendors ON vendors.vnd_id=booking_cab.bcb_vendor_id and vendors.vnd_id = vendors.vnd_ref_code
				INNER JOIN contact_profile cp on cp.cr_is_vendor = vendors.vnd_id and cp.cr_status =1
				INNER JOIN contact ON contact.ctt_id = cp.cr_contact_id and contact.ctt_active =1 and contact.ctt_id=contact.ctt_ref_code
				INNER JOIN contact_phone ON contact_phone.phn_contact_id = contact.ctt_id AND contact_phone.phn_is_primary=1 WHERE 1=1
				AND booking.bkg_status IN (3) AND bkg_pickup_date > NOW() AND (CalcWorkingHour(now(), bkg_pickup_date) <= 6)
				GROUP BY booking_cab.bcb_vendor_id";

		$rows = DBUtil::queryAll($sql, DBUtil::SDB());
		if (count($rows) == 0)
		{
			return false;
		}
		foreach ($rows as $row)
		{
			if ($row['bookingCount'] > 1)
			{
				$row['bkg_bcb_id'] = null;
			}
			$payLoadData = ['vendorId' => $row['bcb_vendor_id'], 'EventCode' => Booking::CODE_DRIVER_PENDING, 'tripId' => $row['bkg_bcb_id']];
			$success	 = AppTokens::model()->notifyVendor($row['bcb_vendor_id'], $payLoadData, "Please allocate car & driver immediately for your assigned bookings", "Car / Driver info needed", true);
		}
	}

	public function sentVendorAssignAlert($email, $isVendor = 0)
	{
		$status	 = [2];
		$status	 = implode(',', $status);
		$sql	 = "SELECT booking.bkg_id,booking.bkg_booking_id,bui.bkg_user_fname,bui.bkg_user_lname,bui.bkg_user_email ,
                bui.bkg_contact_no,
		booking.bkg_create_date,
                booking.bkg_pickup_date,booking.bkg_status ,
                fromCity.cty_name as fromCity,toCity.cty_name as toCity,biv.bkg_total_amount,
                biv.bkg_advance_amount,users.usr_total_trips
                FROM booking
                 JOIN booking_user as bui ON bui.bui_bkg_id=booking.bkg_id
                 JOIN booking_invoice as biv ON biv.biv_bkg_id=booking.bkg_id
                 JOIN cities as fromCity ON fromCity.cty_id=booking.bkg_from_city_id
                 JOIN cities as toCity ON toCity.cty_id=booking.bkg_to_city_id
                LEFT JOIN users ON users.user_id=bui.bkg_user_id
                WHERE booking.bkg_status IN ($status) AND (DATE_ADD(NOW(),INTERVAL 48 HOUR)>=booking.bkg_pickup_date)
                ORDER BY booking.bkg_pickup_date ASC";

		$rows = DBUtil::queryAll($sql, DBUtil::SDB());

		if (count($rows) == 0)
		{
			return false;
		}
		if (count($rows) > 0)
		{
			foreach ($rows as $row)
			{
				$userTrips		 = $row['usr_total_trips'] <> null ? $row['usr_total_trips'] : '0';
				$status			 = $this->getBookingStatus($row['bkg_status']);
				$pickupDate		 = date("d-m-Y", strtotime($row['bkg_pickup_date']));
				$pickupTime		 = date("h:i:s", strtotime($row['bkg_pickup_date']));
				$bookingDate	 = date("d-m-Y", strtotime($row['bkg_create_date']));
				$bookingRoute	 = '(' . $row['fromCity'] . ' - ' . $row['toCity'] . ')';
				$userName		 = $row['bkg_user_fname'] . ' ' . $row['bkg_user_lname'];
				$bookAmount		 = ($row['bkg_total_amount'] > 0) ? $row['bkg_total_amount'] : '0';
				$advanceAmount	 = ($row['bkg_advance_amount'] > 0) ? $row['bkg_advance_amount'] : '0';
				$mailbody		 .= "<tr><td>{$row['bkg_booking_id']}</td><td>{$bookingDate}</td><td>{$pickupDate}</td><td>{$pickupTime}</td><td>{$userName}</td><td>{$bookingRoute}</td><td>Rs. {$bookAmount}</td><td>Rs. {$advanceAmount}</td><td>{$userTrips}</td></tr>";
			}
		}
		else
		{
			$mailbody .= "<tr><td colspan='9'>No records yet found.</td></tr>";
		}
		if ($isVendor == 0)
		{
			$mailHeader = "These bookings below are missing an assignment for Driver Name, Driver phone and Cab number.
                If any of these 3 fields are empty for a booking, you need to call the Vendor immediately and <b>get the information of driver and Cab ASAP</b>.
                Gozo needs to provide Driver name, Driver phone and Cab number to customer atleast 3 hours before pick up time. ";
		}
		elseif ($isVendor = 1)
		{
			$mailHeader = "These bookings below are missing an assignment for vendor";
		}
		$body	 = "<b>$mailHeader</b><br><br><table style='border: solid 1px #777; padding: 5px; border-collapse: collapse'><tr style='font-weight: bold;'><td>Booking ID</td><td>Booking Date</td><td>Pickup Date</td><td>Pickup Time</td><td>Customer Name</td><td>Route</td><td>Booking Amount</td><td>Advance Amount</td><td>Customer #Trips</td></tr>$mailbody</table>";
		$subject = date('d/M/Y H:i:s') . ' - ALERT - VENDOR INFO MISSING FOR PICKUP';

		$mail = new EIMailer();
		$mail->clearView();
		$mail->clearLayout();
		$mail->setFrom('info@aaocab.com', 'Info Gozocabs');
		$mail->setBody($body);
		$mail->setTo($email, 'Callcenter Gozocabs');
		$mail->setSubject($subject);
		if ($mail->sendServicesEmail(0))
		{
			$delivered = "Email sent successfully";
		}
		else
		{
			$delivered = "Email not sent";
		}
		echo $delivered;
		$usertype	 = EmailLog::Admin;
		$subject	 = date('d/M/Y H:i:s') . ' - ALERT - VENDOR INFO MISSING FOR PICKUP' . $subjectSuffix;
		emailWrapper::createLog($email, $subject, $body, "", $usertype, $delivered, '', '', '', '', 0);
	}

	public function sendVendorPickupDueSummary($duration, $counter)
	{
		$rows = $this->getVendorPickup($duration, $counter);

		$time			 = DBUtil::command("SELECT NOW()")->queryScalar();
		$vendorBookings	 = [];
		foreach ($rows as $row)
		{
			$vendorBookings[$row["vendor_id"]][] = $row;
		}
		foreach ($vendorBookings as $vendor => $vendorBooking)
		{
			$msg = '';
			$i	 = 1;
			foreach ($vendorBooking as $row)
			{
//                if($i==8)
//                {
//                    $msgCom = new smsWrapper();
//                    $msgCom->remindVendorPickupDue($vnumber, $msg, $time, $vname, $count, $counter);
//                    $i=0;
//                    $msg='';
//                }
				$dname = "Driver: NA, Please provide immediately";
				if ($row['driver_name'] != '')
				{
					$dname = "Driver: {$row['driver_name']}";
				}
				$cnumber = '';
				if ($row['driver_name'] != '')
				{
					$cnumber = ", Cab Number: {$row['cab_number']}";
				}
				$instruction = trim($row['bkg_instruction_to_driver_vendor']);
				$msg		 .= "[{$i}] Booking Id: {$row['bkg_booking_id']}, {$row['from_city']}-{$row['to_city']}, {$row['cab_type']}\n\r\n\r"
						. "Pickup location: {$row['bkg_pickup_address']}\n\r\n\r"
						. "Pickup Time: " . DateTimeFormat::DateTimeToLocale($row['bkg_pickup_date']) . "\n\r\n\r"
						. "Instructions: {$instruction}\n\r\n\r"
						. $dname . $cnumber . "\n\r\n\r\n\r";
				$vccode		 = ($row['vendor_phone_country_code'] == '') ? '91' : $row['vendor_phone_country_code'];
				$vnumber	 = $vccode . $row['vendor_phone'];
				$vnumbernew	 = $row['vendor_phone'];
				$vname		 = $row['vendor_name'];
				$vendor_id	 = $row['vendor_id'];
				$i++;
			}
			$count	 = $i - 1;
			$msgCom	 = new smsWrapper();
			$msgCom->remindVendorPickupDue($vccode, $vnumbernew, $msg, $time, $vname, $count, $counter, '', $vendor_id);
		}
	}

	public function getVendorPickup($timeDuration, $skipCounter = '', $status = [3, 5], $group = '')
	{
		$status	 = implode(',', $status);
		$sql	 = "SELECT
					booking.bkg_id,
					booking.bkg_booking_id,
					bcb_id,
					bcb_vendor_id,
					bui.bkg_user_fname,
					bui.bkg_user_lname,
					bui.bkg_country_code,
					bui.bkg_contact_no,
					bui.bkg_user_email,
					booking.bkg_status,
					biv.bkg_total_amount,
					biv.bkg_advance_amount,
					biv.bkg_due_amount,
					booking.bkg_pickup_address,
					booking.bkg_pickup_date,
					booking.bkg_instruction_to_driver_vendor,
					fromCity.cty_name AS from_city,
					toCity.cty_name AS to_city,
					vendors.vnd_name AS vendor_name,
					contact_phone.phn_phone_no AS vendor_phone,
					contact_phone.phn_phone_country_code AS vendor_country_code,
					booking_cab.bcb_vendor_id AS vendor_id,
					booking_cab.bcb_cab_number AS cab_number,
					drivers.drv_name AS driver_name,
					drvContact.phn_phone_no AS driver_phone,
					vehicle_category.vct_desc AS cab_type,
					drivers.drv_id AS driver_id
					FROM booking
					INNER JOIN booking_cab ON bkg_bcb_id = bcb_id AND bkg_status IN ($status)
					INNER JOIN booking_user AS bui ON bui.bui_bkg_id = booking.bkg_id
					INNER JOIN booking_invoice AS biv ON biv.biv_bkg_id = booking.bkg_id
					INNER JOIN svc_class_vhc_cat scv ON scv.scv_id = booking.bkg_vehicle_type_id
					INNER JOIN vehicle_category ON scv.scv_vct_id = vct_id
					JOIN vendors ON vendors.vnd_id = booking_cab.bcb_vendor_id and vendors.vnd_id = vendors.vnd_ref_code
					JOIN contact_profile as cpv ON cpv.cr_is_vendor = vendors.vnd_id and cpv.cr_status =1
					JOIN contact on contact.ctt_id = cpv.cr_contact_id and contact.ctt_id =contact.ctt_ref_code and contact.ctt_active =1
					JOIN cities fromCity ON fromCity.cty_id = booking.bkg_from_city_id
					JOIN cities toCity ON toCity.cty_id = booking.bkg_to_city_id
					JOIN contact_phone ON contact_phone.phn_contact_id = contact.ctt_id AND contact_phone.phn_is_primary = 1
					LEFT JOIN vehicles ON vehicles.vhc_id=booking_cab.bcb_cab_id
					LEFT JOIN drivers ON drivers.drv_id=booking_cab.bcb_driver_id and drivers.drv_id = drivers.drv_ref_code
					LEFT JOIN contact_profile as cpd on cpd.cr_is_driver = drivers.drv_id and cpd.cr_status =1
					LEFT JOIN contact as cttd on cttd.ctt_id = cpd.cr_contact_id and cttd.ctt_id = cttd.ctt_ref_code and cttd.ctt_active =1
					LEFT JOIN contact_phone drvContact ON drvContact.phn_contact_id = cttd.ctt_id
					WHERE 1
					AND booking.bkg_pickup_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL $timeDuration MINUTE) ";

		if ($skipCounter != '')
		{
			$sqlin		 = "select group_concat(a.bkg_booking_id)  as  bkg_booking_id from
				   (
				        SELECT booking.bkg_booking_id  FROM booking WHERE  1 and bkg_status IN ($status) AND booking.bkg_pickup_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL $timeDuration MINUTE)
                        EXCEPT
                        (SELECT booking_id from sms_log where sms_log.counter='$skipCounter')
                   ) a";
			$bookingIds	 = DBUtil::command($sqlin)->queryScalar();
			if ($bookingIds != "")
			{
				$resStr	 = str_replace(',', "','", $bookingIds);
				$sql	 .= " AND booking.bkg_booking_id IN ('" . $resStr . "') ";
			}
		}
		if ($group != '')
		{
			$sql = "SELECT bcb_vendor_id, COUNT(*) as bookingCount FROM ($sql) a GROUP BY bcb_vendor_id";
		}
		else
		{
			$sql .= " ORDER BY booking.bkg_pickup_date ASC";
		}
		return DBUtil::queryAll($sql, DBUtil::SDB());
	}

	public function sendMissingDriverNotification($duration, $checkCounter = '')
	{
		$rows = $this->getVendorPickup($duration, $checkCounter, [3]);
		foreach ($rows as $row)
		{
			$fullInstruction = Booking::model()->getFullInstructionsByid($row['bkg_id']);
			$vccode			 = ($row['vendor_phone_country_code'] == '') ? '91' : $row['vendor_phone_country_code'];
			$vnumber		 = $vccode . $row['vendor_phone'];
			$amount			 = $row['bkg_total_amount'];
			$advance		 = round($row['bkg_advance_amount']);
			$due			 = round($row['bkg_due_amount']);
			$advStr			 = '';
			if ($advance > 0)
			{
				$advStr = ', Amount to collect : Rs.' . $due;
			}
			if ($row['bcb_vendor_id'] > 0)
			{
				$payLoadData = ['tripId' => $row['bcb_id'], 'EventCode' => Booking::CODE_PENDING];
				$message	 = "Trip Id: " . $row['bcb_id'] . ", " . $row['from_city'] . "-" . $row['to_city'] . ", " . date("d-m-Y h:i A", strtotime($row['bkg_pickup_date']));
				$title		 = "Trip Id " . $cabModel->bcb_id . ": Allocate Car and Driver now ";
				$success	 = AppTokens::model()->notifyVendor($cabModel->bcb_vendor_id, $payLoadData, $message, $title);
			}
//			$amount	 = $row['bkg_total_amount'] . $advStr;
//			$msgCom	 = new smsWrapper();
//			$msgCom->remindVendorUpdateDetails($vccode, $row['vendor_phone'], $row['cab_type'], $row['from_city'], $row['to_city'], date("d/m/Y", strtotime($row['bkg_pickup_date'])), date("H:i A", strtotime($row['bkg_pickup_date'])), $row['bkg_booking_id'], $due, $fullInstruction, $checkCounter);
		}
	}

	public function sendDriverMissingNotification($duration, $checkCounter, $group = '')
	{
		$rows = $this->getVendorPickup($duration, $checkCounter, [3], $group);
		foreach ($rows as $row)
		{
			$payLoadData = ['vendorId' => $row['bcb_vendor_id'], 'EventCode' => Booking::CODE_DRIVER_PENDING];
			$success	 = AppTokens::model()->notifyVendor($row['bcb_vendor_id'], $payLoadData, "Total " . $row['bookingCount'] . " assignment pending whose pickup is less than 16 hours.", "Pending Cab/Driver assignment");
		}
	}

	public function sendPickupAlertVendorDriver($duration, $checkCounter)
	{
//$rows = $this->getPickupAlertVendorDriverInformation($duration, $checkCounter);
		$rows = $this->getVendorPickup($duration, $checkCounter, [5]);
		foreach ($rows as $row)
		{
			$vccode	 = ($row['vendor_country_code'] == '') ? '91' : $row['vendor_country_code'];
			$vnumber = $vccode . $row['vendor_phone'];
			if ($row['driver_phone'] != "")
			{
				$dnumber = $row['driver_phone'];
			}
			$cnumber		 = "+" . $row['bkg_country_code'] . $row['bkg_contact_no'];
			$cname			 = $row['bkg_user_fname'] . ' ' . $row['bkg_user_lname'];
			$amount			 = $row['bkg_total_amount'];
			$advance		 = round($row['bkg_advance_amount']);
			$due			 = round($row['bkg_due_amount']);
			$amountToCollect = ($advance > 0) ? $due : $amount;
			$msgCom			 = new smsWrapper();
			$msgCom->pickupReminder($vccode, $row['vendor_phone'], 'Vendor', $cnumber, $cname, $row['bkg_pickup_address'], date('d/m/Y h:i A', strtotime($row['bkg_pickup_date'])), $amountToCollect, $row['bkg_booking_id'], SmsLog::Vendor, $checkCounter);
			$msgCom->pickupReminder('91', $dnumber, $row['driver_name'], $cnumber, $cname, $row['bkg_pickup_address'], date('d/m/Y h:i A', strtotime($row['bkg_pickup_date'])), $amountToCollect, $row['bkg_booking_id'], SmsLog::Driver, $checkCounter);
			if ($row['driver_id'] != "" || $row['driver_id'] != null)
			{
				$notificationId	 = substr(round(microtime(true) * 1000), -5);
				$message		 = "You have a pickup at " . date('d/m/Y h:i A', strtotime($row['bkg_pickup_date'])) . ". \nPickup Address: " . $row['bkg_pickup_address'];
				$image			 = null;
				$payLoadData	 = ['EventCode' => Booking::CODE_DRIVER_PICKUP_REMINDER];
				$success		 = AppTokens::model()->notifyDriver($row['driver_id'], $payLoadData, $notificationId, $message, $image, "Gozo Cabs");
			}
		}
	}

	public function generateLinkUniqueid($bkid)
	{
		$model		 = Booking::model()->findByPk($bkid);
		$crdt		 = date('YmdHis', strtotime($model->bkg_create_date));
		$bkgid		 = str_pad($model->bkg_id, 6, 0, STR_PAD_LEFT);
		$uniqueid	 = $crdt . $bkgid;
		return $uniqueid;
	}

	public function getBusinessPastDays()
	{
		$date				 = new DateTime();
		$date1				 = new DateTime();
		$date2				 = new DateTime();
		$date2->sub(new DateInterval('P1D'));
		$date->sub(new DateInterval('P7D')); // P1D means a period of 1 day
		$Date2				 = $date->format('Y-m-d');
		$Date3				 = $date2->format('Y-m-d');
		$Today				 = $date1->format('Y-m-d') . " 23:59:00";
		$qry1				 = "select count(*) as count_booking, date_format(r.bkg_create_date, '%d-%b') as booking_date, sum(r.bkg_total_amount) as revenue, round(sum(r.bkg_total_amount)-sum(r.bkg_vendor_amount)) as commission, sum(r.bkg_advance_amount) as advance_amount, sum(if(r.bkg_advance_amount > 0,1,0)) as advance_count from booking r where r.bkg_create_date > '$Date2 00:00:00' and r.bkg_status in ('2', '3', '5', '6', '7') group by date_format(r.bkg_create_date, '%d-%b')";
		$qry3				 = "select  r.bkg_booking_id as bid, c1.cty_name as fromc, c2.cty_name as toc, if(r.bkg_booking_type = 1,'one way','return') as btype, r.bkg_total_amount as amount, r.bkg_pickup_date as ptime, r.bkg_create_date as created, if(r.bkg_advance_amount is null,0.00,r.bkg_advance_amount) as advance_amount from booking r left join cities c1 on r.bkg_from_city_id = c1.cty_id left join cities c2 on r.bkg_to_city_id = c2.cty_id where r.bkg_create_date > '$Date3 00:00:00' and r.bkg_status in ('2', '3', '5', '6', '7') order by r.bkg_create_date";
		$qry2				 = "select count(*) as count_booking, date_format(r.bkg_pickup_date, '%d-%b') as pickup_date, sum(r.bkg_total_amount) as revenue, round(sum(r.bkg_total_amount)-sum(r.bkg_vendor_amount)) as commission, sum(r.bkg_advance_amount) as advance_amount, sum(if(r.bkg_advance_amount > 0,1,0)) as advance_count from booking r where r.bkg_pickup_date > '$Date2 00:00:00' and r.bkg_pickup_date < '$Today' and r.bkg_status in ('2', '3', '5', '6', '7') group by date_format(r.bkg_pickup_date, '%d-%b')";
		$recordset1			 = DBUtil::command($qry1)->queryAll();
		$recordset2			 = DBUtil::command($qry2)->queryAll();
		$recordset3			 = DBUtil::command($qry3)->queryAll();
		$res				 = array();
		$res['booking']		 = $recordset1;
		$res['earning']		 = $recordset2;
		$res['yesterday']	 = $recordset3;
		return $res;
	}

	public function getHowWeDoEMail()
	{
// $qry1 = "SELECT bkg_id,bkg_user_email FROM `booking` WHERE bkg_user_email IN('deepakk.sonthalia@gmail.com' , 'deepak@epitech.in')";
//$qry1 = "SELECT bkg_id,bkg_user_email, bkg_pickup_date from booking bkg  WHERE date(bkg_pickup_date) >= '2016-01-01' AND date(bkg_pickup_date) <= '2016-01-24' AND bkg_status IN (6,7) AND bkg_user_email <>'' AND bkg_active=1 AND bkg_id NOT IN (SELECT rtg_booking_id FROM ratings)";
		$recordset1 = DBUtil::command($qry1)->queryAll();
		return $recordset1;
	}

	public function getTripCitiesListbyId($bkgid = '')
	{
		if ($bkgid != '' && $bkgid > 0)
		{
			$bkid = $bkgid;
		}
		elseif ($this->bkg_id && $this->bkg_id > 0)
		{
			$bkid = $this->bkg_id;
		}
		$sql = "SELECT brt.brt_id, fbrt.cty_name fromCity, tbrt.cty_name toCity FROM  booking_route brt
                 JOIN cities fbrt ON fbrt.cty_id = brt.brt_from_city_id
                 JOIN cities tbrt ON tbrt.cty_id = brt.brt_to_city_id
                where brt.brt_bkg_id =  $bkid AND brt.brt_active = 1
                GROUP by brt.brt_id";

		$data			 = DBUtil::queryAll($sql);
		$cityNameArr	 = [];
		$cityNameArr[0]	 = $data[0]['fromCity'];
		foreach ($data as $k => $v)
		{
			$cityNameArr[] = $v['toCity'];
		}
		return $cityNameArr;
	}

	public function getRoutesInfobyId($bkgid = '')
	{
		if ($bkgid != '' && $bkgid > 0)
		{
			$bkid = $bkgid;
		}
		elseif ($this->bkg_id && $this->bkg_id > 0)
		{
			$bkid = $this->bkg_id;
		}
		$sql = "SELECT distinct rut.rut_special_remarks FROM  booking_route brt
				LEFT JOIN route rut ON rut.rut_from_city_id = brt.brt_from_city_id and rut.rut_to_city_id = brt.brt_to_city_id
				where brt.brt_bkg_id =  $bkid AND brt.brt_active = 1  AND rut.rut_special_remarks IS NOT NULL
                GROUP by brt.brt_id";

		$data = DBUtil::queryAll($sql);
		return $data;
	}

	public function getRoutesInfobyCities($citiesInRoutes = [])
	{
		$city1	 = $citiesInRoutes[0];
		$city2	 = $citiesInRoutes[1];
		$data	 = [];
		if ($city1 != '' && $city2 != '')
		{
			$sql = "SELECT distinct rut_special_remarks FROM  route
				 WHERE (rut_from_city_id = $city1 AND rut_to_city_id = $city2)
                     OR (rut_from_city_id = $city2 AND rut_to_city_id = $city1)
                    AND rut_special_remarks IS NOT NULL
                GROUP BY rut_special_remarks";

			$data = DBUtil::queryAll($sql);
		}
		return $data;
	}

	public function getTripType()
	{
		$arrTriptype = $this->trip_type;
		return $arrTriptype[$this->bkg_trip_type];
	}

	public function getDetailsbyId($bkgid)
	{
		/* @var $model Booking */

		$criteria					 = new CDbCriteria;
		$criteria->compare('bkg_id', $bkgid);
		$criteria->with				 = ['bkgFromCity', 'bkgToCity', 'bkgSvcClassVhcCat'];
		$criteria->together			 = true;
		$model						 = $this->find($criteria);
		$cabmodel					 = $model->getBookingCabModel();
		$data						 = $model->attributes;
		$data['consumer_name']		 = $model->bkgUserInfo->getUsername();
		$data['consumer_phone']		 = $model->bkgUserInfo->getContactNumber();
		$data['consumer_alt_phone']	 = $model->bkgUserInfo->getAlternateNumber();
		$data['route_name']			 = $model->bkgFromCity->cty_name . '-' . $model->bkgToCity->cty_name;
		$data['pick_date']			 = DateTimeFormat::DateTimeToLocale($model->bkg_pickup_date);
		if ($model->bkg_booking_type == 2)
		{
			$data['return_date'] = DateTimeFormat::DateTimeToLocale($model->bkg_return_date);
		}
		$data['booking_type']				 = $model->getBookingType($model->bkg_booking_type);
//    $data['payable_amount'] = ($model->bkg_trip_type == 1) ? $model->bkg_total_amount : '@ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¹' . $model->bkg_rate_per_km . "/km";
		$data['payable_amount']				 = $model->bkgInvoice->bkg_total_amount;
		$data['bkg_gozo_amount']			 = $model->bkgInvoice->bkg_gozo_amount;
		$data['bkg_vendor_amount']			 = $model->bkgInvoice->bkg_vendor_amount;
		$data['bkg_vendor_collected']		 = $model->bkgInvoice->bkg_vendor_collected;
		$data['bkg_discount_amount']		 = $model->bkgInvoice->bkg_discount_amount;
		$data['bkg_driver_allowance_amount'] = $model->bkgInvoice->bkg_driver_allowance_amount;
		$data['bkg_additional_charge']		 = $model->bkgInvoice->bkg_additional_charge;
		$data['bkg_convenience_charge']		 = $model->bkgInvoice->bkg_convenience_charge;
		$data['bkg_toll_tax']				 = $model->bkgInvoice->bkg_toll_tax;
		$data['bkg_state_tax']				 = $model->bkgInvoice->bkg_state_tax;
		$data['bkg_extra_km_charge']		 = $model->bkgInvoice->bkg_extra_km_charge;
		$data['bkg_extra_state_tax']		 = $model->bkgInvoice->bkg_extra_state_tax;
		$data['bkg_extra_toll_tax']			 = $model->bkgInvoice->bkg_extra_toll_tax;
		$data['bkg_airport_entry_fee']		 = $model->bkgInvoice->bkg_airport_entry_fee;
		$data['bkg_parking_charge']			 = $model->bkgInvoice->bkg_parking_charge;
		$data['from_city']					 = $model->bkgFromCity->cty_name;
		$data['to_city']					 = $model->bkgToCity->cty_name;
//$data['trip_type']      = $model->getTripType();
		$data['trip_type']					 = 1;

		$data['driver_name'] = $cabmodel->bcb_driver_name;
		$data['cab_type']	 = $model->bkgSvcClassVhcCat->scc_VehicleCategory->vct_desc;
		$data['cab_type_id'] = $model->bkgSvcClassVhcCat->scc_VehicleCategory->vct_id;

		$vehicleModel = $cabmodel->bcbCab->vhcType->vht_model;
		if ($cabmodel->bcbCab->vhc_type_id === Config::get('vehicle.genric.model.id'))
		{
			$vehicleModel = OperatorVehicle::getCabModelName($cabmodel->bcb_vendor_id, $cabmodel->bcb_cab_id);
		}

		$data['cab_assigned']	 = $vehicleModel . ' ' . $cabmodel->bcbCab->vhc_number;
		$data['vendor_name']	 = $cabmodel->bcbVendor->vnd_name;
		$data['status']			 = $model->getBookingStatus($model->bkg_status);
		$data['additionalInfo']	 = $model->bkgAddInfo->bkg_spl_req_other;
		return $data;
	}

	public function getRouteCount()
	{
		$qry1		 = "
			SELECT *, count(*) as count, SUM(bkg_total_amount) as amount FROM (
				SELECT c1.cty_name as fromc, c2.cty_name as toc,bkg_from_city_id, bkg_to_city_id, blg_created,  bkg_total_amount
				FROM booking r
				INNER JOIN booking_invoice ON bkg_id=biv_bkg_id
				INNER JOIN `booking_log` ON bkg_id=booking_log.blg_booking_id
				INNER JOIN cities c1 on r.bkg_from_city_id = c1.cty_id
				INNER JOIN cities c2 on r.bkg_to_city_id = c2.cty_id
				WHERE blg_event_id IN (3,5,25) AND bkg_active=1 AND bkg_status IN (2,3,5,6,7) AND blg_created>=CURDATE()
				GROUP BY bkg_id) a
			GROUP BY bkg_from_city_id, bkg_to_city_id ORDER BY fromc, toc";
		$recordset	 = Yii::app()->db1->createCommand($qry1)->queryAll();
		return $recordset;
	}

	public function getTodaysBookings()
	{
		$qry1		 = "SELECT bkg_booking_id, CONCAT(c1.cty_name, ' - ', GROUP_CONCAT(DISTINCT c2.cty_name SEPARATOR ' - ')) as routes, bkg_from_city_id,
                        bkg_to_city_id, blg_created, bkg_create_date,  bkg_total_amount, bkg_pickup_date,
                        v.vct_label as cab_type
                FROM booking r
				INNER JOIN booking_invoice ON bkg_id=biv_bkg_id
                INNER JOIN booking_route ON brt_bkg_id=bkg_id AND brt_active=1
                INNER JOIN `booking_log` ON bkg_id=booking_log.blg_booking_id
                INNER JOIN cities c1 ON r.bkg_from_city_id = c1.cty_id
                INNER JOIN cities c2 ON brt_to_city_id = c2.cty_id
				INNER JOIN svc_class_vhc_cat scv ON scv.scv_id = r.bkg_vehicle_type_id
				INNER JOIN vehicle_category v ON scv.scv_vct_id = v.vct_id
                WHERE blg_event_id IN (3,5,25) AND bkg_active=1 AND bkg_status IN (2,3,5,6,7) AND  blg_created>=CURDATE()
                GROUP BY bkg_id
                ORDER BY bkg_create_date DESC";
		$recordset	 = Yii::app()->db1->createCommand($qry1)->queryAll();
		return $recordset;
	}

	/**
	 * @deprecated since version 14-10-2019
	 * @author ramala
	 */
	public function getMffCab($vendor, $toZone)
	{
		$statusCon		 = " bkg_status IN (2,3,5) ";
		$venCondition	 = "";
		$toZoneCondition = "";
		if ($vendor != '')
		{
			$venCondition	 = " AND vnd_id = $vendor AND vnd_id IS NOT NULL";
			$statusCon		 = " bkg_status IN (3,5) ";
		}
		if ($toZone != '')
		{
			$toZoneCondition = " AND bkg_to_city_id IN(SELECT zct_cty_id FROM zone_cities WHERE zct_zon_id = $toZone)";
		}
		$qry		 = "SELECT  DAY(bkg_pickup_date) as d, CONCAT(MIN(HOUR(bkg_pickup_date)),':00 - ',MAX(HOUR(bkg_pickup_date)+1),':00') as time_range,floor(HOUR(bkg_pickup_date)/2) as q, count(*) as cnt, SUM(IF(booking.bkg_vehicle_type_id=30,1,0)) as sedan,
                    SUM(IF(booking.bkg_vehicle_type_id=29,1,0)) as suv, SUM(IF(booking.bkg_vehicle_type_id=30 AND booking.bkg_agent_id>0 AND agent.agt_id >0,1,0)) as corp_sedan
                    , SUM(IF(booking.bkg_vehicle_type_id=29 AND booking.bkg_agent_id>0 AND agent.agt_id >0,1,0)) as corp_suv
                    , SUM(IF(booking.bkg_vehicle_type_id=30 AND booking.bkg_agent_id>0 AND agent.agt_id >0 AND bkg_status=2,1,0)) as corp_unassigned_sedan
                    , SUM(IF(booking.bkg_vehicle_type_id=29 AND booking.bkg_agent_id>0 AND agent.agt_id >0 AND bkg_status=2,1,0)) as corp_unassigned_suv
                    , SUM(IF(booking.bkg_vehicle_type_id=30 AND bkg_status=2,1,0)) as unassigned_sedan
                    , SUM(IF(booking.bkg_vehicle_type_id=29 AND bkg_status=2,1,0)) as unassigned_suv
                    , SUM(IF(booking.bkg_vehicle_type_id=30 AND bkg_status<>5,1,0)) as unassigned_cab_sedan
                    , SUM(IF(booking.bkg_vehicle_type_id=29 AND bkg_status<>5,1,0)) as unassigned_cab_suv, agt.vnd_id
                    FROM `booking`
					JOIN booking_cab bcb ON bcb.bcb_id = booking.bkg_bcb_id AND bcb_active = 1
                    LEFT JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
                    LEFT JOIN agents agent ON agent.agt_id = booking.bkg_agent_id
                    WHERE " . $statusCon . $venCondition . $toZoneCondition . " AND date(bkg_pickup_date) BETWEEN '2016-12-11' AND '2016-12-13' AND (
                    FIND_IN_SET(1,bkg_tags) OR bkg_from_city_id IN(SELECT zct_cty_id FROM zone_cities WHERE zct_zon_id=420)  OR bkg_to_city_id IN(SELECT zct_cty_id FROM zone_cities WHERE zct_zon_id=420)
                    ) GROUP BY d, q";
		$recordset	 = DBUtil::queryAll($qry);
		return $recordset;
	}

	/**
	 * @deprecated since version 27-05-2020
	 * @author soumyajit
	 */
	public function getcustCompleted($vendorId, $status, $page_no = 0)
	{
		$offset		 = $page_no * 20;
		$qry		 = "	SELECT	DISTINCT(bkg.bkg_id), bkg.bkg_booking_id, bcb.bcb_vendor_amount as vendor_amount,
					bkg.bkg_modified_on, bkg.bkg_pickup_address, bkg.bkg_drop_address, bkg.bkg_trip_distance,
					bkguser.bkg_user_fname as bkg_user_name, vht.vht_model as bkg_cab_assigned, agt.vnd_name as bkg_vendor_name,
					bkg.bkg_status, bkg.bkg_no_person, bkg.bkg_user_lname, bkg.bkg_pickup_date,
					bkg.bkg_country_code, drv.drv_phone as bkg_driver_number, drv.drv_name as bkg_driver_name,
					vhc.vhc_number as bkg_cab_number, bkg.bkg_trip_duration, agt.vnd_id as bkg_vendor_id, bkg.bkg_contact_no,
					bkg.bkg_alt_contact_no, bkg.bkg_user_email, bkg.bkg_total_amount, vht1.vht_model as bkg_cab_type,
					bkg.bkg_booking_type, bkg.bkg_instruction_to_driver_vendor, bkg.bkg_advance_amount,
					bkg.bkg_due_amount, rtg.rtg_vendor_customer, rtg.rtg_vendor_csr, rtg.rtg_vendor_review,
					bkg.bkg_is_toll_tax_included, bkg.bkg_is_state_tax_included, bkg_reconfirm_flag,
					v1.vct_label AS cab_model,
					vct.vct_label AS cab_model_assigned,
					IF(FIND_IN_SET(1, bkg.bkg_tags) OR bkg.bkg_from_city_id IN (SELECT GROUP_CONCAT(zct_cty_id) from zone_cities where zct_zon_id = 420 and zct_active = 1) OR bkg.bkg_to_city_id IN (SELECT GROUP_CONCAT(zct_cty_id) from zone_cities where zct_zon_id = 420 and zct_active = 1), 0, 1) as show_total_amount
                FROM `booking_cab` bcb
                INNER JOIN booking bkg ON bcb.bcb_id = bkg.bkg_bcb_id
				INNER JOIN booking_user bkguser ON bkguser.bui_bkg_id=bkg.bkg_id
                JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
				LEFT JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg.bkg_vehicle_type_id //Added this line
				LEFT JOIN vehicle_category v1 ON scv.scv_vct_id = v1.vct_id
                LEFT JOIN `vehicles` vhc ON vhc.vhc_id = bcb.bcb_cab_id
				LEFT JOIN vcv_cat_vhc_type vcvt ON vcvt.vcv_vht_id = vhc.vhc_type_id
				LEFT JOIN vehicle_category vct ON vct.vct_id = vcvt.vcv_vct_id
                LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id
                LEFT JOIN `ratings` rtg ON bkg.bkg_id = rtg.rtg_booking_id
                WHERE bcb.bcb_vendor_id = $vendorId and bcb.bcb_active = 1 and bkg.bkg_status IN ($status) and bkg.bkg_active = 1 GROUP BY bkg.bkg_id ORDER BY bkg_pickup_date desc LIMIT 20 OFFSET $offset";
		$recordset	 = DBUtil::queryAll($qry);
		foreach ($recordset as $key => $val)
		{
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_id')
				{
					$recordset[$key]['bkg_route_name'] = BookingRoute::model()->getRouteName($v);
				}
			}
		}
		return $recordset;
	}

	/**
	 * @deprecated since version 10-10-2019
	 * @author ramala
	 */
	public function getcustCompleted1($vendorId, $status, $page_no = 0)
	{
		$offset		 = $page_no * 20;
		$qry		 = "SELECT DISTINCT(bkg.bkg_id), bkg.bkg_booking_id, bkg.bkg_vendor_amount, bkg.bkg_modified_on, bkg.bkg_pickup_address, bkg.bkg_drop_address, bkg.bkg_trip_distance, bkguser.bkg_user_name, vht.vht_model as bkg_cab_assigned, agt.vnd_name as bkg_vendor_name, bkg.bkg_status, bkg.bkg_no_person, bkg.bkg_user_lname, bkg.bkg_pickup_date, bkg.bkg_country_code, drv.drv_phone as bkg_driver_number, drv.drv_name as bkg_driver_name, vhc.vhc_number as bkg_cab_number, bkg.bkg_trip_duration, agt.vnd_id as bkg_vendor_id, bkg.bkg_contact_no, bkg.bkg_alt_contact_no, bkg.bkg_user_email, bkg.bkg_total_amount, vht1.vht_model as bkg_cab_type, bkg.bkg_booking_type, bkg.bkg_instruction_to_driver_vendor, bkg.bkg_advance_amount, bkg.bkg_due_amount, rtg.rtg_vendor_customer, rtg.rtg_vendor_csr, rtg.rtg_vendor_review, bkg.bkg_is_toll_tax_included, bkg.bkg_is_state_tax_included, bkg_reconfirm_flag, concat(CASE vht1.vht_car_type WHEN 1 then 'COMPACT' WHEN 2 THEN 'SUV' When 3 then 'SEDAN' When 4 then 'Tempo Traveller' ELSE '' END) cab_model, concat(CASE vht.vht_car_type WHEN 1 then 'COMPACT' WHEN 2 THEN 'SUV' When 3 then 'SEDAN' When 4 then 'Tempo Traveller' ELSE '' END) cab_model_assigned, IF(FIND_IN_SET(1, bkg.bkg_tags) OR bkg.bkg_from_city_id IN (SELECT GROUP_CONCAT(zct_cty_id) from zone_cities where zct_zon_id = 420 and zct_active = 1) OR bkg.bkg_to_city_id IN (SELECT GROUP_CONCAT(zct_cty_id) from zone_cities where zct_zon_id = 420 and zct_active = 1), 0, 1) as show_total_amount
                FROM `booking` bkg
				INNER JOIN booking_user bkguser ON bkguser.bui_bkg_id=bkg.bkg_id
                JOIN booking_cab bcb ON bcb.bcb_id = bkg.bkg_bcb_id
                JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
                LEFT JOIN `vehicles` vhc ON vhc.vhc_id = bcb.bcb_cab_id
                LEFT JOIN `vehicle_types` vht ON vht.vht_id = vhc.vhc_type_id
                LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id
                JOIN `vehicle_types` vht1 ON bkg.bkg_vehicle_type_id = vht1.vht_id
                LEFT JOIN `ratings` rtg ON bkg.bkg_id = rtg.rtg_booking_id
                WHERE bcb.bcb_vendor_id = $vendorId and bcb.bcb_active = 1 and bkg.bkg_status IN ($status) and bkg.bkg_active = 1 GROUP BY bkg.bkg_id ORDER BY bkg_pickup_date desc LIMIT 20 OFFSET $offset";
		$recordset	 = DBUtil::queryAll($qry);
		foreach ($recordset as $key => $val)
		{
			foreach ($val as $k => $v)
			{
				if ($k == 'bkg_id')
				{
					$recordset[$key]['bkg_route_name'] = BookingRoute::model()->getRouteName($v);
				}
			}
		}
		return $recordset;
	}

	public function getcustDetailsCount($vendor, $status)
	{
		$qry		 = "SELECT COUNT(*) as count
                FROM `booking_cab` bcb
                 JOIN booking bkg ON bcb.bcb_id = bkg.bkg_bcb_id
                 JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
                WHERE bcb.bcb_vendor_id = $vendor and bcb.bcb_active = 1 and bkg.bkg_status IN ($status) and bkg.bkg_active = 1";
		$recordset	 = DBUtil::queryRow($qry);
		return $recordset;
	}

	public function getcustDetailsCount1($vendor, $status)
	{
		$qry		 = "SELECT COUNT(*) as count
                FROM `booking` bkg
                 JOIN booking_cab bcb ON bcb.bcb_id = bkg.bkg_bcb_id
                 JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
                WHERE bcb.bcb_vendor_id = $vendor and bcb.bcb_active = 1 and bkg.bkg_status IN ($status) and bkg.bkg_active = 1";
		$recordset	 = DBUtil::queryRow($qry);
		return $recordset;
	}

	public function getDiscount($model, $pcode)
	{
//$model			 = $this->findbyPk($bkgid);
		$userid			 = (UserInfo::getInstance()->getUserId() > 0) ? UserInfo::getInstance()->getUserId() : '';
		$discount		 = Promotions::model()->getPromoDiscount($pcode, $userid, $model->bkgInvoice->bkg_base_amount, $model->bkg_pickup_date, $model->bkgTrail->bkg_platform, $model->bkg_from_city_id, $model->bkg_to_city_id);
		$discountAmount	 = ($discount > 0) ? $discount : 0;
		return $discountAmount;
	}

	/**
	 * This function is used for fetching the invoice booking details
	 * @param [int] $bkgID
	 * @return [array]
	 */
	public function getInvoiceByBooking($bkgID)
	{
		$sql		 = "SELECT	c1.cty_name as tocity, c2.cty_name as fromcity, bkg_status,
        	concat(group_concat(c1.cty_name SEPARATOR ' - '),' - ',c2.cty_name) route,bcb.bcb_cab_number,
					vct_label as make, vct_desc as model, vct_id as type,bkg_pickup_address,
            agt.agt_fname as agt_fn, agt.agt_lname as agt_ln, agt.agt_address as agt_address, agt.agt_gstin as agt_gstin,
            agt.agt_phone as agt_contct, agt.agt_phone_country_code as agt_ph_pref,
			agt.agt_email as agt_email, agt.agt_company as agt_cmpny,agt.agt_pan_number,
            bkg_booking_id, bkg_id,bkgusr.bkg_user_fname, bkgusr.bkg_user_lname,
			bkgusr.bkg_alt_country_code,agt_use_invoice_logo,agt_invoice_logo_path,
            bkgusr.bkg_contact_no,bkginv.bkg_total_amount, bkg_pickup_date, bkg_booking_type, bkg_vehicle_type_id, bkg_agent_id,
            bkg_return_date, bkginv.bkg_base_amount, bkginv.bkg_refund_amount, bkginv.bkg_cancel_charge, bkginv.bkg_cancel_gst, bkg_status,bkginv.bkg_cancel_refund,
			bkginv.bkg_service_tax, bkginv.bkg_advance_amount, bkginv.bkg_service_tax_rate,bkginv.bkg_corporate_credit,
            bkginv.bkg_base_amount, bkginv.bkg_due_amount,bkgusr.bkg_user_email,bkginv.bkg_credits_used,
			bkginv.bkg_additional_charge, bkginv.bkg_driver_allowance_amount,
			bkginv.bkg_night_pickup_included,bkginv.bkg_night_drop_included,
            bkginv.bkg_convenience_charge, bkginv.bkg_additional_charge_remark, bkginv.bkg_discount_amount, bkginv.bkg_extra_discount_amount,  bkginv.bkg_toll_tax,
            bkginv.bkg_state_tax,bkginv.bkg_airport_entry_fee, bkg_create_date, bkginv.bkg_igst, bkginv.bkg_sgst, bkginv.bkg_cgst,
			bkginv.bkg_vendor_collected, bkg_agent_ref_code,
            bkginv.bkg_rate_per_km_extra, bkginv.bkg_extra_km, bkginv.bkg_extra_km_charge,bkg_chargeable_distance,bkg_trip_distance,
			bkginv.bkg_parking_charge, bkginv.bkg_extra_toll_tax, bkginv.bkg_extra_state_tax, bkginv.bkg_addon_charges, bkginv.bkg_addon_details, booking_trail.btr_cancel_date,
            bkgusr.bkg_bill_address,bkgusr.bkg_bill_company,bkgusr.bkg_bill_gst,bkgusr.bkg_bill_fullname
			FROM booking
			LEFT JOIN booking_user bkgusr ON bkg_id = bkgusr.bui_bkg_id
			INNER JOIN booking_invoice bkginv ON bkg_id = bkginv.biv_bkg_id
			LEFT JOIN booking_cab bcb ON bkg_bcb_id = bcb.bcb_id
			LEFT JOIN booking_trail ON booking_trail.btr_bkg_id=booking.bkg_id
			LEFT JOIN booking_route brt ON brt.brt_bkg_id = bkg_id and brt.brt_active = 1
			LEFT JOIN cities c1 ON brt.brt_from_city_id = c1.cty_id
			LEFT JOIN cities c2 ON bkg_to_city_id = c2.cty_id
			LEFT JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg_vehicle_type_id
			INNER JOIN vehicle_category ON scv.scv_vct_id = vct_id
			INNER JOIN service_class sc ON scv.scv_scc_id = sc.scc_id
			LEFT JOIN agents agt ON bkg_agent_id = agt.agt_id
			WHERE bkg_id = :bookingId
		";
		$arrResponse = DBUtil::queryRow($sql, DBUtil::SDB(), ['bookingId' => $bkgID]);

		return $arrResponse;
	}

	public function bookingReportCountNew($fromDate, $toDate, $from = '', $to = '', $vendor = '', $platform = '')
	{
		$where = "";
		if ($from != '')
		{
			$where1 = " AND bkg_from_city_id = '$from'";
		}
		if ($to != '')
		{
			$where2 = " AND bkg_to_city_id = '$to'";
		}
		if ($vendor != '')
		{
			$where3 = " AND bcb_vendor_id = '$vendor'";
		}
		if ($platform != '')
		{
			$where4 = " AND booking_trail.bkg_platform = '$platform'";
		}
		if ($this->bkg_agent_id != '')
		{
			$where5 = " AND bkg_agent_id=$this->bkg_agent_id";
		}
		$where = $where1 . $where2 . $where3 . $where4 . $where5;

		$sql = "SELECT bkg_id, count(*) as cntTotal,sum(booking_invoice.bkg_total_amount) as totAmount
				FROM `booking` bkg
				JOIN booking_cab bcb ON bcb.bcb_id=bkg.bkg_bcb_id
				JOIN booking_trail ON booking_trail.btr_bkg_id=bkg.bkg_id
				JOIN booking_invoice ON booking_invoice.biv_bkg_id=bkg.bkg_id
				LEFT JOIN vendors agt ON agt.vnd_id=bcb.bcb_vendor_id
				WHERE bkg.bkg_active=1 AND bkg.bkg_create_date BETWEEN '$fromDate 00:00:00' AND '$toDate 23:59:59' AND bkg_status IN(2,3,5,6,7) $where
                                ";
		$sql = DBUtil::queryAll($sql, DBUtil::SDB());
		return $sql;
	}

	public function fetchLogDetailsByRefId($refId, $eventId)
	{
		if ($eventId == '13')
		{
			$sql = "SELECT c.`slg_type`,c.`number`,c.`message`,c.`booking_id`,c.`recipient`,c.`delivery_response` "
					. "FROM `booking_log` a INNER JOIN `sms_log` c ON c.id=a.blg_ref_id AND a.blg_event_id='" . $eventId . "' WHERE a.blg_ref_id='" . $refId . "'";
		}
		elseif ($eventId == '14')
		{
			$sql = "SELECT b.`elg_type`,b.`elg_address`,b.`elg_subject`,b.`elg_content` "
					. "FROM `booking_log` a INNER JOIN `email_log` b ON b.elg_id=a.blg_ref_id AND a.blg_event_id='" . $eventId . "' WHERE a.blg_ref_id='" . $refId . "'";
		}
		elseif ($eventId == '54' || $eventId == '55' || $eventId == '56' || $eventId == '57' || $eventId == '58' || $eventId == '268')
		{
			if ($eventId == '54' || $eventId == '56' || $eventId == '57' || $eventId == '58' || $eventId == '55' || $eventId == '268')
			{
				$sql = "SELECT blg.*,
							IF(apg.apg_trans_ref_id IS NULL,act.act_ref_id,apg.apg_trans_ref_id) trans_booking_id,
							IF(adt.adt_ledger_id = 13,adt1.adt_ledger_id,adt.adt_ledger_id) adt_ledger_id,
							apg.apg_ptp_id trans_ptp_id,
							IF(apg.apg_code IS NULL,'NA',apg.apg_code) trans_code,
							IF(apg.apg_remarks IS NULL,act.act_remarks,apg.apg_remarks) trans_response_message,
							IF(apg.apg_response_details IS NULL,act.act_remarks,apg.apg_response_details) trans_response_details,
							IF(apg.apg_start_datetime IS NULL,act.act_date,apg.apg_start_datetime) trans_complete_datetime,
							0 trans_type,
							IF(apg.apg_mode IS NULL,2,apg.apg_mode) trans_mode,
							IF(apg.apg_remarks IS NULL,act.act_remarks,apg.apg_remarks) trans_remarks,
							IF(apg.apg_amount IS NULL,act.act_amount,apg.apg_amount) trans_amount,
							IF(apg.apg_status IS NULL,act.act_status,apg.apg_status) trans_status,
							IF(apg.apg_active IS NULL,act.act_active,apg.apg_active) trans_active,
							bkg.bkg_booking_id,booking_user.bkg_user_fname,
							booking_user.bkg_user_lname
                     FROM   booking_log blg
                            LEFT JOIN payment_gateway apg ON apg.apg_id = blg.blg_ref_id
                            LEFT JOIN booking bkg ON bkg.bkg_id = apg.apg_trans_ref_id
							LEFT JOIN booking_user ON bkg.bkg_id = booking_user.bui_bkg_id
                            LEFT JOIN account_transactions act ON act.act_id = blg.blg_ref_id
                            LEFT JOIN account_trans_details adt ON adt.adt_trans_id = act.act_id
							LEFT JOIN account_trans_details adt1 ON adt1.adt_trans_id = act.act_id AND adt1.adt_ledger_id <> adt.adt_ledger_id
                            LEFT JOIN account_ledger ON account_ledger.ledgerId = adt.adt_ledger_id
                     WHERE  blg.blg_ref_id = $refId AND blg.blg_event_id = $eventId GROUP BY blg.blg_ref_id";
			}
		}
		$count			 = DBUtil::command("SELECT COUNT(*) FROM ($sql) a")->queryScalar();
		$dataprovider	 = new CSqlDataProvider($sql, [
			'totalItemCount' => $count,
			'sort'			 => ['attributes'	 => ['blg_booking_id', 'blg_desc', 'blg_ref_id'],
				'defaultOrder'	 => 'blg_ref_id ASC'],
		]);
		return $dataprovider;
	}

	public function fetchVehicles()
	{
		$model		 = Booking::model()->findByPk($this->bkg_id);
		$cabmodel	 = $model->getBookingCabModel();
		$pickup_date = $model->bkg_pickup_date;
		$fromCity	 = $model->bkg_from_city_id;
		$toCity		 = $model->bkg_to_city_id;
		$ids		 = implode(',', $this->ids);

		$sql			 = "SELECT vhc_id, vehicles.vhc_number, vendors.vnd_name, bkgLastPickup.bkg_id as last_bkg_id, bkgLastPickup.bkg_booking_id as last_booking,
        bkgLastPickup.bkg_pickup_date as last_pickup, lastCityFrom.cty_name as last_city_from, lastCityTo.cty_name as last_city_to,
        bkgLastPickup.bkg_driver_id as last_driver_id, bkgNextPickup.bkg_id as next_bkg_id, bkgNextPickup.bkg_booking_id as next_booking,
        bkgNextPickup.bkg_pickup_date as next_pickup, NextCityFrom.cty_name as next_city_from,
        NextCityTo.cty_name as next_city_to, bkgNextPickup.bkg_driver_id as next_driver_id,
				cab_availabilities.cav_id, cab_availabilities.cav_status, cab_availabilities.cav_date_time
				FROM vehicles
				LEFT JOIN cab_availabilities ON vehicles.vhc_id = cab_availabilities.cav_cab_id
				AND cab_availabilities.cav_from_city=$fromCity
				AND cab_availabilities.cav_to_cities=$toCity
				AND cav_status=1
				AND cav_date_time BETWEEN DATE_SUB('$pickup_date', INTERVAL 240 MINUTE) AND '$pickup_date'
                INNER JOIN vendor_vehicle on vvhc_vhc_id = vhc_id
				LEFT JOIN vendors ON vendor_vehicle.vvhc_vnd_id = vendors.vnd_id
	LEFT JOIN (
             SELECT brb1.*, bcb.bcb_cab_id,bcb.bcb_driver_id as bkg_driver_id, bcb.bcb_vendor_id, brFrom.brt_pickup_datetime as bkg_pickup_date,
                brFrom.brt_from_city_id as bkg_from_city_id, brTo.brt_to_city_id as bkg_to_city_id,
                (TIMESTAMPDIFF(MINUTE, brFrom.brt_pickup_datetime, brTo.brt_pickup_datetime) + brTo.brt_trip_duration) as bkg_trip_duration
              FROM (SELECT  b1.bkg_id,b1.bkg_booking_id, b1.bkg_status, brt_bcb_id, MIN(brt_id) as minBrt, MAX(brt_id) as maxBrt
				              FROM booking b1
                      INNER JOIN booking_route brt1 ON brt1.brt_bkg_id = b1.bkg_id AND brt1.brt_active = 1
                    WHERE bkg_active=1 AND bkg_status in (3,5,6,7) GROUP BY bkg_id, brt_bcb_id
                   ) brb1
              INNER JOIN booking_route brFrom ON brb1.minBrt=brFrom.brt_id
              INNER JOIN booking_route brTo ON brb1.maxBrt=brTo.brt_id
              LEFT JOIN booking_cab bcb ON brb1.brt_bcb_id=bcb.bcb_id
				  WHERE  bcb.bcb_cab_id IN ({$ids}) AND brFrom.brt_pickup_datetime<='$pickup_date' and bkg_status IN (3,4,5,6,7)
          ORDER BY bkg_pickup_date DESC Limit 0,1
            ) bkgLastPickup ON vehicles.vhc_id = bkgLastPickup.bcb_cab_id
  LEFT JOIN (SELECT brb1.*, bcb.bcb_cab_id,bcb.bcb_driver_id as bkg_driver_id, bcb.bcb_vendor_id, brFrom.brt_pickup_datetime as bkg_pickup_date,
                brFrom.brt_from_city_id as bkg_from_city_id, brTo.brt_to_city_id as bkg_to_city_id,
                (TIMESTAMPDIFF(MINUTE, brFrom.brt_pickup_datetime, brTo.brt_pickup_datetime) + brTo.brt_trip_duration) as bkg_trip_duration
              FROM (SELECT  b1.bkg_id,b1.bkg_booking_id, b1.bkg_status, brt_bcb_id, MIN(brt_id) as minBrt, MAX(brt_id) as maxBrt
				              FROM booking b1
                      INNER JOIN booking_route brt1 ON brt1.brt_bkg_id = b1.bkg_id AND brt1.brt_active = 1
                    WHERE bkg_active=1 AND bkg_status in (3,5,6,7) GROUP BY bkg_id, brt_bcb_id
                   ) brb1
              INNER JOIN booking_route brFrom ON brb1.minBrt=brFrom.brt_id
              INNER JOIN booking_route brTo ON brb1.maxBrt=brTo.brt_id
              LEFT JOIN booking_cab bcb ON brb1.brt_bcb_id=bcb.bcb_id
				  WHERE  bcb.bcb_cab_id IN ({$ids}) AND brFrom.brt_pickup_datetime>='$pickup_date' and bkg_status IN (3,4,5,6,7)
          ORDER BY bkg_pickup_date DESC Limit 0,1
            ) bkgNextPickup ON vehicles.vhc_id = bkgNextPickup.bcb_cab_id
  LEFT JOIN cities as lastCityFrom ON lastCityFrom.cty_id=bkgLastPickup.bkg_from_city_id
	LEFT JOIN cities as lastCityTo ON lastCityTo.cty_id=bkgLastPickup.bkg_to_city_id
	LEFT JOIN cities as NextCityFrom ON NextCityFrom.cty_id=bkgNextPickup.bkg_from_city_id
	LEFT JOIN cities as NextCityTo ON NextCityTo.cty_id=bkgNextPickup.bkg_to_city_id
				WHERE vhc_id IN ({$ids}) ";
//echo $sql;exit;
		$count			 = Yii::app()->db1->createCommand("SELECT COUNT(*) FROM ($sql) a")->queryScalar();
// echo $sql; exit;
		$dataprovider	 = new CSqlDataProvider($sql, [
			'totalItemCount' => $count,
			'sort'			 => ['attributes'	 => ['last_pickup', 'next_pickup', 'cav_date_time'],
				'defaultOrder'	 => 'last_pickup DESC, next_pickup ASC'], 'pagination'	 => ['pageSize' => 50],
		]);
		return $dataprovider;
	}

	public function getNonUserBookings()
	{
		$criteria		 = new CDbCriteria();
		$criteria->addCondition("bkg_status IN (2,3,5,6,7,9) AND (bkg_user_id IS NULL OR bkg_user_id=0)");
		$criteria->limit = 100;
		$models			 = Booking::model()->findAll($criteria);
		return $models;
	}

	public function getRemarksBookings()
	{
		$criteria		 = new CDbCriteria();
		$criteria->addCondition("bkg_remark!='' AND (bkg_remark_check='0' OR bkg_remark_check IS NULL) ORDER BY `bkg_create_date` DESC");
		$criteria->limit = 500;
		$models			 = Booking::model()->findAll($criteria);
		return $models;
	}

	public function updateAdvance($amount, $date, $ptpId, $userInfo = null, $apgModel, $remarks = '', $skipBkgUpdate = false, $isAdmin = '')
	{
		$success		 = true;
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		/* @var $model Booking */
		/* @var $apgModel PaymentGateway */
		$ptpString		 = PaymentGateway::getPaymentTypeName($ptpId);
		$model			 = $this;
		$modelInvouce	 = $this->bkgInvoice;
		$bkgId			 = $this->bkg_id;
		$transaction	 = DBUtil::beginTransaction();
		$preAdvance		 = ($this->bkgInvoice->bkg_advance_amount == '') ? 0 : $this->bkgInvoice->bkg_advance_amount;
		try
		{
			if (!$skipBkgUpdate)
			{
				Logger::writeToConsole("updateAdvance1 start amount: {$amount}");
				$model->updateAdvance1($amount, $userInfo->userType, $ptpId);
				Logger::writeToConsole("updateAdvance1 out");
			}
			if ($model->hasErrors() || $modelInvouce->hasErrors())
			{
				throw new Exception("Booking advance update failed");
			}
			if ($this->bkgInvoice->bkg_is_wallet_selected == 1 && $this->bkgUserInfo->bkg_user_id > 0 && $this->bkgInvoice->bkg_wallet_used > 0)
			{
				$amount = $this->bkgInvoice->bkg_wallet_used;
				UserWallet::useWallet($this->bkgUserInfo->bkg_user_id, $this->bkg_id, true, true, $this->bkgInvoice->bkg_wallet_used);
			}
			if ($ptpId != PaymentType::TYPE_WALLET)
			{
				if ($apgModel == null)
				{
					$apgModel			 = PaymentGateway::model();
					$apgModel->apg_id	 = $model->bkg_agent_id;
					$blgref				 = null;
				}
				else
				{
					$blgref = $model->bkg_agent_id;
				}
			}
			if ($ptpId == PaymentType::TYPE_AGENT_CORP_CREDIT && $model->bkg_agent_id > 0)
			{
				$actmodel = AccountTransactions::usePartnerWallet($date, $amount, $bkgId, $model->bkg_agent_id, $remarks, $userInfo, '', $isAdmin);
				Logger::writeToConsole("usePartnerWallet end {$actmodel}");
				if (!$actmodel)
				{
					throw new Exception("Booking failed as partner wallet balance exceeded.");
				}
			}
			else
			{
				$refId = $apgModel->apg_id;
				if ($ptpId != PaymentType::TYPE_WALLET)
				{
					AccountTransactions::advanceReceived($date, $ptpId, $refId, $amount, Accounting::AT_BOOKING, $bkgId, $remarks);
				}

				$params					 = [];
				$params['blg_ref_id']	 = $apgModel->apg_id;
				if ($apgModel->apg_id != '')
				{
					$eventId = BookingLog::PAYMENT_COMPLETED;
				}
				else
				{
					$eventId = BookingLog::DEDUCTED_CUSTOMER_WALLET;
				}
				$resmsg		 = ($apgModel->apg_response_details == '') ? '' : '; Response : ' . "Transaction Successful";
				$paymentType = $remarks . " - Online payment completed";
				$transDet	 = $apgModel->apg_code;
				if ($apgModel->apg_code == '')
				{
					$paymentType = $remarks . " - Payment Added";
					$transDet	 = $model->bkg_booking_id;
				}
				$desc = " $paymentType ({$ptpString} - {$transDet})$resmsg";
				BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, '', $params);
			}
//			skiponlinepay:
// Masking number enabled

			if (Config::get('masking.number.enabled') == 1)
			{
				/* @var $maskDriverNumber BookingPref */
				$maskDriverNumber						 = BookingPref::maskDriverNumber($model);
				$maskCustomerNumber						 = BookingPref::maskCustomerNumber($model);
				$model->bkgPref->bpr_mask_customer_no	 = ($maskCustomerNumber) ? 1 : 0;
				$model->bkgPref->bpr_mask_driver_no		 = ($maskDriverNumber) ? 1 : 0;
				$model->bkgPref->save();
			}
			DBUtil::commitTransaction($transaction);
			Logger::create("Booking - > updateAdvance :: Success ");
		}
		catch (Exception $e)
		{
			DBUtil::rollbackTransaction($transaction);
			$desc	 = $remarks . " - Advance Update Failed.({$ptpString} - {$apgModel->apg_code} - {$e->getMessage()})";
			BookingLog::model()->createLog($bkgId, $desc, $userInfo, BookingLog::REMARKS_ADDED);
			$model->addError("bkg_id", $e->getMessage());
			ReturnSet::setException($e);
			$success = false;
		}
		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
		return $success;
	}

	/* ----Service Tier Phase 2 Checked------- */

	public function updateAdvance1($amount, $logType, $ptpId)
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		try
		{
			$this->bkgInvoice->scenario	 = 'updateadvance';
			$this->bkgUserInfo			 = BookingUser::model()->getByBookingId($this->bkg_id);
			$errors						 = "";
			$vndDiscount				 = false;
			$isAdvPromo					 = false;
			$preAdvance					 = ($this->bkgInvoice->bkg_advance_amount == '') ? 0 : $this->bkgInvoice->bkg_advance_amount;
			$isCashBackTime				 = $this->getCashbackTimeValidation();
			Logger::writeToConsole("updateAdvance1 amount : {$amount}, ptpId: {$ptpId}");
			if ($this->bkgInvoice->bkg_is_wallet_selected == 1 && $this->bkgUserInfo->bkg_user_id > 0 && $this->bkgInvoice->bkg_wallet_used > 0)
			{
				$walletBalance	 = UserWallet::getBalance($this->bkgUserInfo->bkg_user_id) | 0;
				$walletUsed		 = ($this->bkgInvoice->bkg_wallet_used > $walletBalance) ? $walletBalance : $this->bkgInvoice->bkg_wallet_used;
				if ($this->bkgInvoice->bkg_due_amount < $this->bkgInvoice->bkg_wallet_used + $amount)
				{
					$inv				 = clone $this->bkgInvoice;
					$inv->calculateConvenienceFee(0);
					$inv->calculateTotal();
					$reqWalletBalance	 = max([($inv->bkg_due_amount - $amount), 0]);

					$walletUsed = min([$reqWalletBalance, $walletUsed]);
				}
				$this->bkgInvoice->bkg_wallet_used	 = $walletUsed;
				$amount								 += $walletUsed;
			}
			$this->bkgInvoice->bkg_advance_amount += $amount;
			Logger::writeToConsole("bkgInvoice bkg_advance_amount : {$amount}");
			if ($this->bkgPref->bkg_is_fbg_type == 1)
			{
				$this->bkgInvoice->bkg_due_amount = round($this->bkgInvoice->bkg_total_amount - $amount);
			}

			$pickDiff = $this->getPickupDiffinMinutes();

			if ($this->bkgPref->bkg_is_fbg_type != 1)
			{
				if ($pickDiff >= 60)
				{
					$this->bkgInvoice->calculateConvenienceFee(0);
				}
				$this->bkgInvoice->calculateTotal();
				$this->bkgInvoice->calculateVendorAmount();
			}

			if ($this->save() && $this->bkgInvoice->save())
			{
				Logger::writeToConsole("updateAdvance1 In bkgInvoice save amount: {$amount}");

				//if ($this->bkg_status == 2 && $this->bkgPref->bkg_is_fbg_type != 1)
				if ($this->bkg_status == 2 && $this->bkgPref->bkg_is_fbg_type == 0)
				{
					if ($this->setReconfirm())
					{
						$this->confirmMessages();
					}
				}

				$cabmodel	 = $this->getBookingCabModel();
				$scvVctId	 = SvcClassVhcCat::model()->getCatIdBySvcid($this->bkg_vehicle_type_id);
				if ($scvVctId == VehicleCategory::SHARED_SEDAN_ECONOMIC && $this->bkg_flexxi_type == 2 && $this->bkg_fp_id != '')
				{
					$cabmodel->bcb_active	 = 0;
					$cabmodel->save();
					$promoterBooking		 = Booking::model()->findByPk($this->bkg_fp_id);

					$this->refresh();
					$this->bkg_bcb_id	 = $promoterBooking->bkg_bcb_id;
					$this->bkg_status	 = $promoterBooking->bkg_status;
					$this->save();

					$fareDetails												 = $promoterBooking->bkgInvoice->calculatePromoterFare($this->bkg_id);
					$promoterBooking->bkgInvoice->bkg_base_amount				 = $fareDetails->baseAmount;
					$promoterBooking->bkgInvoice->bkg_state_tax					 = $fareDetails->stateTax;
					$promoterBooking->bkgInvoice->bkg_toll_tax					 = $fareDetails->tollTaxAmount;
					$promoterBooking->bkgInvoice->bkg_driver_allowance_amount	 = $fareDetails->driverAllowance;
					$promoterBooking->bkgInvoice->bkg_service_tax				 = $fareDetails->gst;
//$promoterBooking->populateAmount();
					$promoterBooking->bkgInvoice->populateAmount(true, false, true, false, $promoterBooking->bkg_agent_id);
					$promoterBooking->bkgInvoice->save();

					$routeModels = $this->bookingRoutes;
					foreach ($routeModels as $routeModel)
					{
						$routeModel->scenario	 = 'unassignvendor';
						$routeModel->brt_bcb_id	 = $this->bkg_bcb_id;
						$routeModel->save();
					}
					$cabmodel = $this->getBookingCabModel();
					if ($cabmodel->bcb_vendor_amount > 0)
					{
						$profit						 = Booking::model()->getFlexxiProfitAmount($cabmodel->bcb_id);
						$cabmodel->bcb_vendor_amount = $promoterBooking->bkgInvoice->bkg_vendor_amount + $profit;
						$cabmodel->save();
					}
				}
				$cabmodel = $this->getBookingCabModel();
//reduce vendor amount
				if ($vndDiscount && $preAdvance == 0 && $cabmodel != '' && $cabmodel->bcb_trip_type != 1 && ($this->bkgInvoice->bkg_credits_used == 0 || $this->bkgInvoice->bkg_credits_used == ''))
				{
					if ($this->bkgInvoice->bkg_vendor_amount != '' && $this->bkg_status == 2)
					{
						$this->bkgInvoice->bkg_vendor_amount = round($this->bkgInvoice->bkg_vendor_amount * 0.97);
						$this->bkgInvoice->calculateVendorAmount();

						if (!$this->bkgInvoice->save())
						{
							$errors = json_encode($this->bkgInvoice->getErrors());
							throw new Exception("Booking invoice model update failed" . $errors);
						}
						$cabmodel->bcb_vendor_amount = $this->bkgInvoice->bkg_vendor_amount;
						$cabmodel->bcb_bkg_id1		 = $this->bkg_id;
						if (!$cabmodel->save())
						{
							$errors = json_encode($cabmodel->getErrors());
							throw new Exception("cab model update failed" . $errors);
						}
					}
				}

				if (in_array($ptpId, [13]) && $this->bkg_agent_id > 0)
				{
					$preCredit	 = $this->bkgInvoice->bkg_corporate_credit | 0;
					$totAmount	 = $preCredit + $amount;
					$this->setScenario('agentCreditUpdate');
					if ($this->bkg_agent_id == 18190 || $this->bkg_agent_id == 450)
					{
						if ($this->bkgPref->bkg_is_corporate == 1)
						{
							$this->bkgInvoice->bkg_corporate_remunerator = 2;
						}
						else
						{
							$this->bkgInvoice->bkg_corporate_remunerator = 1;
						}
					}
					else
					{
						if ($totAmount < $this->bkgInvoice->bkg_total_amount)
						{
							$this->bkgInvoice->bkg_corporate_remunerator = 1;
						}
						else
						{
							$this->bkgInvoice->bkg_corporate_remunerator = 2;
						}
					}
					$this->bkgInvoice->bkg_corporate_credit = $totAmount;
					if (!$this->bkgInvoice->save())
					{
						$errors = json_encode($this->bkgInvoice->getErrors());
						throw new Exception("Booking invoice model update failed" . $errors);
					}
				}


//	    if (PaymentType::isOnline($ptpId) && $this->bkgUserInfo->bkg_user_id > 0)
//	    {
//		$smsWrapper = new smsWrapper();
//		$smsWrapper->paymentSuccessMsgCustomer($this->bkg_id, $amount);
//	    }

				if ($cabmodel->bcb_driver_phone != '')
				{
					$msgCom		 = new smsWrapper();
					$logType	 = BookingLog::Driver;
					//whatsapplog
					$response	 = WhatsappLog::sendTripDetailsToVendorDriver($this->bkg_id, UserInfo::TYPE_DRIVER);
					if ($response['status'] == 3)
					{
						$msgCom->advancePaymentToDriver($this->bkg_id, $logType);
					}
				}
				if ($cabmodel->bcb_vendor_id != '')
				{
					$msgCom		 = new smsWrapper();
					$logType	 = UserInfo::TYPE_VENDOR;
//				$response	 = Contact::referenceUserData($model->bkgUserInfo->bui_id, 1);
//				if ($response->getStatus())
//				{
					$firstName	 = $this->bkgUserInfo->bkg_user_fname;
					$lastName	 = $this->bkgUserInfo->bkg_user_lname;
//}					
					//whatsapplog
					$response	 = WhatsappLog::sendTripDetailsToVendorDriver($this->bkg_id, UserInfo::TYPE_VENDOR);
					if ($response['status'] == 3)
					{
						$msgCom->advancePaymentToVendor($this->bkg_id, $logType);
					}
					$payLoadData = ['tripId' => $cabmodel->bcb_id, 'EventCode' => Booking::CODE_VENDOR_ADVANCE];
					AppTokens::model()->notifyVendor($cabmodel->bcb_vendor_id, $payLoadData, 'Update from Gozo about : ' . $this->bkg_booking_id . '  Customer ' . $firstName . ' ' . $lastName . ' has paid Rs. ' . $this->bkgInvoice->bkg_advance_amount . ' advance. Balance to be collected is Rs. ' . $this->bkgInvoice->bkg_due_amount . '', 'Advance Recieved');
				}
			}
			else
			{
				Logger::writeToConsole("updateAdvance1 Booking model update failed");
				if (!$this->save())
				{
					$errors = json_encode($this->getErrors());
					throw new Exception("Booking model update failed" . $errors);
				}
				if (!$this->bkgInvoice->save())
				{
					$errors = json_encode($this->bkgInvoice->getErrors());
					throw new Exception("Booking invoice model update failed" . $errors);
				}
			}
			Logger::writeToConsole("updateAdvance1 End");
		}
		catch (Exception $ex)
		{
			Logger::exception($ex);
			Logger::trace("updateAdvance1" . $ex->getMessage());
		}
		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
		return $errors;
	}

	public function getBookingIds($param)
	{
		$arr = explode(",", $param);
		$ids = implode(',', array_filter($arr));
		if ($ids == "")
		{
			return '';
		}
		$bookingIds = DBUtil::command("SELECT GROUP_CONCAT(bkg_booking_id) as bkids FROM booking where bkg_id IN ($ids) AND bkg_active=1 GROUP BY bkg_active")->queryScalar();
		return $bookingIds;
	}

	public function findRelatedBooking($id, $showAll = false)
	{
		$model = $this->findByPk($id);

##################################################
		$bkgUserModel	 = BookingUser::model()->find('bui_bkg_id=:bkg_id', ['bkg_id' => $id]);
		$sql			 = "SELECT a.`bkg_id`,a.`bkg_booking_id`,b.`bkg_user_fname`,b.`bkg_user_lname`,a.`bkg_create_date`,a.`bkg_pickup_date`,(SELECT cty_name FROM cities WHERE cty_id = '" . $model->bkg_from_city_id . "' ) as from_city,(SELECT cty_name FROM cities WHERE cty_id = '" . $model->bkg_to_city_id . "' ) as to_city,a.`bkg_status`  FROM `booking` a INNER JOIN `booking_user` b ON a.bkg_id=b.bui_bkg_id "
				. "WHERE (a.`bkg_from_city_id`= '" . $model->bkg_from_city_id . "' AND a.`bkg_to_city_id`= '" . $model->bkg_to_city_id . "') "
				. "AND (DATE(a.bkg_create_date) = '" . date('Y-m-d', strtotime($model->bkg_create_date)) . "' OR DATE(a.bkg_pickup_date) = '" . date('Y-m-d', strtotime($model->bkg_pickup_date)) . "') "
				. "AND (b.bkg_contact_no='" . $bkgUserModel->bkg_contact_no . "' AND b.bkg_contact_no<>'') AND (b.bkg_user_email='" . $bkgUserModel->bkg_user_email . "' AND b.bkg_user_email<>'')";
		$cdb			 = DBUtil::command($sql);
		$bkgModel		 = $cdb->queryAll();

##################################################

		if ($bkgModel)
		{
			if (!$showAll)
			{
				if ($bkgModel['bkg_id'] != $id)
				{
					return $bkgModel['bkg_id'];
				}
				else
				{
					return 0;
				}
			}
			else
			{
				return $bkgModel;
			}
		}
		else
		{
			return 0;
		}
	}

	public function sendPaymentinfo()
	{
//		$response = Contact::referenceUserData($model->bkgUserInfo->bui_id, 2);
//		if ($response->getStatus())
//		{
//			$contactNo	 = $this->bkgUserInfo->bkg_contact_no;
//			$email		 = $this->bkgUserInfo->bkg_user_email;
//		}
//		  if ($contactNo != '')
//		  {
//		  $response = WhatsappLog::sendPaymentRequestForBkg($this->bkg_id);
//		  //if (!$response || $response['status'] == 3)
//		  {
//		  $msgCom = new smsWrapper();
//		  $msgCom->sendPaymentlink($this->bkg_id);
//		  }
//		  }
//		  if ($email != '')
//		  {
//		  $emailCom = new emailWrapper();
//		  $emailCom->paymentLink($this->bkg_id);
//		  }

		self::notifyPaymentRequestToCustomer($this->bkg_id);
	}

	public function getModificationMSG($diff, $user)
	{
		$msg = '';
		if (count($diff) > 0)
		{
			if ($diff['bkg_vehicle_type_id'] && $diff['cab_type'] && $diff['cab_type_id'])
			{
				$msg .= ' Cab Type: ' . $diff['cab_type'] . ',';
			}
			if ($diff['consumer_name'])
			{
				$msg .= ' Customer Name: ' . $diff['consumer_name'] . ',';
			}
			if ($diff['consumer_phone'])
			{
				$msg .= ' Customer Phone: ' . $diff['consumer_phone'] . ',';
			}
			if ($diff['bkg_user_email'])
			{
				$msg .= ' Customer Email: ' . $diff['bkg_user_email'] . ',';
			}
			if ($diff['consumer_alt_phone'])
			{
				$msg .= ' Alternate Phone: ' . $diff['consumer_alt_phone'] . ',';
			}
			if ($diff['route_name'])
			{
				$msg .= ' Route: ' . $diff['route_name'] . ',';
			}
			if ($diff['booking_type'])
			{
				$msg .= ' Booking Type: ' . $diff['booking_type'] . ',';
			}
			if ($diff['pick_date'])
			{
				$msg .= ' Pickup Date/Time: ' . $diff['pick_date'] . ',';
			}
			if ($diff['return_date'])
			{
				$msg .= ' Return Date/Time: ' . $diff['return_date'] . ',';
			}
			if ($diff['bkg_pickup_address'])
			{
				$msg .= ' Pickup Address: ' . $diff['bkg_pickup_address'] . ',';
			}
			if ($diff['bkg_drop_address'])
			{
				$msg .= ' Drop Address: ' . $diff['bkg_drop_address'] . ',';
			}
			if ($diff['bkg_additional_charge'] != '')
			{
				$msg .= ' Additional Charge: ' . $diff['bkg_additional_charge'] . ',';
			}
			if ($diff['payable_amount'] != '')
			{
				$msg .= ' Payable Amount: ' . $diff['payable_amount'] . ',';
			}
			if ($diff['bkg_base_amount'] != '')
			{
				$msg .= ' Base Amount: ' . $diff['bkg_base_amount'] . ',';
			}

			if ($diff['bkg_extra_km_charge'] != '')
			{
				$msg .= ' Extra Charge: ' . $diff['bkg_extra_km_charge'] . ',';
			}

			if ($diff['bkg_toll_tax'] != '')
			{
				$msg .= ' Toll Tax: ' . $diff['bkg_toll_tax'] . ',';
			}
			if ($diff['bkg_state_tax'] != '')
			{
				$msg .= ' State Tax: ' . $diff['bkg_state_tax'] . ',';
			}
			if ($diff['bkg_service_tax'] != '')
			{
				$msg .= ' GST: ' . $diff['bkg_service_tax'] . ',';
			}
			if ($diff['bkg_parking_charge'] != '')
			{
				$msg .= ' Parking Charge: ' . $diff['bkg_parking_charge'] . ',';
			}
			if ($diff['bkg_advance_amount'] != '')
			{
				$bkg_advance_amount	 = $diff['bkg_advance_amount'];
				$msg				 .= ' Advance Amount: ' . $bkg_advance_amount . ',';
			}
			if ($diff['bkg_due_amount'] != '')
			{
				$bkg_due_amount	 = $diff['bkg_due_amount'];
				$msg			 .= ' Amount Due: ' . $bkg_due_amount . ',';
			}
			if ($user != 'consumer')
			{
				if ($diff['bkg_instruction_to_driver_vendor'])
				{
					$msg .= ' Special Instruction: ' . $diff['bkg_instruction_to_driver_vendor'] . ',';
				}
			}
			if ($diff['bkg_airport_entry_fee'] != '')
			{
				$msg .= '  Airport entry fee: ' . $diff['bkg_airport_entry_fee'] . ',';
			}
			if ($user == 'log')
			{
				if ($diff['bkg_vendor_amount'] != '')
				{
					$msg .= ' Vendor Amount: ' . $diff['bkg_vendor_amount'] . ',';
				}
				if ($diff['bkg_total_amount'] != '')
				{
					$msg .= ' Booking Amount: ' . $diff['bkg_total_amount'] . ',';
				}
				if ($diff['bkg_gozo_amount'] != '')
				{
					$msg .= ' Gozo Amount: ' . $diff['bkg_gozo_amount'] . ',';
				}
				if ($diff['bkg_invoice'] != '')
				{
					$msg .= ' Invoice Requirement Changed,';
				}
				if ($diff['bkg_trip_distance'] != '')
				{
					$msg .= ' Kms Driven: ' . $diff['bkg_trip_distance'] . ',';
				}
				if ($diff['bkg_vendor_collected'] != '')
				{
					$msg .= ' Vendor Collected: ' . $diff['bkg_vendor_collected'] . ',';
				}
				if ($diff['additionalInfo'] != '')
				{
					$msg .= '  Additional Information: ' . $diff['additionalInfo'] . ',';
				}
			}
			$msg = rtrim($msg, ',');
		}
		return $msg;
	}

	public function updateRefund($transCode, $response, $logtype = UserInfo::TYPE_SYSTEM, $userid = 0)
	{
		$transModel	 = Transactions::model()->getByCode($transCode);
		$model		 = $this->findByPk($transModel->trans_booking_id);

		if ($transModel->trans_ptp_id == 4)
		{
			$success = $transModel->udpdateCMDResponseByCodeForEBS($response, 1);
		}
		else
		{
			$success = $transModel->udpdateResponseByCode($response, 1);
		}
		if ($success)
		{
			$params['blg_ref_id']	 = $transModel->trans_id;
			$resmsg					 = ($transModel->trans_response_message == '') ? '' : '; Response : ' . $transModel->trans_response_message;
			BookingLog::model()->createLog($transModel->trans_booking_id, "Refund Process Completed ({$transModel->getPaymentType()} - {$transModel->trans_code})$resmsg", UserInfo::getInstance(), BookingLog::REFUND_PROCESS_COMPLETED, '', $params);
			$preRefund				 = ($model->bkg_refund_amount == '') ? 0 : $model->bkg_refund_amount;
			$amount					 = $preRefund - $transModel->trans_amount;
			$errors					 = $model->addRefund($amount);
			if ($errors == "")
			{
				return true;
			}
			else
			{
				BookingLog::model()->createLog($model->bkg_id, "Refund Update Failed ($errors)", UserInfo::getInstance(), BookingLog::REMARKS_ADDED);
			}
		}

		return false;
	}

	public function refund($amount, $remarks = null, $userInfo = null)
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		$success		 = false;
		$requestAmount	 = $amount;
		$refundedAmount	 = 0;
		$transaction	 = DBUtil::beginTransaction();
		try
		{
			Logger::beginProfile("booking refund PaymentGateway. Success msg for Booking Id " . $this->bkg_id);
			$result = PaymentGateway::model()->refundByRefId($amount, $this->bkg_id, Accounting::AT_BOOKING, $userInfo);
			Logger::endProfile("booking refund PaymentGateway. Success msg for Booking Id " . $this->bkg_id);
			Logger::trace("booking refund PaymentGateway. Success msg: " . $result['success']);
			if ($result['success'])
			{
				$this->refresh();
				$this->bkgInvoice->refresh();
				$success = true;
			}
			if (!$result['success'] || $result['refunded'] != $amount)
			{
				if ($result['refunded'] != $amount && $this->bkg_agent_id > 0 && $this->bkg_agent_id != 34928)
				{
					Logger::beginProfile("booking refund msg for Booking Id " . $this->bkg_id);

					$partnerWalletBalance	 = AccountTransDetails::getPartnerBalanceForbooking($this->bkg_id);
					$partnerWalletData		 = AccountTransDetails::getPartnerWalletEntryForbooking($this->bkg_id);
					if ($partnerWalletBalance > 0 && $partnerWalletData->getRowCount() > 0)
					{

						$success = AccountTransactions::model()->refundBooking($this->bkg_pickup_date, $amount, $this->bkg_id, PaymentType::TYPE_AGENT_CORP_CREDIT, $remarks, null, $userInfo);
						Logger::endProfile("booking refund msg for Booking Id " . $this->bkg_id);
						if (!$success)
						{
							Logger::trace("booking refund not saved. Success msg: " . $success);
							throw new Exception("Transaction failed");
						}
					}
					Logger::trace("booking refund saved. Success msg: " . $success);
				}
			}
			DBUtil::commitTransaction($transaction);
		}
		catch (Exception $ex)
		{
			Logger::exception($ex);
			Logger::trace("booking refund function" . $ex->getMessage());
			DBUtil::rollbackTransaction($transaction);
// Booking Log
			$eventid = BookingLog::ACCOUNT_REMARKS;

			BookingLog::model()->createLog($this->bkg_id, $ex->getMessage(), UserInfo::getInstance(), $eventid);

			$this->setAccountingFlag("Could not refund full amount. Amount to refund: $requestAmount. Amount Refunded: {$refundedAmount})");
		}
		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
		return $success;
	}

	public function setAccountingFlag($remarks, UserInfo $userInfo = null)
	{
		$this->bkgPref->bkg_account_flag = 1;
//$this->save();
		$this->bkgPref->save();
		BookingLog::model()->createLog($this->bkg_id, $remarks, $userInfo, BookingLog::SET_ACCOUNTING_FLAG);
	}

	/* @var biv_refund_approval_status
	 * 0=>default
	 * 1=>refund approval needed
	 * 2=>refund not approved
	 * 3=>refund approved
	 * 4 => refund processed
	 * 5 => no refund to be proccessed  */

	public function setRefundApprovalStatus($refund)
	{
		$this->bkgInvoice->biv_refund_approval_status	 = ($refund > 0) ? 1 : 0;
		$this->bkgInvoice->bkg_cancel_refund			 = $refund;
		$this->bkgInvoice->save();
	}

	public function addRefund($amount, $remarks = null, UserInfo $userInfo = null, $params = [])
	{
		$transaction = DBUtil::beginTransaction();
		try
		{
			$this->bkgInvoice->bkg_refund_amount += $amount;
			$this->bkgInvoice->calculateTotal();
			$res								 = $this->bkgInvoice->save();

			if (!$res)
			{
				throw new Exception("Failed to update refund", 1);
			}
			if ($remarks == null)
			{
				$remarks = "Refund of amount $amount completed";
			}
			BookingLog::model()->createLog($this->bkg_id, $remarks, $userInfo, BookingLog::REFUND_PROCESS_COMPLETED, '', $params);
			DBUtil::commitTransaction($transaction);
		}
		catch (Exception $e)
		{
			$error = $e->getMessage();
			DBUtil::rollbackTransaction($transaction);
			if ($e->getCode() == 1)
			{
				$error = json_encode($this->getErrors());
			}
			$remarks = "Refund of $amount Failed: ({$error})";
			BookingLog::model()->createLog($this->bkg_id, $remarks, $userInfo, BookingLog::REFUND_PROCESS_FAILED, '', $params);
		}
		return $res;
	}

	public function usermarkbadByBookingId($bkgId)
	{
		if (trim($bkgId) == null || trim($bkgId) == "")
		{
			throw new Exception("Required data missing", ReturnSet::ERROR_INVALID_DATA);
		}
		$params	 = array('bkgId' => $bkgId);
		$sql	 = "SELECT b.`usr_mark_customer_count`,a.`bkg_user_id` FROM `booking_user` a  JOIN `users` b ON a.bkg_user_id=b.user_id  WHERE a.`bui_bkg_id`=:bkgId";
		return DBUtil::queryRow($sql, DBUtil::SDB(), $params);
	}

	public function markedBadListByBooking($drvId = 0, $vhcId = 0, $usrId = 0)
	{
		$sql			 = "SELECT b.`bkg_id`,b.`bkg_booking_id`,bu.`bkg_user_fname`,bu.`bkg_user_lname`,b.`bkg_pickup_date`,a.blg_id,a.blg_desc,a.blg_event_id,a.blg_remark_type,a.blg_created,a.blg_booking_status,c.`cty_name` as from_city_name,d.`cty_name` as to_city_name "
				. "FROM `booking_log` a "
				. " JOIN `booking` b ON a.blg_booking_id=b.bkg_id "
				. " JOIN `booking_user` bu ON bu.bui_bkg_id=b.bkg_id "
				. " JOIN cities c ON c.cty_id=b.bkg_from_city_id "
				. " JOIN cities d ON d.cty_id=b.bkg_to_city_id WHERE 1=1";
		$sql			 .= " AND";
		$sql			 .= " (a.`blg_driver_assigned_id`=$drvId AND a.`blg_mark_driver`=1)";
		$sql			 .= " OR (a.`blg_vehicle_assigned_id`=$vhcId AND a.`blg_mark_car`=1)";
		$count			 = DBUtil::command("SELECT COUNT(*) FROM ($sql) a")->queryScalar();
		$dataprovider	 = new CSqlDataProvider($sql, [
			'totalItemCount' => $count,
			'sort'			 => ['attributes'	 => ['blg_id', 'blg_desc', 'bkg_booking_id'],
				'defaultOrder'	 => 'blg_id ASC'],
		]);
		return $dataprovider;
	}

	public function bookingAccountReport($date1 = '', $date2 = '', $from = '', $to = '', $vendor = '', $platform = '', $searchTxt = '')
	{
		$removeVal	 = '"';
		$status		 = [2, 3, 5, 6, 7, 8, 9];
		$status		 = implode(',', $status);
		$sql		 = "SELECT
					  booking.bkg_id
					, booking.bkg_status
					, booking_pref.bkg_account_flag
					, booking.bkg_booking_id
					, CONCAT(booking_user.`bkg_user_fname`, ' ', booking_user.`bkg_user_lname`) AS name
					, booking.bkg_pickup_date AS pickup_date
					, booking.bkg_create_date AS create_date
					, booking_user.bkg_contact_no AS phone
					, booking_user.bkg_country_code AS countryCode
					, booking_invoice.bkg_total_amount
					, booking_invoice.bkg_advance_amount
					, booking_invoice.bkg_due_amount
					, drivers.drv_name
					, vendors.vnd_name
					, vehicle_category.vct_label
					, vehicle_category.vct_desc
					, REPLACE(JSON_EXTRACT(`bkg_route_city_names`, '$[0]'), '$removeVal', '') AS from_city
					, REPLACE(JSON_EXTRACT(`bkg_route_city_names`, CONCAT('$[', JSON_LENGTH(`bkg_route_city_names`) - 1, ']')), '$removeVal', '') AS to_city
					FROM   booking
					INNER JOIN booking_cab ON booking.bkg_bcb_id = bcb_id
								INNER JOIN booking_pref ON booking_pref.bpr_bkg_id=booking.bkg_id
								INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id=booking.bkg_id
								INNER JOIN booking_user ON booking_user.bui_bkg_id=booking.bkg_id
					INNER JOIN svc_class_vhc_cat scv ON scv.scv_id = booking.bkg_vehicle_type_id
					INNER JOIN vehicle_category ON vehicle_category.vct_id = scv.scv_vct_id
					LEFT JOIN vendors ON vendors.vnd_id = booking_cab.bcb_vendor_id
                                LEFT JOIN drivers ON drivers.drv_id=booking_cab.bcb_driver_id
                    WHERE   bkg_status IN ($status)";

		$sqlCount = "SELECT
					COUNT(*)
			FROM   booking
			INNER JOIN booking_cab ON booking.bkg_bcb_id = booking_cab.bcb_id
			INNER JOIN booking_user ON booking_user.bui_bkg_id = booking.bkg_id
                                WHERE  bkg_status IN ($status)";

		if (($date1 != '' && $date1 != '1970-01-01') && ($date2 != '' && $date2 != '1970-01-01'))
		{
			$sql		 .= " AND (booking.bkg_pickup_date BETWEEN '$date1 00:00:00' AND '$date2 23:59:59')";
			$sqlCount	 .= " AND (booking.bkg_pickup_date BETWEEN '$date1 00:00:00' AND '$date2 23:59:59')";
		}
		if ($vendor != '')
		{
			$sql		 .= " AND booking_cab.bcb_vendor_id = '$vendor'";
			$sqlCount	 .= " AND booking_cab.bcb_vendor_id = '$vendor'";
		}
		if ($searchTxt != '')
		{
			$searchTxtArr = explode("@", $searchTxt);
			if (count($searchTxtArr) > 1)
			{
				$sql		 .= "   AND
						(
							MATCH(
							booking_user.bkg_user_fname,
							booking_user.bkg_user_lname,
							booking_user.bkg_contact_no,
							booking_user.bkg_alt_contact_no,
							booking_user.bkg_user_email) AGAINST ('\"$searchTxt*\"'  IN BOOLEAN MODE)
							OR  (booking.bkg_booking_id LIKE '%$searchTxt%')

						)";
				$sqlCount	 .= "   AND
						(
							MATCH(
							booking_user.bkg_user_fname,
							booking_user.bkg_user_lname,
							booking_user.bkg_contact_no,
							booking_user.bkg_alt_contact_no,
							booking_user.bkg_user_email) AGAINST ('\"$searchTxt*\"'  IN BOOLEAN MODE)
							OR  (booking.bkg_booking_id LIKE '%$searchTxt%')

						)";
			}
			else
			{
				$sql		 .= "   AND
						(
							MATCH(
							booking_user.bkg_user_fname,
							booking_user.bkg_user_lname,
							booking_user.bkg_contact_no,
							booking_user.bkg_alt_contact_no,
							booking_user.bkg_user_email) AGAINST ('$searchTxt*'  IN BOOLEAN MODE)
							OR  (booking.bkg_booking_id LIKE '%$searchTxt%')

						)";
				$sqlCount	 .= "   AND
						(
							MATCH(
							booking_user.bkg_user_fname,
							booking_user.bkg_user_lname,
							booking_user.bkg_contact_no,
							booking_user.bkg_alt_contact_no,
							booking_user.bkg_user_email) AGAINST ('$searchTxt*'  IN BOOLEAN MODE)
						OR  (booking.bkg_booking_id LIKE '%$searchTxt%')

						)";
			}
		}
		$count			 = DBUtil::command($sqlCount, DBUtil::SDB())->queryScalar();
		$dataprovider	 = new CSqlDataProvider($sql, [
			'totalItemCount' => $count,
			'db'			 => DBUtil::SDB(),
			'sort'			 => ['attributes'	 => ['bkg_booking_id', 'bkg_account_flag', 'bkg_status', 'name', 'pickup_date', 'create_date', 'bkg_contact_no', 'from_city', 'to_city', 'vnd_name', 'drv_name', 'vht_make', 'bkg_total_amount', 'bkg_advance_amount', 'bkg_due_amount'],
				'defaultOrder'	 => 'bkg_pickup_date DESC'], 'pagination'	 => ['pageSize' => 50],
		]);
		return $dataprovider;
	}

	public function accountReportByFlag($flag = 1)
	{
		$status	 = [2, 3, 5, 6, 7, 8, 9];
		$status	 = implode(',', $status);
		$sql	 = "SELECT
					booking.bkg_id,
                        booking.bkg_booking_id,
					if(date_sub(now(), INTERVAL 10 HOUR) < booking.bkg_pickup_date, 1, 0) AS priority_pickup
					FROM  booking
					JOIN booking_cab ON bkg_bcb_id = bcb_id
					JOIN booking_pref ON booking_pref.bpr_bkg_id = booking.bkg_id
					JOIN booking_user ON booking_user.bui_bkg_id = booking.bkg_id
                    LEFT JOIN drivers ON drivers.drv_id=booking_cab.bcb_driver_id
                    LEFT JOIN vendors ON vendors.vnd_id=booking_cab.bcb_vendor_id
                    WHERE bkg_status IN ($status)";
		if ($flag == 1):
			$sql .= " AND booking_pref.`bkg_account_flag` IN (1,2)";
		endif;
		$sql		 .= " GROUP BY booking.bkg_id ORDER BY priority_pickup DESC, booking.bkg_pickup_date asc";
		$recordSet	 = DBUtil::queryAll($sql, DBUtil::SDB());
		return $recordSet;
	}

	public function setAccountFlagByIds($bookingIds)
	{
		$userInfo	 = UserInfo::getInstance();
		$desc		 = "Accounting Flag has been set.";
		$eventId	 = BookingLog::SET_ACCOUNTING_FLAG;
		$date		 = date('Y-m-d H:i:s');
		$sql		 = "SELECT bkg_id FROM `booking` INNER JOIN `booking_pref` ON booking.bkg_id=booking_pref.bpr_bkg_id WHERE bkg_id IN (" . $bookingIds . ") AND bkg_account_flag=0";
		$BookData	 = DBUtil::queryAll($sql);
		$transaction = DBUtil::beginTransaction();
		try
		{
			if ($BookData)
			{
				foreach ($BookData as $key => $value)
				{
					if ($value['bkg_id'] != '')
					{
						$sql	 = "UPDATE `booking_pref` SET `bkg_account_flag`='1' WHERE `bpr_bkg_id`=" . $value['bkg_id'];
						DBUtil::command($sql)->execute();
						$model	 = Booking::model()->findByPk($value['bkg_id']);
						BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, $eventId, $model);
					}
					else
					{
						throw new Exception("Failed to set Accounting Flag");
					}
				}
				DBUtil::commitTransaction($transaction);
				return true;
			}
			else
			{
				throw new Exception("Failed to set Accounting Flag");
			}
		}
		catch (Exception $e)
		{
			DBUtil::rollbackTransaction($transaction);
			return false;
		}
	}

	public function unsetAccountFlagByIds($bookingIds)
	{
		$userInfo	 = UserInfo::getInstance();
		$desc		 = "Accounting Flag has been cleared.";
		$eventId	 = BookingLog::UNSET_ACCOUNTING_FLAG;
		$date		 = date('Y-m-d H:i:s');
		$sql		 = "SELECT bkg_id FROM `booking` INNER JOIN `booking_pref` ON booking.bkg_id=booking_pref.bpr_bkg_id WHERE bkg_id IN (" . $bookingIds . ") AND bkg_account_flag=1";
		$BookData	 = DBUtil::queryAll($sql);
		$transaction = DBUtil::beginTransaction();
		try
		{
			if ($BookData)
			{
				foreach ($BookData as $key => $value)
				{
					if ($value['bkg_id'] != '')
					{
						$sql	 = "UPDATE `booking_pref` SET `bkg_account_flag`='0' WHERE `bpr_bkg_id`=" . $value['bkg_id'];
						DBUtil::command($sql)->execute();
						$model	 = Booking::model()->findByPk($value['bkg_id']);
						BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, $eventId, $model);
					}
					else
					{
						throw new Exception("Failed to cleared Accounting Flag");
					}
				}
				DBUtil::commitTransaction($transaction);
				return true;
			}
			else
			{
				throw new Exception("Failed to cleared Accounting Flag");
			}
		}
		catch (Exception $e)
		{
			DBUtil::rollbackTransaction($transaction);
			return false;
		}
	}

	public function getEstimatedDropTime()
	{
		$bkid	 = $this->bkg_id;
		$sql	 = 'SELECT DATE_ADD(bkg_pickup_date,INTERVAL (if(`bkg_trip_duration`="" OR `bkg_trip_duration` IS NULL , 0 ,`bkg_trip_duration`)) MINUTE) as bkg_return_date FROM `booking` where bkg_id = ' . $bkid;
		$data	 = DBUtil::queryRow($sql);
		return $data['bkg_return_date'];
	}

	public function monthlyReport($month = '', $year = '', $command = '')
	{
		$pageSize	 = 12;
		$sql		 = "SELECT SUM(IF(a.bkg_status IN (2,3,4,5,6,7), a.bkg_total_amount, 0)) as total_amount, SUM(IF(a.bkg_status IN (2,3,4,5,6,7),"
				. "     (a.bkg_total_amount -a.bkg_vendor_amount),0)) as gozo_amount, SUM(IF(a.bkg_status IN (6),1,0)) as book_completed,"
				. "     SUM(IF(a.bkg_status IN (7),1,0)) as book_settled, SUM(IF(a.bkg_status IN (8),1,0)) as book_canceled,"
				. "     SUM(IF(a.bkg_status IN (9),1,0)) as book_deleted, SUM(IF(a.bkg_status NOT IN (6,7),1,0)) as book_pending,"
				. "     SUM(IF(a.bkg_status IN (6,7),a.bkg_trip_distance,0)) as book_trip_distance "
				. "FROM `booking` a "
				. "WHERE 1=1 AND month(a.`bkg_pickup_date`)='" . $month . "' AND year(a.`bkg_pickup_date`)='" . $year . "' AND a.`bkg_status` IN (2,3,5,6,7,8,9) ORDER BY `bkg_pickup_date` ASC";

		$Report1Data = DBUtil::queryRow($sql);

		$sql2		 = "SELECT SUM(IF(a.`bkg_booking_type`='1',1,0)) as oneway_trips,SUM(IF(a.`bkg_booking_type`='2',1,0)) as round_trips,"
				. "     SUM(IF(a.`bkg_booking_type`='2',(DATEDIFF(a.`bkg_return_date`,a.`bkg_pickup_date`)+1),0)) as round_trip_days,"
				. "     SUM(IF(a.`bkg_booking_type`='1',CEIL(a.`bkg_trip_duration`/1440),0)) as oneway_trip_days,"
				. "     SUM(IF(vendor_pref.`vnp_is_attached`<>1,1,0)) as floating_vendor_trips,"
				. "     SUM(IF(vendor_pref.`vnp_is_attached`='1',1,0)) as dedicated_vendor_trips "
				. "FROM `booking` a "
				. " JOIN booking_cab ON bcb_id=a.bkg_bcb_id "
				. "LEFT JOIN `vendors` b ON booking_cab.bcb_vendor_id=b.vnd_id "
				. " LEFT JOIN vendor_pref ON b.vnd_id = vendor_pref.vnp_vnd_id "
				. " WHERE 1=1 "
				. "AND month(a.`bkg_pickup_date`)='" . $month . "' AND year(a.`bkg_pickup_date`)='" . $year . "' AND a.`bkg_status` IN (2,3,5,6,7) ORDER BY a.`bkg_pickup_date` ASC";
		$Report2Data = DBUtil::command($sql2)->queryRow();

		$sql = "SELECT a.`cty_name`, fromCityTrips, toCityTrips, totalCityTrips "
				. "FROM `cities` a "
				. "LEFT JOIN (SELECT bkg_from_city_id, COUNT(1) as fromCityTrips "
				. "FROM `booking` "
				. "     WHERE month(`bkg_pickup_date`)='" . $month . "' AND  year(`bkg_pickup_date`)='" . $year . "' "
				. "     AND `bkg_status` IN (2,3,5,6,7) GROUP BY bkg_from_city_id) b ON a.cty_id=b.bkg_from_city_id "
				. "LEFT JOIN (SELECT bkg_to_city_id, COUNT(1) as toCityTrips "
				. "FROM `booking` "
				. "     WHERE month(`bkg_pickup_date`)='" . $month . "' AND year(`bkg_pickup_date`)='" . $year . "' "
				. "     AND `bkg_status` IN (2,3,5,6,7) GROUP BY bkg_to_city_id) c ON a.cty_id=c.bkg_to_city_id "
				. "LEFT JOIN (SELECT cty_id, COUNT(DISTINCT bkg_id) as totalCityTrips "
				. "     FROM ((SELECT bkg_from_city_id as cty_id, bkg_id FROM `booking` "
				. "     WHERE month(`bkg_pickup_date`)='" . $month . "' AND year(`bkg_pickup_date`)='" . $year . "' AND `bkg_status` IN (2,3,5,6,7))  "
				. "UNION (SELECT bkg_to_city_id as cty_id, bkg_id FROM `booking` "
				. "     WHERE month(`bkg_pickup_date`)='" . $month . "' AND year(`bkg_pickup_date`)='" . $year . "' AND `bkg_status` IN (2,3,5,6,7))) cty "
				. "     WHERE 1=1 GROUP BY cty_id) d ON a.cty_id= d.cty_id "
				. "     WHERE (fromCityTrips IS NOT NULL OR toCityTrips IS NOT NULL)";

		if ($command == 1)
		{
			$Report3Data = DBUtil::queryAll($sql);
		}
		else
		{
			$count		 = DBUtil::command("SELECT COUNT(*) FROM ($sql) abc")->queryScalar();
			$Report3Data = new CSqlDataProvider($sql, [
				'totalItemCount' => $count,
				'sort'			 => ['attributes'	 => ['cty_name', 'fromCityTrips', 'toCityTrips', 'totalCityTrips'],
					'defaultOrder'	 => 'totalCityTrips DESC'], 'pagination'	 => ['pageSize' => 200],
			]);
		}

		$sql = "SELECT SUM(IF(a.rtg_customer_driver='1','1','0')) as drivers1s,SUM(IF(a.rtg_customer_driver='2','1','0')) as drivers2s,"
				. "     SUM(IF(a.rtg_customer_driver='3','1','0')) as drivers3s,SUM(IF(a.rtg_customer_overall IN (4),'1','0')) as drivers4s,"
				. "     SUM(IF(a.rtg_customer_overall IN (5),'1','0')) as drivers5s,SUM(IF(a.rtg_customer_car='1','1','0')) as car1s,"
				. "     SUM(IF(a.rtg_customer_car='2','1','0')) as car2s,SUM(IF(a.rtg_customer_car='3','1','0')) as car3s,"
				. "     SUM(IF(a.rtg_customer_overall IN (4),'1','0')) as car4s,SUM(IF(a.rtg_customer_overall IN (5),'1','0')) as car5s,  "
				. "     SUM(IF(a.rtg_customer_car IS NOT NULL,'1','0')) as totalCars,SUM(IF(a.rtg_customer_driver IS NOT NULL,'1','0')) as totalDrivers "
				. "     FROM `ratings` a "
				. "     LEFT JOIN `booking` b ON a.rtg_booking_id=b.bkg_id "
				. "     WHERE 1=1 AND month(a.`rtg_customer_date`)='" . $month . "' AND year(a.`rtg_customer_date`)='" . $year . "' "
				. "     AND b.`bkg_status` IN (2,3,5,6,7,8,9) ORDER BY b.`bkg_pickup_date` ASC";

		$Report4Data = DBUtil::queryRow($sql);

		$sql = "SELECT
                SUM(IF(a.`bkg_platform`='3','1',0)) as `ByApp`,
                SUM(IF(a.`bkg_platform`='1','1',0)) as `ByWeb`,
                SUM(IF(a.`bkg_platform`='2','1',0)) as `ByPhone`,
                SUM(IF(a.`bkg_platform`='4','1',0)) as `ByAgent`,
                COUNT(1) as `TotalBooking`,
                COUNT(DISTINCT(a.`bkg_user_id`)) as uniqueCustomer,
                (SELECT COUNT(1) FROM (SELECT COUNT(`bkg_user_id`) as `countCustomer`
                    FROM `booking` WHERE month(`bkg_pickup_date`)='" . $month . "' AND year(`bkg_pickup_date`)='" . $year . "' AND `bkg_status` IN (2,3,5,6,7)
                    GROUP BY `bkg_user_id` HAVING (`countCustomer`>1)) a) as `repeatCustomer`,
                    (SELECT COUNT(1) FROM `booking` WHERE 1=1 AND `bkg_user_id` IN (SELECT `bkg_user_id`
                        FROM `booking`
                            WHERE month(`bkg_pickup_date`)='" . $month . "' AND year(`bkg_pickup_date`)='" . $year . "' AND `bkg_status` IN (2,3,5,6,7)
                                GROUP BY `bkg_user_id` HAVING (COUNT(`bkg_user_id`)>1)) AND month(`bkg_pickup_date`)='" . $month . "' AND year(`bkg_pickup_date`)='" . $year . "' AND `bkg_status` IN (2,3,5,6,7) ORDER BY `bkg_user_id` ASC) as `repeatCustomerTrips`
                FROM `booking` a WHERE month(a.`bkg_pickup_date`)='" . $month . "' AND year(a.`bkg_pickup_date`)='" . $year . "'
AND a.`bkg_status` IN (2,3,5,6,7) ORDER BY a.`bkg_pickup_date` ASC";

		$Report5Data = DBUtil::queryRow($sql);

		$sql = "SELECT SUM(IF(a.`rtg_customer_overall`='1','1',0)) as review1s,"
				. "SUM(IF(a.`rtg_customer_overall`='2','1',0)) as review2s,"
				. "SUM(IF(a.`rtg_customer_overall`='3','1',0)) as review3s,"
				. "SUM(IF(a.`rtg_customer_overall`='4','1',0)) as review4s,"
				. "SUM(IF(a.`rtg_customer_overall`='5','1',0)) as review5s,"
				. "SUM(IF(a.`rtg_customer_overall` IN ('1','2','3','4','5'),'1','0')) as totalReview,"
				. "(SELECT COUNT(1) "
				. "FROM (SELECT `blg_id` FROM `booking_log` "
				. "WHERE `blg_event_id` IN ('16,18') AND month(`blg_created`)='" . $month . "' AND year(`blg_created`)='" . $year . "' GROUP BY `blg_booking_id`) r) as totalRequest "
				. "FROM `ratings` a "
				. "LEFT JOIN `booking` b ON a.rtg_booking_id=b.bkg_id WHERE 1=1 "
				. "AND month(a.`rtg_customer_date`)='" . $month . "' AND year(a.`rtg_customer_date`)='" . $year . "' "
				. "AND b.`bkg_status` IN (2,3,5,6,7)";

		$Report6Data = DBUtil::queryRow($sql);

		$sql = "SELECT vendorRating, COUNT(*) as vendorRatingCount FROM ( SELECT rtg_id, "
				. "ROUND("
				. "IF(rtg_customer_overall IS NULL, rtg_csr_vendor, "
				. "IF(rtg_csr_vendor IS NULL, IF(rtg_customer_overall IN (4,5), rtg_customer_overall, (rtg_customer_driver + rtg_customer_car)/2), "
				. "IF(rtg_customer_overall IN (4,5), (rtg_customer_overall+rtg_csr_vendor)/2, (rtg_customer_driver + rtg_customer_car+rtg_csr_vendor)/3)))) as vendorRating FROM `ratings` "
				. "WHERE 1=1 AND ((month(`rtg_customer_date`)='" . $month . "' AND year(`rtg_customer_date`)='" . $year . "') OR (month(`rtg_csr_date`)='" . $month . "' AND year(`rtg_csr_date`)='" . $year . "'))) a GROUP BY vendorRating";

		$Report7Data = DBUtil::queryAll($sql);

		$sql		 = "SELECT COUNT(DISTINCT(b.user_id)) as newCustomers "
				. "FROM `booking` a "
				. "INNER JOIN `users` b ON a.bkg_user_id=b.user_id "
				. "WHERE 1=1 AND month(b.`usr_created_at`)='" . $month . "' AND year(b.`usr_created_at`)='" . $year . "' AND a.`bkg_user_id` IS NOT NULL "
				. "AND month(a.`bkg_create_date`)='" . $month . "' AND year(a.`bkg_create_date`)='" . $year . "' "
				. "AND a.`bkg_status` IN (2,3,5,6,7) ORDER BY b.`usr_created_at` ASC";
		$Report8Data = DBUtil::queryRow($sql);

		$sql		 = "SELECT COUNT(DISTINCT(`bkg_from_city_id`)) as source_city,COUNT(DISTINCT(`bkg_to_city_id`)) as destination_city,
                (SELECT COUNT(DISTINCT(booking_cab.bcb_driver_id)) FROM `booking` a
		LEFT JOIN booking_cab ON bcb_id=a.bkg_bcb_id
                    LEFT JOIN `drivers` b ON booking_cab.bcb_driver_id=b.drv_id
                        WHERE 1 AND month(a.`bkg_pickup_date`)='" . $month . "' AND year(a.`bkg_pickup_date`)='" . $year . "'
                            AND a.`bkg_status` IN (2,3,4,5,6,7)) as driver_count,
                (SELECT COUNT(DISTINCT(booking_cab.bcb_cab_id)) FROM `booking` a
		LEFT JOIN booking_cab ON bcb_id=a.bkg_bcb_id
                    LEFT JOIN `vehicles` b ON booking_cab.bcb_cab_id=b.vhc_id
                        WHERE 1 AND month(a.`bkg_pickup_date`)='" . $month . "' AND year(a.`bkg_pickup_date`)='" . $year . "'
                            AND a.`bkg_status` IN (2,3,4,5,6,7)) as vehicle_count,
                (SELECT COUNT(DISTINCT(booking_cab.bcb_vendor_id))
                    FROM `booking` a
		    LEFT JOIN booking_cab ON bcb_id=a.bkg_bcb_id
                        LEFT JOIN `vendors` b ON booking_cab.bcb_vendor_id=b.vnd_id
                            WHERE 1 AND month(a.`bkg_pickup_date`)='" . $month . "' AND year(a.`bkg_pickup_date`)='" . $year . "'
                                AND a.`bkg_status` IN (2,3,4,5,6,7) AND b.`vnd_is_exclusive`='1') as attach_vendor_count,
                (SELECT COUNT(DISTINCT(booking_cab.bcb_vendor_id))
                        FROM `booking` a
			LEFT JOIN booking_cab ON bcb_id=a.bkg_bcb_id
                            LEFT JOIN `vendors` b ON booking_cab.bcb_vendor_id=b.vnd_id
                                WHERE 1 AND month(a.`bkg_pickup_date`)='" . $month . "' AND year(a.`bkg_pickup_date`)='" . $year . "'
                                    AND a.`bkg_status` IN (2,3,4,5,6,7) AND b.`vnd_is_exclusive`<>'1') as floating_vendor_count,
                (SELECT COUNT(DISTINCT(booking_cab.bcb_cab_id)) FROM `booking` a
		LEFT JOIN booking_cab ON bcb_id=a.bkg_bcb_id
                    LEFT JOIN `vehicles` b ON booking_cab.bcb_cab_id=b.vhc_id
                    INNER JOIN vendor_vehicle on vvhc_vhc_id = vhc_id
                        WHERE 1 AND vvhc_vnd_id IN (SELECT booking_cab.bcb_vendor_id FROM `booking` a
			LEFT JOIN booking_cab ON bcb_id=a.bkg_bcb_id
                            LEFT JOIN `vendors` b ON booking_cab.bcb_vendor_id=b.vnd_id
                                WHERE 1 AND month(a.`bkg_pickup_date`)='" . $month . "' AND year(a.`bkg_pickup_date`)='" . $year . "'
                                    AND a.`bkg_status` IN (2,3,4,5,6,7) AND b.`vnd_is_exclusive`<>'1' GROUP BY booking_cab.bcb_vendor_id)
                                AND month(a.`bkg_pickup_date`)='" . $month . "' AND year(a.`bkg_pickup_date`)='" . $year . "'
                                AND a.`bkg_status` IN (2,3,4,5,6,7)) as floating_car_count
                        FROM `booking` WHERE 1=1
                        AND month(`bkg_pickup_date`)='" . $month . "' AND year(`bkg_pickup_date`)='" . $year . "'
                        AND `bkg_status` IN (2,3,4,5,6,7) ORDER BY `bkg_pickup_date` ASC";
// echo $sql;exit();
		$Report9Data = DBUtil::queryRow($sql);

		$data = array('report1'	 => $Report1Data,
			'report2'	 => $Report2Data,
			'report3'	 => $Report3Data,
			'report4'	 => $Report4Data,
			'report5'	 => $Report5Data,
			'report6'	 => $Report6Data,
			'report7'	 => $Report7Data,
			'report8'	 => $Report8Data,
			'report9'	 => $Report9Data);
		return $data;
	}

	public function businesstrendBookingReport()
	{
		$status				 = [2, 3, 4, 5, 6, 7, 9];
		$status				 = implode(',', $status);
		$array				 = [];
		$sqlBookingLifetime	 = "SELECT count(*) booking_lifetime FROM `booking` WHERE bkg_status IN ($status)";
		$data				 = DBUtil::queryRow($sqlBookingLifetime, DBUtil::SDB());
		$array['lifetime']	 = $data['booking_lifetime'];

		$yearfirstDate	 = date("Y-01-01");
		$sqlBookingYtd	 = "SELECT count(*) booking_ytd FROM `booking` WHERE bkg_status IN ($status) AND (`bkg_create_date` BETWEEN '$yearfirstDate' AND NOW())";
		$data1			 = DBUtil::queryRow($sqlBookingYtd, DBUtil::SDB());
		$array['ytd']	 = $data1['booking_ytd'];

		$monthSub2StartDate	 = date('Y-m-d', strtotime("first day of -2 month"));
		$monthSub2EndDate	 = date('Y-m-d', strtotime("last day of -2 month"));
		$sqlmonthSub2		 = "SELECT count(*) booking_monthSub2 FROM `booking` WHERE bkg_status IN ($status) AND (`bkg_create_date` BETWEEN '$monthSub2StartDate 00:00:00' AND '$monthSub2EndDate 23:59:59')";
		$data2				 = DBUtil::queryRow($sqlmonthSub2, DBUtil::SDB());
		$array['month-2']	 = $data2['booking_monthSub2'];

		$monthSub1StartDate	 = date('Y-m-d', strtotime("first day of -1 month"));
		$monthSub1EndDate	 = date('Y-m-d', strtotime("last day of -1 month"));
		$sqlmonthSub1		 = "SELECT count(*) booking_monthSub1 FROM `booking` WHERE bkg_status IN ($status) AND (`bkg_create_date` BETWEEN '$monthSub1StartDate 00:00:00' AND '$monthSub1EndDate 23:59:59')";
		$data3				 = DBUtil::queryRow($sqlmonthSub1, DBUtil::SDB());
		$array['month-1']	 = $data3['booking_monthSub1'];

		$monthStartdate	 = date("Y-m-01");
		$sqlBookingMtd	 = "SELECT count(*) booking_mtd FROM `booking` WHERE bkg_status IN ($status) AND (`bkg_create_date` BETWEEN '$monthStartdate 00:00:00' AND NOW())";
		$data4			 = DBUtil::queryRow($sqlBookingMtd, DBUtil::SDB());
		$array['mtd']	 = $data4['booking_mtd'];

		return $array;
	}

	public function businesstrendReviews()
	{
		$array				 = [];
		$sqlReviewLifetime	 = "SELECT count(*) review_lifetime FROM `ratings` WHERE rtg_active=1 LIMIT 0,1";
		$data				 = DBUtil::queryRow($sqlReviewLifetime, DBUtil::SDB());
		$array['lifetime']	 = $data['review_lifetime'];

		$yearfirstDate	 = date("Y-01-01");
		$sqlReviewYtd	 = "SELECT count(*) review_ytd FROM `ratings` WHERE rtg_active=1 AND (`rtg_customer_date`) BETWEEN '$yearfirstDate' AND NOW() LIMIT 0,1";
		$data1			 = DBUtil::queryRow($sqlReviewYtd, DBUtil::SDB());
		$array['ytd']	 = $data1['review_ytd'];

		$monthSub2StartDate	 = date('Y-m-d', strtotime("first day of -2 month"));
		$monthSub2EndDate	 = date('Y-m-d', strtotime("last day of -2 month"));
		$sqlmonthSub2		 = "SELECT count(*) review_monthSub2 FROM `ratings` WHERE rtg_active=1 AND (`rtg_customer_date`) BETWEEN '$monthSub2StartDate 00:00:00' AND '$monthSub2EndDate 23:59:59' LIMIT 0,1";
		$data2				 = DBUtil::queryRow($sqlmonthSub2, DBUtil::SDB());
		$array['month-2']	 = $data2['review_monthSub2'];

		$monthSub1StartDate	 = date('Y-m-d', strtotime("first day of -1 month"));
		$monthSub1EndDate	 = date('Y-m-d', strtotime("last day of -1 month"));
		$sqlmonthSub1		 = "SELECT count(*) review_monthSub1 FROM `ratings` WHERE rtg_active=1 AND (`rtg_customer_date`) BETWEEN '$monthSub1StartDate 00:00:00' AND '$monthSub1EndDate  23:59:59' LIMIT 0,1";
		$data3				 = DBUtil::queryRow($sqlmonthSub1, DBUtil::SDB());
		$array['month-1']	 = $data3['review_monthSub1'];

		$monthStartdate	 = date("Y-m-01");
		$sqlReviewMtd	 = "SELECT count(*) review_mtd FROM `ratings` WHERE rtg_active=1 AND date(`rtg_customer_date`) BETWEEN '$monthStartdate 00:00:00' AND NOW() LIMIT 0,1";
		$data4			 = DBUtil::queryRow($sqlReviewMtd, DBUtil::SDB());
		$array['mtd']	 = $data4['review_mtd'];

		return $array;
	}

	public function businesstrendGmv()
	{
		$status	 = [2, 3, 4, 5, 6, 7, 9];
		$status	 = implode(',', $status);

		$array				 = [];
		$sqlGmvLifetime		 = "SELECT IF(SUM(bkg_total_amount) IS NULL,0.00,SUM(bkg_total_amount)) gmv_lifetime FROM `booking`  JOIN `booking_invoice` ON booking.bkg_id=booking_invoice.biv_bkg_id WHERE bkg_status IN ($status)";
		$data				 = DBUtil::queryRow($sqlGmvLifetime, DBUtil::SDB());
		$array['lifetime']	 = $data['gmv_lifetime'];

		$yearfirstDate	 = date("Y-01-01");
		$sqlGmvYtd		 = "SELECT IF(SUM(bkg_total_amount) IS NULL,0.00,SUM(bkg_total_amount)) gmv_ytd FROM `booking` LEFT JOIN `booking_invoice` ON booking.bkg_id=booking_invoice.biv_bkg_id WHERE bkg_status IN ($status) AND (`bkg_create_date`) BETWEEN '$yearfirstDate 00:00:00' AND NOW()";
		$data1			 = DBUtil::queryRow($sqlGmvYtd, DBUtil::SDB());
		$array['ytd']	 = $data1['gmv_ytd'];

		$monthSub2StartDate	 = date('Y-m-d', strtotime("first day of -2 month"));
		$monthSub2EndDate	 = date('Y-m-d', strtotime("last day of -2 month"));
		$sqlGmvMonthSub2	 = "SELECT IF(SUM(bkg_total_amount) IS NULL,0.00,SUM(bkg_total_amount)) gmv_monthSub2 FROM `booking` LEFT JOIN `booking_invoice` ON booking.bkg_id=booking_invoice.biv_bkg_id WHERE bkg_status IN ($status) AND date(`bkg_create_date`) BETWEEN '$monthSub2StartDate 00:00:00' AND '$monthSub2EndDate 23:59:59'";
		$data2				 = DBUtil::queryRow($sqlGmvMonthSub2, DBUtil::SDB());
		$array['month-2']	 = $data2['gmv_monthSub2'];

		$monthSub1StartDate	 = date('Y-m-d', strtotime("first day of -1 month"));
		$monthSub1EndDate	 = date('Y-m-d', strtotime("last day of -1 month"));
		$sqlGmvMonthSub1	 = "SELECT IF(SUM(bkg_total_amount) IS NULL,0.00,SUM(bkg_total_amount)) gmv_monthSub1 FROM `booking` LEFT JOIN `booking_invoice` ON booking.bkg_id=booking_invoice.biv_bkg_id WHERE bkg_status IN ($status) AND (`bkg_create_date`) BETWEEN '$monthSub1StartDate 00:00:00' AND '$monthSub1EndDate 23:59:59'";
		$data3				 = DBUtil::queryRow($sqlGmvMonthSub1, DBUtil::SDB());
		$array['month-1']	 = $data3['gmv_monthSub1'];

		$monthStartdate	 = date("Y-m-01");
		$sqlGmvMtd		 = "SELECT IF(SUM(bkg_total_amount) IS NULL,0.00,SUM(bkg_total_amount)) gmv_mtd FROM `booking` LEFT JOIN `booking_invoice` ON booking.bkg_id=booking_invoice.biv_bkg_id WHERE bkg_status IN ($status) AND (`bkg_create_date`) BETWEEN '$monthStartdate 00:00:00' AND NOW()";
		$data4			 = DBUtil::queryRow($sqlGmvMtd, DBUtil::SDB());
		$array['mtd']	 = $data4['gmv_mtd'];

		return $array;
	}

	public function businesstrendNps()
	{
		$sql_lifetime		 = "SELECT 	TRUNCATE(((SUM(IF(rtg_customer_recommend BETWEEN 9 AND 10,1,0))-SUM(IF(rtg_customer_recommend BETWEEN 1 AND 6,1,0)))/SUM(IF(rtg_customer_recommend IS NOT NULL,1,0)))*100,2) as nps_lifetime
								FROM `ratings`
								INNER JOIN `booking` ON booking.bkg_id=ratings.rtg_booking_id AND booking.bkg_active=1
								WHERE  (ratings.rtg_customer_date) > '2015-10-01' LIMIT 0,1";
		$row['nps_lifetime'] = DBUtil::command($sql_lifetime, DBUtil::SDB())->queryScalar();

		$sql_mtd		 = "SELECT 	TRUNCATE(((SUM(IF(rtg_customer_recommend BETWEEN 9 AND 10,1,0))-SUM(IF(rtg_customer_recommend BETWEEN 1 AND 6,1,0)))/SUM(IF(rtg_customer_recommend IS NOT NULL,1,0)))*100,2) as nps_mtd
							FROM `ratings`
							INNER JOIN `booking` ON booking.bkg_id=ratings.rtg_booking_id AND booking.bkg_active=1
							WHERE (ratings.rtg_customer_date BETWEEN DATE_FORMAT(NOW() ,'%Y-%m-01') AND NOW())
							AND (ratings.rtg_customer_date) > '2015-10-01' LIMIT 0,1";
		$row['nps_mtd']	 = DBUtil::command($sql_mtd, DBUtil::SDB())->queryScalar();

		$sql_month1			 = "SELECT 	TRUNCATE(((SUM(IF(rtg_customer_recommend BETWEEN 9 AND 10,1,0))-SUM(IF(rtg_customer_recommend BETWEEN 1 AND 6,1,0)))/SUM(IF(rtg_customer_recommend IS NOT NULL,1,0)))*100,2) as nps_month1
								FROM `ratings`
								INNER JOIN `booking` ON booking.bkg_id=ratings.rtg_booking_id AND booking.bkg_active=1
								WHERE (ratings.rtg_customer_date) BETWEEN DATE_SUB(DATE_FORMAT(NOW() ,'%Y-%m-01'), INTERVAL 1 MONTH) AND DATE_SUB(DATE_FORMAT(NOW() ,'%Y-%m-31'), INTERVAL 1 MONTH)
								AND (ratings.rtg_customer_date) > '2015-10-01' LIMIT 0,1";
		$row['nps_month1']	 = DBUtil::command($sql_month1, DBUtil::SDB())->queryScalar();

		$sql_month2			 = "SELECT 	TRUNCATE(((SUM(IF(rtg_customer_recommend BETWEEN 9 AND 10,1,0))-SUM(IF(rtg_customer_recommend BETWEEN 1 AND 6,1,0)))/SUM(IF(rtg_customer_recommend IS NOT NULL,1,0)))*100,2) as nps_month2
								FROM `ratings`
								INNER JOIN `booking` ON booking.bkg_id=ratings.rtg_booking_id AND booking.bkg_active=1
								WHERE (ratings.rtg_customer_date) BETWEEN DATE_SUB(DATE_FORMAT(NOW() ,'%Y-%m-01'), INTERVAL 2 MONTH) AND DATE_SUB(DATE_FORMAT(NOW() ,'%Y-%m-31'), INTERVAL 2 MONTH)
								AND (ratings.rtg_customer_date) > '2015-10-01' LIMIT 0,1";
		$row['nps_month2']	 = DBUtil::command($sql_month2, DBUtil::SDB())->queryScalar();

		$sql_ytd		 = "SELECT 	TRUNCATE(((SUM(IF(rtg_customer_recommend BETWEEN 9 AND 10,1,0))-SUM(IF(rtg_customer_recommend BETWEEN 1 AND 6,1,0)))/SUM(IF(rtg_customer_recommend IS NOT NULL,1,0)))*100,2) as nps_ytd
							FROM `ratings`
							INNER JOIN `booking` ON booking.bkg_id=ratings.rtg_booking_id AND booking.bkg_active=1
							WHERE (ratings.rtg_customer_date) BETWEEN DATE_FORMAT(NOW() ,'%Y-01-01') AND NOW()
							AND (ratings.rtg_customer_date) > '2015-10-01' LIMIT 0,1";
		$row['nps_ytd']	 = DBUtil::command($sql_ytd, DBUtil::SDB())->queryScalar();

		return ['lifetime'	 => $row['nps_lifetime'],
			'mtd'		 => $row['nps_mtd'],
			'month-1'	 => $row['nps_month1'],
			'month-2'	 => $row['nps_month2'],
			'ytd'		 => $row['nps_ytd']];
	}

	public function businesstrendComplete()
	{
		$array				 = [];
		$sqlCompleteLifetime = "SELECT count(*) complete_lifetime FROM booking WHERE bkg_status IN (6,7) AND DATE_ADD(bkg_pickup_date,INTERVAL bkg_trip_duration MINUTE) < NOW() LIMIT 0,1";
		$data				 = DBUtil::queryRow($sqlCompleteLifetime, DBUtil::SDB());
		$array['lifetime']	 = $data['complete_lifetime'];

		$yearfirstDate	 = date("Y-01-01");
		$sqlCompleteYtd	 = "SELECT count(*) complete_ytd FROM `booking` WHERE bkg_status IN (6,7) AND DATE_ADD(bkg_pickup_date,INTERVAL bkg_trip_duration MINUTE) BETWEEN '$yearfirstDate 00:00:00' AND NOW() LIMIT 0,1";
		$data1			 = DBUtil::queryRow($sqlCompleteYtd, DBUtil::SDB());
		$array['ytd']	 = $data1['complete_ytd'];

		$monthSub2StartDate	 = date('Y-m-d', strtotime("first day of -2 month"));
		$monthSub2EndDate	 = date('Y-m-d', strtotime("last day of -2 month"));
		$sqlmonthSub2		 = "SELECT count(*) complete_monthSub2 FROM `booking` WHERE bkg_status IN (6,7) AND DATE_ADD(bkg_pickup_date,INTERVAL bkg_trip_duration MINUTE) BETWEEN '$monthSub2StartDate 00:00:00' AND '$monthSub2EndDate 23:59:59' LIMIT 0,1";
		$data2				 = DBUtil::queryRow($sqlmonthSub2, DBUtil::SDB());
		$array['month-2']	 = $data2['complete_monthSub2'];

		$monthSub1StartDate	 = date('Y-m-d', strtotime("first day of -1 month"));
		$monthSub1EndDate	 = date('Y-m-d', strtotime("last day of -1 month"));
		$sqlmonthSub1		 = "SELECT count(*) complete_monthSub1 FROM `booking` WHERE bkg_status IN (6,7) AND  DATE_ADD(bkg_pickup_date,INTERVAL bkg_trip_duration MINUTE) BETWEEN '$monthSub1StartDate 00:00:00' AND '$monthSub1EndDate 23:59:59' LIMIT 0,1";
		$data3				 = DBUtil::queryRow($sqlmonthSub1, DBUtil::SDB());
		$array['month-1']	 = $data3['complete_monthSub1'];

		$monthStartdate	 = date("Y-m-01");
		$sqlCompleteMtd	 = "SELECT count(*) complete_mtd FROM `booking` WHERE bkg_status IN (6,7) AND DATE_ADD(bkg_pickup_date,INTERVAL bkg_trip_duration MINUTE) BETWEEN '$monthStartdate 00:00:00' AND NOW() LIMIT 0,1";
		$data4			 = DBUtil::queryRow($sqlCompleteMtd, DBUtil::SDB());
		$array['mtd']	 = $data4['complete_mtd'];

		return $array;
	}

	public function businesstrendAdvancePayment()
	{
		$status	 = [2, 3, 4, 5, 6, 7];
		$status	 = implode(',', $status);
		$array	 = [];

		$sqlLedgerId = DBUtil::command("select group_concat(account_ledger.ledgerId) from account_ledger where account_ledger.accountGroupId=28", DBUtil::SDB())->queryScalar();

		$sqlAdvanceLifetime = "SELECT sum(adt_amount) advance_lifetime
								FROM   account_trans_details  JOIN account_transactions act ON act.act_id = adt_trans_id
								WHERE  act_active = 1 AND act_type = 1 AND adt_status = 1 AND adt_active = 1 AND adt_ledger_id in ($sqlLedgerId)";

		$data				 = DBUtil::queryRow($sqlAdvanceLifetime, DBUtil::SDB());
		$array['lifetime']	 = $data['advance_lifetime'];

		$yearfirstDate	 = date("Y-01-01");
		$sqlAdvanceYtd	 = "SELECT sum(adt_amount) advance_ytd
							FROM   account_trans_details  JOIN account_transactions act ON act.act_id = adt_trans_id
							WHERE  act_active = 1 AND act_type = 1 AND adt_ledger_id in ($sqlLedgerId) AND adt_status = 1 AND adt_active = 1 AND (act_date BETWEEN '$yearfirstDate 00:00:00' AND NOW())";
		$data1			 = DBUtil::queryRow($sqlAdvanceYtd, DBUtil::SDB());
		$array['ytd']	 = $data1['advance_ytd'];

		$monthSub2StartDate	 = date('Y-m-d', strtotime("first day of -2 month"));
		$monthSub2EndDate	 = date('Y-m-d', strtotime("last day of -2 month"));
		$sqlmonthSub2		 = "SELECT sum(adt_amount) advance_monthSub2
								FROM   account_trans_details  JOIN account_transactions act ON act.act_id = adt_trans_id
								WHERE  act_active = 1 AND act_type = 1 AND adt_ledger_id in ($sqlLedgerId) AND adt_status = 1 AND adt_active = 1 AND (act_date BETWEEN '$monthSub2StartDate 00:00:00' AND '$monthSub2EndDate 23:59:59')";

		$data2				 = DBUtil::queryRow($sqlmonthSub2, DBUtil::SDB());
		$array['month-2']	 = $data2['advance_monthSub2'];

		$monthSub1StartDate	 = date('Y-m-d', strtotime("first day of -1 month"));
		$monthSub1EndDate	 = date('Y-m-d', strtotime("last day of -1 month"));
		$sqlmonthSub1		 = "SELECT sum(adt_amount) advance_monthSub1
								FROM   account_trans_details JOIN account_transactions act ON act.act_id = adt_trans_id
								WHERE  act_active = 1 AND act_type = 1 AND adt_ledger_id in ($sqlLedgerId) AND adt_status = 1 AND adt_active = 1 AND (act_date BETWEEN '$monthSub1StartDate 00:00:00' AND '$monthSub1EndDate 23:59:59')";

		$data3				 = DBUtil::queryRow($sqlmonthSub1, DBUtil::SDB());
		$array['month-1']	 = $data3['advance_monthSub1'];

		$monthStartdate = date("Y-m-01");

		$sqlAdvanceMtd = "SELECT sum(adt_amount) advance_mtd
							FROM   account_trans_details  JOIN account_transactions act ON act.act_id = adt_trans_id
							WHERE  act_active = 1 AND act_type = 1 AND adt_ledger_id in ($sqlLedgerId) AND adt_status = 1 AND adt_active = 1 AND (act_date BETWEEN '$monthStartdate 00:00:00' AND NOW())";

		$data4			 = DBUtil::queryRow($sqlAdvanceMtd, DBUtil::SDB());
		$array['mtd']	 = $data4['advance_mtd'];

		$sql				 = "SET @date:=CURDATE();
								SET @date1:=DATE_SUB(@date,INTERVAL 1 DAY);
								SET @date2:=DATE_SUB(@date,INTERVAL 2 DAY);
								SET @month1:=DATE_SUB(@date,INTERVAL 1 MONTH);
								SET @lastMonthDate:=LAST_DAY(CONCAT(DATE_SUB(@date,INTERVAL  1 MONTH),' 23:59:59'));
								SET @firstMonthDate:= date_add(@lastMonthDate,INTERVAL -DAY(@lastMonthDate)+1 DAY);
								SET @last2MonthDate:=LAST_DAY(CONCAT(DATE_SUB(@date,INTERVAL  2 MONTH),' 23:59:59'));
								SET @first2MonthDate:= DATE_ADD(@last2MonthDate,INTERVAL -DAY(@last2MonthDate)+1 DAY);
								SET @last3onthDate:=LAST_DAY(CONCAT(DATE_SUB(@date,INTERVAL 3 MONTH),' 23:59:59'));
								SET @first3MonthDate:= DATE_ADD(@last3onthDate,INTERVAL -DAY(@last3onthDate)+1 DAY);
								SET @CurrentMonthDay:= date_add(@date,INTERVAL - DAY(@date)+1 DAY);
								SET @CurrentlastMonthDate:=LAST_DAY(@date);
								SET @lastYearFirstDate:=DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 YEAR) ,'%Y-01-01');
								SET @lastYearLastDate:=LAST_DAY(DATE_ADD(@lastYearFirstDate, INTERVAL 12-MONTH(@lastYearFirstDate) MONTH));
								SELECT
								SUM( IF(booking.bkg_create_date BETWEEN CONCAT(@date, ' 00:00:00') and  CONCAT(@date, ' 23:59:59'),booking_invoice.bkg_total_amount,'0')) AS booking_gmv_advance_today
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@date1,' 00:00:00') and  CONCAT(@date1,' 23:59:59'),booking_invoice.bkg_total_amount,'0')) AS booking_gmv_advance_today1
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@date2,' 00:00:00') and  CONCAT(@date2,' 23:59:59'),booking_invoice.bkg_total_amount,'0')) AS booking_gmv_advance_today2
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@firstMonthDate,' 00:00:00') and  CONCAT(@lastMonthDate,' 23:59:59'),booking_invoice.bkg_total_amount,'0')) AS booking_gmv_advance_month1
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@first2MonthDate,' 00:00:00') and  CONCAT(@last2MonthDate,' 23:59:59'),booking_invoice.bkg_total_amount,'0')) AS booking_gmv_advance_month2
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@first3MonthDate,' 00:00:00') and  CONCAT(@last3onthDate,' 23:59:59'),booking_invoice.bkg_total_amount,'0')) AS booking_gmv_advance_month3
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@CurrentMonthDay,' 00:00:00') and  CONCAT(@CurrentlastMonthDate,' 23:59:59'),booking_invoice.bkg_total_amount,'0'))   AS booking_gmv_advance_mtd
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(DATE_FORMAT(@date ,'%Y-01-01'),' 00:00:00') and  CONCAT(@date,' 23:59:59'),booking_invoice.bkg_total_amount,'0'))   AS  booking_gmv_advance_ytd
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@lastYearFirstDate,' 00:00:00') and  CONCAT(@lastYearLastDate,' 23:59:59'),booking_invoice.bkg_total_amount,'0'))   AS booking_gmv_advance_last_year
								,SUM(booking_invoice.bkg_total_amount) AS booking_gmv_advance_lifetime
								,SUM(IF(booking.bkg_create_date BETWEEN CONCAT(@date, ' 00:00:00') and  CONCAT(@date, ' 23:59:59'),(booking_invoice.bkg_advance_amount - booking_invoice.bkg_refund_amount),0))  AS booking_advance_today
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@date1,' 00:00:00') and  CONCAT(@date1,' 23:59:59'),(booking_invoice.bkg_advance_amount - booking_invoice.bkg_refund_amount),'0')) AS booking_advance_today1
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@date2,' 00:00:00') and  CONCAT(@date2,' 23:59:59'),(booking_invoice.bkg_advance_amount - booking_invoice.bkg_refund_amount),'0')) AS booking_advance_today2
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@firstMonthDate,' 00:00:00') and  CONCAT(@lastMonthDate,' 23:59:59'),(booking_invoice.bkg_advance_amount - booking_invoice.bkg_refund_amount),'0')) AS booking_advance_month1
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@first2MonthDate,' 00:00:00') and  CONCAT(@last2MonthDate,' 23:59:59'),(booking_invoice.bkg_advance_amount - booking_invoice.bkg_refund_amount),'0')) AS booking_advance_month2
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@first3MonthDate,' 00:00:00') and  CONCAT(@last3onthDate,' 23:59:59'),(booking_invoice.bkg_advance_amount - booking_invoice.bkg_refund_amount),'0')) AS booking_advance_month3
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@CurrentMonthDay,' 00:00:00') and  CONCAT(@CurrentlastMonthDate,' 23:59:59'),(booking_invoice.bkg_advance_amount - booking_invoice.bkg_refund_amount),'0'))   AS booking_advance_mtd
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(DATE_FORMAT(@date ,'%Y-01-01'),' 00:00:00') and  CONCAT(@date,' 23:59:59'),(booking_invoice.bkg_advance_amount - booking_invoice.bkg_refund_amount),'0'))   AS  booking_advance_ytd
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@lastYearFirstDate,' 00:00:00') and  CONCAT(@lastYearLastDate,' 23:59:59'),(booking_invoice.bkg_advance_amount - booking_invoice.bkg_refund_amount),'0'))   AS booking_advance_last_year
								,SUM(booking_invoice.bkg_advance_amount) AS booking_advance_lifetime
								,SUM( IF(booking.bkg_create_date BETWEEN CONCAT(CURDATE(), ' 00:00:00') and  CONCAT(CURDATE(), ' 23:59:59'),'1','0')) AS booking_advance_today_count
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@date1,' 00:00:00') and  CONCAT(@date1,' 23:59:59'),'1','0')) AS booking_advance_today1_count
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@date2,' 00:00:00') and  CONCAT(@date2,' 23:59:59'),'1','0')) AS booking_advance_today2_count
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@firstMonthDate,' 00:00:00') and  CONCAT(@lastMonthDate,' 23:59:59'),'1','0')) AS booking_advance_month1_count
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@first2MonthDate,' 00:00:00') and  CONCAT(@last2MonthDate,' 23:59:59'),'1','0')) AS booking_advance_month2_count
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@first3MonthDate,' 00:00:00') and  CONCAT(@last3onthDate,' 23:59:59'),'1','0')) AS booking_gmv_advance_month3
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@CurrentMonthDay,' 00:00:00') and  CONCAT(@CurrentlastMonthDate,' 23:59:59'),'1','0'))   AS booking_advance_mtd_count
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(DATE_FORMAT(@date ,'%Y-01-01'),' 00:00:00') and  CONCAT(@date,' 23:59:59'),'1','0'))   AS  booking_advance_ytd_count
								,SUM(IF( booking.bkg_create_date BETWEEN CONCAT(@lastYearFirstDate,' 00:00:00') and  CONCAT(@lastYearLastDate,' 23:59:59'),'1','0'))   AS booking_advance_last_year_count
								,COUNT(booking.bkg_id) AS booking_advance_lifetime_count
								FROM
								`booking` JOIN `booking_invoice` ON booking.bkg_id = booking_invoice.biv_bkg_id
								WHERE booking.bkg_active = 1 AND booking.bkg_status IN ($status) AND booking_invoice.bkg_advance_amount > 0";
		$array['advance']	 = DBUtil::command($sql)->execute();
		return $array;
	}

	public function businesstrendCancellations()
	{
		$array							 = [];
		$array['lifetime']				 = DBUtil::command('SELECT COUNT(*) as lifetime  FROM `booking` WHERE booking.bkg_active=1 AND booking.bkg_status=9', DBUtil::SDB())->queryScalar();
		$array['lifetime_unverified']	 = DBUtil::command('SELECT COUNT(*) as lifetime  FROM `booking` WHERE booking.bkg_active=1 AND booking.bkg_status=10', DBUtil::SDB())->queryScalar();
		$yearfirstDate					 = date("Y-01-01");

		$array['ytd']			 = DBUtil::command("SELECT   count(*) FROM booking
									WHERE  booking.bkg_status = 9 and bkg_active=1 and bkg_create_date BETWEEN '$yearfirstDate 00:00:00' AND NOW() and
									exists( SELECT  booking.bkg_id FROM booking_log  WHERE blg_booking_id = booking.bkg_id AND booking_log.blg_event_id IN (3, 5, 25)
									and (blg_created BETWEEN '$yearfirstDate 00:00:00' AND NOW()) ORDER BY blg_created DESC LIMIT 1)", DBUtil::SDB())->queryScalar();
		$array['ytd_unverified'] = DBUtil::command("SELECT   count(*) FROM booking
									WHERE  booking.bkg_status = 10 and bkg_active=1 and bkg_create_date BETWEEN '$yearfirstDate 00:00:00' AND NOW() and
									exists( SELECT  booking.bkg_id FROM booking_log  WHERE blg_booking_id = booking.bkg_id AND booking_log.blg_event_id IN (3, 5, 25)
									and (blg_created BETWEEN '$yearfirstDate 00:00:00' AND NOW()) ORDER BY blg_created DESC LIMIT 1)", DBUtil::SDB())->queryScalar();

		$monthSub2StartDate	 = date('Y-m-d', strtotime("first day of -2 month"));
		$monthSub2EndDate	 = date('Y-m-d', strtotime("last day of -2 month"));

		$array['month-2'] = DBUtil::command("SELECT  count(*)  FROM `booking`
										WHERE  booking.bkg_status = 9 and bkg_active=1 and bkg_create_date BETWEEN '$monthSub2StartDate 00:00:00' AND '$monthSub2EndDate 23:59:59' and
										exists( SELECT  booking.bkg_id FROM booking_log  WHERE blg_booking_id = booking.bkg_id AND booking_log.blg_event_id IN (3, 5, 25)
										and (blg_created BETWEEN '$monthSub2StartDate 00:00:00' AND '$monthSub2EndDate 23:59:59') ORDER BY blg_created DESC LIMIT 1)", DBUtil::SDB())->queryScalar();

		$array['month-2_unverified'] = DBUtil::command("SELECT  count(*) FROM `booking`
										WHERE  booking.bkg_status = 10 and bkg_active=1 and bkg_create_date BETWEEN '$monthSub2StartDate 00:00:00' AND '$monthSub2EndDate 23:59:59' and
										exists( SELECT  booking.bkg_id FROM booking_log  WHERE blg_booking_id = booking.bkg_id AND booking_log.blg_event_id IN (3, 5, 25)
										and (blg_created BETWEEN '$monthSub2StartDate 00:00:00' AND '$monthSub2EndDate 23:59:59') ORDER BY blg_created DESC LIMIT 1)", DBUtil::SDB())->queryScalar();

		$monthSub1StartDate	 = date('Y-m-d', strtotime("first day of -1 month"));
		$monthSub1EndDate	 = date('Y-m-d', strtotime("last day of -1 month"));

		$array['month-1']			 = DBUtil::command("SELECT  count(*) FROM `booking`
										WHERE  booking.bkg_status = 9 and bkg_active=1 and bkg_create_date BETWEEN '$monthSub1StartDate 00:00:00' AND '$monthSub1EndDate 23:59:59' and
										exists( SELECT  booking.bkg_id FROM booking_log  WHERE blg_booking_id = booking.bkg_id AND booking_log.blg_event_id IN (3, 5, 25)
										and (blg_created BETWEEN '$monthSub1StartDate 00:00:00' AND '$monthSub1EndDate 23:59:59') ORDER BY blg_created DESC LIMIT 1)", DBUtil::SDB())->queryScalar();
		$array['month-1_unverified'] = DBUtil::command("SELECT  count(*) FROM `booking`
										WHERE  booking.bkg_status = 10 and bkg_active=1 and bkg_create_date BETWEEN '$monthSub1StartDate 00:00:00' AND '$monthSub1EndDate 23:59:59' and
										exists( SELECT  booking.bkg_id FROM booking_log  WHERE blg_booking_id = booking.bkg_id AND booking_log.blg_event_id IN (3, 5, 25)
										and (blg_created BETWEEN '$monthSub1StartDate 00:00:00' AND '$monthSub1EndDate 23:59:59') ORDER BY blg_created DESC LIMIT 1)", DBUtil::SDB())->queryScalar();

		$monthStartdate			 = date("Y-m-01");
		$array['mtd']			 = DBUtil::command("SELECT  count(*) FROM `booking`
								WHERE  booking.bkg_status = 9 and bkg_active=1 and bkg_create_date BETWEEN '$monthStartdate 00:00:00' AND NOW() and
								exists( SELECT  booking.bkg_id FROM booking_log  WHERE blg_booking_id = booking.bkg_id AND booking_log.blg_event_id IN (3, 5, 25)
								and (blg_created BETWEEN '$monthStartdate 00:00:00' AND NOW()) ORDER BY blg_created DESC LIMIT 1)", DBUtil::SDB())->queryScalar();
		$array['mtd_unverified'] = DBUtil::command("SELECT  count(*) FROM `booking`
								WHERE  booking.bkg_status = 10 and bkg_active=1 and bkg_create_date BETWEEN '$monthStartdate 00:00:00' AND NOW() and
								exists( SELECT  booking.bkg_id FROM booking_log  WHERE blg_booking_id = booking.bkg_id AND booking_log.blg_event_id IN (3, 5, 25)
								and (blg_created BETWEEN '$monthStartdate 00:00:00' AND NOW()) ORDER BY blg_created DESC LIMIT 1)", DBUtil::SDB())->queryScalar();

		return $array;
	}

	public function getRecordsForVendorReq($bkg_id = '')
	{
		if ($bkg_id != '')
		{
			$bkgCond = " AND bkg_id = $bkg_id ";
		}
		$query	 = "SELECT bkg_id,btr.bkg_vendor_request_cnt,bkg_pickup_date,bkg_create_date,count(bvr.bvr_id) countbvr,
	max(bvr_created_at) AS max_bvr_date, cln_pre_assignment ,
 TIMESTAMPDIFF( MINUTE, IFNULL(max(bvr_created_at), DATE_SUB(NOW(), INTERVAL 31 MINUTE)),NOW())AS max_bvr_date_diff,
 TIMESTAMPDIFF(MINUTE, IFNULL(min(bvr_created_at), NOW()), NOW()) AS min_bvr_date_diff,
		min(bvr_created_at) AS min_bvr_date,
		MAX(bkg_reconfirm_flag) AS reconfirm
	 FROM `booking` `t`
		INNER JOIN booking_trail btr ON btr.btr_bkg_id = `t`.bkg_id
		INNER JOIN booking_pref bpr ON bpr.bpr_bkg_id = `t`.bkg_id
		LEFT JOIN booking_vendor_request bvr ON bvr.bvr_bcb_id = `t`.bkg_bcb_id AND bvr_active = 1
		LEFT JOIN agents ON bkg_agent_id = agt_id AND agt_vendor_autoassign_flag = 1
		LEFT JOIN calendar cln ON  cln.cln_date = date(`t`.bkg_pickup_date)
	WHERE     bkg_status = 2
		AND bkg_flexxi_type NOT IN (1, 2)
		AND bpr.bkg_tentative_booking = 0
		AND bkg_pickup_date > NOW()
		AND (bkg_agent_id IS NULL OR agt_id IS NOT NULL)
	GROUP BY bkg_id
	HAVING    ((    TIMESTAMPDIFF(MINUTE, NOW(), bkg_pickup_date) < 360
		AND max_bvr_date_diff >= 30)
		OR (    (TIMESTAMPDIFF(MINUTE, NOW(), bkg_pickup_date) BETWEEN 360 AND 7200)
		AND (max(bvr_created_at) IS NULL OR max_bvr_date_diff >= 60))
		OR (    (   (TIMESTAMPDIFF(MINUTE, NOW(), bkg_pickup_date) BETWEEN 7200  AND 7250)
		OR (    reconfirm = 1
		AND DATE(bkg_pickup_date) BETWEEN '2017-09-28' AND '2017-09-30'))
		AND (max(bvr_created_at) IS NULL OR max_bvr_date_diff >= 120)) OR  cln_pre_assignment = 1) $bkgCond
	ORDER BY bkg_pickup_date ASC";
		$rows	 = Yii::app()->db1->createCommand($query)->queryAll();
		return $rows;
	}

	public function getRatingTrips($Type, $Id)
	{
// Type :: ( Vendor / Driver / Car )
		switch ($Type)
		{
			case 'vendor':

				$sql		 = "SELECT IFNULL(vrs_vnd_overall_rating,3.5) as avgRating FROM `vendors` INNER JOIN `vendor_stats` ON vrs_vnd_id=vnd_id WHERE vnd_id=" . $Id;
				$ratingRow	 = DBUtil::queryRow($sql);
				$sql		 = "SELECT COUNT(1) as trips FROM `booking_cab` bcb
                    INNER JOIN booking bkg ON bcb.bcb_id = bkg.bkg_bcb_id
						 WHERE  bkg.`bkg_status` IN (3,5,6,7) AND
						 bcb_active = 1 AND
						`bcb_vendor_id`='" . $Id . "'";
				$tripsRow	 = DBUtil::queryRow($sql);
				break;
			case 'driver':
				$sql		 = "SELECT IFNULL(drv_overall_rating,3.5) as avgRating FROM `drivers` WHERE drv_id=" . $Id;
				$ratingRow	 = DBUtil::queryRow($sql);
				$sql		 = "SELECT COUNT(1) as trips FROM `booking_cab`bcb
						 INNER JOIN booking bkg ON bcb.bcb_id = bkg.bkg_bcb_id
						 WHERE  bkg.`bkg_status` IN (3,5,6,7) AND  bcb_active = 1 AND
						`bcb_driver_id`='" . $Id . "'";
				$tripsRow	 = DBUtil::queryRow($sql);
				break;
			case 'car':
				$sql		 = "SELECT IFNULL(vhc_overall_rating,3.5) as avgRating,vhc_number as cabnum  FROM `vehicles` WHERE vhc_id=" . $Id;
				$ratingRow	 = DBUtil::queryRow($sql);
				$sql		 = "SELECT COUNT(1) as trips FROM `booking_cab` bcb
						INNER JOIN booking bkg ON bcb.bcb_id = bkg.bkg_bcb_id
						WHERE  bkg.`bkg_status` IN (3,5,6,7) AND bcb_active = 1 AND
						`bcb_cab_id`='" . $Id . "'";
				$tripsRow	 = DBUtil::queryRow($sql);
				break;
		}
		return $data = array(
			'rating' => $ratingRow['avgRating'],
			'trips'	 => $tripsRow['trips'],
			'number' => $ratingRow['cabnum']
		);
	}

	public function getByCode($code)
	{
		$criteria	 = new CDbCriteria();
		$criteria->compare('bkg_booking_id', $code);
		$model		 = $this->find($criteria);
		return $model;
	}

	public function getCodeById($bkgid)
	{
		$code = DBUtil::command("SELECT bkg_booking_id FROM `booking` where bkg_id = " . $bkgid)->queryScalar();
		return $code;
	}

	public function getCodeByBcbId($bkgBcbId, $bkgid)
	{
		$code = DBUtil::command("SELECT GROUP_CONCAT(bkg_booking_id) FROM `booking` WHERE bkg_bcb_id=$bkgBcbId AND bkg_status IN(1,2,3,5,6,7,8,9,13) AND bkg_id<>$bkgid GROUP BY bkg_bcb_id")->queryScalar();
		return $code;
	}

	public function sendVendorAutoRequest($bkg_id = '')
	{
		$models = Booking::model()->getRecordsForVendorReq($bkg_id);
		Logger::create("Total Count: " . count($models), CLogger::LEVEL_TRACE);
		foreach ($models as $model)
		{
			$cnt = $model['bkg_vendor_request_cnt'];
			Logger::create("Booking ID: {$model['bkg_id']} (Step: {$cnt})" . count($models), CLogger::LEVEL_TRACE);
			if ($cnt == 0)
			{
				BookingVendorRequest::model()->stepRequest($model['bkg_id'], '100');
			}
			elseif ($cnt == 1)
			{
				BookingVendorRequest::model()->stepRequest($model['bkg_id'], '200');
			}
			elseif ($cnt >= 2)
			{
				BookingVendorRequest::model()->stepRequest($model['bkg_id']);
			}
		}
	}

	public function getPickupInfoVehicles($hours = 96)
	{
		$status	 = 5;
		$sql	 = "SELECT
				booking.bkg_id,
				booking.bkg_booking_id,
				booking.bkg_status,
				booking.bkg_pickup_date,
				GROUP_CONCAT(booking_log.blg_event_id) AS blg_event_ids,
				(
					CASE WHEN(
						FIND_IN_SET(
							'74',
							GROUP_CONCAT(booking_log.blg_event_id)
						)
					) THEN 'Reconfirmed' WHEN(
						FIND_IN_SET(
							'75',
							GROUP_CONCAT(booking_log.blg_event_id)
						)
					) THEN 'Reseheduled' WHEN(booking.bkg_status IN('9')) THEN 'Canceled' ELSE 'No Response Yet'
				END
				) AS reconfirm_status,
				IF(
					vehicle_docs.vhd_id>0,
					'YES',
					'NO'
				) AS is_commercial,
				vehicle_docs.vhd_id,
				drivers.drv_approved,
                vehicles.vhc_approved
				FROM `booking`
				INNER JOIN `booking_cab` ON booking_cab.bcb_id=booking.bkg_bcb_id AND booking_cab.bcb_active=1 AND booking.bkg_active=1
				JOIN `vehicles` ON vehicles.vhc_id=booking_cab.bcb_cab_id AND vehicles.vhc_active=1
				JOIN `drivers` ON drivers.drv_id=booking_cab.bcb_driver_id AND drivers.drv_active=1
				JOIN `booking_log` ON booking_log.blg_booking_id = booking.bkg_id
				LEFT JOIN `vehicle_docs` ON vehicle_docs.vhd_vhc_id=vehicles.vhc_id AND vehicle_docs.vhd_active=1 AND vehicle_docs.vhd_status=1 AND vehicle_docs.vhd_type=5
				WHERE booking.bkg_pickup_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL 96 HOUR)
				AND booking.bkg_status IN (5) AND vhd_id IS NULL
				AND (drivers.drv_approved <> 1 OR vehicles.vhc_approved<>1)
				GROUP BY
					booking.bkg_id
				ORDER BY
					booking.bkg_pickup_date ASC";
		return DBUtil::queryAll($sql);
	}

	public function getPickupInfoNext($hours = 96)
	{
		$status		 = [2, 3, 5, 6];
		$status		 = implode(',', $status);
		$sql		 = "SELECT booking.bkg_id,booking.bkg_booking_id,booking.bkg_status,booking.bkg_pickup_date,GROUP_CONCAT(booking_log.blg_event_id) as blg_event_ids,
                (
                    CASE WHEN (find_in_set('74',GROUP_CONCAT(booking_log.blg_event_id)))
                        THEN
                      'Reconfirmed'
                        WHEN (find_in_set('75',GROUP_CONCAT(booking_log.blg_event_id)))
                        THEN
                      'Reseheduled'
                    WHEN (booking.bkg_status IN ('9'))
                        THEN
                      'Canceled'
                    ELSE
                      'No Response Yet'
                    END
                ) as reconfirm_status
                FROM `booking`
                JOIN booking_log ON booking_log.blg_booking_id=booking.bkg_id
                WHERE booking.bkg_pickup_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL $hours HOUR)
                AND booking.bkg_status IN ($status) GROUP BY booking.bkg_id
                ORDER BY booking.bkg_pickup_date";
		$recordSet	 = DBUtil::queryAll($sql);
		return $recordSet;
	}

	public function getBookingRelationalDetails($bid)
	{
		$criteria		 = new CDbCriteria();
		$criteria->compare('bkg_id', $bid);
		$criteria->with	 = ['bookingRoutes', 'bkgAgent']; //,'bkgVehicleType'=>['resetScope'=>true]
		return $this->find($criteria);
	}

	public function getBookingCabModel()
	{
// return $this->bookingCabs[0];
		return $this->bkgBcb;
	}

	public function getBkgCabModel()
	{
		if ($this->bkg_bcb_id)
		{
			$cabModel = BookingCab::model()->findByPk($this->bkg_bcb_id);
			return $cabModel;
		}
		return false;
	}

	public function getBkgCabModelbyBkgId($bkgid)
	{
//$bkgid=$this->bkg_id;
		$model = Booking::model()->findByPk($bkgid);
		if ($model->bkg_bcb_id)
		{
			$cabModel = BookingCab::model()->findByPk($model->bkg_bcb_id);
			return $cabModel;
		}
		return false;
	}

//obsolute

	public function getPickupDiffinMinutes()
	{
		$bkg_id		 = $this->bkg_id;
		$sql		 = "SELECT TIMESTAMPDIFF(MINUTE,NOW(),bkg_pickup_date) as diff FROM `booking` WHERE bkg_id = " . $bkg_id;
		$pickupdiff	 = DBUtil::command($sql)->queryScalar();
		return $pickupdiff;
	}

	public function getCashbackTimeValidation()
	{
		$bkg_id		 = $this->bkg_id;
		$sql		 = "SELECT IF(bkg_pickup_date>NOW(),1,0) as isCashBack FROM `booking` WHERE bkg_id = " . $bkg_id;
		$pickupdiff	 = DBUtil::command($sql)->queryScalar();
		return $pickupdiff;
	}

	public function getPaymentExpiryTimeinMinutes()
	{
		if ((date($this->bkgTrail->bkg_quote_expire_date) < date('Y-m-d H:i:s')) && $this->bkg_status == 1)
		{
			return 0;
		}
//		else if (Yii::app()->params['covidFlag'] == 1)
//		{
//			return 10;
//		}
		$bkg_id	 = $this->bkg_id;
//$sql     = "SELECT TIMESTAMPDIFF(MINUTE,NOW(),bkg_payment_expiry_time) as diff FROM `booking` WHERE bkg_id = " . $bkg_id;
		$sql	 = "SELECT TIMESTAMPDIFF(MINUTE,NOW(),bkt.bkg_payment_expiry_time) as diff FROM `booking` as bk INNER JOIN `booking_trail` as bkt ON bk.`bkg_id` = bkt.`btr_bkg_id`  WHERE bk.bkg_id = " . $bkg_id;
		$expdiff = DBUtil::command($sql)->queryScalar();
		return $expdiff;
	}

	public function fetchList($pageSize = 100, $type = 'data', $csrId = 0, $count, $bid = null, $userId = null, $source = '')
	{
		$sort	 = "bkg_pickup_date";
		$order	 = [1 => 'DESC', 2 => 'ASC', 3 => 'ASC', 5 => 'DESC', 6 => 'ASC', 7 => 'ASC'];
		switch ($this->bkg_status)
		{
			case 1:
				$defaultOrder	 = "flagCSR DESC, immediatePickup DESC, bkg_create_date DESC, bkg_pickup_date ASC";
				break;
			case 2:
				$defaultOrder	 = "flagCSRAssign DESC, bkg_critical_score DESC,bkg_manual_assignment DESC, bkg_pickup_date ASC";
				break;
			default:
				$defaultOrder	 = ($order[$this->bkg_status] == '') ? 'bkg_create_date DESC, bkg_pickup_date DESC' : $sort . ' ' . $order[$this->bkg_status] . "";
				break;
		}

		if (in_array($bid, [10, 20, 40]))
		{
			if ($bid == 10)
			{
				$bkgStatus = "2,3,5";
			}
			elseif ($bid == 20)
			{
				$bkgStatus = "1,15";
			}
			elseif ($bid == 40)
			{
				$bkgStatus = "6,7,9";
			}
			$sql = $this->getListQuery($csrId, 1, $bkgStatus, $userId, $source);
		}
		else
		{
			$sql = $this->getListQuery($csrId, 1);
		}

		$maxTimePrefix = "SET STATEMENT max_statement_time=10 FOR ";
		if ($type == 'data')
		{
			if ($count === null)
			{
				$count = DBUtil::command($maxTimePrefix . "SELECT COUNT(*) FROM ($sql) abc")->queryScalar();
			}
			$dataprovider = new CSqlDataProvider($maxTimePrefix . $sql, [
				'totalItemCount' => $count,
				'sort'			 =>
				['attributes'	 =>
					['bkg_user_fname', 'bkg_booking_id', 'from_city_name',
						'to_city_name', 'bkg_total_amount', 'bkg_create_date', 'bkg_pickup_date',
						'bkg_return_date'],
					'defaultOrder'	 => $defaultOrder],
				'pagination'	 => ['pageSize' => $pageSize],
			]);
			return $dataprovider;
		}
		elseif ($type == 'command')
		{
			return DBUtil::command($maxTimePrefix . $sql)->queryAll();
		}
	}

	public function getStatusCount($csrId = 0, $strStatus = null, $userID = null, $source = '')
	{
		$sql	 = $this->getListQuery($csrId, 2, $strStatus, $userID, $source);
		$rows	 = DBUtil::command("SET STATEMENT max_statement_time=10 FOR " . $sql)->queryAll();
		$arr	 = [];
		foreach ($rows as $row)
		{
			$arr[$row['bkg_status']] = $row['count'];
		}
		return $arr;
	}

	public function getListQuery($csrId = 0, $type = 1, $strStatus = null, $userID = null, $source = '')
	{
		$isB2cbookings	 = $isB2b0bookings	 = false;
		$criteriaMain	 = "";

		$criteria = " AND bkg_status IN (1, 2, 3, 5, 6, 7, 9, 13, 15) ";
		if ($userID != '')
		{
			$criteria .= " AND bkg_user_id=" . $userID;
		}

		if (Yii::app()->controller->module->id == 'rcsr')
		{
			$criteria .= " AND bkg_admin_id= $csrId";
		}
		if ($this->bkg_id != '')
		{
			$criteria .= " AND bkg_id='{$this->bkg_id}'";
		}
		if ($this->ids != '')
		{
			$criteria .= " AND bkg_id IN ({$this->ids})";
		}
		if ($strStatus != '' && $strStatus != null)
		{
			$criteria	 .= $statusQry	 = " AND bkg_status IN (" . $strStatus . ")";
		}
		else
		{
			if (array_key_exists($this->bkg_status, $this->getBookingStatus()))
			{
				$criteria	 .= $statusQry	 = " AND bkg_status=" . $this->bkg_status;
			}
		}
		if ($strStatus != '' && $strStatus != null && $userID > 0)
		{
			$criteria	 .= $statusQry	 = " AND bkg_status IN (" . $strStatus . ") AND bkg_user_id =" . $userID;
		}

		if ($this->bkg_create_date1 != "" && $this->bkg_create_date2 != "")
		{
			$criteria .= " AND (bkg_create_date BETWEEN '{$this->bkg_create_date1} 00:00:00' AND '{$this->bkg_create_date2} 23:59:59' )";
		}
		if ($this->bkg_create_date != "")
		{
			$criteria .= "AND (bkg_create_date BETWEEN '{$this->bkg_create_date} 00:00:00' AND '{$this->bkg_create_date} 23:59:59' )";
		}
		if ($this->bkg_pickup_date != "")
		{
			$criteria .= "AND (bkg_pickup_date BETWEEN '{$this->bkg_pickup_date} 00:00:00' AND '{$this->bkg_pickup_date} 23:59:59')";
		}
		if ($this->bkg_pickup_date1 != "" && $this->bkg_pickup_date2 != "")
		{
			$criteria .= " AND (bkg_pickup_date BETWEEN '{$this->bkg_pickup_date1} 00:00:00' AND '{$this->bkg_pickup_date2} 23:59:59' )";
		}

		if ($this->bkg_pickup_date1 == "" && $this->bkg_pickup_date == "" && $this->bkg_create_date1 == "" && $this->bkg_create_date == "")
		{
			$criteria .= " AND bkg_pickup_date >= (DATE_SUB(NOW(), INTERVAL 1 MONTH))";
		}
		if ($source == 'mycall')
		{
			$criteria .= " AND bkg_pickup_date > NOW()";
			if ($csrId > 0)
			{
// problem part start
				$criteria .= " AND bkg_assign_csr = $csrId";
// problem part ends
			}
		}
		if ($this->trip_id != "")
		{
			$criteria .= " AND (  bkg_booking_id LIKE '%$this->trip_id%' OR  bkg_bcb_id LIKE '%$this->trip_id%'  OR bkg_agent_ref_code LIKE '%$this->trip_id%' ) ";
		}
		if ($this->bkg_user_email1 != "")
		{
			$criteria .= " AND (  bkg_user_email LIKE  '%$this->bkg_user_email1%' ) ";
		}

		if ($this->bkg_contact_no1 != "")
		{
			$criteria .= " AND (  bkg_contact_no LIKE  '%$this->bkg_contact_no1%' OR  bkg_alt_contact_no LIKE  '%$this->bkg_contact_no1%' OR  bcb_driver_phone LIKE  '%$this->bkg_contact_no1%'   )";
		}

		if ($this->bkg_name != "")
		{
			$criteria .= " AND ( bkg_user_fname LIKE  '%$this->bkg_name%' OR  bkg_user_lname LIKE  '%$this->bkg_name%' )";
		}
		if (sizeof($this->bkgtypes) > 0)
		{
			if (in_array(3, $this->bkgtypes))
			{
				array_push($this->bkgtypes, '2');
			}
			$bkgtypes = implode(',', $this->bkgtypes);
			if (in_array(6, $this->bkgtypes))
			{
				$index				 = array_search(6, $this->bkgtypes);
				$bkgTypesArr		 = $this->bkgtypes;
				$bkgTypesArr[$index] = 1;
				$bkgtypes			 = implode(',', $bkgTypesArr);
				if (sizeof($this->bkgtypes) == 1)
				{
					$criteria .= " AND bkg_flexxi_type IN(1,2)";
				}
			}

			$criteriaMain .= " AND (bkg_booking_type IN ($bkgtypes))";
		}

		if (sizeof($this->b2cbookings) > 0)
		{
			$b2cbookings = implode(',', $this->b2cbookings);
			if ($b2cbookings && 1)
			{
				$isB2cbookings = true;
			}
		}

		if (sizeof($this->bkg_is_corporate) > 0)
		{
			$corporateBookings = implode(',', $this->bkg_is_corporate);
			if ($corporateBookings && 1)
			{
				$corporateBookings = true;
			}
		}

		if ($corporateBookings == true)
		{
			$criteriaMain .= " AND bkgPref.bkg_is_corporate = 1";
		}

//		if (count($this->b2btfrbookings) > 0)
//		{
//			$tfrBookings = implode(',', $this->b2btfrbookings);
//			if ($tfrBookings && 1)
//			{
//				$tfrBookings = true;
//			}
//		}
//		if ($tfrBookings == true)
//		{
//			$criteriaMain .= " AND bkgPref.bkg_is_fbg_type = 1";
//		}
		$criteriaTfrExclude = " AND bkgPref.bkg_is_fbg_type = 0";
		if (sizeof($this->incB2Btfrbookings) > 0)
		{
			$incTfrBookings = implode(',', $this->incB2Btfrbookings);
			if ($incTfrBookings && 1)
			{
				$criteriaTfrExclude = '';
			}
		}
		$criteriaMain .= $criteriaTfrExclude;

		if (sizeof($this->b2b0bookings) > 0)
		{
			$b2b0bookings = implode(',', $this->b2b0bookings);
			if ($b2b0bookings && 1)
			{
				$isB2b0bookings = true;
			}
		}

		if ($isB2cbookings == true && $isB2b0bookings == true)
		{
			$criteriaMain .= " AND ((bkg_agent_id = 0 || bkg_agent_id IS NULL || bkg_agent_id = '') OR (bkg_agent_id > 0 AND bkg_agent_id NOT IN (450, 18190)))";
		}
		else
		{
			if ($isB2cbookings == true)
			{
				$criteriaMain .= " AND (bkg_agent_id = 0 || bkg_agent_id IS NULL || bkg_agent_id = '')";
			}
			elseif ($isB2b0bookings == true)
			{
				$criteriaMain .= " AND (bkg_agent_id > 0 AND bkg_agent_id NOT IN (450, 18190))";
			}
		}
		if ($this->fromcity > 0)
		{
			$criteriaMain .= " AND (bkg_from_city_id IN ($this->fromcity))";
		}
		if ($this->tocity > 0)
		{
			$criteriaMain .= " AND (bkg_route_city_ids IN ($this->tocity) )";
		}
		if (count($this->sourcezone) > 0)
		{
			$szone			 = implode(',', $this->sourcezone);
			$sourceCities	 = ZoneCities::getCitiesByZones($szone);
			$criteria		 .= " AND (bkg_from_city_id IN ($sourceCities)) ";
		}

		if (count($this->destinationzone) > 0)
		{
			$dzone		 = implode(',', $this->destinationzone);
			$destCities	 = ZoneCities::getCitiesByZones($dzone);
			$criteria	 .= " AND (bkg_to_city_id IN ($destCities)) ";
		}
		if ($this->bkgUserInfo->bkg_user_id != "")
		{
			$criteria .= " AND booking_user.bkg_user_id='{$this->bkgUserInfo->bkg_user_id}'";
		}
		if ($this->bkg_agent_id != "")
		{
			$criteria .= " AND bkg_agent_id='{$this->bkg_agent_id}'";
		}
		if ($this->bkg_qr_id != "")
		{
			$criteria .= " AND bkg_qr_id='{$this->bkg_qr_id}'";
		}
		if ($this->corporate_id != "")
		{
			$criteria .= " AND bkg_agent_id='{$this->corporate_id}'";
		}
		if ($this->bcb_vendor_id != "")
		{
			$criteria .= " AND booking_cab.bcb_vendor_id ='{$this->bcb_vendor_id}'";
		}
		if ($this->bcb_driver_id != "")
		{
			$criteria .= " AND booking_cab.bcb_driver_id ='{$this->bcb_driver_id}'";
		}
		if (count($this->bkg_service_class) > 0)
		{
			$svcType	 = implode(",", $this->bkg_service_class);
			$criteria	 .= " AND scv.scv_scc_id IN ($svcType)";
		}
		if (count($this->bkg_vehicle_type_id) > 0)
		{
			$vtype		 = implode(",", $this->bkg_vehicle_type_id); //Added the code block
			$criteria	 .= " AND (scv_id IN ($vtype) OR scv_parent_id IN ($vtype))";
		}
		if ($this->bkg_flag_source != "")
		{
			switch ($this->bkg_flag_source)
			{
				case 101:
					$criteria			 .= " AND bkg_tentative_booking=1 AND bkg_status IN (2,3,5)";
					break;
				case 1011:
					$criteria			 .= " AND bkg_tentative_booking=1 AND bkg_status IN (2,3,5,6,7,9)";
					break;
				case 102:
					$criteria			 .= " AND bkg_followup_active=1";
					break;
				case 103:
					$criteria			 .= " AND bkg_reconfirm_flag=1 AND bkg_status IN (2,3,5)";
					break;
				case 104:
					$criteria			 .= " AND bkg_reconfirm_flag=0 AND bkg_status IN (2,3,5)";
					break;
				case 105:
					$criteria			 .= " AND booking_track.bkg_is_no_show=1 AND bkg_status IN (2,3,5,6,7,9)";
					break;
				case 106:
					$criteria			 .= " AND bkg_non_profit_flag=1 AND bkg_status IN (1,2,3,5,6,7,9,15)";
					break;
				case 107:
					$criteria			 .= " AND (bkg_quoted_vendor_amount < bkg_vendor_amount) AND bkg_status IN (2,3,5,6,7,9)";
					break;
				case 108:
					$criteria			 .= " AND bkg_account_flag=1 AND bkg_status IN (2,3,5,6,7,9)";
					break;
				case 109:
					$criteria			 .= " AND bkg_manual_assignment=1 AND bkg_status IN (2)";
					break;
				case 110:
					$criteria			 .= " AND vehicles.vhc_approved<>1 AND bkg_status IN (5,6,7)";
					break;
				case 111:
					$criteria			 .= " AND drivers.drv_approved<>1 AND bkg_status IN (5,6,7)";
					break;
				case 112:
					$criteria			 .= " AND booking_invoice.bkg_promo1_code='FLATRE1' AND bkg_status IN (1,2,3,5,6,7,9,15)";
					break;
				case 113:
					$criteria			 .= " AND bkgPref.bpr_assignment_level IN(2,3) AND bkg_status IN (2)";
					break;
				case 114:
					$criteria			 .= " AND booking_invoice.bkg_promo1_code='FLATRE199' AND bkg_status IN (1,2,3,5,6,7,9,15)";
					break;
				case 115:
					$criteria			 .= " AND booking_trail.btr_api_sync_error=1";
					break;
				case 116:
					$criteria			 .= " AND bkg_qr_id > 0";
					break;
				case 120:
					$criteria			 .= " AND booking_add_info.bkg_info_source=7";
					break;
				case 121:
					$criteria			 .= " AND booking_add_info.bkg_info_source=21";
					break;
				case 130:
					$criteria			 .= " AND booking_trail.btr_is_dbo_applicable=1";
					break;
				case 250:
					$this->bkg_source	 = 250;
					break;
				case 251:
					$this->bkg_source	 = 251;
					break;
				case 117:
					$criteria			 .= " AND booking_trail.bkg_create_user_type=1 AND booking_trail.bkg_confirm_user_type=1";
					break;
			}
		}
		if (in_array(4, $this->bkg_region))
		{
			$this->bkg_region[] = 7;
		}
		$regions	 = implode(',', $this->bkg_region);
		$regionJoin	 = '';
		if ($regions != '')
		{
			$regionJoin	 .= " JOIN cities fcty ON fcty.cty_id = bkg_from_city_id
							JOIN states fstt ON fcty.cty_state_id=fstt.stt_id
									AND fcty.cty_active=1 AND fstt.stt_active='1'";
			$criteria	 .= " AND fstt.stt_zone IN ($regions)";
		}
		$states = implode(",", $this->bkg_state);
		if ($regionJoin == "" && $states != "")
		{
			$regionJoin .= " JOIN cities fcty ON fcty.cty_id = bkg_from_city_id
							JOIN states fstt ON fcty.cty_state_id=fstt.stt_id
									AND fcty.cty_active=1 AND fstt.stt_active='1'";
		}
		if ($states != "")
		{
			$criteria .= " AND fstt.stt_id IN(" . $states . ")";
		}

		$userContactJoin = "";
		if (is_array($this->userCategories) && count($this->userCategories) > 0)
		{
			$userCategory	 = implode(",", $this->userCategories);
			$userContactJoin .= " INNER JOIN contact_profile cp ON cp.cr_is_consumer = booking_user.bkg_user_id AND cp.cr_status = 1 
								INNER JOIN contact_pref cpf ON cpf.cpr_ctt_id = cp.cr_contact_id AND cpf.cpr_category IN ({$userCategory}) ";
		}

		if (count($this->sourcezone) > 0)
		{
			$szone			 = implode(',', $this->sourcezone);
			$sourceCities	 = ZoneCities::getCitiesByZones($szone);
			$criteria		 .= " AND (bkg_from_city_id IN ($sourceCities)) ";
		}

		if (count($this->destinationzone) > 0)
		{
			$dzone		 = implode(',', $this->destinationzone);
			$destCities	 = ZoneCities::getCitiesByZones($dzone);
			$criteria	 .= " AND (bkg_to_city_id IN ($destCities)) ";
		}
		$havingGrp = '';
		if ($this->bkg_source != '')
		{
			switch ($this->bkg_source)
			{
				case 201:
					$sqlInner				 = "SELECT GROUP_CONCAT(DISTINCT booking.bkg_id)
										FROM `booking_cab`
										INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id AND booking.bkg_status=2
										WHERE 1 AND booking_cab.bcb_driver_id IS NULL
										AND booking.bkg_pickup_date BETWEEN NOW() AND DATE_ADD(NOW(),INTERVAL 36 HOUR)";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 202:
					$criteria				 .= " AND booking.bkg_status=2 AND booking.bkg_pickup_date BETWEEN NOW() AND  DATE_ADD(NOW(),INTERVAL 48 HOUR)";
					break;
				case 203:
					$sqlInner				 = " SELECT GROUP_CONCAT(DISTINCT booking.bkg_id)
                                    FROM `booking_cab`
                                    INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id AND booking.bkg_active=1
                                    INNER JOIN `vendors` ON vendors.vnd_id=booking_cab.bcb_vendor_id
									INNER JOIN vendor_stats ON vendor_stats.vrs_vnd_id=vendors.vnd_id
                                    WHERE 1 AND booking.bkg_status IN (2,3,5)
                                    AND booking_cab.bcb_active=1
                                    AND booking_cab.bcb_vendor_id IS NOT NULL
                                    AND vendor_stats.vrs_vnd_overall_rating <= 3";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 204:
					$sqlInner				 = "SELECT GROUP_CONCAT(DISTINCT booking.bkg_id)
                                    FROM `booking_cab`
                                    INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id AND booking.bkg_active=1
                                    INNER JOIN `drivers` ON drivers.drv_id=booking_cab.bcb_driver_id
                                    WHERE 1 AND booking.bkg_status IN (2,3,5) AND booking_cab.bcb_active=1
                                    AND booking_cab.bcb_vendor_id IS NOT NULL
                                    AND booking_cab.bcb_driver_id IS NOT NULL
                                    AND drivers.drv_overall_rating<=3";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 205:
					$criteria				 .= " AND bkgPref.bkg_account_flag=1 AND booking.bkg_status IN(1, 2, 3, 5, 6, 7, 9, 15)";
					break;
				case 206:
					$criteria				 .= " AND booking.bkg_status=1 AND booking.bkg_pickup_date BETWEEN NOW() AND DATE_ADD(NOW(),INTERVAL 90 DAY)";
					break;
				case 207:
					$sqlInner				 = " SELECT GROUP_CONCAT(DISTINCT booking.bkg_id)
												FROM `booking_cab`
												INNER JOIN `booking` ON booking.bkg_bcb_id = booking_cab.bcb_id AND booking.bkg_active = 1 AND booking.bkg_status IN (2, 3, 5)
												INNER JOIN `vehicles` ON vehicles.vhc_id = booking_cab.bcb_cab_id AND vehicles.vhc_active = 1
												WHERE booking_cab.bcb_active = 1 AND vehicles.vhc_approved <> 1";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 208:
					$sqlInner				 = "SELECT GROUP_CONCAT(DISTINCT booking.bkg_id)
											FROM `booking_cab`
											INNER JOIN `booking` ON booking.bkg_bcb_id = booking_cab.bcb_id AND booking.bkg_active = 1 AND booking.bkg_status IN(2, 3, 5)
											INNER JOIN `drivers` ON drivers.drv_id = booking_cab.bcb_driver_id AND drivers.drv_active = 1
											WHERE booking_cab.bcb_active = 1 AND drivers.drv_approved <> 1";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 209:
					$criteria				 .= " AND booking_trail.bkg_escalation_status=1";
					break;
				case 215:
					$sqlInner				 = " SELECT GROUP_CONCAT(DISTINCT booking.bkg_id) FROM `booking_cab`
                                        INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id AND booking.bkg_active=1
                                        WHERE booking_cab.bcb_cab_id IN (
                                            SELECT vhc_id FROM (
                                                SELECT vehicles.vhc_id, round((
                                                    sum(IFNULL(vehicles.vhc_insurance_proof,0)) +
                                                    sum(IFNULL(vehicles.vhc_ver_fitness,0)) +
                                                    sum(IFNULL(vehicles.vhc_ver_front_license,0)) +
                                                    sum(IFNULL(vehicles.vhc_ver_rear_license,0)) +
                                                    sum(IFNULL(vehicles.vhc_ver_license_commercial,0)) +
                                                    sum(IFNULL(vehicles.vhc_fitness_certificate,0)) +
                                                    sum(IFNULL(vehicles.vhc_pollution_certificate,0)) +
                                                    sum(IFNULL(vehicles.vhc_permits_certificate,0))
                                                )) as totalDocs
                                                FROM `vehicles` WHERE vehicles.vhc_is_commercial=0
                                                GROUP BY vehicles.vhc_id
                                                HAVING  totalDocs < 2
                                             )vhc
                                        ) AND booking.bkg_pickup_date BETWEEN NOW() AND  DATE_ADD(NOW(),INTERVAL 48 HOUR)";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 216:
					$sqlInner				 = " SELECT GROUP_CONCAT(DISTINCT booking.bkg_id) FROM `booking_cab`
                                    INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id AND booking.bkg_active=1
                                    WHERE booking_cab.bcb_cab_id IN (
                                        SELECT vhc_id FROM (
                                            SELECT vehicles.vhc_id, round((
                                                sum(IFNULL(vehicles.vhc_insurance_proof,0)) +
                                                sum(IFNULL(vehicles.vhc_ver_fitness,0)) +
                                                sum(IFNULL(vehicles.vhc_ver_front_license,0)) +
                                                sum(IFNULL(vehicles.vhc_ver_rear_license,0)) +
                                                sum(IFNULL(vehicles.vhc_ver_license_commercial,0)) +
                                                sum(IFNULL(vehicles.vhc_fitness_certificate,0)) +
                                                sum(IFNULL(vehicles.vhc_pollution_certificate,0)) +
                                                sum(IFNULL(vehicles.vhc_permits_certificate,0))
                                            )) as totalDocs
                                            FROM `vehicles` WHERE vehicles.vhc_approved<>1
                                            AND vehicles.vhc_is_commercial=1
                                            GROUP BY vehicles.vhc_id
                                            HAVING  totalDocs < 2
                                        )vhc
                                    ) AND booking.bkg_pickup_date BETWEEN NOW() AND  DATE_ADD(NOW(),INTERVAL 48 HOUR)";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 217:
					$sqlInner				 = "SELECT GROUP_CONCAT(DISTINCT booking.bkg_id)
												FROM `booking_cab`
												INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id AND booking.bkg_status=2
												WHERE booking_cab.bcb_driver_id IS NULL
												AND booking.bkg_create_date < DATE_SUB(NOW(),INTERVAL 48 HOUR)";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 218:
					$sqlInner				 = " SELECT GROUP_CONCAT(DISTINCT (booking.bkg_id))
                                        FROM `booking_cab`
                                        INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id
                                        AND booking.bkg_active=1
                                        AND booking.bkg_status IN (2)
                                        WHERE booking_cab.bcb_active=1
                                        AND booking_cab.bcb_id IN (
                                                    SELECT DISTINCT booking_vendor_request.bvr_bcb_id
                                                    FROM `booking_vendor_request`
                                                    WHERE booking_vendor_request.bvr_accepted=0
                                                    AND booking_vendor_request.bvr_created_at > DATE_SUB(NOW(),INTERVAL 24 HOUR)
                                                    GROUP BY booking_vendor_request.bvr_booking_id
                                                )";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 219:
					$sqlInner				 = "SELECT GROUP_CONCAT(DISTINCT booking.bkg_id)
												FROM `booking_cab`
												INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id AND booking.bkg_active=1
												INNER JOIN `booking_invoice` biv ON biv.biv_bkg_id=booking.bkg_id
												WHERE booking_cab.bcb_active=1	AND (booking.bkg_reconfirm_flag=0 OR booking.bkg_reconfirm_flag IS NULL)
												AND booking.bkg_pickup_date BETWEEN NOW() AND  DATE_ADD(NOW(),INTERVAL 36 HOUR) AND biv.bkg_advance_amount <= 0 AND booking.bkg_status IN (2,3,5)";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 220:
					$this->bkg_flag_source	 = 106;
					$sqlInner				 = "SELECT  GROUP_CONCAT(DISTINCT booking.bkg_id)
												FROM `booking`
												INNER JOIN `booking_trail` ON booking.bkg_id = booking_trail.btr_bkg_id
														AND booking_trail.bkg_non_profit_flag = 1
												WHERE	(booking.bkg_pickup_date > DATE_SUB(NOW(), INTERVAL 2 WEEK))
														AND bkg_status IN (15, 2, 3, 5, 6, 7)";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 221:
					$sqlInner				 = " SELECT GROUP_CONCAT(DISTINCT booking.bkg_id) FROM `booking`
												WHERE booking.bkg_bcb_id IN(
													SELECT bcb_id FROM
													(
														SELECT booking_cab.bcb_id,booking_cab.bcb_vendor_amount as bcb_vendor_amt,GROUP_CONCAT(booking.bkg_id) , SUM(booking_invoice.bkg_vendor_amount) as bkg_vendor_amount
														FROM `booking_cab`
														INNER JOIN `booking` ON booking.bkg_bcb_id=booking_cab.bcb_id AND booking.bkg_active=1 AND booking.bkg_status IN (2,3,5,6,7)
														INNER JOIN booking_invoice ON booking.bkg_id=booking_invoice.biv_bkg_id
														WHERE booking_cab.bcb_active=1 AND (booking.bkg_pickup_date) > CURDATE()
														GROUP BY booking_cab.bcb_id
														HAVING (bcb_vendor_amt>bkg_vendor_amount)
													)a
												)";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND booking.bkg_id IN ($bkgIdInner) ";
					break;
				case 224:
					$criteria				 .= " AND bkgPref.bpr_assignment_level IN(2,3) AND booking.bkg_status=2";
					break;

				case 225:
					$criteria .= " AND booking.bkg_status IN (2)  AND bkgPref.bkg_manual_assignment=1 AND bkgPref.bkg_critical_assignment=0 ";
					break;

				case 226:
					$criteria				 .= " AND booking.bkg_status IN (2)  AND bkgPref.bkg_critical_assignment=1";
					break;
				case 227:
					$criteria				 .= " AND booking.bkg_status IN (2,3,5,6,7)  AND (booking_track.bkg_sos_sms_trigger = 2 OR booking_track.bkg_drv_sos_sms_trigger = 2)";
					break;
				case 228:
					$criteria				 .= " AND booking.bkg_status =2  AND booking_trail.btr_is_dem_sup_misfire=1 AND  bkg_reconfirm_flag=1 AND booking.bkg_pickup_date > NOW()";
					break;
				case 229:
					$criteria				 = " AND booking.bkg_status IN (2,3) AND booking.bkg_pickup_date < NOW()";
					break;
				case 230:
					$criteria				 = " AND booking.bkg_status = 5 AND DATE_ADD(booking.bkg_pickup_date,INTERVAL booking.bkg_trip_duration + 360 MINUTE) < NOW() AND bkgPref.bkg_account_flag != 1 AND booking_track.bkg_is_no_show != 1 AND bkgPref.bkg_duty_slip_required != 1";
					break;
				case 231:
					$criteria				 .= " AND booking_invoice.biv_refund_approval_status = 1 AND booking.bkg_status IN (9)";
					break;
				case 234:
					$criteria				 .= " AND bkgPref.bpr_uncommon_route = 1 AND booking.bkg_status IN (15, 2, 3, 5) AND bkg_pickup_date BETWEEN NOW() AND (DATE_ADD(NOW(), INTERVAL 7 DAY)) ";
					break;
				case 233:
					$criteria				 .= " AND booking_trail.btr_auto_cancel_reason_id = 33 AND booking.bkg_status IN (2, 3, 5) AND booking_trail.btr_auto_cancel_value = 1 AND bkg_pickup_date BETWEEN (DATE_SUB(NOW(), INTERVAL 1 MONTH)) AND (DATE_ADD(NOW(), INTERVAL 11 MONTH)) ";
					break;
				case 250://bookings having drivers not logged in their app before 2 hours of pickup
					$this->bkg_flag_source	 = 250;
					$sqlInner				 = "SELECT GROUP_CONCAT(DISTINCT a.bkg_id)  FROM
												(
													SELECT bkg.bkg_id,bkg.bkg_bcb_id,bkg.bkg_status,bkg_pickup_date,apt_last_login from booking bkg
													JOIN booking_cab bcb ON bkg.bkg_bcb_id = bcb.bcb_id
													LEFT JOIN app_tokens apt ON apt.apt_entity_id = bcb.bcb_driver_id AND   apt.apt_status = 1 AND apt.apt_user_type = 5
													AND DATE_SUB(bkg.bkg_pickup_date,INTERVAL 4 HOUR) < apt.apt_last_login
													WHERE bkg.bkg_status=5 AND DATE_SUB(bkg.bkg_pickup_date,INTERVAL 4 HOUR) < NOW()
													AND DATE_ADD(bkg.bkg_pickup_date,INTERVAL 150 MINUTE) > NOW() AND apt.apt_id IS NULL
												)a ";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND   booking.bkg_id IN( $bkgIdInner) ";
					break;
				case 251://bookings having drivers not left for pickup by app
					$this->bkg_flag_source	 = 251;
					$sqlInner				 = "SELECT GROUP_CONCAT(DISTINCT a.bkg_id)  FROM
												(
													SELECT bkg.bkg_id, bkg.bkg_status,bkg_pickup_date  from booking bkg
													LEFT JOIN booking_track_log btl ON btl.btl_bkg_id = bkg.bkg_id AND btl.btl_event_type_id = 201
													WHERE bkg.bkg_status=5 AND DATE_SUB(bkg.bkg_pickup_date,INTERVAL 4 HOUR) < NOW()
													AND DATE_ADD(bkg.bkg_pickup_date,INTERVAL 150 MINUTE) > NOW() AND
													btl.btl_id IS NULL
												) a ";
					$bkgIdInner				 = DBUtil::queryScalar($sqlInner, DBUtil::SDB());
					$bkgIdInner				 = $bkgIdInner != null ? trim($bkgIdInner, ",") : -1;
					$criteria				 .= " AND   booking.bkg_id IN($bkgIdInner) ";
					break;
				case 252:
					$criteria				 .= " AND booking.bkg_status=2  AND booking.bkg_active=1 AND booking_trail.btr_auto_cancel_value IS NOT NULL AND booking_trail.btr_auto_cancel_reason_id!=33 ";
					break;
				case 253:
					$criteria				 .= " AND bkg_status IN (2,3,5) AND booking_trail.bkg_tags IS NOT NULL AND CONCAT(',', booking_trail.bkg_tags , ',') REGEXP ',(2|3),'";
					break;
			}
		}
		$search = $this->search;
		if ($search != "")
		{
			$fields		 = ['bkg_pickup_address', 'bkg_drop_address', 'bkg_instruction_to_driver_vendor'];
			$arrSearch	 = array_filter(explode(" ", $search));
			$search1	 = [];
			foreach ($arrSearch as $val)
			{
				$arr = [];
				foreach ($fields as $field)
				{
					$arr[] = "$field LIKE '%{$val}%'";
				}
				$search1[] = "(" . implode(' OR ', $arr) . ")";
			}
			$criteriaMain .= " AND " . implode(" AND ", $search1);
		}
		$searchTags = $this->search_tags;
		if (count($searchTags) > 0)
		{
			$arr = [];
			foreach ($searchTags as $tags)
			{
				$arr[] = "FIND_IN_SET($tags,REPLACE(bkg_tags,' ',''))";
			}
			$search2[] = "(" . implode(' OR ', $arr) . ")";

			$criteriaMain .= " AND " . implode(" AND ", $search2);
		}
		$extraJoin = "";
		if ($type == 1)
		{
			$select		 = 'bkg_id,bkg_vehicle_type_id, bkg_bcb_id,bkg_agent_id, bkg_booking_id, bkg_booking_type, bkg_qr_id, bkg_user_fname, bkg_user_lname, bkg_user_id,bkg_user_fname ctt_first_name,bkg_user_lname ctt_last_name,bkg_country_code phn_phone_country_code,bkg_contact_no phn_phone_no,bkg_user_email eml_email_address,
				bkg_is_related_booking, bkg_tentative_booking, bkg_manual_assignment,bkg_contact_no, bkg_flexxi_type, bkg_fp_id, bkg_alt_contact_no,
				bkg_user_email, bkg_status,bkg_platform, bkg_user_city, bkg_user_country, bkg_user_ip, bkg_promo1_code,bkg_escalation_status,
				bkg_pickup_date,bkg_agent_ref_code, bkg_create_date, bkg_pickup_address, bkg_drop_address, bkg_total_amount, bkg_assign_csr,bkg_create_user_type,bkg_create_user_id,biv_refund_approval_status,
				bkg_advance_amount, bkg_instruction_to_driver_vendor, bkg_country_code,bkg_payment_expiry_time, bpr_assignment_id, bpr_assignment_level,bkg_block_autoassignment,bkg_autocancel,bkg_duty_slip_required,bkg_critical_assignment,bkg_sos_sms_trigger,
				bpr_vnd_recmnd, usr_mark_customer_count,bpr_uncommon_route,bcb_vendor_id,bcb_driver_id,
				"" as fromCities,bkg_trip_distance,bkg_trip_duration,
				bkg_route_city_names as toCityName, bkg_drv_sos_sms_trigger,
				IF(DATE_ADD(booking.bkg_pickup_date,INTERVAL booking.bkg_trip_duration MINUTE)<=NOW(),\'1\',\'0\') as checkPickupTime,
                bcb_id, bcb_trip_type,bkg_account_flag,
				vhc_mark_car_count AS badCabCount,
				vendors.vnd_name as vendorName,
				bcb_driver_name as driverName,
				bcb_driver_phone as driverPhone,
				bcb_cab_number as vhcNumber,scv.scv_scc_id,
				bkg_tags, btk_last_event,
				bkg_reconfirm_flag , bkg_followup_active,
				IF(bkg_followup_active=0 OR bkg_followup_date IS NULL,0, IF(bkg_followup_date >= NOW(), 1,2)) as followupStatus,
				IF(bkg_assign_csr=' . $csrId . ',1,IF(bkg_assign_csr=0 OR bkg_assign_csr IS NULL,0,-1)) as flagCSR, bkg_is_no_show,
				IF(bpr_assignment_id=' . $csrId . ',1,0) as flagCSRAssign,
				IF(bkg_pickup_date BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL 6 HOUR), 1, 0) as immediatePickup,
				if(adm_id>0,CONCAT(adm_fname , " " , adm_lname, " (", adm_user,")"),"") as csrName,bkg_blocked_msg,	bkg_fs_address_change, bkg_is_corporate,bkgPref.bkg_is_gozonow,bkgPref.bkg_penalty_flag
			';
			$groupBy	 = " ";
			$extraJoin	 = "
				LEFT JOIN vehicles ON vhc_id=booking_cab.bcb_cab_id
				LEFT JOIN users usr ON booking_user.bkg_user_id = usr.user_id
				LEFT JOIN admins ON booking_trail.bkg_assign_csr=admins.adm_id
				LEFT JOIN drivers ON drv_id=booking_cab.bcb_driver_id
				";
		}
		else
		{
			$select		 = "bkg_status, COUNT(DISTINCT bkg_id) as count";
			$groupBy	 = " GROUP BY bkg_status";
			$extraJoin	 = " LEFT JOIN drivers ON drv_id=booking_cab.bcb_driver_id ";
		}

		$sql = "SELECT $select FROM booking
            JOIN svc_class_vhc_cat scv ON scv.scv_id = booking.bkg_vehicle_type_id
			INNER JOIN booking_user ON booking.bkg_id=booking_user.bui_bkg_id
			INNER JOIN booking_trail ON booking.bkg_id=booking_trail.btr_bkg_id
			INNER JOIN booking_invoice ON booking.bkg_id=booking_invoice.biv_bkg_id
			INNER JOIN booking_add_info ON booking.bkg_id=booking_add_info.bad_bkg_id
			INNER JOIN booking_track ON booking.bkg_id=booking_track.btk_bkg_id
			JOIN booking_pref bkgPref ON bkgPref.bpr_bkg_id=booking.bkg_id
			JOIN booking_cab ON bkg_bcb_id=booking_cab.bcb_id AND bcb_active = 1
            LEFT JOIN vendors ON vnd_id=booking_cab.bcb_vendor_id
			LEFT JOIN vendor_stats ON vrs_vnd_id = vnd_id			 
            $extraJoin $regionJoin $userContactJoin 
            WHERE 1 " . $criteria . $statusQry . " $criteriaMain  " . $groupBy;

		return $sql;
	}

	public function addCriteriaFromOct15($dataProvider)
	{
		$dataProvider1	 = clone $dataProvider;
		$command		 = clone $dataProvider1;
		$command		 = "bkg_create_date>='2015-10-01'";
		$dataProvider1->setData($command);
		return $dataProvider1;
	}

	public function appreciationMessage()
	{
		$sql = "SELECT bkg.bkg_booking_id,bcb.* FROM booking bkg
				JOIN(SELECT bcb.bcb_id,phn.phn_phone_no as vnd_phone,bcb.bcb_driver_phone,GROUP_CONCAT(DISTINCT agt.vnd_name SEPARATOR ' - ') as vnd_name,
				GROUP_CONCAT(DISTINCT bcb.bcb_driver_name SEPARATOR ' - ') as bcb_driver_name
				FROM booking_cab bcb
				LEFT JOIN vendors agt ON vnd_id=bcb.bcb_vendor_id and agt.vnd_id = agt.vnd_ref_code
				LEFT JOIN contact_profile cp on cp.cr_is_vendor = agt.vnd_id and cp.cr_status =1
				LEFT JOIN contact ctt on ctt.ctt_id =cp.cr_contact_id AND ctt.ctt_active =1 and ctt.ctt_id =ctt.ctt_ref_code
				LEFT JOIN contact_phone phn ON phn.phn_contact_id = ctt.ctt_id AND phn.phn_is_primary=1
				GROUP BY bcb.bcb_id)
				bcb ON bcb.bcb_id=bkg_bcb_id
				INNER JOIN ratings rtg ON bkg.bkg_id=rtg.rtg_booking_id
				WHERE rtg.rtg_customer_overall='5' AND rtg.rtg_customer_date between CONCAT(CURDATE(), ' 00:00:00') AND CONCAT(CURDATE(), ' 23:59:59')";

		return DBUtil::queryAll($sql, DBUtil::SDB());
	}

	public function returnTripEmail($bkgId = '', $fromDate = '', $toDate = '')
	{
		$status	 = 6;
		$oneWay	 = 1;
//$status = implode(',', $status);
		$sql	 = "SELECT
							booking.bkg_id,
							booking.bkg_booking_id,
							booking_user.bkg_user_fname AS bkg_user_name,
							booking_user.bkg_user_lname,
							booking_user.bkg_user_email,
							fromCity.cty_name AS from_city,
							toCity.cty_name AS to_city
                FROM
						(SELECT
						  brt_bcb_id,
						  MIN(brt_id) AS minBrt,
						  MAX(brt_id) AS maxBrt
						 FROM
						  booking_route
						 WHERE
						  brt_active = 1
						 GROUP BY
						  brt_bcb_id) brtBCB
                        INNER JOIN booking_route fromBrt ON fromBrt.brt_id=minBrt
                        INNER JOIN booking_route toBrt ON toBrt.brt_id=maxBrt
                        INNER JOIN booking_cab ON bcb_id=brtBCB.brt_bcb_id
                        INNER JOIN booking ON bkg_bcb_id=bcb_id
						INNER JOIN booking_user ON booking_user.bui_bkg_id = booking.bkg_id
						INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id = booking.bkg_id
						INNER JOIN booking_pref ON booking_pref.bpr_bkg_id = booking.bkg_id
                        JOIN cities fromCity ON fromCity.cty_id=fromBrt.brt_from_city_id
						JOIN cities toCity ON toCity.cty_id = toBrt.brt_to_city_id
					   WHERE
						bkg_status = 6 AND
						bkg_booking_type = 1 AND
						(booking_cab.bcb_vendor_id IS NOT NULL AND
						 booking_cab.bcb_driver_id IS NOT NULL AND
						 booking_cab.bcb_cab_id IS NOT NULL) AND
						 booking_pref.bkg_return_trip_remind = 0 AND
						(booking.bkg_agent_id IS NULL OR
						 booking.bkg_agent_id = '')";
		if ($bkgId <> '')
		{
			$sql .= " AND booking.bkg_id=$bkgId";
		}
		if ($fromDate != '' && $toDate != '')
		{
//$sql .= " AND booking.bkg_pickup_date BETWEEN '$fromDate' AND '$toDate'";
		}
		$rows = DBUtil::queryAll($sql, DBUtil::SDB());
		if (count($rows) > 0)
		{
			foreach ($rows as $row)
			{
//emailWrapper::remainderReturnTripMail($row['bkg_id']);
				$body	 = 'Dear ' . $row['bkg_user_name'] . ' ' . $row['bkg_user_lname'] . ',<br/>';
				$body	 .= '<br/>Thanks for traveling with Gozo on your trip ' . $row['bkg_booking_id'] . ' from ' . $row['from_city'] . ' to ' . $row['to_city'] . ' .';
				$body	 .= '<br/>Please reply to this email with your onward trip details to avail a promotional rate for your return or onward trip as a repeat customer.';
				$body	 .= '<br/>You can also book on our app directly for our best rates and enter code AGAIN250 to avail this offer.';
				$body	 .= '<br/><br/>Thank you,
                            <br/>Gozocab Team';

				$mail		 = new EIMailer();
				$userName	 = $row['bkg_user_name'] . ' ' . $row['bkg_user_lname'];
				$email		 = $row['bkg_user_email'];
//$email = 'sudipta.roy81@gmail.com';
				$mail->clearView();
				$mail->clearLayout();
				$mail->setBody($body);
				$mail->setTo($email, $userName);
				$subject	 = 'Use Gozo for your onwards journey';
				$mail->setSubject($subject);
				if ($mail->sendServicesEmail())
				{
					$delivered = "Email sent successfully";
				}
				else
				{
					$delivered = "Email not sent";
				}
				$usertype	 = EmailLog::Consumers;
				$emailType	 = EmailLog::EMAIL_RETURN_TRIP;
				$refType	 = EmailLog::REF_BOOKING_ID;
				$refId		 = $row['bkg_id'];
				emailWrapper::createLog($email, $subject, $body, $row['bkg_booking_id'], $usertype, $delivered, $emailType, $refType, $refId, EmailLog::SEND_SERVICE_EMAIL);
				$this->setReturnTripStatus($row['bkg_id']);
			}
		}
	}

	public function setReturnTripStatus($bkgId, $elgId = '')
	{
		if ($bkgId <> '')
		{
			$sql							 = "UPDATE `booking_pref` SET `bkg_return_trip_remind`='1' WHERE `bpr_bkg_id`=$bkgId";
			DBUtil::command($sql)->execute();
			$model							 = Booking::model()->resetScope()->findByPk($bkgId);
			$oldModel						 = $model;
			$desc							 = "Return Trip Email has been sent.";
			$params['blg_booking_status']	 = $model->bkg_status;
			$params['blg_ref_id']			 = $elgId;
			$userInfo						 = UserInfo::model();
			BookingLog::model()->createLog($bkgId, $desc, $userInfo, BookingLog::EMAIL_SENT, $oldModel, $params);
			return true;
		}
		else
		{
			return false;
		}
	}

	public function setBeforePickupEmailStatus($bkgId)
	{
		if ($bkgId <> '')
		{
			$sql							 = "UPDATE `booking` SET `bkg_email_alert_before_pickup`='1' WHERE `bkg_id`=$bkgId";
			DBUtil::command($sql)->execute();
			$model							 = Booking::model()->resetScope()->findByPk($bkgId);
			$oldModel						 = $model;
			$eventId						 = BookingLog::EMAIL_SENT;
			$desc							 = "Email to customer 36 hour before pickup.";
			$params['blg_booking_status']	 = $model->bkg_status;
			$userInfo						 = UserInfo::model();
			BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel, $params);
			return true;
		}
		else
		{
			return false;
		}
	}

	public function setBeforePickupSmsStatus($bkgId)
	{
		if ($bkgId <> '')
		{
			$sql							 = "UPDATE `booking` SET `bkg_sms_alert_before_pickup`='1' WHERE `bkg_id`=$bkgId";
			DBUtil::command($sql)->execute();
			$model							 = Booking::model()->resetScope()->findByPk($bkgId);
			$oldModel						 = $model;
			$eventId						 = BookingLog::SMS_CUTSOMER_BEFORE_PICKUP;
			$desc							 = "SMS to customer 36 hour before pickup.";
			$params['blg_booking_status']	 = $model->bkg_status;
			$userInfo						 = UserInfo::model();
			BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel, $params);
			return true;
		}
		else
		{
			return false;
		}
	}

	public function updateOnAutoCancel($bkgId)
	{
		if ($bkgId <> '')
		{
			$model							 = Booking::model()->findByPk($bkgId);
			$model->bkg_cancel_id			 = 16;
			$model->bkg_cancel_delete_reason = 'Customer did not reconfirm';
			$model->save();
			$bkgId							 = Booking::model()->canBooking($model->bkg_id, $model->bkg_cancel_delete_reason, $model->bkg_cancel_id);

			$oldModel						 = $model;
			$eventId						 = BookingLog::AUTOCANCEL_BOOKING;
			$currentTime					 = date('h:i A', strtotime(date('Y-m-d H:i:s')));
			$currentDate					 = date('d/m/Y', strtotime(date('Y-m-d H:i:s')));
			$desc							 = "AUTO-Cancelled $currentDate at $currentTime , Reason:Not reconfimed (>24hours after booking AND <12hours before pickup time)";
			$desc							 = 'Booking auto-cancelled by system. Reconfirm not received';
			$params['blg_booking_status']	 = $model->bkg_status;
			$userInfo						 = UserInfo::model();
			BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel, $params);
			echo "AUTO-Cancelled ->" . $bkgId . " -> " . $desc;
			return true;
		}
		else
		{
			return false;
		}
	}

	public function reminderOnCustomerReview()
	{
		$tempcurDate = "'" . date('Y-m-d H:i:s') . "'";
		$sql		 = "SELECT booking.bkg_id, booking_user.bkg_user_email
						FROM booking
						INNER JOIN booking_user ON booking_user.bui_bkg_id = booking.bkg_id
						INNER JOIN booking_trail ON booking_trail.btr_bkg_id = booking.bkg_id
						INNER JOIN (
										SELECT MAX(email_log.elg_created) as email_max_date,elg_ref_id
										FROM `email_log` WHERE `elg_type`=5 AND `elg_ref_type`=1 GROUP BY `elg_ref_id`
									)email_log ON email_log.elg_ref_id=booking.bkg_id
						LEFT JOIN ratings on ratings.rtg_booking_id=booking.bkg_id and rtg_active = 1 AND rtg_booking_id IS NOT NULL
						WHERE  booking_user.bkg_user_email IS NOT NULL  AND  booking_user.bkg_user_email <> ''
							AND ratings.rtg_id  IS NULL
							AND booking.bkg_status IN (6,7) AND booking_user.bkg_user_email IS NOT NULL AND booking.bkg_pickup_date > DATE_SUB($tempcurDate, INTERVAL 30 DAY)
							AND ((email_max_date < DATE_SUB($tempcurDate, INTERVAL 3 DAY) AND booking_trail.bkg_review_email_count=0)
									OR (email_max_date < DATE_SUB($tempcurDate, INTERVAL 8 DAY) AND booking_trail.bkg_review_email_count=1)
									OR (email_max_date < DATE_SUB($tempcurDate, INTERVAL 18 DAY) AND booking_trail.bkg_review_email_count=2)
									OR (email_max_date < DATE_SUB($tempcurDate, INTERVAL 28 DAY) AND booking_trail.bkg_review_email_count=3)
									OR (email_max_date < DATE_SUB($tempcurDate, INTERVAL 38 DAY) AND bkg_review_email_count=4))
						ORDER BY booking.bkg_id DESC LIMIT 0,20";
		return DBUtil::queryAll($sql, DBUtil::SDB());
	}

	public function getFullInstructions($isApp = 0)
	{
		if ($isApp == 0)
		{
			$VIheading	 = "<b>Booking requirments</b>";
			$splReq		 = '';

			if ($this->bkgAddInfo->getSpecialRequests() != '')
			{
				$splReq .= $this->bkgAddInfo->getSpecialRequests($this->bkg_agent_id, $isApp);
			}
			if ($this->bkg_instruction_to_driver_vendor != '')
			{
				$var	 = explode('|', $this->bkg_instruction_to_driver_vendor);
				$splReq	 .= $VIheading;
				foreach ($var as $key => $value)
				{
					if ($value != '')
					{
						$splReq .= '<li>' . $value . "</li>";
					}
				}
			}
			if ($this->bkgAddInfo->bkg_flight_no != '')
			{
				$splReq .= "Flight: " . $this->bkgAddInfo->bkg_flight_no;
			}

			if ($splReq != '')
			{
				$splReq = rtrim($splReq, ', ');
			}
		}
		else
		{
			$VIheading	 = "Booking requirments" . ' ';
			$splReq		 = '';

			if ($this->bkgAddInfo->getSpecialRequests() != '')
			{
				$splReq .= $this->bkgAddInfo->getSpecialRequests($this->bkg_agent_id, $isApp);
			}
			if ($this->bkg_instruction_to_driver_vendor != '')
			{
				$var	 = explode('|', $this->bkg_instruction_to_driver_vendor);
				$splReq	 .= $VIheading;
				foreach ($var as $key => $value)
				{
					$splReq .= $value;
				}
			}
			if ($this->bkg_booking_type == 1)
			{
				$splReq .= " For Oneway no extra km charges will be applied when there is no change in pickup or drop location";
			}
			if ($this->bkg_booking_type == 2 || $this->bkg_booking_type == 3)
			{

				$splReq .= "Customer must be allowed to do any sight seeing or pickup any co-passenger while on the way, within the km limit";
			}
			if ($this->bkgAddInfo->bkg_flight_no != '')
			{
				$splReq .= " Flight: " . $this->bkgAddInfo->bkg_flight_no;
			}

			if ($splReq != '')
			{
				$splReq = rtrim($splReq, ', ');
			}
		}

		return $splReq;
	}

	public function getFullInstructionsByid($bkgid, $isApp = 0)
	{
		$model	 = Booking::model()->findByPk($bkgid);
		$ins	 = $model->getFullInstructions($isApp);
		return $ins;
	}

	public function getAmountExcludingTax($amount, $partnerId, $tripType)
	{
		//$taxRate = $this->getServiceTaxRate();
		$taxRate = BookingInvoice::getGstTaxRate($partnerId, $tripType);
		$preSTax = round($amount / (1 + ($taxRate / 100)));
		return $preSTax;
	}

	public function calculateAmountswithGozoTotalAmount()
	{
		$this->bkgInvoice->getAmountCalculationfromGozoBaseAmount();
	}

	public function getExpTimeCashBack()
	{
		$leastTime	 = '';
		$exp1		 = date('Y-m-d H:i:s', strtotime($this->bkg_pickup_date . '- 1 hour'));
		$exp2		 = date('Y-m-d H:i:s', strtotime('+ 4 hours'));
		$d1			 = new DateTime($exp1);
		$d2			 = new DateTime($exp2);
		if ($d1 < $d2)
		{
			$leastTime = date('d/m/Y h:i A', strtotime($exp1));
		}
		else
		{
			$leastTime = date('d/m/Y h:i A', strtotime($exp2));
		}
		return $leastTime;
	}

	public function AddMarkup()
	{
		$this->bkg_base_amount += $this->bkg_agent_markup + $this->bkg_gozo_markup;
	}

	public function getnetBaseFare()
	{
		$getnetbasefare = round(($this->bkgInvoice->bkg_base_amount + $this->bkgInvoice->bkg_additional_charge + $this->bkgInvoice->bkg_extra_km_charge));
		return $getnetbasefare;
	}

	public function calAgentCommission()
	{
		if ($this->bkg_agent_id && $this->bkgAgent)
		{
			$ptsModel = PartnerSettings::getValueById($this->bkg_agent_id);
			if ($ptsModel != '')
			{
				$arrRules = CJSON::decode($ptsModel['pts_additional_param']);

				$conVal			 = Config::get('booking.local.type');
				$bkglocalType	 = CJSON::decode($conVal);
				if ($this->bkgInvoice->bkg_cp_comm_type == 2)
				{
					$commision = $this->bkgInvoice->bkg_cp_comm_value;
					goto skip;
				}
				$this->bkgInvoice->bkg_cp_comm_type	 = $arrRules['outstation']['commissionType'];
				$this->bkgInvoice->bkg_cp_comm_value = $arrRules['outstation']['commissionValue'];

				if (in_array($this->bkg_booking_type, $bkglocalType))
				{
					$this->bkgInvoice->bkg_cp_comm_type	 = $arrRules['local']['commissionType'];
					$this->bkgInvoice->bkg_cp_comm_value = $arrRules['local']['commissionValue'];
				}
				skip:
			}
			$commisionType	 = ($this->bkgInvoice->bkg_cp_comm_type == '') ? $this->bkgAgent->agt_commission_value : $this->bkgInvoice->bkg_cp_comm_type;
			$commisionVal	 = ($this->bkgInvoice->bkg_cp_comm_value == '') ? $this->bkgAgent->agt_commission : $this->bkgInvoice->bkg_cp_comm_value;
			$commision		 = $commisionVal | 0;
			$netbasefare	 = $this->getnetBaseFare();
			$discount_amount = $this->bkgInvoice->bkg_discount_amount | 0;
			$agt_type		 = $this->bkgAgent->agt_type;
			if ($agt_type == 0 || $agt_type == 1)
			{
				$commision = 0;
			}
			else
			{
				$commision	 = BookingInvoice::model()->calcCPCommission($netbasefare, $discount_amount, $commisionType, $commisionVal, $agt_type);
				$commision	 = $commision + $this->bkgInvoice->bkg_partner_extra_commission;
			}
			$commisionAmt = max([$commision, 0]);
			return $commisionAmt;
		}
		return 0;
	}

	public function calAgentCommissionbyId($bkgid)
	{
		$model			 = Booking::model()->findByPk($bkgid);
		$commisionAmt	 = $model->calAgentCommission();
		return $commisionAmt;
	}

	public function getAgentCost()
	{
		$cost = $this->calculateGrossAmount() - $this->bkg_agent_markup + $this->bkg_discount_amount;
		return $cost;
	}

	public function customerInfoByPickup($bkgId, $Interval = 4)
	{
		$sql = "SELECT (booking.bkg_pickup_date <= DATE_SUB(NOW(), INTERVAL $Interval HOUR)) as showUserInfoPickup  FROM `booking` WHERE booking.bkg_id=$bkgId";
		return DBUtil::command($sql)->queryScalar();
	}

	public function customerInfoByPickup1($bkgId, $Interval = 4)
	{
		$sql = "SELECT IF((NOW() BETWEEN DATE_SUB(booking.bkg_pickup_date, INTERVAL $Interval HOUR) AND booking.bkg_pickup_date) OR booking.bkg_pickup_date<=NOW(),1,0) as showUserInfoPickup FROM `booking` WHERE booking.bkg_id=$bkgId";
		return DBUtil::command($sql)->queryScalar();
	}

	public function agentRateChange()
	{
		$base1		 = $this->getAmountExcludingTax($this->bkg_total_amount, $this->bkg_agent_id, $this->bkg_booking_type);
		$base2		 = $this->getAgentCost();
		$oldMarkup	 = $this->bkg_agent_markup;
		if ($base1 > $base2)
		{
			$this->bkg_agent_markup	 = $base1 - $base2;
			$this->bkg_base_amount	 = $this->bkg_base_amount - ($oldMarkup - $this->bkg_agent_markup);
		}
		else
		{
			$staxrate = BookingInvoice::getGstTaxRate($this->bkg_agent_id, $this->bkg_booking_type);

			$actualTax					 = $this->getAgentCost() * $staxrate * 0.01;
			$this->bkg_discount_amount	 += ($base2 + $oldMarkup - $base1);
			$extraTax					 = $actualTax - ($this->bkg_total_amount - $base1);
			$this->bkg_agent_markup		 = -1 * ($this->bkg_discount_amount - $oldMarkup + $extraTax);
		}
		$this->calculateServiceTax();
		$this->calculateTotal();
	}

	/** @param \Stub\common\Place $fromPlaceObj */
	public function getDistance($fromPlaceObj, $toPlaceObj)
	{
		$distModel = DistanceMatrix::calculate($fromPlaceObj, $toPlaceObj);
		if ($distModel)
		{
			$distance	 = $distModel->dmx_distance;
			$duration	 = $distModel->dmx_duration;
		}
		return ['totmin' => $duration, 'totdist' => $distance];
	}

	public function settleBookingsByDateVendor($vendorId, $date)
	{
		$sql	 = "SELECT bkg_id
                        FROM booking_cab
                        INNER JOIN booking bkg ON bkg.bkg_bcb_id=booking_cab.bcb_id AND bkg.bkg_status=6
                        AND bkg.bkg_pickup_date<='$date'
                            WHERE booking_cab.bcb_active=1 AND booking_cab.bcb_vendor_id=$vendorId";
		$rows	 = DBUtil::queryAll($sql);

		if (count($rows) > 0)
		{
			foreach ($rows as $row)
			{
				$bkgid		 = $row['bkg_id'];
				$model		 = Booking::model()->findByPk($bkgid);
				$oldModel	 = clone $model;
				$this->markSettle($bkgid);
				$desc		 = "Booking marked as settled.";
				$userInfo	 = UserInfo::getInstance();
				$eventid	 = BookingLog::BOOKING_MARKED_SETTLED;
				BookingLog::model()->createLog($bkgid, $desc, $userInfo, $eventid, $oldModel);
			}
		}
		return true;
	}

	public function getInvoiceData($vendorId, $fromDate = '', $toDate = '', $command = 0)
	{
		$status	 = [6, 7];
		$status	 = implode(',', $status);

		$sql = "SELECT SUM(IF(act.act_type=1,1,0)) as total_booking,booking.bkg_id,
                ROUND(SUM(booking_cab.bcb_vendor_amount)) as vendor_amount,
                ROUND(SUM(booking_invoice.bkg_total_amount)) as total_amount,
                ROUND(SUM(booking_invoice.bkg_total_amount-booking_invoice.bkg_service_tax)) as base_amount,
                ROUND(SUM(booking_invoice.bkg_gozo_amount-booking_invoice.bkg_service_tax)) as service_charge_amount,
                ROUND(SUM(booking_invoice.bkg_service_tax)) as service_tax_amount
                FROM account_trans_details adt
                JOIN account_transactions act ON act.act_id = adt.adt_trans_id
                JOIN booking ON booking.bkg_id=act.act_ref_id AND act.act_type=1 AND booking.bkg_status IN (6,7)
                INNER JOIN booking_invoice ON booking.bkg_id = booking_invoice.biv_bkg_id
                INNER JOIN vendor_transactions ON booking.bkg_id = vendor_transactions.ven_booking_id
                JOIN booking_cab ON booking_cab.bcb_id = booking.bkg_bcb_id AND booking_cab.bcb_active=1
                JOIN cities as frmCity ON frmCity.cty_id=booking.bkg_from_city_id
                JOIN cities as toCity ON toCity.cty_id=booking.bkg_to_city_id
                WHERE adt.adt_amount<>0 AND act.act_active=1 AND (act.act_type=1 OR act.act_type=5) AND adt.adt_trans_ref_id=$vendorId
                AND adt.adt_ledger_id=14 AND adt_active=1 AND adt_status=1";

		if ($fromDate != '' && $toDate != '')
		{
			$fromDate	 = DateTimeFormat::DatePickerToDate($fromDate);
			$toDate		 = DateTimeFormat::DatePickerToDate($toDate);
			$sql		 .= " AND date(vendor_transactions.ven_trans_date) BETWEEN '$fromDate' AND '$toDate'";
		}
		$sql .= " AND ven_trans_active=1";

		if ($command == 1)
		{
			$dataProvider = DBUtil::queryRow($sql);
		}
		else
		{
			$dataProvider = new CSqlDataProvider($sql, [
				'totalItemCount' => $count,
				'sort'			 => ['defaultOrder' => 'bkg_create_date DESC'], 'pagination'	 => ['pageSize' => 200],
			]);
		}
		return $dataProvider;
	}

	public function countReviewEmail($bkgId)
	{
		$sql		 = "UPDATE `booking_trail` SET `bkg_review_email_count`=`bkg_review_email_count`+1 WHERE btr_bkg_id=$bkgId";
		$rowsUpdated = DBUtil::command($sql)->execute();
		return $rowsUpdated;
	}

	/**
	 * @deprecated since version 14-10-2019
	 * @author ramala
	 */
	public function testMissingAlert($mailType)
	{
		switch ($mailType)
		{
			case 'vendorMissingAlert':
				$email	 = Yii::app()->params['leadAboveEmail'];
				Booking::model()->sentVendorAssignAlert($email, 1);
				break;
			case 'driverMissingAlertDay':
				$email	 = Yii::app()->params['PickupAlertEmail'];
				Booking::model()->sendPickupAlert($email, 1);
				break;
			case 'driverMissingAlertNight':
				$email	 = Yii::app()->params['PickupAlertEmail'];
				Booking::model()->sendPickupAlert($email, 2);
				break;
			default:
				echo "Test arguments is not matched.";
				break;
		}
	}

	public function checkDuplicateByIP($ip, $phone, $email)
	{
		$qry = '';
		if ($email != '')
		{
			$qry .= " OR bkg_user_email='$email'";
		}
		if ($phone != '')
		{
			$qry .= " OR bkg_contact_no='$phone'";
		}
		$sql	 = "SELECT COUNT(*) as cnt FROM booking
                WHERE bkg_active=1 AND ((bkg_user_ip='$ip') $qry) AND bkg_status IN (1,8,9)
                AND bkg_create_date>DATE_SUB(NOW(), INTERVAL 1 HOUR);
                ";
		$count	 = DBUtil::command($sql)->queryScalar();
		return $count;
	}

	public function checkDuplicate($ip, $phone, $email)
	{
		$qry = '';
		if (trim($email) != '')
		{
			$strEmail	 = substr(trim($email), 0, 7);
			$qry		 .= " OR bkg_user_email='$strEmail%' ";
		}
		if (trim($phone) != '')
		{
			$qry .= " OR bkg_contact_no='$phone' ";
		}

		$sql = "SELECT COUNT(*) as cnt
				FROM booking
				INNER JOIN booking_user ON bkg_id = bui_bkg_id
				INNER JOIN booking_trail ON bkg_id = btr_bkg_id
				WHERE 1 AND bkg_status IN (1,8,9,10,15) AND bkg_create_date >= DATE_SUB(NOW(), INTERVAL 15 MINUTE)
				AND (bkg_user_ip='$ip' $qry)";

		$count = DBUtil::queryScalar($sql);

		return $count;
	}

	public function checkSpam($attribute, $params)
	{
		$validateSpam = Yii::app()->params['validateSpam'];
		if (!$validateSpam)
		{
			return true;
		}

		$userIP			 = $this->bkgTrail->bkg_user_ip;
		$userContactNo	 = $this->bkgUserInfo->bkg_contact_no;
		$userEmail		 = $this->bkgUserInfo->bkg_user_email;

		$cnt = $this->checkDuplicate($userIP, $userContactNo, $userEmail);

		$ips		 = [gethostbyname("gozotech1.ddns.net"), gethostbyname("gozotech.ddns.net")];
		$hostNames	 = Config::get('booking.checkSpam.hostName');
		if (!empty($hostNames))
		{
			$result		 = CJSON::decode($hostNames);
			$ips		 = array_merge($ips, $result);
			$arrUserIp	 = explode(',', $userIP);
		}
		if ($cnt > Config::get('quote.validateSpamCount') && !in_array($arrUserIp[0], $ips))
		{
			$this->addError($attribute, 'Maximum request exceeded. Please contact our customer care to make booking or try again after 30 minutes');
			return false;
		}

		return true;
	}

	public static function getUnverifiedFollowup()
	{
		$sql = "SELECT bkg_id 
				FROM `booking` 
				INNER JOIN `booking_user` ON bkg_id = bui_bkg_id 
				INNER JOIN `booking_trail` ON bkg_id = btr_bkg_id 
				WHERE bkg_status = 15 AND btr_cron_unv_followup_ctr = 0 AND bkg_quote_expire_date IS NOT NULL 
				AND (bkg_agent_id IS NULL OR bkg_agent_id = 1249) 
				AND (bkg_contact_no IS NOT NULL OR bkg_user_email IS NOT NULL) 
				AND (bkg_quote_expire_date BETWEEN DATE_ADD(NOW(),INTERVAL 2 HOUR) AND DATE_ADD(NOW(), INTERVAL 3 HOUR))";

		return DBUtil::query($sql);
	}

	public function getTentativeBookings()
	{
		$sql = "SELECT DISTINCT(booking.bkg_id), booking.bkg_create_date, booking.bkg_pickup_date, booking.bkg_booking_id,
                CONCAT(booking_user.bkg_user_fname,' ',booking_user.bkg_user_lname) as customer_name, booking_user.bkg_user_email, booking_user.bkg_contact_no,
                booking_invoice.bkg_total_amount, booking_invoice.bkg_advance_amount, booking.bkg_status, frmCity.cty_name as frm_city_name, toCity.cty_name as to_city_name,
                IF(contact.ctt_user_type=1, IF(contact.ctt_first_name IS NOT NULL && contact.ctt_last_name IS NOT NULL,CONCAT(contact.ctt_first_name, ' ',contact.ctt_last_name),contact.ctt_first_name),contact.ctt_business_name) AS vnd_owner,
                d2.drv_name, vehicle_types.vht_make, vehicle_types.vht_model
                FROM `booking`
                INNER JOIN booking_user ON booking_user.bui_bkg_id = booking.bkg_id
                INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id = booking.bkg_id
                INNER JOIN booking_pref ON booking_pref.bpr_bkg_id = booking.bkg_id
                INNER JOIN `booking_cab` ON booking_cab.bcb_id=booking.bkg_bcb_id AND booking_cab.bcb_active=1
                JOIN `cities` as frmCity ON frmCity.cty_id=booking.bkg_from_city_id
                JOIN `cities` as toCity ON toCity.cty_id=booking.bkg_to_city_id
                LEFT JOIN `vendors` ON vendors.vnd_id=booking_cab.bcb_vendor_id
                LEFT JOIN contact ON contact.ctt_id = vendors.vnd_contact_id
                LEFT JOIN `drivers` d2 ON d2.drv_id = booking_cab.bcb_driver_id AND d2.drv_id = d2.drv_ref_code
                LEFT JOIN `vehicles` ON vehicles.vhc_id=booking_cab.bcb_cab_id
                LEFT JOIN `vehicle_types` ON vehicle_types.vht_id=vehicles.vhc_type_id
                WHERE booking_pref.bkg_tentative_booking=1 AND booking.bkg_active=1 AND booking.bkg_pickup_date >= NOW()
				AND booking.bkg_status  IN (2, 3, 5, 6, 7)";
		return DBUtil::queryAll($sql, DBUtil::SDB());
	}

	/**
	 * @deprecated since version 29-05-2020
	 * @author soumyajit
	 */
	public function getUnverifiedFollowupList()
	{
		$sql = "SELECT CONCAT(booking_user.bkg_user_fname,' ',booking_user.bkg_user_lname) as customer_name,
                booking_user.bkg_user_email,
                booking_user.bkg_country_code,
                booking_user.bkg_contact_no,
                booking.bkg_booking_id,
                booking.bkg_create_date,
                frmCity.cty_name as from_city,
                toCity.cty_name as to_city,
                booking.bkg_pickup_date,
                booking_invoice.bkg_total_amount,
                unverified_followup.unv_amount,
                IF(unverified_followup.unv_type=1,'Y','NA') as price_was_high,
                IF(unverified_followup.unv_type=1,unverified_followup.unv_cmt,'NA') as price_was_high_comment,
                IF(unverified_followup.unv_type=2,'Y','NA') as will_book_later,
                IF(unverified_followup.unv_bkg_tentative_booking=1,unverified_followup.unv_date,'N-A') as will_book_later_tentative,
                IF(unverified_followup.unv_type=3,'Y','NA') as other,
                IF(unverified_followup.unv_type=3,unverified_followup.unv_tellus,'NA') as other_comment,unverified_followup.unv_create_date
                FROM `unverified_followup`
                LEFT JOIN `booking` ON unverified_followup.unv_bkg_id=booking.bkg_id
                LEFT JOIN booking_user ON booking.bkg_id = booking_user.bui_bkg_id
                LEFT JOIN booking_invoice ON booking.bkg_id = booking_invoice.biv_bkg_id
                LEFT JOIN `cities` as frmCity ON booking.bkg_from_city_id=frmCity.cty_id
                LEFT JOIN `cities` as toCity ON booking.bkg_to_city_id=toCity.cty_id
                WHERE 1 AND booking.bkg_pickup_date >= NOW()
                ORDER BY unverified_followup.unv_create_date DESC";
//$sql .= "  AND booking.bkg_pickup_date >= NOW() ";
//$sql .= " AND booking.bkg_status=1";
		return DBUtil::queryAll($sql);
	}

	public function getMonthAlphabetic($num, $m, $y)
	{
		switch ($num)
		{
			case '1':
				$year	 = date('Y', strtotime(date("Y-m-01", strtotime("-1 Months"))));
				$month	 = date('n', strtotime(date("Y-m-01", strtotime("-1 Months"))));

				return ($year == $y && $month == $m) ? 'Month -1' : '';
				break;
			case '2':
				$year	 = date('Y', strtotime(date("Y-m-01", strtotime("-2 Months"))));
				$month	 = date('n', strtotime(date("Y-m-01", strtotime("-2 Months"))));
				return ($year == $y && $month == $m) ? 'Month -2' : '';
				break;
			case '3':
				$year	 = date('Y', strtotime(date("Y-m-01", strtotime("-3 Months"))));
				$month	 = date('n', strtotime(date("Y-m-01", strtotime("-3 Months"))));
				return ($year == $y && $month == $m) ? 'Month -3' : '';
				break;
			case '0':
				$year	 = date('Y', strtotime(date("Y-m-d")));
				$month	 = date('n', strtotime(date("Y-m-d")));
				return ($year == $y && $month == $m) ? 'MTD' : '';
				break;
		}
	}

	public function getBookingTripEndDateTimeOnAfter1Oct16($bkg_id = 0)
	{
		$where = '';
		if ($bkg_id > 0)
		{
			$where = " AND bkg_id = $bkg_id";
		}
		$sql		 = "SELECT booking_route.brt_id as brtid,brt_bkg_id,bkg_id, bkg_pickup_date,
                booking_route.brt_pickup_datetime,
                booking_route.brt_trip_duration,
                booking.bkg_trip_duration,
                (booking_route.brt_pickup_datetime + INTERVAL IFNULL(booking_route.brt_trip_duration,booking.bkg_trip_duration) MINUTE) as estimatedRouteEndDateTime
                FROM `booking`
                JOIN booking_route ON booking_route.brt_bkg_id = booking.bkg_id
                WHERE  bkg_status IN (3,5,6,7) $where
                GROUP BY brt_bkg_id
                HAVING  booking_route.brt_id = MAX(brtid) AND date(estimatedRouteEndDateTime) >= '2016-10-01'
                ORDER BY estimatedRouteEndDateTime ASC";
		$recordset	 = DBUtil::queryRow($sql);
		return $recordset['estimatedRouteEndDateTime'];
	}

	public function convertUserLeadtoBooking($tmpmodel)
	{
		$bkgmodel	 = new Booking();
###########################################
		$bkgUserInfo = new BookingUser();
		$bkgInvoice	 = new BookingInvoice();
		$bkgAddInfo	 = new BookingAddInfo();
		$bkgTrack	 = new BookingTrack();
		$bkgTrail	 = new BookingTrail();
		$bkgPref	 = new BookingPref();
		$bkgPf		 = new BookingPriceFactor();
############################################
		if ($tmpmodel->bkg_ref_booking_id > 0)
		{
			$bkgmodel	 = Booking::model()->with('bkgUserInfo', 'bkgInvoice', 'bkgAddInfo', 'bkgTrack', 'bkgTrail', 'bkgPref')->findByPk($tmpmodel->bkg_ref_booking_id);
			$bkgUserInfo = $bkgmodel->bkgUserInfo;
			$bkgInvoice	 = $bkgmodel->bkgInvoice;
			$bkgAddInfo	 = $bkgmodel->bkgAddInfo;
			$bkgTrack	 = $bkgmodel->bkgTrack;
			$bkgTrail	 = $bkgmodel->bkgTrail;
			$bkgPref	 = $bkgmodel->bkgPref;
		}
		$data	 = $tmpmodel->attributes;
		$data1	 = $bkgmodel->attributes;
		foreach ($data as $attr => $val)
		{
			if ($val == null || $val == '' || $attr == 'bkg_id' || $attr == 'bkg_create_date' || $attr == 'bkg_modified_on' || $attr == 'bkg_status' || $attr == 'bkg_is_related_booking')
			{
				unset($data[$attr]);
				unset($data1[$attr]);
			}
			else
			{
				$bkgmodel->setAttribute($attr, $val);

#######################################
				$bkgUserInfo->setAttribute($attr, $val);
				if ($attr == 'bkg_user_name')
				{
					$bkgUserInfo->setAttribute('bkg_user_fname', $val);
				}

				if ($attr == 'bkg_extra_state_tax' || $attr == 'bkg_igst' || $attr == 'bkg_cgst' || $attr == 'bkg_sgst')
				{
					$val = (int) $val;
				}

				$bkgInvoice->setAttribute($attr, $val);
				$bkgAddInfo->setAttribute($attr, $val);
				$bkgTrack->setAttribute($attr, $val);
				$bkgTrail->setAttribute($attr, $val);
				$bkgPref->setAttribute($attr, $val);
#######################################
			}
		}
		$arr			 = [];
		$arr['success']	 = false;
		if ($bkgmodel->validate())
		{
			$transaction = DBUtil::beginTransaction();
			try
			{
				if ($bkgmodel->bkgInvoice->bkg_corporate_remunerator == '')
				{
					$bkgmodel->bkgInvoice->bkg_corporate_remunerator = $tmpmodel->agentBkgAmountPay;
				}
				if (($tmpmodel->bkg_pickup_date_date != $bkgmodel->bkg_pickup_date_date || $tmpmodel->bkg_pickup_time != $bkgmodel->bkg_pickup_date_time) && $bkgmodel->bkg_booking_type == 1)
				{
					$bkgmodel->bkg_pickup_date_date	 = $tmpmodel->bkg_pickup_date_date;
					$bkgmodel->bkg_pickup_date_time	 = date('h:i A', strtotime($tmpmodel->bkg_pickup_time));
//$bkgmodel->bkg_pickup_time      = $tmpmodel->bkg_pickup_time;
//$bkgmodel->bkg_pickup_date		 = $tmpmodel->bkg_pickup_date;
				}
				$bkgmodel->bkg_fp_id = $tmpmodel->bkg_fp_id;
				$bkgmodel->save();
########################
				$bkgUserInfo->setAttribute('bui_bkg_id', $bkgmodel->bkg_id);
				$bkgUserInfo->save();
				$bkgInvoice->setAttribute('biv_bkg_id', $bkgmodel->bkg_id);
				$bkgInvoice->initializePartnerCommission($bkgmodel->bkg_agent_id);
				$bkgInvoice->save();
				$bkgAddInfo->setAttribute('bad_bkg_id', $bkgmodel->bkg_id);
				$bkgAddInfo->save();
				$bkgTrack->setAttribute('btk_bkg_id', $bkgmodel->bkg_id);
				$bkgTrack->save();
				$bkgTrail->setAttribute('btr_bkg_id', $bkgmodel->bkg_id);
				$bkgTrail->save();
				$bkgPref->setAttribute('bpr_bkg_id', $bkgmodel->bkg_id);
				$bkgPref->save();

//$succinv = $bkgInvoice->getErrors();
//$succtrl = $bkgTrail->getErrors();
##########################
				$tmpmodel->bkg_ref_booking_id	 = $bkgmodel->bkg_id;
				$tmpmodel->bkg_status			 = 13;
				$tmpmodel->bkg_lead_source		 = 8; //'Incomplete booking',
				$tmpmodel->bkg_follow_up_status	 = 13;
				$tmpmodel->save();
				$desc							 = 'Converted to booking by user';
				$userInfo						 = UserInfo::getInstance();

				$followStatus				 = 13;
				$eventid					 = 13;
				$refid						 = $bkgmodel->bkg_id;
				LeadLog::model()->createLog($tmpmodel->bkg_id, $desc, $userInfo, '', $followStatus, $eventid, $refid);
				$booking_id					 = $this->generateBookingid($bkgmodel);
				$bkgmodel->bkg_booking_id	 = $booking_id;
				$routeData					 = $tmpmodel->bkg_route_data;
				$route_data					 = json_decode($routeData, true);
				$routeModels				 = BookingRoute::model()->getAllByBkgid($bkgmodel->bkg_id);
				if ($routeModels)
				{
					foreach ($routeModels as $key => $routeModel)
					{
						$routeModel->delete();
					}
				}
				$bookingCab						 = new BookingCab('matchtrip');
				$bookingCab->bcb_vendor_amount	 = 0;
				$bookingCab->bcb_trip_status	 = 1;
				$bookingCab->bcb_bkg_id1		 = $bkgmodel->bkg_id;
				$bookingCab->save();
				$bkgmodel->bkg_bcb_id			 = $bookingCab->bcb_id;
				$bkgmodel->update();

				foreach ($route_data as $k => $v)
				{
					$bookingRoute				 = new BookingRoute();
					$bookingRoute->attributes	 = $v;
					$bookingRoute->brt_bkg_id	 = $bkgmodel->bkg_id;
					$bookingRoute->brt_bcb_id	 = $bkgmodel->bkg_bcb_id;
					if ($bookingRoute->brt_pickup_datetime != $tmpmodel->bkg_pickup_date && $bkgmodel->bkg_booking_type == 1)
					{
						$bookingRoute->brt_pickup_date_date	 = DateTimeFormat::DateTimeToDatePicker($tmpmodel->bkg_pickup_date);
						$bookingRoute->brt_pickup_date_time	 = date('h:i A', strtotime($tmpmodel->bkg_pickup_date));
					}
					else
					{
						$bookingRoute->brt_pickup_date_date	 = DateTimeFormat::DateTimeToDatePicker($bookingRoute->brt_pickup_datetime);
						$bookingRoute->brt_pickup_date_time	 = date('h:i A', strtotime($bookingRoute->brt_pickup_datetime));
					}
					$bookingRoute->save();
				}
				BookingRoute::model()->setBookingCabStartEndTime($bookingCab->bcb_id, $bookingCab->bcb_bkg_id1);
				DBUtil::commitTransaction($transaction);
				$arr['success']	 = true;
				$arr['model']	 = $bkgmodel;
			}
			catch (Exception $ex)
			{
				$bkgmodel->addError('bkg_id', $ex->getMessage());
				DBUtil::rollbackTransaction($transaction);
				$success = false;
			}
		}
		else
		{
			Yii::log("Error: " . json_encode($bkgmodel->getErrors()));

// var_dump($data);
// var_dump($bkgmodel->attributes);
//  echo $bkgmodel->scenario;
			$arr['errors'] = $bkgmodel->getErrors() + $tmpmodel->getErrors();
			foreach ($arr['errors'] as $k => $v)
			{
				if (strstr($k, 'BookingTemp'))
				{
					
				}
				else
				{
					$arr['errors']['BookingTemp_' . $k] = $v;
				}
			}
//     var_dump($bkgmodel->getErrors());
//    var_dump($tmpmodel->getErrors());
// exit;
		}
		return $arr;
	}

	public function getBookingOnMarkCompleted()
	{
		$sql = "SELECT
				booking.bkg_id, NOW() AS today,
				booking.bkg_pickup_date,
				DATE_ADD(booking.bkg_pickup_date, INTERVAL booking.bkg_trip_duration + 30 MINUTE) AS pickup_date_duration
				FROM  `booking`
				LEFT JOIN email_log  on email_log.elg_ref_id=booking.bkg_id  and  email_log.elg_ref_type = 1 AND email_log.elg_type = 5 AND email_log.elg_created >= DATE_SUB(NOW(), INTERVAL 30 DAY)
				WHERE  booking.bkg_status IN (6, 7)
				AND booking.bkg_pickup_date >= DATE_SUB(NOW(), INTERVAL 30 DAY)
				AND booking.bkg_active = 1
				AND DATE_ADD(booking.bkg_pickup_date,INTERVAL booking.bkg_trip_duration MINUTE) <= NOW() AND email_log.elg_ref_id  IS NULL
				ORDER BY booking.bkg_pickup_date DESC";
		return DBUtil::queryAll($sql, DBUtil::SDB());
	}

	public function findTripRelatedBooking($tripId)
	{
//        $status = [2, 3, 5, 6, 7,];
//        $status = implode(',', $status);
		$sql = "SELECT bkg_id,bkg_booking_id,bkg_bcb_id,bkg_user_fname, bkg_user_lname,
            frmCity.cty_name as frm_city_name, toCity.cty_name as to_city_name,
            bkg_create_date, bkg_pickup_date, bkg_status, bkg_reconfirm_flag,
            bkg_vendor_amount, bcb_vendor_amount, vnd_name, drv_name, bkg_booking_type, bkg_trip_distance, bkg_trip_duration
            bkg_return_date, bkg_info_source, bkg_cancel_delete_reason, bkg_pickup_address, bkg_drop_address, bkg_bcb_id
                FROM `booking`
				 JOIN booking_user ON booking.bkg_id=booking_user.bui_bkg_id
				 JOIN booking_invoice ON booking.bkg_id=booking_invoice.biv_bkg_id
                 JOIN booking_add_info ON booking.bkg_id=booking_add_info.bad_bkg_id
                INNER JOIN booking_route ON booking.bkg_id=brt_bkg_id AND brt_active = 1
                 JOIN `cities` as frmCity ON frmCity.cty_id=booking.bkg_from_city_id
                 JOIN `cities` as toCity ON toCity.cty_id=booking.bkg_to_city_id
                LEFT JOIN (
                SELECT bcb_id, bcb_vendor_amount, vnd_name, drv_name,
				SUM(vrs.vrs_mark_vend_count) AS badVendorCount,
				SUM(vhc_mark_car_count) AS badCabCount,
				SUM(drv_mark_driver_count) AS badDriverCount,
				GROUP_CONCAT(DISTINCT vendors.vnd_name SEPARATOR ' - ') as vendorName,
				GROUP_CONCAT(DISTINCT bcb_driver_name SEPARATOR ' - ') as driverName,
				GROUP_CONCAT(DISTINCT bcb_driver_phone SEPARATOR ' - ') as driverPhone,
				GROUP_CONCAT(DISTINCT bcb_cab_number SEPARATOR ' - ') as vhcNumber,
				vht5.vht_model AS cabAssigned
					FROM booking_cab
					LEFT JOIN vendors ON vnd_id=booking_cab.bcb_vendor_id
					LEFT JOIN vendor_stats vrs ON vrs.vrs_vnd_id = vendors.vnd_id
					LEFT JOIN drivers ON drv_id=booking_cab.bcb_driver_id
					LEFT JOIN vehicles ON vhc_id=booking_cab.bcb_cab_id
					LEFT JOIN vehicle_types vht5 ON vhc_type_id=vht5.vht_id
				WHERE bcb_active = 1  AND bcb_id =$tripId
			GROUP BY bcb_id) bcb ON bkg_bcb_id=bcb.bcb_id
                WHERE booking.bkg_active=1 AND bkg_bcb_id =$tripId  AND booking.bkg_status IN (1,2, 3, 5, 6, 7)
                 GROUP BY bkg_id";

		return DBUtil::queryAll($sql);
	}

	public function pendingStatusList()
	{
		$sql = "        SELECT
						booking.bkg_id,
						booking.bkg_create_date,
						booking.bkg_pickup_date,
						booking.bkg_booking_id,
						CONCAT(booking_user.bkg_user_fname, ' ', booking_user.bkg_user_lname) AS customer_name,
                        IF(booking.bkg_agent_id IS NULL,'B2C',agents.agt_company) channelPartner,
						booking.bkg_bcb_id,
						booking.bkg_status,
						vendors.vnd_name,
						vehicles.vhc_number
                    FROM `booking`
						INNER JOIN `booking_cab`   ON     booking_cab.bcb_id = booking.bkg_bcb_id  AND booking_cab.bcb_active = 1 AND booking_cab.bcb_pending_status = 1
						INNER JOIN `booking_user` ON booking_user.bui_bkg_id = booking.bkg_id
					LEFT JOIN `agents` ON agents.agt_id = booking.bkg_agent_id
                    LEFT JOIN `vendors` ON vendors.vnd_id=booking_cab.bcb_vendor_id
                    LEFT JOIN `vehicles` ON vehicles.vhc_id=booking_cab.bcb_cab_id
                    WHERE booking.bkg_status IN (2,3,5,6,7)";

		$sqlCount = "   SELECT
						booking.bkg_id
						FROM `booking`
						INNER JOIN `booking_cab` ON booking_cab.bcb_id = booking.bkg_bcb_id  AND booking_cab.bcb_active = 1 AND booking_cab.bcb_pending_status = 1
						INNER JOIN `booking_user` ON booking_user.bui_bkg_id = booking.bkg_id
						LEFT JOIN `vendors` ON vendors.vnd_id = booking_cab.bcb_vendor_id
						LEFT JOIN `agents` ON agents.agt_id = booking.bkg_agent_id
						WHERE booking.bkg_status IN (2, 3, 5, 6, 7)";

		if (isset($this->bkg_bcb_id) && $this->bkg_bcb_id != "")
		{
			$sql		 .= " AND (booking.bkg_bcb_id LIKE '%" . $this->bkg_bcb_id . "%')";
			$sqlCount	 .= " AND (booking.bkg_bcb_id LIKE '%" . $this->bkg_bcb_id . "%')";
		}
		if (isset($this->bkg_booking_id) && $this->bkg_booking_id != "")
		{
			$sql		 .= " AND (booking.bkg_booking_id LIKE '%" . $this->bkg_booking_id . "%')";
			$sqlCount	 .= " AND (booking.bkg_booking_id LIKE '%" . $this->bkg_booking_id . "%')";
		}
		if ($this->bkg_create_date1 != '' && $this->bkg_create_date2 != '')
		{
			$sql		 .= " AND (booking.bkg_create_date BETWEEN '" . $this->bkg_create_date1 . " 00:00:00' AND '" . $this->bkg_create_date2 . " 23:59:59')";
			$sqlCount	 .= " AND (booking.bkg_create_date BETWEEN '" . $this->bkg_create_date1 . " 00:00:00' AND '" . $this->bkg_create_date2 . " 23:59:59')";
		}
		if ($this->bkg_pickup_date1 != '' && $this->bkg_pickup_date2 != '')
		{
			$sql		 .= " AND (booking.bkg_pickup_date BETWEEN '" . $this->bkg_pickup_date1 . " 00:00:00' AND '" . $this->bkg_pickup_date2 . " 23:59:59')";
			$sqlCount	 .= " AND (booking.bkg_pickup_date BETWEEN '" . $this->bkg_pickup_date1 . " 00:00:00' AND '" . $this->bkg_pickup_date2 . " 23:59:59')";
		}
		if (isset($this->bkg_vendor_name) && $this->bkg_vendor_name != "")
		{
			$sql		 .= " AND (vendors.vnd_name LIKE '%" . $this->bkg_vendor_name . "%')";
			$sqlCount	 .= " AND (vendors.vnd_name LIKE '%" . $this->bkg_vendor_name . "%')";
		}
		if (isset($this->bkg_agent_company) && $this->bkg_agent_company != "")
		{
			$sql		 .= " AND (agents.agt_company LIKE '%" . $this->bkg_agent_company . "%')";
			$sqlCount	 .= " AND (agents.agt_company LIKE '%" . $this->bkg_agent_company . "%')";
		}
		$defaultOrder	 = "booking.bkg_pickup_date ASC";
		$count			 = DBUtil::command("SELECT COUNT(*) FROM ($sqlCount) abc")->queryScalar();
		$dataprovider	 = new CSqlDataProvider($sql, [
			'totalItemCount' => $count,
			'sort'			 =>
			['attributes'	 =>
				['bkg_user_name', 'bkg_booking_id', 'from_city_name',
					'to_city_name', 'bkg_total_amount', 'bkg_create_date', 'bkg_pickup_date',
					'bkg_return_date'],
				'defaultOrder'	 => $defaultOrder],
			'pagination'	 => ['pageSize' => 50],
		]);
		return $dataprovider;
	}

	public function getBookingModelsbyCab($bcbid)
	{
		$sql	 = "SELECT bkg_id, bkg_booking_id, bkg_bcb_id,  biv.bkg_total_amount, biv.bkg_vendor_amount, biv.bkg_due_amount, biv.bkg_gozo_amount,
			    biv.bkg_vendor_collected, biv.bkg_convenience_charge
				FROM `booking`
				INNER JOIN booking_invoice as biv ON biv.biv_bkg_id=bkg_id
				 WHERE (bkg_bcb_id=$bcbid) AND (bkg_status IN (2, 3, 5, 6, 7))";
		$models	 = DBUtil::queryAll($sql);
		return $models;
	}

	public function getBookingTypeicon($bktype)
	{
		$arrBktype = [
			1	 => 'fa fa-arrow-right',
			2	 => 'fa fa-exchange',
			3	 => 'fa fa-align-center'
		];
		return $arrBktype[$bktype];
	}

	public function getToCities($bkgId)
	{
		$sql = "SELECT CONCAT(c1.cty_name, ' - ', GROUP_CONCAT(cities.cty_name SEPARATOR ' - ')) as to_cities
                FROM `booking_route`
                INNER JOIN booking ON bkg_id=brt_bkg_id AND brt_active=1
                INNER JOIN cities c1 ON bkg_from_city_id=c1.cty_id
                INNER JOIN `cities` ON cities.cty_id=booking_route.brt_to_city_id
                WHERE booking_route.brt_bkg_id IN ($bkgId)
                AND booking_route.brt_active=1
                GROUP BY booking_route.brt_bkg_id ORDER BY brt_id";
		return DBUtil::command($sql)->queryScalar();
	}

	public function getTotalBookingAmountsbyBookingIds($bidArr = [])
	{
		if (count($bidArr) > 0)
		{
			$higherVechileType	 = Booking::model()->getHigherVehicleTypeInBookings($bidArr);
			$quote				 = Quotation::model()->getVendorAmountListByBookingIds($bidArr);
			$matchedVendorAmount = ($quote[$higherVechileType] > 0) ? $quote[$higherVechileType] : 0;
			$bidList			 = implode(',', $bidArr);
			$sql				 = "SELECT  group_concat(IFNULL(bcb_vendor_amount,0)) bcb_vendor_amount,
				            IF(MIN(bkg_pickup_date)<DATE_ADD(NOW(), INTERVAL 21 HOUR) AND SUM(IF(bkg_advance_amount>0,1,0))>1,1,0) as minCheck,
                            group_concat(bkg_vehicle_type_id) vehicleTypes,
                            group_concat(bkg_vendor_amount) bkg_vendor_amounts,
                            group_concat(bkg_booking_id) bkg_booking_ids ,
							group_concat(bkg_id) bookingIds ,
                            round(sum(bkg_total_amount)) bkg_total_amount,
                            round(sum(ifnull(bkg_advance_amount, 0))) bkg_advance_amount,
                            round(sum(bkg_due_amount)) bkg_due_amount,
                            round(sum(IF(bkg_status=2,bkg_vendor_amount, bcb_vendor_amount) - bkg_toll_tax - bkg_state_tax)) bkg_vendor_amount,
							round(sum(IF(bkg_status=2,bkg_vendor_amount, bcb_vendor_amount))) vendor_amount,
                            round(sum(bkg_toll_tax)) as totalTollTax,
                            round(max(bkg_state_tax)) as stateTax,
                            round(sum(bkg_refund_amount)) bkg_refund_amount,
                            round(sum(bkg_credits_used)) bkg_credits_used,
                            round(sum(bkg_corporate_credit)) bkg_corporate_credit,
							round(sum(bkg_vendor_collected)) bkg_vendor_collected,
							round(sum(bkg_service_tax)) service_tax,
							SUM(bkg_gozo_amount - bkg_service_tax) gozo_amount,
							FORMAT(SUM((bkg_gozo_amount - bkg_service_tax) / bkg_total_amount),2) * 100 as margin_original,
							$matchedVendorAmount as matched_vendor_amount
                   FROM booking
				   INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id=booking.bkg_id
                   INNER JOIN booking_cab ON booking_cab.bcb_id=booking.bkg_bcb_id AND bcb_active = 1
                   WHERE    bkg_id IN ($bidList) AND bkg_status IN (2, 3, 5) AND booking_cab.bcb_trip_type=0";
			$dataSet			 = DBUtil::queryRow($sql);
			return $dataSet;
		}
		return false;
	}

	public function getBkgBookingIds($bidArr = [])
	{
		if (count($bidArr) > 0)
		{
			$bidList = implode(',', $bidArr);
			$sql	 = "SELECT group_concat(bkg_booking_id) bkg_booking_ids, group_concat(bkg_id) bkgIds
                   FROM booking
                   JOIN booking_cab ON booking_cab.bcb_id=booking.bkg_bcb_id AND bcb_active = 1
                   WHERE  bkg_id IN ($bidList) AND bkg_status IN (2, 3, 5)";
			$dataSet = DBUtil::queryRow($sql);
			return $dataSet;
		}
		return false;
	}

	public function getBookingIdWithoutSmartMatch($bidArr = [])
	{
		if (count($bidArr) > 0)
		{
			$bidList = implode("','", $bidArr);
			$sql	 = "SELECT sum(if(bcb_trip_type = 0, 1,0)) as tripBkgCount FROM booking bkg JOIN booking_cab ON booking_cab.bcb_id=bkg.bkg_bcb_id AND bcb_active = 1 WHERE bkg_booking_id IN ('$bidList') AND bcb_trip_type=0 AND bkg_status IN (2, 3, 5)";

			$dataSet = DBUtil::command($sql)->queryScalar();
			return $dataSet;
		}
		return false;
	}

//	public function getBookingModelsbyIdsList($bkgid = [])
//	{
//		$bkgids = implode(",", $bkgid);
//
//		$sql	 = "SELECT `bkg_id`, `bkg_booking_id`, `bkg_bcb_id`,
//		`bkg_pickup_date`, `bkg_return_date`, `bkg_trip_distance`,
//		`bkg_trip_duration`, `bkg_booking_type`, `bkg_vehicle_type_id`,
//		`bkg_agent_id`, `bkg_agent_ref_code`, `bkg_from_city_id`,
//		`bkg_to_city_id`, `bkg_pickup_address`, `bkg_drop_address`,
//		`bkg_pickup_lat`, `bkg_pickup_long`, `bkg_dropup_lat`,
//		`bkg_dropup_long`, `bkg_status`, `bkg_transfer_type`,
//		`bkg_fp_id`, `bkg_flexxi_type`, `bkg_instruction_to_driver_vendor`,
//		`bkg_active`, `bkg_modified_on`, `bkg_create_date`,
//		`bkg_reconfirm_flag`, `bkg_admin_id`, `bkg_cancel_id`,
//		`bkg_cancel_delete_reason`, `bkg_return_id`, `bkg_flexxi_time_slot`,
//		`bkgBcb`.`bcb_vendor_id`, `bkgBcb`.`bcb_id`, `bcbVendor`.`vnd_name`,
//		`bcbVendor`.`vnd_phone`, `bcbVendor`.`vnd_overall_rating`, `bcbVendor`.`vnd_id`,
//		`bcbDriver`.`drv_name`, `bcbDriver`.`drv_id`, `brt`.`brt_from_city_id`, `brt`.`brt_to_city_id`, `brt`.`brt_pickup_datetime`, `brt`.`brt_trip_duration`
//		FROM `booking` bkg
//		LEFT OUTER JOIN `booking_cab` `bkgBcb` ON (bkg.`bkg_bcb_id`=`bkgBcb`.`bcb_id`) AND (bkgBcb.bcb_active = 1 )
//		LEFT OUTER JOIN `vendors` `bcbVendor` ON (`bkgBcb`.`bcb_vendor_id`=`bcbVendor`.`vnd_id`) AND (vnd_active > 0)
//		LEFT OUTER JOIN `drivers` `bcbDriver` ON (`bkgBcb`.`bcb_driver_id`=`bcbDriver`.`drv_id`) AND (drv_active=1)
//		INNER JOIN `booking_route` as brt ON brt.brt_bkg_id=bkg.bkg_id
//		WHERE ((bkg_id IN ($bkgids)) AND (bkg_status IN (2, 3, 5, 6, 7))) ORDER BY bkg_pickup_date";
//		$models	 = $this->findAllBySql($sql);
//		return $models;
//	}

	public function getBookingModelsbyIdsList($bkgid = [])
	{
		$bkgids = implode(",", $bkgid);
		if ($bkgids == null)
		{
			throw new Exception("Required data missing", ReturnSet::ERROR_INVALID_DATA);
		}
		DBUtil::getINStatement($bkgids, $bindString, $params);
		$sql	 = "SELECT `bkg_id`, `bkg_booking_id`, `bkg_bcb_id`,
		`bkg_pickup_date`, `bkg_return_date`, `bkg_trip_distance`,
		`bkg_trip_duration`, `bkg_booking_type`, `bkg_vehicle_type_id`,
		`bkg_agent_id`, `bkg_agent_ref_code`, `bkg_from_city_id`,
		`bkg_to_city_id`, `bkg_pickup_address`, `bkg_drop_address`,
		`bkg_pickup_lat`, `bkg_pickup_long`, `bkg_dropup_lat`,
		`bkg_dropup_long`, `bkg_status`, `bkg_transfer_type`,
		`bkg_fp_id`, `bkg_flexxi_type`, `bkg_instruction_to_driver_vendor`,
		`bkg_active`, `bkg_modified_on`, `bkg_create_date`,
		`bkg_reconfirm_flag`, `bkg_admin_id`, `bkg_cancel_id`,
		`bkg_cancel_delete_reason`, `bkg_return_id`, `bkg_flexxi_time_slot`,
		`bkgBcb`.`bcb_vendor_id`, `bkgBcb`.`bcb_id`, `bcbVendor`.`vnd_name`,
		`contPhone`.`phn_phone_no` as vnd_phone, `vndStats`.`vrs_vnd_overall_rating` as vnd_overall_rating, `bcbVendor`.`vnd_id`,
		`bcbDriver`.`drv_name`, `bcbDriver`.`drv_id`, `brt`.`brt_from_city_id`, `brt`.`brt_to_city_id`, `brt`.`brt_pickup_datetime`, `brt`.`brt_trip_duration`
		FROM `booking` bkg
		 JOIN `booking_cab` `bkgBcb` ON (bkg.`bkg_bcb_id`=`bkgBcb`.`bcb_id`) AND (bkgBcb.bcb_active = 1 )
		LEFT JOIN `vendors` `bcbVendor` ON (`bkgBcb`.`bcb_vendor_id`=`bcbVendor`.`vnd_id`) AND (vnd_active > 0)
        LEFT JOIN `vendor_stats` `vndStats`  ON  `vndStats`.vrs_vnd_id = `bcbVendor`.vnd_id
        LEFT JOIN `contact` ON `contact`.ctt_id = `bcbVendor`.vnd_contact_id AND (ctt_active = 1)
		LEFT JOIN contact_phone `contPhone` ON `contPhone`.phn_contact_id = contact.ctt_id AND (phn_is_primary = 1)
		LEFT JOIN `drivers` `bcbDriver` ON (`bkgBcb`.`bcb_driver_id`=`bcbDriver`.`drv_id`) AND (drv_active=1)
		INNER JOIN `booking_route` as brt ON brt.brt_bkg_id=bkg.bkg_id
		WHERE ((bkg_id IN ($bindString)) AND (bkg_status IN (2, 3, 5, 6, 7))) ORDER BY bkg_pickup_date";
		$models	 = $this->findAllBySql($sql, $params);
		return $models;
	}

	public function getHigherVehicleTypeInBookings($bkgidList = [])
	{
		$lowerToHigherModel	 = VehicleTypes::model()->lowerToHigherType;
		$bkgids				 = implode(',', $bkgidList);
		$sql				 = 'SELECT distinct vct_id
                FROM booking
				join svc_class_vhc_cat scv ON bkg_vehicle_type_id = scv.scv_id
                join vehicle_category ON scv.scv_vct_id = vct_id
                WHERE bkg_id IN (' . $bkgids . ')';
		$dataSet			 = DBUtil::queryAll($sql);
		$vhtTypes			 = [];
		foreach ($dataSet as $dt)
		{
			$vhtTypes[] = $dt['vct_id'];
		}
		$highVal = 1;
		foreach ($vhtTypes as $vht)
		{
			$key	 = array_search($vht, $lowerToHigherModel);
			$highVal = ($highVal > $key) ? $highVal : $key;
		}
		return $lowerToHigherModel[$highVal];
	}

	public function checkMinimumPickupTime()
	{
		$isValid = false;
		try
		{
			$pickupTimeStamp = strtotime($this->bkg_pickup_date);
			$pickupTime		 = date('YmdHis', $pickupTimeStamp);
			$currentHour	 = intval(date('G', time()));
			$minTime		 = date('Ymd') . '210000';
			$dateTime		 = new DateTime();
			$dateTime->add(new DateInterval('P1D'));
			$maxTime		 = $dateTime->format('Ymd') . '100000';
			$diff			 = $pickupTimeStamp - time();
			if (($pickupTime > $minTime && $pickupTime < $maxTime && $currentHour >= 19) || ($diff < (6 * 3600)))
			{
				$isValid = true;
			}
		}
		catch (Exception $e)
		{
			Yii::log("checkMinimumPickupTime Error: " . $e->getMessage(), CLogger::LEVEL_ERROR);
		}
		return $isValid;
	}

	/* public function setPaymentExpiryTime()
	  {
	  $this->bkgTrail->bkg_payment_expiry_time = new CDbExpression("GREATEST(DATE_ADD(NOW(), INTERVAL 1 HOUR), DATE_SUB('" . $this->bkg_pickup_date . "', INTERVAL 6 HOUR))");
	  //$model->bkg_payment_expiry_time = new CDbExpression("LEAST(DATE_ADD(NOW(), INTERVAL 12 HOUR), if(DATE_SUB(bkg_pickup_date, INTERVAL 2 HOUR )<NOW(),bkg_pickup_date ,DATE_SUB(bkg_pickup_date, INTERVAL 2 HOUR)))");
	  } */

	public function updateProfitFlag($bkgId)
	{
		$model		 = $this->findByPk($bkgId);
		$oldModel	 = clone $model;
		$gmv		 = ($model->bkg_total_amount != null) ? $model->bkg_total_amount : 0;
		$vamt		 = ($model->bkg_vendor_amount != null) ? $model->bkg_vendor_amount : 0;
		$stax		 = ($model->bkg_service_tax != null) ? $model->bkg_service_tax : 0;
		$prtComm	 = ($model->bkg_partner_commission != null) ? $model->bkg_partner_commission : 0;

		$amt			 = ($model->bkg_gozo_amount != null) ? $model->bkg_gozo_amount : ($gmv - $vamt - $stax - $prtComm);
		$model->bkg_id	 = $bkgId;
		if ($amt < 0)
		{
			$model->bkg_non_profit_flag	 = 1;
			BookingLog::model()->createLog($this->bkg_id, 'Booking not profitable', UserInfo::model(), BookingLog::BOOKING_NON_PROFITABLE_SET, $oldModel, false);
			$status						 = 1;
		}
		else
		{
			$model->bkg_non_profit_flag	 = 0;
			$status						 = 0;
		}
		$model->save();
		return $status;
	}

	public function getTripRouteInfobyBkgId($bkgid, $orderVal = '', $activeBookingCheck = false)
	{
		$order			 = '';
		$activeStatus	 = '';
		if ($orderVal != '')
		{
			$order = " order by $orderVal ";
		}
		if ($activeBookingCheck)
		{
			$activeStatus = " AND bkg.bkg_status IN (2,3,5,6,7) ";
		}
		$sql = "SELECT TIMESTAMPDIFF(MINUTE,NOW(), brt.brt_pickup_datetime) as diff, brt.*
               FROM booking  bkg1
                JOIN booking_cab bcb
                  ON bcb.bcb_id = bkg1.bkg_bcb_id AND bcb.bcb_active = 1
                JOIN booking bkg ON bkg.bkg_bcb_id = bcb.bcb_id
                JOIN booking_route brt
                  ON brt.brt_bkg_id = bkg.bkg_id AND
                     bkg.bkg_active = 1
               WHERE bkg1.bkg_id = $bkgid $activeStatus $order";
		return DBUtil::queryAll($sql);
	}

	public function getTripStartTimebyBookingId($bkgId)
	{
		$bkgModel				 = Booking::model()->getTripRouteInfobyBkgId($bkgId, 'brt_pickup_datetime ASC');
		$tripTime				 = [];
		$tripTime['diff']		 = $bkgModel[0]['diff'];
		$tripTime['startTime']	 = $bkgModel[0]['brt_pickup_datetime'];
		return $tripTime;
	}

	public function regenarateTripId($model, $reason, UserInfo $userInfo = null)
	{
//$user_id = ($user_id == '') ? Yii::app()->user->getId() : $user_id;
		$user_id						 = ($user_id == '') ? 0 : UserInfo::getInstance()->getUserId();
		$oldTripId						 = $model->bkg_bcb_id;
		$newCabModel					 = new BookingCab('matchtrip');
		$newCabModel->bcb_vendor_amount	 = $model->bkgInvoice->bkg_vendor_amount;
		$newCabModel->bcb_bkg_id1		 = $model->bkg_id;
		$model->bkg_status				 = Booking::STATUS_CANCELLED;
		$newCabModel->bcb_trip_status	 = BookingCab::STATUS_VENDOR_UNASSIGNED;
		$newCabModel->save();

		$routeModels = $model->bookingRoutes;
		foreach ($routeModels as $routeModel)
		{
			$routeModel->scenario	 = 'unassignvendor';
			$routeModel->brt_bcb_id	 = $newCabModel->bcb_id;
//$routeModel->validate();
			$routeModel->save();
		}
		$model->bkg_bcb_id						 = $newCabModel->bcb_id;
		$model->bkg_cancel_delete_reason		 = ($model->bkg_cancel_delete_reason == '') ? $reason : $model->bkg_cancel_delete_reason . '; ' . $reason;
		$refid									 = $model->bkg_return_id;
		$model->bkg_status						 = Booking::STATUS_CANCELLED;
		$model->bkgTrail->bkg_vendor_request_cnt = 0;
		$model->scenario						 = 'cancel_delete';
		if ($model->validate())
		{
			$model->bkg_return_id	 = 0;
			$succResult				 = false;
			if ($model->bkgTrail->save())
			{
				$succResult = $model->save();
				BookingTrail::updateProfitFlag($oldTripId);
			}

			if ($refid != '' && $refid != 0)
			{
				$refModel				 = Booking::model()->findByPk($refid);
				$refModel->bkg_return_id = 0;
				$refModel->save();
			}
		}
	}

	public function vendorUnassignAndRegenarateCab($model, $oldCabModel, $reason, UserInfo $userInfo = null, $cancelStatus = null)
	{
		/* @var $oldCabModel BookingCab */
		$cabmodel	 = $oldCabModel;
		$vendorId	 = $cabmodel->bcb_vendor_id;
		if ($userInfo->userType == UserInfo::TYPE_VENDOR)
		{
			$cabmodel->scenario = 'unassignvendorbyself';
			if (!$cabmodel->validate())
			{
				return ['success' => false, 'errors' => $cabmodel->getErrors()];
			}
		}
		else
		{
			$cabmodel->scenario = 'unassignvendor';
			if (!$cabmodel->validate())
			{
				return ['success' => false, 'errors' => $cabmodel->getErrors()];
			}
		}
		/* @var $cabmodel BookingCab */
		$vendorNumbernew = ContactPhone::getContactPhoneById($cabmodel->bcbVendor->vndContact->ctt_id);
		$vendorName		 = $cabmodel->bcbVendor->vndContact->getName();
		$vendorName		 = ($vendorName != '') ? $vendorName : $cabmodel->bcbVendor->vnd_name;

		$cabType1 = '';
		if ($cabmodel->bcb_cab_id != '')
		{
			$cabType1 = $cabmodel->bcbCab->vhcType->getVehicleModel();
		}
		if ($cabmodel->bcb_cab_id != '')
		{
			$vehicleModel = $cabmodel->bcbCab->vhcType->vht_model;
			if ($cabmodel->bcbCab->vhc_type_id === Config::get('vehicle.genric.model.id'))
			{
				$vehicleModel = OperatorVehicle::getCabModelName($cabmodel->bcb_vendor_id, $cabmodel->bcb_cab_id);
			}
			$cab = $vehicleModel . " - " . $cabmodel->bcbCab->vhc_number;
		}
		if ($cabmodel->bcb_driver_id != '')
		{
			$driver = $cabmodel->bcbDriver->drv_name . " - " . $cabmodel->bcbDriver->drv_phone;
		}

		if ($cabmodel /* && $cabmodel->deactivate() */)
		{

//$user_id = ($user_id == '') ? Yii::app()->user->getId() : $user_id;
			$user_id = ($user_id == '') ? 0 : UserInfo::getInstance()->getUserId();
			$eventid = BookingLog::VENDOR_UNASSIGNED;

			$oldModel						 = clone $model;
			$newCabModel					 = new BookingCab('matchtrip');
			$newCabModel->bcb_vendor_amount	 = $model->bkgInvoice->bkg_vendor_amount;
			$newCabModel->bcb_bkg_id1		 = $model->bkg_id;
			$newCabModel->bcb_trip_status	 = BookingCab::STATUS_VENDOR_UNASSIGNED;
			$newCabModel->save();
			$svcId							 = $model->bkgSvcClassVhcCat->scv_id;
//$cabType2						 = $model->bkgVehicleType->getVehicleModel();
			$cabType2						 = SvcClassVhcCat::model()->getVehicleCategoryNameById($svcId);
			$cabType						 = ($cabType1 == '') ? $cabType2 : $cabType1;
			$date							 = date('d-m-Y', strtotime($model->bkg_pickup_date));
			$time							 = date('h:i A', strtotime($model->bkg_pickup_date));
			$routeModels					 = $model->bookingRoutes;
			foreach ($routeModels as $routeModel)
			{
				$routeModel->scenario	 = 'unassignvendor';
				$routeModel->brt_bcb_id	 = $newCabModel->bcb_id;
//$routeModel->validate();
				$routeModel->save();
			}
			BookingRoute::model()->setBookingCabStartEndTime($newCabModel->bcb_id, $newCabModel->bcb_bkg_id1);
			$model->bkg_bcb_id						 = $newCabModel->bcb_id;
			$model->bkg_cancel_delete_reason		 = ($model->bkg_cancel_delete_reason == '') ? $reason : $model->bkg_cancel_delete_reason . '; ' . $reason;
			$desc									 = "Unassigned vendor (" . $vendorName . ") manually.[Reason: " . $reason . "]";
			$refid									 = $model->bkg_return_id;
			$model->bkg_status						 = ($model->bkg_status == 9) ? $model->bkg_status : Booking::STATUS_VERIFY;
			$model->bkgTrail->bkg_vendor_request_cnt = 0;
			$model->scenario						 = 'cancel_delete';
			if ($model->validate())
			{
				$model->bkg_return_id	 = 0;
				$succResult				 = false;
				if ($model->bkgTrail->save())
				{
					$succResult = $model->save();
				}
				$params = array('blg_vendor_id' => $vendorId);
				BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, $eventid, $oldModel, $params);
				if ($cabmodel->bcb_driver_id != '')
				{
					BookingLog::model()->createLog($model->bkg_id, 'Driver ( ' . $driver . ' )', $userInfo, BookingLog::DRIVER_UNASSIGNED, $oldModel, $params);
				}
				if ($cabmodel->bcb_cab_id != '')
				{
					BookingLog::model()->createLog($model->bkg_id, 'Cab ( ' . $cab . ' )', $userInfo, BookingLog::CAB_UNASSIGNED, $oldModel, $params);
				}
				$eventBy = $this->event_by;

				if ($succResult)
				{
					if ($vendorId != '' && $eventBy != 2)
					{
						$msgCom = new smsWrapper();
						$msgCom->informVendorCustomerCancelled('91', $vendorNumbernew, $model->bkg_booking_id, $cabType, $model->bkgFromCity->cty_name, $model->bkgToCity->cty_name, $date, $time, $cancelStatus);
					}
				}
				if ($refid != '' && $refid != 0)
				{
					$refModel				 = Booking::model()->findByPk($refid);
					$refModel->bkg_return_id = 0;
					$refModel->save();
				}
			}
		}
	}

	public function getPickupDifferencebyBkgid($bkgId, $date = null)
	{
		if ($bkgId > 0)
		{
			if ($date == null)
			{
				$date = new CDbExpression('NOW()');
			}
			$sql = "SELECT TIMESTAMPDIFF(MINUTE,NOW() , bkg_pickup_date) as diff FROM booking  bkg WHERE bkg.bkg_id = $bkgId";
			return DBUtil::command($sql)->queryScalar();
		}
	}

	public function getCreateDifferencebyBkgid($bkgid)
	{
		if ($bkgid > 0)
		{
			$sql = "SELECT TIMESTAMPDIFF(MINUTE,NOW(), bkg_create_date) as diff
               FROM booking  bkg WHERE bkg.bkg_id = $bkgid";
			return DBUtil::command($sql)->queryScalar();
		}
	}

	public function gst()
	{
		if ($this->bkg_agent_id != '')
		{
			$agtModel	 = Agents::model()->findByPk($this->bkg_agent_id);
			$cityfortax	 = $agtModel->agt_city;
		}
		else
		{
			$cityfortax = $this->bkg_from_city_id;
		}
		if ($cityfortax == 30706)
		{
			$this->bkg_cgst	 = Yii::app()->params['cgst'];
			$this->bkg_sgst	 = Yii::app()->params['sgst'];
			$this->bkg_igst	 = 0;
		}
		else
		{
			$this->bkg_igst	 = Yii::app()->params['igst'];
			$this->bkg_cgst	 = 0;
			$this->bkg_sgst	 = 0;
		}
	}

	public function getbyBookingExt($bookID)
	{
		Logger::profile("BOOKING ID == " . $bookID);
		$bkgidSize = (strlen($bookID) < 7) ? 7 : strlen($bookID);

		$criteria	 = new CDbCriteria();
		$criteria->addCondition(" SUBSTRING(bkg_booking_id,-$bkgidSize) = '" . $bookID . "'  AND bkg_pickup_date > date_sub(NOW(),INTERVAL 1 MONTH)");
		$bookingID	 = $this->find($criteria);
		return $bookingID;
	}

	public function updateAccRefund($transCode, $response, UserInfo $userInfo = null)
	{
		$transModel	 = PaymentGateway::model()->getByCode($transCode);
		$model		 = Booking::model()->findByPk($transModel->apg_trans_ref_id);

		if ($transModel->apg_ptp_id == 4)
		{
			$success = $transModel->udpdateCMDResponseByCodeForEBS($response, 1);
		}
		else
		{
			$success = $transModel->udpdateResponseByCode($response, 1);
		}
		if ($success)
		{
			$params['blg_ref_id']	 = $transModel->apg_id;
			$resmsg					 = ($transModel->apg_response_message == '') ? '' : '; Response : ' . $transModel->apg_response_message;
			BookingLog::model()->createLog($transModel->apg_trans_ref_id, "Refund Process Completed ({$transModel->getPaymentType()} - {$transModel->apg_code})$resmsg", $userInfo, BookingLog::REFUND_PROCESS_COMPLETED, '', $params);
			$preRefund				 = ($model->bkg_refund_amount == '') ? 0 : $model->bkg_refund_amount;
			$amount					 = $preRefund - $transModel->apg_amount;
			$errors					 = $model->addRefund($amount);
			if ($errors == "")
			{
				return true;
			}
			else
			{
				BookingLog::model()->createLog($model->bkg_id, "Refund Update Failed ($errors)", $userInfo, BookingLog::REMARKS_ADDED);
			}
		}

		return false;
	}

	public function undoActions($booking_id, UserInfo $userInfo = null)
	{
		$model		 = Booking::model()->findByPk($booking_id);
		$oldModel	 = clone $model;
		$status		 = $model->bkg_status;
		$transaction = DBUtil::beginTransaction();
		if ($status > 2)
		{
			if ($model->bkg_status == '5')
			{
				$model->bkg_status	 = Booking::STATUS_ASSIGN;
				$tab				 = Booking::STATUS_ASSIGN;
			}
			else
			{
				$model->bkg_status	 = $status - 1;
				$tab				 = $status - 1;
			}
			try
			{
				$model->scenario = 'updatestatus';
				if ($status == 6)
				{
					$collection = $model->bkgInvoice->bkg_vendor_collected;
					$model->bkgInvoice->updateInvoice($collection);
//$model->bkgInvoice->bkg_due_amount		 = $collection;
//$model->bkgInvoice->bkg_vendor_collected = 0; //reverting entries
					if ($model->bkg_agent_id > 0)
					{
// Remove Commission if any already added.
						AccountTransactions::removeBookingCommission($booking_id);
					}
				}
				if ($status == 9)
				{
					if ($model->bkg_agent_id > 0)
					{
// Remove Refund if any already added.
						AccountTransactions::removeRefund($booking_id);
					}
					else
					{
// Remove Refund if any already added.
						AccountTransactions::removeRefundB2C($booking_id);

// Remove DBO amount if any already added.
						AccountTransactions::removeCompensationDBO($booking_id);
					}
				}
				if ($model->save() && $model->bkgInvoice->update())
				{
					$success = true;
				}
				else
				{
					$success = false;
				}

				if ($success)
				{
					$bkgid	 = $model->bkg_id;
					$desc	 = "Booking action reverted.";

					$eventid	 = BookingLog::BOOKING_LAST_ACTION_REVERTED;
					BookingLog::model()->createLog($bkgid, $desc, $userInfo, $eventid, $oldModel);
					$cabModel	 = $model->getBookingCabModel();
					if ($status == 6)
					{
//	$remark = 'Entry reverted for '.date('Y-m-d',  strtotime($remark));
						if (AccountTransDetails::model()->revertVenTransOnEditAcc($cabModel->bcb_id, $model->bkg_id, Accounting::LI_TRIP, Accounting::LI_OPERATOR))
						{
							$evtAcct = BookingLog::ACCOUNT_REMARKS;
							$desc	 = "Vendor Transaction data reverted.";
							BookingLog::model()->createLog($bkgid, $desc, $userInfo, $evtAcct, $oldModel);
						}
					}
					$cabModel->bcbVendor->vendorStats->setLockedAmount();
				}
				DBUtil::commitTransaction($transaction);
			}
			catch (Exception $e)
			{
				DBUtil::rollbackTransaction($transaction);
				BookingLog::model()->createLog($booking_id, "Account reverting failed ($e->getMessage())", $userInfo, BookingLog::REMARKS_ADDED, '', $params);
			}
			$oldStatus = $tab;
		}
		else
		{
			$oldStatus = $status;
		}
		return $oldStatus;
	}

	public function mapQuotecablist($quote)
	{
		/* @var $quote Quote */
		$CabList = [];
		$cab	 = '';
		$route	 = $quote[1]->routes;
		foreach ($quote as $cab => $cabQuotes)
		{
			if (!$cabQuotes->success)
			{
				continue;
			}
			$model								 = VehicleTypes::model()->getCarModel($cab, 1);
			$routeDistance						 = $cabQuotes->routeDistance;
			$routeDuration						 = $cabQuotes->routeDuration;
			$routeRates							 = $cabQuotes->routeRates;
			$CabList[$cab]['cab']				 = VehicleTypes::model()->getCarByCarType($cab);
			$CabList[$cab]['cab_type_id']		 = $cab;
			$CabList[$cab]['actual_amt']		 = $routeRates->totalAmount; // $actualAmount;
			$CabList[$cab]['gozo_base_amount']	 = $routeRates->baseAmount;
			$CabList[$cab]['base_amt']			 = $routeRates->baseAmount;
			$CabList[$cab]['service_tax']		 = $routeRates->gst;
			$CabList[$cab]['total_amt']			 = $routeRates->totalAmount;
			$CabList[$cab]['km']				 = $routeDistance->tripDistance;
			$CabList[$cab]['total_km']			 = $routeDistance->quotedDistance;
			$CabList[$cab]['quoted_km']			 = $routeDistance->quotedDistance;
			$CabList[$cab]['quote_km']			 = $routeDistance->quotedDistance;
			$CabList[$cab]['total_day']			 = $routeDuration->durationInWords;
			$CabList[$cab]['total_min']			 = $routeDuration->totalMinutes;
			$CabList[$cab]['km_rate']			 = $routeRates->ratePerKM;
			$CabList[$cab]['route']				 = $routeDistance->routeDesc; // $distanceData['routes'];
			$CabList[$cab]['routeDesc']			 = $routeDistance->routeDesc; // $distanceData['routes'];
			$CabList[$cab]['error']				 = $cabQuotes->errorCode; //$distanceData['error'];
			$CabList[$cab]['image']				 = $model->vht_image;
			$CabList[$cab]['capacity']			 = $model->vht_capacity;
			$CabList[$cab]['bag_capacity']		 = $model->vht_bag_capacity;
			$CabList[$cab]['big_bag_capacity']	 = $model->vht_big_bag_capacity;
			$CabList[$cab]['cab_model']			 = $model->vht_model;
			$CabList[$cab]['startTripDate']		 = $routeDuration->fromDate; //$distanceData['startTripDate'];
			$CabList[$cab]['endTripDate']		 = $routeDuration->toDate; // $distanceData['endTripDate'];
			$CabList[$cab]['driverAllowance']	 = round($routeRates->driverAllowance);
			$CabList[$cab]['tolltax']			 = $routeRates->isTollIncluded | 0; //$tolltax;
			$CabList[$cab]['statetax']			 = $routeRates->isStateTaxIncluded | 0; // $statetax;
			$CabList[$cab]['servicetax']		 = 1;
			$CabList[$cab]['startTripCity']		 = $route[0]->brt_from_city_id; //$distanceData['startTripCity'];
			$CabList[$cab]['endTripCity']		 = $route[count($route) - 1]->brt_to_city_id; // $distanceData['endTripCity'];
			$CabList[$cab]['cab_id']			 = $model->vht_id;
			$CabList[$cab]['chargeableDistance'] = $routeDistance->totalRunning;
			$CabList[$cab]['garageTime']		 = $routeDuration->totalMinutes + $routeDuration->garageTimeEnd + $routeDuration->garageTimeStart;
		}
		$routeData	 = [];
		$arrToCity	 = [];
		$routeDesc	 = [];
		$route1		 = $quote[$cab]->routes;
		foreach ($route1 as $brtRoute)
		{
			/* @var $brtRoute BookingRoute */
			$arrToCity[] = $brtRoute->brt_to_city_id;
			$routeDesc[] = $brtRoute->brtFromCity->cty_name;
		}
		$routeData['toCities']					 = $arrToCity;
		$routeData['addtionalDistance']			 = [
			'start'	 => $quote[$cab]->routeDistance->startDistance | 0,
			'end'	 => $quote[$cab]->routeDistance->endDistance | 0
		];
		$routeData['servingRoute']				 = $quote[$cab]->servingRoute;
		$routeData['tripDistance']				 = $quote[$cab]->routeDistance->quotedDistance;
		$routeData['time']						 = $quote[$cab]->routeDuration->totalMinutes;
		$routeData['routeDesc']					 = $quote[$cab]->routeDistance->routeDesc;
		$routeData['route']						 = $quote[$cab]->routeDistance->routeDesc;
//
		$routeData['totalExtra']				 = $quote[$cab]->routeDistance->totalRunning - $quote[$cab]->routeDistance->tripDistance;
		$routeData['totalRunning']				 = $quote[$cab]->routeDistance->totalRunning;
		$routeData['totalGarage']				 = $quote[$cab]->routeDistance->totalGarage;
		$routeData['minimumChargeableDistance']	 = $quote[$cab]->routeDistance->quotedDistance;
		$routeData['quoted_km']					 = $quote[$cab]->routeDistance->quotedDistance;
		$routeData['pickupCity']				 = $route[0]->brt_from_city_id;
		$routeData['midpicupCity']				 = $route[0]->brt_to_city_id;
		$routeData['dropCity']					 = $route[count($route) - 1]->brt_to_city_id;
		$routeData['startTripDate']				 = $quote[$cab]->routeDuration->fromDate;
		$routeData['endTripDate']				 = $quote[$cab]->routeDuration->toDate;
		$routeData['returnDate']				 = $quote[$cab]->routeDuration->toDate;
		$res									 = ['cabList' => $CabList, 'routeData' => $routeData];
		return $res;
	}

	public function mapQuotecablistNew($quote)
	{
		/* @var $quote Quote */
		$CabList = [];
		$cab	 = '';
		$route	 = $quote[1]->routes;
		foreach ($quote as $cab => $cabQuotes)
		{
			if (!$cabQuotes->success)
			{
				continue;
			}
			$svcVctId							 = SvcClassVhcCat::model()->findByPk($cab);
			$model								 = SvcClassVhcCat::model()->getVctSvcList('detail', 0, 0, $svcVctId->scv_id);
			$cabTypeId							 = SvcClassVhcCat::model()->vehicleCategoryMapping($cab);
			$routeDistance						 = $cabQuotes->routeDistance;
			$routeDuration						 = $cabQuotes->routeDuration;
			$routeRates							 = $cabQuotes->routeRates;
			$CabList[$cab]['cab']				 = $model[label]; //VehicleTypes::model()->getCarByCarType($cab);
			$CabList[$cab]['cab_type_id']		 = $cabTypeId;
			$CabList[$cab]['total_amt']			 = $routeRates->totalAmount;
			$CabList[$cab]['base_amt']			 = $routeRates->baseAmount;
			$CabList[$cab]['service_tax']		 = $routeRates->gst;
			$CabList[$cab]['km_rate']			 = $routeRates->ratePerKM;
			$CabList[$cab]['total_day']			 = $routeDuration->durationInWords;
			$CabList[$cab]['image']				 = $model[vct_image];
			$CabList[$cab]['capacity']			 = $model[vct_capacity];
			$CabList[$cab]['bag_capacity']		 = $model[vct_small_bag_capacity];
			$CabList[$cab]['big_bag_capacity']	 = $model[vct_big_bag_capacity];
			$CabList[$cab]['cab_model']			 = $model[vct_desc];
			$CabList[$cab]['driverAllowance']	 = round($routeRates->driverAllowance);
			$CabList[$cab]['tolltax']			 = $routeRates->isTollIncluded | 0; //$tolltax;
			$CabList[$cab]['statetax']			 = $routeRates->isStateTaxIncluded | 0; // $statetax;
			$CabList[$cab]['cab_id']			 = $model[scv_id];
			$CabList[$cab]['chargeableDistance'] = $routeDistance->totalRunning;
		}
		$routeData	 = [];
		$arrToCity	 = [];
		$routeDesc	 = [];
		$route1		 = $quote[$cab]->routes;
		foreach ($route1 as $brtRoute)
		{
			/* @var $brtRoute BookingRoute */
			$arrToCity[] = $brtRoute->brt_to_city_id;
			$routeDesc[] = $brtRoute->brtFromCity->cty_name;
		}
		$routeData['routeDesc']		 = $quote[$cab]->routeDistance->routeDesc;
		$routeData['quoted_km']		 = $quote[$cab]->routeDistance->quotedDistance;
		$routeData['pickupCity']	 = $route[0]->brt_from_city_id;
		$routeData['dropCity']		 = $route[count($route) - 1]->brt_to_city_id;
		$routeData['midpickupCity']	 = $route[0]->brt_to_city_id;
		$routeData['startTripDate']	 = $quote[$cab]->routeDuration->fromDate;
		$routeData['returnDate']	 = $quote[$cab]->routeDuration->toDate;
		$res						 = ['cabList' => $CabList, 'routeData' => $routeData];
		return $res;
	}

	public function validateRouteMob($routes = [], $trip_type)
	{
		$result['success']	 = false;
		$data				 = json_decode($routes);
		foreach ($data as $key => $val)
		{
			$routeModel							 = new BookingRoute();
			$routeModel->brt_from_city_id		 = $val->pickup_city;
			$routeModel->brt_to_city_id			 = $val->drop_city;
			$routeModel->brt_pickup_datetime	 = $val->date;
			$routeModel->brt_pickup_date_date	 = DateTimeFormat::DateTimeToDatePicker($val->date);
			$routeModel->brt_pickup_date_time	 = date('h:i A', strtotime($val->date));
			$route[]							 = $routeModel;
		}
		$partnerId						 = Yii::app()->params['gozoChannelPartnerId'];
		$quote							 = new Quote();
		$quote->routes					 = $route;
		$quote->tripType				 = $trip_type;
		$quote->partnerId				 = $partnerId;
		$quote->quoteDate				 = date('Y-m-d H:i:s');
		$quote->pickupDate				 = $route[0]->brt_pickup_datetime;
		$routeDuration					 = new RouteDuration();
//		$rates							 = AreaPriceRule::model()->getRules($quote->routes[0]->brt_from_city_id, 1);
//		$quote->priceRule				 = PriceRule::model()->findByPk($rates[2]);
		$quote->priceRule				 = PriceRule::getByCity($quote->routes[0]->brt_from_city_id, 2, 1);
		$routeDuration->fromDate		 = $route[0]->brt_pickup_datetime;
		$routeDuration->garageTimeStart	 = 0;
		$res							 = ($routeDuration->validatePickupTime($quote)) ? $routeDuration->validatePickupTime($quote) : true;
		$resPickup						 = [];
		if ($res)
		{
			$resPickup['success']	 = $quote->success;
			$resPickup['errors']	 = $quote->errorText;
		}
		$cnt	 = count($route);
		$result	 = Route::model()->populate($route[$cnt - 1]->brt_from_city_id, $route[$cnt - 1]->brt_to_city_id);
		if ($result['success'])
		{
			$rutModel				 = $result['model'];
			$resPickup['distance']	 = $rutModel->rut_estm_distance;
			$resPickup['duration']	 = $rutModel->rut_estm_time;
			if ($resPickup['duration'] > 0)
			{
				$duration = $resPickup['duration'];

				$lastPickDate				 = $route[$cnt - 1]->brt_pickup_datetime;
				$pickupTime					 = new DateTime($lastPickDate);
				$pickupTime->add(new DateInterval("PT{$duration}M"));
				$resPickup['next_pick_date'] = $pickupTime->format("Y-m-d H:i:s");
			}
		}
		return $resPickup;
	}

	public function applyCancelCommission()
	{
		if ($this->bkg_status == 9 && $this->bkg_agent_id > 0)
		{
			$cancelCharge	 = $this->bkgInvoice->bkg_advance_amount - $this->bkgInvoice->bkg_refund_amount;
			$ruleId			 = $this->bkgAgent->agt_cancel_rule;
			$commission		 = BookingPref::model()->calculateCancelCommission($ruleId, $cancelCharge, $this);
			AccountTransactions::model()->AddCommission($this->bkg_pickup_date, $this->bkg_id, $this->bkg_agent_id, $commission);
		}
	}

	public function assignVendor(&$bcbModel, $remarks, UserInfo $userInfo = null, $assignMode = 0, $valBooking = true, $smt_score = null)
	{
		if ($assignMode != 1 && $valBooking == true)
		{
			$this->scenario = 'assignvendor';
		}
		$res = false;
		if ($this->validate() && $this->bkg_status == 2)
		{
			$this->bkg_status	 = 3;
			$res				 = $this->save();
			$this->bkgTrail->updateAssignMode();
			$this->bkgPref->resetAssingment();

			/* @var $bcbModel BookingCab */
			$vendorAcceptAmount					 = $bcbModel->bcb_vendor_amount;
			$statusDesc							 = $bcbModel->bcbVendor->vendorPrefs->getStatusDesc();
			$vname								 = $bcbModel->bcbVendor->vnd_name;
			$params								 = [];
			$params['blg_vendor_assigned_id']	 = $bcbModel->bcb_vendor_id;
			$params['blg_driver_id']			 = $bcbModel->bcb_driver_id;
			$params['blg_vehicle_id']			 = $bcbModel->bcb_cab_id;
			$params['blg_booking_status']		 = $this->bkg_status;
			$smt_score_log						 = "";
			if ($smt_score != null)
			{
				$smt_score_log = " (SMT score " . $smt_score . ")";
			}
			if ($userInfo->userType == UserInfo::TYPE_VENDOR)
			{
//$desc = "$vname ($statusDesc) direct accepted booking on $vendorAcceptAmount.";
				$eventId = BookingLog::BOOKING_DIRECT_ACCEPT;
				$desc	 = "$vname ($statusDesc) directly accept booking on ₹$vendorAcceptAmount";
			}
			else
			{
				$eventId = BookingLog::VENDOR_ASSIGNED;
				$desc	 = "$vname ($statusDesc) assigned.";
			}
			if ($remarks != '' || $remarks != 0)
			{
				$desc .= " - " . trim($remarks) . $smt_score_log;
			}
			BookingLog::model()->createLog($this->bkg_id, $desc, $userInfo, $eventId, null, $params);
			/*
			 * Message to be sent for manual assignment only	 */

			if ($userInfo->userType != 2 && $assignMode == 0)
			{
				$this->messageAssignVendor($bcbModel);
			}

			$this->bkgPref->fbgConfirm();

			return true;
		}
		else
		{
			$errArr = [];
			if ($this->hasErrors())
			{
				$errArr = $this->getErrors();
			}
			if ($this->bkg_status != 2)
			{
				$errArr = ['Booking not in assignable status'];
			}
			throw new Exception(json_encode($errArr), ReturnSet::ERROR_VALIDATION);
		}
		if (!$res)
		{
			throw new Exception(json_encode($this->getErrors()), ReturnSet::ERROR_VALIDATION);
		}
	}

	public function getVendorInstructions()
	{
		$ins = [];
		if ($this->bkgAddInfo->getSpecialRequests() != '')
		{
			$ins[] = $this->bkgAddInfo->getSpecialRequests();
		}
		if ($this->bkg_instruction_to_driver_vendor != '')
		{
			$ins[] = $this->bkg_instruction_to_driver_vendor;
		}
		if ($this->bkgPref->bkg_invoice == 1)
		{
			$ins[] = ' Invoice Required';
		}


		$instruction = '';
		if (count($ins) > 0)
		{
			$str		 = implode('. ', $ins);
			$instruction = '. Additional Instruction:' . $str;
		}
		return $instruction;
	}

	public function messageAssignVendor(&$bcbModel)
	{
		/* @var $bcbModel BookingCab */

		$vendor		 = $bcbModel->bcbVendor;
		$ext		 = '91';
		$numbernew	 = ContactPhone::model()->getContactPhoneById($vendor->vnd_contact_id);

		$amount		 = $this->bkgInvoice->bkg_total_amount;
//if ($this->bkgTrack->bkg_trip_type == 2)
//  {
// $amount = $this->bkgInvoice->bkg_rate_per_km . 'Per Km';
// }
		$instruction = $this->getVendorInstructions();

		$vendorAmt	 = $bcbModel->bcb_vendor_amount;
		$advance	 = 0;
		$due		 = $amount;
		if ($this->bkgInvoice->bkg_advance_amount > 0)
		{
			$advance = round($this->bkgInvoice->bkg_advance_amount);
			$due	 = round($this->bkgInvoice->bkg_due_amount);
		}

		$locA	 = $this->bkg_pickup_address . ', ' . $this->bkgFromCity->cty_name;
		$locB	 = $this->bkg_drop_address . ', ' . $this->bkgToCity->cty_name;

		$bookingID		 = $this->bkg_booking_id;
		$booking_type	 = $this->getBookingType($this->bkg_booking_type);
		$tollTax		 = $this->bkgInvoice->bkg_is_toll_tax_included;
		$stateTax		 = $this->bkgInvoice->bkg_is_state_tax_included;
		$date			 = date('d-m-Y', strtotime($this->bkg_pickup_date));
		$time			 = date('h:i A', strtotime($this->bkg_pickup_date));
		$cabType		 = $this->bkgSvcClassVhcCat->scv_vct_id;
		$logType		 = UserInfo::TYPE_SYSTEM;
		$msgCom			 = new smsWrapper();
		$msgCom->assignVendor($ext, $numbernew, $locA, $locB, $cabType, $date, $time, $amount . $instruction, $booking_type, $bookingID, $vendorAmt, $advance, $due, '', $logType, $tollTax, $stateTax);
	}

	public function getSubscriberByPromoterId($promoterid)
	{
		$sql		 = "SELECT GROUP_CONCAT(`bkg_booking_id`) bookings FROM `booking` WHERE bkg_fp_id=$promoterid AND bkg_status IN (2,3,4,5,6,7) GROUP BY bkg_fp_id";
		$promolist	 = DBUtil::queryRow($sql);
		return $promolist['bookings'];
	}

	public function getSubsIdsbyPromoIds($promoterid, $bcbId)
	{
		$sql		 = "SELECT `bkg_id` bookings FROM `booking` WHERE bkg_bcb_id=$bcbId AND bkg_status NOT IN(8,9,1,13) AND bkg_active=1 AND bkg_id<>$promoterid";
		$subslist	 = DBUtil::queryAll($sql);
		return $subslist;
	}

	public function editBooking($oldData, $oldModel)
	{
		$trans = DBUtil::beginTransaction();
		if (is_array($this->bkgTrail->bkg_tags))
		{
			$this->bkgTrail->bkg_tags = implode(', ', $this->bkgTrail->bkg_tags);
		}

		if ($this->bkgAddInfo->bkg_info_source == '')
		{
			$this->bkgAddInfo->bkg_info_source = 'Others';
		}
		if ($this->bkgInvoice->bkg_corporate_credit > 0 && $this->bkgInvoice->bkg_corporate_remunerator == 2 && $this->bkg_agent_id > 0)
		{
			$this->bkgInvoice->populateCorporateAmount($this->bkg_agent_id);
			$this->bkgInvoice->calculateVendorAmount();
		}
		else
		{
			$this->bkgInvoice->populateAmount(true, false, true, false, $this->bkg_agent_id);
			$this->bkgInvoice->calculateVendorAmount();
		}
		$result1 = CActiveForm::validate($this);
		if ($result1 == '[]')
		{
			try
			{
				$this->appendRemarks();
				$this->uploadAttachment();
				//	$this->bkgInvoice->bkg_chargeable_distance = round($this->bkgInvoice->bkg_chargeable_distance);
				$params = false;
				if ($oldModel->bkg_vehicle_type_id != $this->bkg_vehicle_type_id || $oldModel->bkgUserInfo->bkg_user_fname != $this->bkgUserInfo->bkg_user_fname ||
						$oldModel->bkgUserInfo->bkg_user_lname != $this->bkgUserInfo->bkg_user_lname || $oldModel->bkgUserInfo->bkg_contact_no != $this->bkgUserInfo->bkg_contact_no ||
						$oldModel->bkgUserInfo->bkg_user_email != $this->bkgUserInfo->bkg_user_email || $oldModel->bkg_pickup_address != $this->bkg_pickup_address || $oldModel->bkg_drop_address != $this->bkg_drop_address
				)
				{
					$params['blg_ref_id'] = BookingLog::INITIAL_INFO_CHANGED;
				}
				if ($this->save() && $this->bkgInvoice->save() && $this->bkgUserInfo->save() && $this->bkgTrail->save() && $this->bkgTrack->save())
				{
					$bookingRouteModel = BookingRoute::model()->saveRouteDataForEditBooking($this->bkg_id);
				}
				else
				{
					throw new Exception("Booking edit failed. (" . json_encode($this->getErrors()) . ")");
				}
				if ($this->lead_id > 0)
				{
					$logDesc				 = "Lead Converted to Booking";
					$userInfo				 = UserInfo::getInstance();
					$eventid				 = BookingLog::LEAD_CONVERTED_TO_BOOKING;
					$booking_id				 = Booking::model()->generateBookingid($this);
					$this->bkg_booking_id	 = $booking_id;
					if (!in_array($this->bkg_status, [2, 3, 5, 6]))
					{
						$this->bkg_status = 1;
						if ($this->bkg_agent_id > 0)
						{
							$this->bkg_status = 2;
						}
					}
					$this->save();
					$this->bkgTrail->bkg_create_user_id		 = $userInfo->userId;
					$this->bkgTrail->bkg_create_user_type	 = $userInfo->userType;
					$this->bkgTrail->bkg_create_type		 = BookingTrail::CreateType_Lead;
					$this->bkgTrail->bkg_confirm_type		 = BookingTrail::ConfirmType_Lead;
					$this->bkgTrail->update();
					BookingTemp::model()->setLeadInfoOnEditBooking($this->lead_id, $this->bkg_id);

					LeadLog::model()->createLog($this->lead_id, $logDesc, $userInfo);
					$logType = BookingLog::System;
				}
				$newData			 = $this->getDetailsbyId($this->bkg_id);
				$getOldDifference	 = array_diff_assoc($oldData, $newData);
				$changesForLog		 = $this->getModificationMSG($getOldDifference, 'log');
				$changesForConsumer	 = $this->getModificationMSG($getOldDifference, 'consumer');
				notificationWrapper::customerBookingModified($this->bkg_id, $changesForConsumer, true);
				$msgCom				 = new smsWrapper();
				$this->new_remark	 = $msgCom->sendMessagesOnEditBooking($this->bkg_id, $getOldDifference, $oldData, $newData, $oldModel);
				$logDesc			 = "Booking modified";
				$eventid			 = BookingLog::BOOKING_MODIFIED;

				$desc		 = $logDesc . " Old Values: " . ($changesForLog == "" ? ' No Value Modified' : ($changesForLog));
				$bkgid		 = $this->bkg_id;
				$userInfo	 = UserInfo::getInstance();

				BookingLog::model()->createLog($bkgid, $desc, $userInfo, $eventid, $oldModel, $params);
				if ($this->bkgUserInfo->bkg_user_id > 0 && (($oldModel->bkgInvoice->bkg_promo1_code == '' && $this->bkgInvoice->bkg_promo1_code != '') || ($oldModel->bkgInvoice->bkg_promo1_code != '' && $this->bkgInvoice->bkg_promo1_code != '' && $oldModel->bkgInvoice->bkg_promo1_code != trim($this->bkgInvoice->bkg_promo1_code))))
				{
					BookingLog::model()->createLog($this->bkg_id, "Promo " . $this->bkgInvoice->bkg_promo1_code . " applied successfully.", $userInfo, BookingLog::BOOKING_PROMO, false, ['blg_ref_id' => BookingLog::REF_PROMO_APPLIED]);
				}
				if ($this->bkgUserInfo->bkg_user_id > 0 && ($oldModel->bkgInvoice->bkg_promo1_code != '' && $this->bkgInvoice->bkg_promo1_code == ''))
				{
					BookingLog::model()->createLog($this->bkg_id, "Promo " . $oldModel->bkgInvoice->bkg_promo1_code . " removed successfully.", $userInfo, BookingLog::BOOKING_PROMO, false, ['blg_ref_id' => BookingLog::REF_PROMO_REMOVED]);
				}

				DBUtil::commitTransaction($trans);
				if ($this->lead_id > 0)
				{
					$logType = BookingLog::System;
					if ($this->bkg_agent_id > 0)
					{
						$this->sendConfirmation($logType);
					}
				}
				return $bookingRouteModel;
			}
			catch (Exception $e)
			{
				$this->addError("bkg_id", $e->getMessage());
				DBUtil::rollbackTransaction($trans);
				BookingLog::model()->createLog($this->bkg_id, "Edit Failed: " . $e->getMessage(), UserInfo::getInstance(), BookingLog::BOOKING_MODIFIED, null);
				return false;
			}
		}
		else
		{
			return false;
		}
	}

	public function setDataForBookingList($params1, $searchid, $arr, $bkgSource, $related = 0)
	{
		if (!isset($params1['sort']))
		{
			$this->bkg_pickup_date1	 = ($this->bkg_source == '') ? date('Y-m-d', strtotime('-1 month')) : '';
			$this->bkg_pickup_date2	 = ($this->bkg_source == '') ? date('Y-m-d', strtotime('+11 month')) : '';
		}

		if ($searchid != '' && $related == 0)
		{
			$this->bkg_id = $searchid;
		}
		elseif ($searchid != '' && $related == 1)
		{
			$bkids	 = $searchid;
			$ids	 = BookingSub::getRelatedQuoteIds($searchid);
			if ($ids)
			{
				$bkids .= "," . $ids;
			}
			$this->ids = $bkids;
		}

		if (isset($params1['qrId']) && $params1['qrId'] > 0)
		{
			$this->bkg_qr_id = $params1['qrId'];
		}

		if ($arr != null)
		{
			$this->attributes			 = $arr;
			$this->corporate_id			 = $arr['corporate_id'];
			$this->bkg_create_date1		 = $arr['bkg_create_date1'];
			$this->bkg_create_date2		 = $arr['bkg_create_date2'];
			$this->bkg_pickup_date1		 = $arr['bkg_pickup_date1'];
			$this->bkg_pickup_date2		 = $arr['bkg_pickup_date2'];
			$this->bcb_vendor_id		 = $arr['bcb_vendor_id'];
			$this->bcb_driver_id		 = $arr['bcb_driver_id'];
			$this->bkg_service_class	 = $arr['bkg_service_class'];
			$this->bkg_vehicle_type_id	 = $arr['bkg_vehicle_type_id'];
			$this->trip_id				 = trim($arr['trip_id']);
			$this->bkg_user_email1		 = trim($arr['bkg_user_email1']);
			$this->bkg_contact_no1		 = trim($arr['bkg_contact_no1']);
			$this->bkg_name				 = trim($arr['bkg_name']);
			$this->bkg_state			 = $arr['bkg_state'];
			$this->userCategories		 = $arr['userCategories'];
		}

		if (isset($params1['Booking']))
		{
			$params1['Booking']		 = array_filter($params1['Booking']);
			$this->bkg_pickup_date1	 = $params1['Booking']['bkg_pickup_date1'];
			$this->bkg_pickup_date2	 = $params1['Booking']['bkg_pickup_date2'];
		}
		if ($this->bkg_pickup_date1 == "" && $this->bkg_pickup_date == "" && $this->bkg_create_date1 == "" && $this->bkg_create_date == "")
		{
			$this->bkg_pickup_date1	 = date('Y-m-d', strtotime('-1 month'));
			$this->bkg_pickup_date2	 = date('Y-m-d', strtotime('+11 month'));
		}

		$this->bkg_source		 = ((trim($bkgSource) == '' && $this->bkg_flag_source > 0) ? $this->bkg_flag_source : $bkgSource);
		$this->bkg_flag_source	 = (is_numeric($bkgSource) ? $bkgSource : $this->bkg_flag_source);

		return $this;
	}

	public function leadtoBooking($bkid = 0)
	{
		if ($bkid > 0)
		{
			$tmpmodel = BookingTemp::model()->findbyPk($bkid);
			if ($tmpmodel->bkg_ref_booking_id > 0)
			{
				$bkgmodel = Booking::model()->findbyPk($tmpmodel->bkg_ref_booking_id);
			}
			if (!$bkgmodel)
			{
				$bkgmodel = Booking::getNewInstance();
			}
			$data	 = $tmpmodel->attributes;
			$data1	 = $bkgmodel->attributes;
			foreach ($data as $attr => $val)
			{
				if ($val == null || $val == '' || $attr == 'bkg_id' || $attr == 'bkg_status' || $attr == 'bkg_modified_on' || $attr == 'bkg_create_date')
				{
					unset($data[$attr]);
					unset($data1[$attr]);
				}
				else
				{
					$bkgmodel->setAttribute($attr, $val);
#######################################
					$bkgmodel->bkgUserInfo->setAttribute($attr, $val);
					if ($attr == 'bkg_user_name')
					{
						$bkgmodel->bkgUserInfo->setAttribute('bkg_user_fname', $val);
					}
					if ($attr	 = 'bkg_extra_state_tax' || $attr	 = 'bkg_igst' || $attr	 = '	bkg_cgst' || $attr	 = 'bkg_sgst')
					{
						$val = (int) $val;
					}

					$bkgmodel->bkgInvoice->setAttribute($attr, $val);
					$bkgmodel->bkgAddInfo->setAttribute($attr, $val);
					$bkgmodel->bkgTrack->setAttribute($attr, $val);
					$bkgmodel->bkgTrail->setAttribute($attr, $val);
					$bkgmodel->bkgPref->setAttribute($attr, $val);
#######################################
				}
			}
			if ($tmpmodel->bkg_ref_booking_id != '')
			{
				$bkgmodel->bkg_id = $tmpmodel->bkg_ref_booking_id;
			}
			$bkgmodel->bkgInvoice->bkg_gozo_base_amount	 = $tmpmodel->bkg_net_charge;
			$bkgmodel->bkgInvoice->bkg_total_amount		 = $tmpmodel->bkg_amount;
			$bkgmodel->bkgInvoice->bkg_discount_amount	 = $tmpmodel->bkg_discount;
			if ($tmpmodel->bkg_contact_no == '' && $tmpmodel->bkg_log_phone != '')
			{
				$bkgmodel->bkgUserInfo->bkg_contact_no = preg_replace('/[^0-9\-]/', '', str_replace(' ', '', $tmpmodel->bkg_log_phone));
			}
			if ($tmpmodel->bkg_user_email == '' && $tmpmodel->bkg_log_email != '')
			{
				$bkgmodel->bkgUserInfo->bkg_user_email = $tmpmodel->bkg_log_email;
			}
			$bkgmodel->bkg_status = Booking::STATUS_VERIFY;
			$bkgmodel->decodeAttributes();

			$route_data = json_decode($tmpmodel->bkg_route_data, true);
			if ($route_data != '')
			{
				$bookingRoutes				 = BookingRoute::model()->setRouteInfoForLeadToBooking($route_data);
				$bkgmodel->bookingRoutes	 = $bookingRoutes;
				$bkgmodel->bookingRouteData	 = $bookingRoutes;
			}
			$bkgmodel->bkgInvoice->addCorporateCredit();
			$bkgmodel->bkgInvoice->calculateConvenienceFee($bkgmodel->bkgInvoice->bkg_convenience_charge);
			$bkgmodel->bkgInvoice->calculateTotal();
			$bkgmodel->bkgInvoice->calculateVendorAmount();
			$bkgmodel->lead_id = $tmpmodel->bkg_id;
###################################################
####################################################
			return $bkgmodel;
		}
	}

	public function copyBooking($bkid = 0)
	{
//fdgfdg
		if ($bkid > 0)
		{
			$oldmodel	 = $this->findbyPk($bkid);
			$data		 = $oldmodel->attributes;
			$data1		 = $this->attributes;
			foreach ($data as $attr => $val)
			{
				if ($val == null || $val == '' || $attr == 'bkg_id' || $attr == 'bkg_status' ||
						$attr == 'bkg_rating' || $attr == 'bkg_modified_on' || $attr == 'bkg_advance_amount' || $attr == 'bkg_due_amount' || $attr == 'bkg_refund_amount' || $attr == 'bkg_bcb_id' || $attr == 'bkg_discount_amount' || $attr == 'bkg_promo1_code' || $attr == 'bkg_promo1_id' || $attr == 'bkg_promo1_amt' || $attr == 'bkg_user_id')
				{
					unset($data[$attr]);
					unset($data1[$attr]);
				}
				else
				{
					$this->setAttribute($attr, $val);
#######################################
					$this->bkgUserInfo->setAttribute($attr, $val);
					if ($attr == 'bkg_user_name')
					{
						$this->bkgUserInfo->setAttribute('bkg_user_fname', $val);
					}
					if ($attr	 = 'bkg_extra_state_tax' || $attr	 = 'bkg_igst' || $attr	 = '	bkg_cgst' || $attr	 = 'bkg_sgst')
					{
						$val = (int) $val;
					}

					$this->bkgInvoice->setAttribute($attr, $val);
					$this->bkgAddInfo->setAttribute($attr, $val);
					$this->bkgTrack->setAttribute($attr, $val);
					$this->bkgTrail->setAttribute($attr, $val);
					$this->bkgPref->setAttribute($attr, $val);
#######################################
				}
			}

###################################################
			$this->bkgUserInfo->setAttribute('bui_bkg_id', $bkgmodel->bkg_id);
			$this->bkgUserInfo->save();
			$this->bkgInvoice->setAttribute('biv_bkg_id', $bkgmodel->bkg_id);
			$this->bkgInvoice->save();
			$this->bkgAddInfo->setAttribute('bad_bkg_id', $bkgmodel->bkg_id);
			$this->bkgAddInfo->save();
			$this->bkgTrack->setAttribute('btk_bkg_id', $bkgmodel->bkg_id);
			$this->bkgTrack->save();
			$this->bkgTrail->setAttribute('btr_bkg_id', $bkgmodel->bkg_id);
			$this->bkgTrail->save();
			$this->bkgPref->setAttribute('bpr_bkg_id', $bkgmodel->bkg_id);
			$this->bkgPref->save();
####################################################
			$this->parsePickupDateTime($oldmodel->bkg_pickup_date);
			$this->bkgInvoice->bkg_additional_charge = ($this->bkgInvoice->bkg_additional_charge > 0) ? $this->bkgInvoice->bkg_additional_charge : 0;
			$this->bkgInvoice->populateAmount(true, false, true, true, $this->bkg_agent_id);
//	$this->bkgInvoice->calculateVendorAmount();
			$this->bkgInvoice->save();

			$this->preData = BookingRoute::model()->copybookingroute($bkid);
			return $this;
		}
	}

	public function validateInfo($fromcity, $tocity)
	{
		if (is_array($this->bkgTrail->bkg_tags))
		{
			$this->bkgTrail->bkg_tags = implode(', ', $this->bkgTrail->bkg_tags);
		}
		$this->bkgTrail->bkg_platform = Booking::Platform_Admin;
		if ($this->bkgAddInfo->bkg_info_source == '')
		{
			$this->bkgAddInfo->bkg_info_source_desc	 = 'Others';
			$this->bkgAddInfo->bkg_info_source		 = 6;
		}
		$this->bkgTrail->bkg_user_ip		 = \Filter::getUserIP();
		$cityinfo							 = UserLog::model()->getCitynCountrycodefromIP(\Filter::getUserIP());
		$this->bkgUserInfo->bkg_user_city	 = $cityinfo['city'];
		$this->bkgUserInfo->bkg_user_country = $cityinfo['country'];
		$this->bkgTrail->bkg_user_device	 = $_SERVER['HTTP_USER_AGENT'];
		$this->bkg_create_date				 = new CDbExpression('NOW()');
		$isCod								 = BookingSub::model()->getApplicable($fromcity, $tocity, 3);

		if (!in_array($this->bkg_status, [2, 3, 5, 6]) && $isCod)
		{
// $model->bkg_status = 2;
			if ($this->bkg_status != 15)
			{
				$this->bkg_status = 1;
			}


			$emlModel	 = ContactEmail::model()->find('eml_email_address=:email', ['email' => $this->bkgUserInfo->bkg_user_email]);
			$phnModel	 = ContactPhone::model()->find('phn_phone_no=:phone', ['phone' => $this->bkgUserInfo->bkg_contact_no]);
			if ($this->bkg_agent_id > 0 || ($emlModel != '' && $emlModel->eml_is_verified == 1) || ($phnModel != '' && $phnModel->phn_is_verified == 1))
			{
				if ($this->bkg_status != 15)
				{
					$this->bkg_status = 2;
				}
				if ($emlModel->eml_is_verified == 1)
				{
					$this->bkgUserInfo->bkg_email_verified = 1;
				}
				if ($phnModel->phn_is_verified == 1)
				{
					$this->bkgUserInfo->bkg_phone_verified = 1;
				}
			}
		}

		if ($this->bkg_agent_id > 0 && $this->bkg_status != 1)
		{
			$agentsModel = Agents::model()->findByPk($this->bkg_agent_id);
			if (Yii::app()->request->getParam('Booking')['agentBkgAmountPay'] == 2 && ($agentsModel->agt_type == 0 || $agentsModel->agt_type == 2))
			{
				$this->bkgInvoice->bkg_corporate_remunerator = 2;
			}
		}
		$this->bkgInvoice->bivBkg = $this;
		$this->bkgInvoice->populateAmount(true, false, true, true, $this->bkg_agent_id);
		if ($this->bkg_agent_id != '' && $this->bkg_status != 1)
		{
			$agtModel	 = Agents::model()->findByPk($this->bkg_agent_id);
			$cityfortax	 = $agtModel->agt_city;
		}
		else
		{
			$cityfortax = $this->bkg_from_city_id;
		}
		if ($cityfortax == 30706)
		{
			$this->bkgInvoice->bkg_cgst	 = Yii::app()->params['cgst'];
			$this->bkgInvoice->bkg_sgst	 = Yii::app()->params['sgst'];
			$this->bkgInvoice->bkg_igst	 = 0;
		}
		else
		{
			$this->bkgInvoice->bkg_igst	 = Yii::app()->params['igst'];
			$this->bkgInvoice->bkg_cgst	 = 0;
			$this->bkgInvoice->bkg_sgst	 = 0;
		}
		if ($this->bkg_vehicle_type_id == '')
		{
			$this->addError('bkg_vehicle_type_id', 'Select cab type');
		}
		if (in_array($this->bkg_booking_type, [8, 9, 10, 11]))
		{
			$this->scenario = 'custombooking';
		}
		$scenario = $this->scenario;
		if ($this->bkg_booking_type == 2 || $this->bkg_booking_type == 3)
		{
			
		}
		$result = CActiveForm::validate($this, null, false);

		$successValidate = $this->validate();
//	if ($this->bkg_agent_id > 0 && $this->bkg_status != 15)
//	{
//	    $corpamount1		 = $this->agentCreditAmount | 0;
//	    $isRechargeAccount	 = AccountTransDetails::model()->checkCreditLimit($this->bkg_agent_id, '', '', $corpamount1, '', 3, false);
//	    if ($isRechargeAccount)
//	    {
//		$this->addError('bkg_agent_ref_code', "Booking failed as partner credit limit exceeded.");
//	    }
//	}
		return $sentValue		 = ['successValidate' => $successValidate];
	}

	public function saveInfo($fromcity, $tocity)
	{
		$bookingInfo = $this->validateInfo($fromcity, $tocity);
		if ($bookingInfo['successValidate'] && !$bookingInfo['isRechargeAccount'])
		{
			$oldModel	 = clone $this;
			$userInfo	 = UserInfo::getInstance();
			$transaction = DBUtil::beginTransaction();
			try
			{
				$this->uploadAttachment();
				Logger::profile("Upload Attachment");

				if ($this->save())
				{
					Logger::profile("Booking Model Saved");

					$this->bkgAddInfo->bad_bkg_id				 = $this->bkg_id;
					$this->bkgInvoice->biv_bkg_id				 = $this->bkg_id;
					$this->bkgUserInfo->bui_bkg_id				 = $this->bkg_id;
					$this->bkgTrack->btk_bkg_id					 = $this->bkg_id;
					$this->bkgTrail->btr_bkg_id					 = $this->bkg_id;
					$this->bkgPref->bpr_bkg_id					 = $this->bkg_id;
					$this->bkgPf->bpf_bkg_id					 = $this->bkg_id;
					$this->bkgTrail->bkg_create_user_type		 = $userInfo->userType;
					$this->bkgUserInfo->scenario				 = "admininsert";
					$this->bkgTrail->bkg_quote_expire_max_date	 = BookingTrail::maxQuoteExpiry($this->bkg_id);
//$result = CActiveForm::validate($this->bkgUserInfo, null, false);

					if ($this->bkgUserInfo->bkg_contact_id === '')
					{
						$this->bkgUserInfo->bkg_contact_id = null;
					}

					if ($this->bkgAddInfo->save() && $this->bkgInvoice->save() && $this->bkgUserInfo->save() && $this->bkgTrack->save() && $this->bkgTrail->save() && $this->bkgPref->save() && $this->bkgPf->save())
					{
						Logger::profile("Additional Data Saved");

						$msgArr									 = array(trim($this->bkg_instruction_to_driver_vendor), (($this->bkgAddInfo->bkg_spl_req_carrier == 0 || $this->bkgAddInfo->bkg_spl_req_carrier == '0') ? "" : "Carrier Requested for Rs.150"), (($this->bkgAddInfo->bkg_spl_req_lunch_break_time != 0 || $this->bkgAddInfo->bkg_spl_req_lunch_break_time != '0') ? "Customer has paid for " . $this->bkgAddInfo->bkg_spl_req_lunch_break_time . " minutes journey break" : ""));
						$this->bkg_instruction_to_driver_vendor	 = '';
						foreach ($msgArr as $msgKey => $msg)
						{
							if ($msg != '')
							{
								$eventId = BookingLog::REMARKS_ADDED;
								$remark	 = "Additional Instruction to Vendor/Driver: " . $msg;
								if ($this->bkg_instruction_to_driver_vendor == '')
								{
									$this->bkg_instruction_to_driver_vendor = $msg;
								}
								else
								{
									$this->bkg_instruction_to_driver_vendor .= "," . $msg;
								}

								if ($msgKey != 0)
								{
									BookingLog::model()->createLog($this->bkg_id, $remark, $userInfo, $eventId);
								}
							}
						}
						$this->bkgTrail->setPaymentExpiryTime($this->bkg_pickup_date);
						$isRealtedBooking						 = $this->findRelatedBooking($this->bkg_id);
						$this->bkgTrail->bkg_is_related_booking	 = ($isRealtedBooking) ? 1 : 0;
						$booking_id								 = $this->generateBookingid($this);
						$this->bkg_booking_id					 = $booking_id;
						if (!$this->save() || !$this->bkgTrail->save())
						{
							$errors	 = $this->getErrors() + $this->bkgTrail->getErrors();
							$ex		 = new Exception(json_encode($errors), ReturnSet::ERROR_FAILED);
							throw $ex;
						}

						Logger::profile("Create traveller contact");
//Create traveller contact
						if ($this->bkg_agent_id == '' || $this->bkg_agent_id == NULL)
						{
							$contactId = Contact::createbyBookingUser($this->bkgUserInfo);
							Logger::profile("Contact::createbyBookingUser DONE");
							if ($contactId && $contactId > 0)
							{
								$this->bkgUserInfo->bkg_contact_id = $contactId;
								$this->bkgUserInfo->save();
							}
						}
					}
					else
					{
						$errors	 = [];
						$models	 = [$this->bkgAddInfo, $this->bkgInvoice, $this->bkgUserInfo, $this->bkgTrack, $this->bkgTrail, $this->bkgPref, $this->bkgPf];
						foreach ($models as $mdl)
						{
							if ($mdl instanceof CActiveRecord)
							{
								$errors += $mdl->getErrors();
							}
						}
						$ex = new Exception(json_encode($errors), ReturnSet::ERROR_FAILED);
						throw $ex;
					}
				}
				else
				{
					$errors	 = $this->getErrors();
					$ex		 = new Exception(json_encode($errors), ReturnSet::ERROR_FAILED);
					throw $ex;
				}
				if ($this->bkg_agent_id == '' || $this->bkg_agent_id == NULL)
				{
					if ($this->bkgUserInfo->bkg_user_id > 0)
					{
						$userModel = Users::model()->findByPk($this->bkgUserInfo->bkg_user_id);
						if ($userModel->usr_contact_id == '' || $userModel->usr_contact_id == null)
						{
							$userModel->usr_contact_id = $contactId;
							if (!$userModel->save())
							{
								throw new Exception(json_encode($userModel->getErrors()), ReturnSet::ERROR_VALIDATION);
							}
						}
					}
					else
					{
						$userModel = Users::model()->linkUserByEmail($this->bkg_id, Booking::Platform_Admin);
					}
					if ($this->bkg_agent_id > 0)
					{
						$agentUsersModel = AgentUsers::model()->find('agu_agent_id=:agent AND agu_role=1', ['agent' => $this->bkg_agent_id]);
						$userModel		 = Users::model()->findByPk($agentUsersModel->agu_user_id);
					}
					if ($userModel == '')
					{
						$userModel = Users::model()->linkUserByEmail($this->bkg_id, Booking::Platform_Admin);
					}
					if ($userModel)
					{
						$this->bkgUserInfo->bkg_user_id = $userModel->user_id;
					}
				}
				Logger::profile("User Created and Linked");
				if ($this->bkgUserInfo->save())
				{
					Logger::profile("User Info Saved");
					if ($this->bkg_agent_id > 0)
					{
						$corporateModel = Agents::model()->findByPk($this->bkg_agent_id, 'agt_type=1');
						if ($corporateModel != '')
						{
							$this->scenario = 'corpadddetails';
							if ($userModel != '')
							{
								$userModel->usr_corporate_id = $corporateModel->agt_id;
								$userModel->save();
							}
							$this->bkgInvoice->bkg_corporate_remunerator = 2;
							$this->bkgInvoice->calculateServiceTax();
							if (!$this->save())
							{
								throw new Exception("Failed to link corporate");
							}
							if (!$this->bkgInvoice->save())
							{
								throw new Exception("Failed to update booking invoice");
							}
						}
//BookingPref::model()->getByBookingInfo($this);

						$this->bkgUserInfo->bkg_crp_name		 = $this->bkg_copybooking_name;
						$this->bkgPref->bkg_crp_send_email		 = $this->bkg_copybooking_ismail;
						$this->bkgPref->bkg_crp_send_sms		 = $this->bkg_copybooking_issms;
						$this->bkgUserInfo->bkg_crp_email		 = $this->bkg_copybooking_email;
						$this->bkgUserInfo->bkg_crp_phone		 = $this->bkg_copybooking_phone;
						$this->bkgUserInfo->bkg_crp_country_code = $this->bkg_copybooking_country;

						$this->bkgUserInfo->save();
						$agtmodel = Agents::model()->findByPk($this->bkg_agent_id);
						$this->bkgPref->save();

						if ($this->agentNotifyData != '' && $this->agentNotifyData != null && $this->agentNotifyData != 'null')
						{
							$arrAgentNotifyOpt = $this->agentNotifyData;
							BookingMessages::model()->setAgentNotificationDataForBooking($arrAgentNotifyOpt, $this->bkg_id);
						}
						else
						{
							BookingMessages::model()->setDefaultAgentNotificationForBooking($this->bkg_agent_id, $this->bkg_id);
						}
						$corpamount = $this->agentCreditAmount | 0; //Credit added by agent;
						if ($corporateModel->agt_type == 1)
						{
							$corpamount = $this->bkgInvoice->bkg_total_amount;
						}
						if ($this->bkg_agent_id > 0)
						{
							if (($this->bkg_status >= 1 && $this->bkg_status <= 7) || $this->bkg_status == 15)
							{
								if ($corpamount > 0)
								{
									$bankLedgerID	 = PaymentType::model()->ledgerList(PaymentType::TYPE_AGENT_CORP_CREDIT);
									$isUpdateAdvance = $this->updateAdvance($corpamount, $this->bkg_pickup_date, PaymentType:: TYPE_AGENT_CORP_CREDIT, UserInfo:: getInstance(), null, "Partner Wallet credits added to booking by admin");
									if (!$isUpdateAdvance)
									{
										throw new Exception("Booking failed as partner wallet balance exceeded.");
									}
								}
								if ($this->createQuotePartner != 2)
								{
									Booking::model()->confirm(true, false, $this->bkg_id);
								}
							}

							$this->refresh();
							$this->bkgInvoice->calculateVendorAmount();
						}
					}

					Logger::profile("BKG User Info Saved");
					if ($this->bkg_status == 1)
					{
						$userInfo						 = UserInfo::getInstance();
						$adminid						 = $userInfo->getUserId();
						$this->bkgTrail->bkg_assign_csr	 = $adminid;
						$admin							 = Admins::model()->findByPk($adminid);
						$aname							 = $admin->adm_fname . ' ' . $admin->adm_lname;

						$desc = "CSR ($aname) Auto Assigned";
						BookingLog::model()->createLog($this->bkg_id, $desc, $userInfo, BookingLog:: CSR_ASSIGN, false, false);
					}
				}
				else
				{
					throw new Exception("Failed to update booking user");
				}
				$eventId = BookingTemp::model()->convertedToBooking($this->lead_id, $this->bkg_id);
				$desc	 = "Lead Converted to Booking";

				Logger::profile("Lead Converted to Booking");

				BookingRoute::model()->setBookingRouteInfo($this, $this->multicityjson);

				Logger::profile("setBookingRouteInfo Saved");

				unset($this->bkg_route_city_names);
				unset($this->bkg_route_city_ids);
				$this->bkg_bcb_id = BookingCab::model()->setBookingCabInfo($this);

				if ($eventId == null)
				{
					if ($this->bkg_status == 15)
					{
						$desc	 = "New quote created - $this->routeProcessed";
						$eventId = BookingLog::QUOTE_CREATED;
					}
					else
					{
						$desc	 = "New booking created - $this->routeProcessed";
						$eventId = BookingLog::BOOKING_CREATED;
					}
				}
				else
				{
					$this->bkgTrail->bkg_confirm_type = BookingTrail::ConfirmType_Lead;
				}

				BookingLog::model()->createLog($this->bkg_id, $desc, $userInfo, $eventId);
				BookingPriceFactor::model()->getQuotedFactor($this->bkg_id);

				Logger::profile("BookingPriceFactor::getQuotedFactor");
				if (($this->bkg_agent_id == '' || $this->bkg_agent_id == null || $this->bkg_agent_id == 0) && $this->bkg_status == 1)
				{
					if ($this->bkg_remark != '')
					{
						$this->bkg_remark = $this->bkg_remark . " . Booking not confirmed due to unverified contact information";
					}
					else
					{
						$this->bkg_remark = "Booking not confirmed due to unverified contact information";
					}
				}
				if ($this->bkg_id != '' && $this->bkg_remark != '')
				{
					$remark							 = trim($this->bkg_remark);
					$eventId						 = BookingLog::REMARKS_ADDED;
					$bkg_status						 = $this->bkg_status;
					$params							 = [];
					$params['blg_booking_status']	 = $bkg_status;
					$params['blg_remark_type']		 = '1';
					BookingLog::model()->createLog($this->bkg_id, $remark, $userInfo, $eventId, $oldModel, $params);
				}
				if ($this->bkgInvoice->bkg_promo1_code != '' && $this->bkgUserInfo->bkg_user_id > 0 && ($this->bkg_agent_id == '' || $this->bkg_agent_id == null || $this->bkg_agent_id == 0))
				{
					$promoModel = Promos::model()->getByCode($this->bkgInvoice->bkg_promo1_code);
					if (!$promoModel)
					{
						throw new Exception('Invalid Promo code');
					}
					$promoModel->promoCode	 = $this->bkgInvoice->bkg_promo1_code;
					$promoModel->totalAmount = $this->bkgInvoice->bkg_base_amount;
					$promoModel->createDate	 = date('Y-m-d H:i:s', time());
					$promoModel->pickupDate	 = $this->bkg_pickup_date;
					$promoModel->fromCityId	 = $this->bkg_from_city_id;
					$promoModel->toCityId	 = $this->bkg_to_city_id;
					$promoModel->userId		 = $this->bkgUserInfo->bkg_user_id;
					$promoModel->platform	 = $this->bkgTrail->bkg_platform;
					$promoModel->carType	 = $this->bkg_vehicle_type_id;
					$promoModel->bookingType = $this->bkg_booking_type;
					$promoModel->noOfSeat	 = $this->bkgAddInfo->bkg_no_person;
					$promoModel->bkgId		 = $this->bkg_id;
					$promoModel->email		 = '';
					$promoModel->phone		 = '';
					$promoModel->imEfect	 = '';

					$discountArr = $promoModel->applyPromoCode();
					if ($discountArr != false)
					{
						$this->bkgInvoice->bkg_promo1_id	 = $discountArr['id'];
						$this->bkgInvoice->bkg_promo1_amt	 = $discountArr['cash'];
						$this->bkgInvoice->bkg_promo1_coins	 = $discountArr['coins'];
						if (isset($discountArr['nextTripApply']) && $discountArr['nextTripApply'] == 1)
						{
							$discountArr['cash']	 = 0;
							$discountArr['coins']	 = 0;
						}
						if ($discountArr['prm_activate_on'] != 1 && ($discountArr['pcn_type'] == 2 || $discountArr['pcn_type'] == 3) && $this->bkg_status == 2)
						{
							UserCredits::model()->setCreditBookinginfo($this->bkg_id, 1, null, $discountArr);
						}
						if ($this->bkg_status == 2)
						{
							Promos::model()->incrementCounter($this->bkgInvoice->bkg_promo1_id, $this->bkgUserInfo->bkg_user_id, $this->bkg_id);
						}
						$eventId				 = BookingLog::BOOKING_PROMO;
						$params['blg_ref_id']	 = BookingLog::REF_PROMO_APPLIED;
						BookingLog::model()->createLog($this->bkg_id, "Promo " . $this->bkgInvoice->bkg_promo1_code . " applied successfully.", $userInfo, $eventId, false, $params);
					}
					else
					{
						$this->bkgInvoice->bkg_promo1_code = '';
					}
				}

				Logger::profile("Promo Part Done");
				$logType						 = BookingLog::System;
				$isCod							 = BookingSub::model()->getApplicable($this->bkg_from_city_id, $this->bkg_to_city_id, 3);
				$this->bkgPref->bkg_send_email	 = 1;
				$this->bkgPref->bkg_send_sms	 = 1;
				$svcModelCat					 = SvcClassVhcCat::model()->getVctSvcList('object', 0, 0, $this->bkg_vehicle_type_id);

				/* bkg_cancel_rule_id acc to addon selected    by ramala */
				$addOnDetails = $this->bkgInvoice->bkg_addon_details;
				if ($addOnDetails != '')
				{
					$addOnDetails = json_decode($addOnDetails);
					foreach ($addOnDetails as $addon)
					{
						if ($addon->adn_type == 1)
						{
							$cancelRuleId = AddonCancellationPolicy::getCancelRuleById($addon->adn_id);
						}
					}
				}
				if (!$cancelRuleId)
				{
					$isGozonow		 = $this->bkgPref->bkg_is_gozonow;
					$cancelRuleId	 = CancellationPolicy::getCancelRuleId($this->bkg_agent_id, $svcModelCat->scv_id, $this->bkg_from_city_id, $this->bkg_to_city_id, $this->bkg_booking_type, $isGozonow);
				}
				$this->bkgPref->bkg_cancel_rule_id	 = $cancelRuleId;
				Logger::profile("Cancellation Policy");
				$this->bkg_admin_id					 = $userInfo->userId;
				if (!$this->save())
				{
					throw new Exception("Failed to create booking");
				}
				Logger::profile("Booking Saved");
				if (!$this->bkgPref->save())
				{
					throw new Exception("Failed to update booking pref");
				}
				$this->bkgTrail->updateCreateType($userInfo, $this->bkg_status, $this->lead_id);
				if (($this->bkg_agent_id > 0 && $corpamount > 0) || (($this->bkg_agent_id == '' || $this->bkg_agent_id == null || $this->bkg_agent_id == 0) && $this->bkg_status == 2))
				{
					if (!$this->confirmBooking($logType, $isCod))
					{
						throw new Exception("Failed to create booking");
					}
					Logger::profile("Booking Confirmed");
				}
				$this->bkgInvoice->calculateDues();
				$this->bkgTrack	 = BookingTrack::model()->sendTripOtp($this->bkg_id, $sendOtp		 = false);
				$this->bkgAddInfo->save();
				if ($this->bkgInvoice->save() && $this->paymentChangesData != '')
				{
					BookingLog::model()->createLog($this->bkg_id, $this->paymentChangesData, $userInfo, BookingLog:: BOOKING_AMOUNT_MODIFICATION, false, false);
				}
				$this->bkgUserInfo->save();
				$this->bkgTrack->save();
				$this->bkgTrail->bkg_followup_active = 0;

				if ($this->bkg_agent_id != null)
				{
					$this->bkgTrail->bkg_confirm_datetime = new CDbExpression('NOW()');
				}

				$this->bkgTrail->save();
				if ($this->bkgPref->save() && $this->bkgPref->bkg_block_autoassignment == 1)
				{
					BookingLog::model()->createLog($this->bkg_id, 'BookingID: ' . $this->bkg_booking_id . ' is blocked for auto assignment', $userInfo, BookingLog:: BLOCK_AUTOASSIGNMENT, false, false);
				}
				Logger::profile("Booking Other Models Saved");
				BookingsDataCreated::model()->setData($this->bkg_id);
				Logger::create("Agent booking assignment test 1:\t" . $this->bkg_agent_id, CLogger::LEVEL_PROFILE);
				$bkgBookingUser = BookingUser::model()->saveVerificationOtp($this->bkg_id);

				$this->bkgUserInfo = $bkgBookingUser;
				DBUtil::commitTransaction($transaction);
				if ($this->bkg_agent_id > 0 && $this->bkg_status == 15)
				{
					Logger::create('Agent booking assignment test 2:\t' . $this->bkg_agent_id, CLogger::LEVEL_PROFILE);
					$emailCom = new emailWrapper();
					$emailCom->gotBookingemail($this->bkg_id, BookingLog::System, $this->bkg_agent_id);
					$emailCom->gotBookingAgentUser($this->bkg_id);

					$response = WhatsappLog::sendPaymentRequestForBkg($this->bkg_id);
					if (!$response || $response['status'] == 3)
					{
						$msgCom = new smsWrapper();
						$msgCom->gotBooking($this, BookingLog::System);
					}
				}
				elseif (($this->bkg_agent_id == '' || $this->bkg_agent_id == null || $this->bkg_agent_id == 0) && $this->bkg_status == 2)
				{
					Logger::create("Agent booking assignment test 7:\t" . $this->bkg_agent_id, CLogger::LEVEL_PROFILE);
					$this->sendConfirmation($logType);
				}
				elseif (($this->bkg_agent_id == '' || $this->bkg_agent_id == null || $this->bkg_agent_id == 0) && $this->bkg_status == 15)
				{


					$emailCom = new emailWrapper();
					$emailCom->gotCreateQuoteBookingemail($this->bkg_id, BookingLog::System);

					$response = WhatsappLog::sendPaymentRequestForBkg($this->bkg_id);
					if (!$response || $response['status'] == 3)
					{
						$msgCom = new smsWrapper();
						$msgCom->gotCreateQuoteBookingsms($this->bkg_id, BookingLog::System);
					}
				}
				BookingTrail::impBookingFollowup($this->bkg_id, true, true);
			}
			catch (Exception $e)
			{
				DBUtil::rollbackTransaction($transaction);
				$returnSet = ReturnSet::setException($e);
				return false;
			}
			return true;
		}
		return false;
	}

	public function setInstructionDriverVendor()
	{
		$corpIns = "";
		foreach ($this->corpAddtDetails as $value)
		{
			if ($value == 1)
			{
				$corpIns .= ' Driver and Car details required at least 12 hours before the pickup, ';
			}
			if ($value == 2)
			{
				$corpIns .= ' Corporate booking Ã¢â‚¬â€œ car must be new and clean inside and outside, ';
			}
			if ($value == 3)
			{
				$corpIns .= ' Corporate company require duty slips for all parking or toll payments, ';
			}
			if ($value == 4)
			{
				$corpIns .= ' Do not ask traveller for any cash. Contact Gozo for any issues, ';
			}
		}
		if ($this->bkg_instruction_to_driver_vendor != '')
		{
			$corpIns .= $this->bkg_instruction_to_driver_vendor . ", ";
		}
		if ($corpIns != '')
		{
			$this->bkg_instruction_to_driver_vendor = rtrim($corpIns, ', ');
		}
	}

	public function editAccountsInfo($bkgid, $oldModel, $oldData)
	{
		$transaction = DBUtil::beginTransaction();
		try
		{
			$cabmodel	 = $this->getBookingCabModel();
			$bkgamt		 = $this->bkgInvoice->bkg_total_amount;
			$userInfo	 = UserInfo::getInstance();
			if (count($cabmodel->bookings) == 1 && $cabmodel->bcb_vendor_id == '')
			{
				$cabmodel->bcb_vendor_amount = $this->bkgInvoice->bkg_vendor_amount;
				$cabmodel->bcb_bkg_id1		 = $bkgid;
				$cabmodel->update();
			}
			$amtdue								 = $this->bkgInvoice->bkg_due_amount	 = $bkgamt - $this->bkgInvoice->getTotalPayment();
			$vndamt								 = $cabmodel->bcb_vendor_amount;
			$gzamount							 = $bkgamt - $this->bkgInvoice->bkg_vendor_amount;
			if ($gzamount == '')
			{
				$gzamount							 = $bkgamt - $vndamt;
				$this->bkgInvoice->bkg_gozo_amount	 = $gzamount;
			}
			$gzdue		 = $gzamount - $this->bkgInvoice->getAdvanceReceived();
			$vendorDue	 = $this->bkgInvoice->bkg_vendor_collected - $cabmodel->bcb_vendor_amount;
			if ($cabmodel->bcbVendor && ($this->bkg_status == 6 || $this->bkg_status == 7))
			{
				$this->scenario						 = 'vendor_collected_update';
				$this->bkgInvoice->bkg_gozo_amount	 = round($gzamount);
				$this->bkgInvoice->bkg_due_amount	 = $this->bkgInvoice->bkg_total_amount - $this->bkgInvoice->getTotalPayment();
			}
			$this->bkgInvoice->addCorporateCredit();
			$this->bkgInvoice->calculateTotal();
			$this->bkgInvoice->calculateVendorAmount();
			if ($this->save())
			{
				$this->bkgInvoice->save();
			}
			if ($cabmodel->bcbVendor && ($this->bkg_status == 6 || $this->bkg_status == 7))
			{
				if (AccountTransDetails::model()->revertVenTransOnEditAcc($cabmodel->bcb_id, $bkgid, Accounting:: LI_TRIP, Accounting::LI_OPERATOR))
				{
					$bookingCab			 = new BookingCab();
					$bookingCab->bcb_id	 = $cabmodel->bcb_id;
					$date				 = new DateTime($this->bkg_pickup_date);
					$duration			 = $this->bkg_trip_duration | 120;
					$date->add(new DateInterval('PT' . $duration . 'M'));
//  $amountsbyTrip = $bookingCab->getTripTotalBookingAmounts();
					AccountTransactions::model()->AddVendorCollection($cabmodel->bcb_vendor_amount, $this->bkgInvoice->bkg_vendor_collected, $cabmodel->bcb_id, $this->bkg_id, $cabmodel->bcb_vendor_id, $date->format('Y-m-d H:i:s'));
					AccountTransactions::model()->AddVendorPurchaseTrip($cabmodel->bcb_vendor_amount, $bkmodel->bkgInvoice->bkg_vendor_collected, $cabmodel->bcb_id, $bkmodel->bkg_id, $cabmodel->bcb_vendor_id, $date->format('Y-m-d H:i:s'));
				}
			}
			$user_type			 = UserInfo::getInstance()->getUserType();
			$user_id			 = UserInfo::getInstance()->getUserId();
			$evtList			 = BookingLog::model()->eventList();
			$evtAcct			 = BookingLog::ACCOUNT_REMARKS;
			$descAcct			 = $evtList[$evtAcct];
			$msg				 = $this->setAccountsRemark();
			$return['success']	 = true;
			$newData			 = $this->getDetailsbyId($bkgid);
			$getOldDifference	 = array_diff_assoc($oldData, $newData);
			$getNewDifference	 = array_diff_assoc($newData, $oldData);
			$changesForConsumer	 = $this->getModificationMSG($getNewDifference, 'consumer');
			$changesForVendor	 = $this->getModificationMSG($getNewDifference, 'vendor');
			$changesForDriver	 = $this->getModificationMSG($getNewDifference, 'driver');
			$changesForLog		 = " Old Values: " . $this->getModificationMSG($getOldDifference, 'log') .
					" :: New Values: " . $this->getModificationMSG($getNewDifference, 'log');
			$eventid			 = BookingLog::ACCOUNTS_DETAILS_MODIFIED;
			$logDesc			 = $evtList[$eventid];
			$desc				 = $logDesc . $changesForLog . "</BR>Accounting Remarks:- " . $msg;
			BookingLog::model()->createLog($bkgid, $desc, $userInfo, $eventid, $oldModel);
			$chk				 = $this->chk_user_msg;
			$user				 = $vendor				 = $driver				 = false;
			if ($chk != null && is_array($chk))
			{
				$user	 = (in_array(0, $chk)) ? true : false;
				$driver	 = (in_array(1, $chk)) ? true : false;
				$vendor	 = (in_array(2, $chk)) ? true : false;
			}
			BookingLog::model()->informChangesLog($bkgid, $changesForConsumer, $changesForVendor, $changesForDriver);
			if ($cabmodel->bcb_vendor_id != '' && ($this->bkg_status > 2 && $this->bkg_status != 15) && trim($changesForVendor) != '' && $vendor)
			{
				$tripStatus		 = $cabmodel->getLowestBookingStatusByTrip($cabmodel->bcb_id, $cabmodel->bcb_pending_status);
				$tripBkgStatus	 = 0;
				if ($tripStatus)
				{
					$tripBkgStatus = $tripStatus;
				}
				$payLoadData = ['tripId' => $cabmodel->bcb_id, 'Status' => $tripBkgStatus, 'EventCode' => Booking::CODE_MODIFIED];
				$success	 = AppTokens::model()->notifyVendor($cabmodel->bcb_vendor_id, $payLoadData, $changesForVendor, $this->bkg_booking_id . " details has been modified.");
			}
			if ($this->bkgUserInfo->bkg_user_id != '' && trim($changesForConsumer) != '' && $user)
			{
				$success1 = notificationWrapper::customerNotifyBookingModified($bkgid, $changesForConsumer);

//				$notificationId	 = substr(round(microtime(true) * 1000), -5);
//				$payLoadData1	 = ['bookingId' => $this->bkg_booking_id, 'EventCode' => Booking::CODE_MODIFIED];
//				$success1		 = AppTokens::model()->notifyConsumer($this->bkgUserInfo->bkg_user_id, $payLoadData1, $notificationId, $changesForConsumer, $this->bkg_booking_id . " details has been modified.");
			}
			BookingTrail::updateProfitFlag($cabmodel->bcb_id);
			DBUtil::commitTransaction($transaction);
			return true;
		}
		catch (Exception $e)
		{
			$this->addError('bkg_id', $e->getMessage());
			$return['error'] = $this->getErrors();
			DBUtil::rollbackTransaction($transaction);
		}
	}

	public function setAccountsRemark()
	{
		$msg = '';
		if ($this->bkg_total_amount_remark != '')
		{
			$msg .= ' Booking Amount: ' . trim($this->bkg_total_amount_remark) . ',';
		}
		if ($this->bkg_trip_distance_remark != '')
		{
			$msg .= ' Trip Distance: ' . trim($this->bkg_trip_distance_remark) . ',';
		}
		if ($this->bkgInvoice->bkg_additional_charge_remark != '')
		{
			$msg .= ' Additional Charge: ' . trim($this->bkgInvoice->bkg_additional_charge_remark) . ',';
		}
		if ($this->bkg_refund_amount_remark != '')
		{
			$msg .= ' Refund: ' . trim($this->bkg_refund_amount_remark) . ',';
		}
		if ($this->bkg_gozo_amount_remark != '')
		{
			$msg .= ' Gozo Amount: ' . trim($this->bkg_gozo_amount_remark) . ',';
		}
		if ($this->bkg_vendor_amount_remark != '')
		{
			$msg .= ' Vendor Amount: ' . trim($this->bkg_vendor_amount_remark) . ',';
		}
		if ($this->bkg_credits_used_remark != '')
		{
			$msg .= ' Gozo Coins Used: ' . trim($this->bkg_credits_used_remark) . ',';
		}
		if ($this->bkg_advance_amount_remark != '')
		{
			$msg .= ' Advance Amount: ' . trim($this->bkg_advance_amount_remark) . ',';
		}
		if ($this->bkg_vendor_collected_remark != '')
		{
			$msg .= ' Vendor Collected: ' . trim($this->bkg_vendor_collected_remark) . ',';
		}
		return $msg;
	}

	public function editUserInfo($oldData, $oldModel, $params = false)
	{
		$transaction = DBUtil::beginTransaction();
		if ($this->bkgAddInfo->bkg_info_source == '')
		{
			$this->bkgAddInfo->bkg_info_source = 'Others';
		}

		$result1 = CActiveForm::validate($this);
		if ($result1 == '[]')
		{
			try
			{
				BookingMessages::model()->setDataByEditUserInfo($this->agentNotifyData, $this->bkg_id);
				$bkmodel = $this->findByPk($this->bkg_id);
				$this->appendRemarks();
				$this->uploadAttachment();
				if (!$this->save())
				{
					throw new Exception("Booking edit failed. (" . json_encode($this->getErrors()) . ")");
				}
				$newData			 = $this->getDetailsbyId($this->bkg_id);
				$getOldDifference	 = array_diff_assoc($oldData, $newData);
				$changesForLog		 = " Old Values: " . $this->getModificationMSG($getOldDifference, 'log');
				$msgCom				 = new smsWrapper();
				$msgCom->sendMessagesOnEditBooking($this->bkg_id, $getOldDifference, $oldData, $newData, $oldModel);

				$logDesc	 = "Booking modified";
				$eventid	 = BookingLog::BOOKING_MODIFIED;
				$desc		 = $logDesc . $changesForLog;
				$bkgid		 = $this->bkg_id;
				$userInfo	 = UserInfo::getInstance();

				BookingLog::model()->createLog($bkgid, $desc, $userInfo, $eventid, $oldModel, $params);

				if ($this->bkgUserInfo->bkg_user_id > 0 && (($oldModel->bkgInvoice->bkg_promo1_id == '' && $this->bkgInvoice->bkg_promo1_id != '') || ($oldModel->bkgInvoice->bkg_promo1_id != '' && $this->bkgInvoice->bkg_promo1_id != '' && $oldModel->bkgInvoice->bkg_promo1_id != trim($this->bkgInvoice->bkg_promo1_id))))
				{
					BookingLog::model()->createLog($this->bkg_id, "Promo " . $this->bkgInvoice->bkg_promo1_code . " applied successfully.", $userInfo, BookingLog:: BOOKING_PROMO, false, ['blg_ref_id' => BookingLog::REF_PROMO_APPLIED]);
				}
				if ($this->bkgUserInfo->bkg_user_id > 0 && ($oldModel->bkgInvoice->bkg_promo1_id != '' && $this->bkgInvoice->bkg_promo1_id == ''))
				{
					BookingLog::model()->createLog($this->bkg_id, "Promo " . $oldModel->bkgInvoice->bkg_promo1_code . " removed successfully.", $userInfo, BookingLog:: BOOKING_PROMO, false, ['blg_ref_id' => BookingLog::REF_PROMO_REMOVED]);
				}

				if ($this->lead_id > 0)
				{
					$logType = UserInfo::TYPE_SYSTEM;
					$this->sendConfirmation($logType);
				}
				DBUtil::commitTransaction($transaction);
				return true;
			}
			catch (Exception $e)
			{
				$this->addError("bkg_id", $e->getMessage());
				$return['error'] = $this->getErrors();
				DBUtil::rollbackTransaction($transaction);
				return false;
			}
		}
		else
		{
			return false;
		}
	}

	/*   public function getFlexxiProfitAmount($bcbId)
	  {
	  $sql = 'SELECT ROUND((SUM(bkg_base_amount)-ROUND(AVG(bkg_flexxi_base_amount)))*0.25)   FROM `booking` WHERE bkg_vehicle_type_id=114 AND bkg_bcb_id = ' . $bcbId . ' AND bkg_status NOT IN(8,9,10,1,13) AND bkg_active=1 GROUP BY bkg_bcb_id';
	  $profit = DBUtil::command($sql)->queryScalar();
	  return ($profit > 0) ? (int) $profit : 0;
	  } */

	public function getMatchBookingIdbyTripId($bcbId)
	{
//$sql		 = "SELECT * FROM `booking` WHERE bkg_bcb_id='$bcbId' AND bkg_status IN(2,3,5,6,7)";
		$sql		 = "SELECT bkg_id,bkg_booking_id,bkg_vendor_collected,bkg_agent_id,bkg_pickup_date FROM `booking` LEFT JOIN `booking_invoice` ON booking_invoice.biv_bkg_id=booking.bkg_id WHERE bkg_bcb_id='$bcbId' AND bkg_status IN(2,3,5,6,7)";
		$recordSet	 = DBUtil::queryAll($sql);
		return $recordSet;
	}

	public function findNoOfSeatAvailableForBooking($id)
	{
// $sql    = "SELECT ((SELECT SUM(IFNULL(bad.bkg_no_person,0)) FROM booking b1 LEFT JOIN booking_add_info bad ON bad.bad_bkg_id=b1.bkg_id WHERE b1.bkg_bcb_id=booking.bkg_bcb_id)- booking_add_info.bkg_no_person) remainingSeat FROM booking LEFT JOIN booking_add_info ON booking_add_info.bad_bkg_id=booking.bkg_id WHERE booking.bkg_id=$id AND bkg_status NOT IN(8,9,1,13) AND bkg_active=1";
		$sql	 = "SELECT (vehicle_category.vct_capacity-(
					SELECT SUM(IFNULL(bad.bkg_no_person,0))
					FROM booking b1
					INNER JOIN booking_add_info bad ON bad.bad_bkg_id=b1.bkg_id
					WHERE b1.bkg_bcb_id=booking.bkg_bcb_id)) remainingSeat
					FROM booking
					JOIN svc_class_vhc_cat scv ON scv.scv_id = booking.bkg_vehicle_type_id
					JOIN vehicle_category ON vehicle_category.vct_id = scv.scv_vct_id
					WHERE booking.bkg_id=$id AND bkg_status NOT IN(8,9,1,13) AND bkg_active=1";
		$result	 = DBUtil::command($sql)->queryScalar();
		return $result;
	}

	public function getRemainingSeats($bcbId)
	{
		$sql	 = "SELECT vct_capacity-SUM(bkg_no_person) FROM `booking` LEFT JOIN `booking_add_info` ON booking_add_info.bad_bkg_id=booking.bkg_id LEFT JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg_vehicle_type_id LEFT JOIN vehicle_category ON vct_id = scv.scv_vct_id WHERE `bkg_bcb_id` = $bcbId AND bkg_status IN(2,3,5)";
		$result	 = DBUtil::command($sql)->queryScalar();
		return $result;
	}

	public function findFlexxiBookingOfLastMinute()
	{
		$sql	 = "SELECT
							bkg_bcb_id
						   FROM
							(SELECT
							  bkg_bcb_id,
							  (vct_capacity - SUM(booking_add_info.bkg_no_person))
								remaining,
							  SUM(
								IF(
								  bkg_flexxi_type = 1,
								  1,
								  0))
								isFlexxi
							 FROM
							  booking
							  INNER JOIN booking_add_info ON booking_add_info.bad_bkg_id =booking.bkg_id
							   JOIN booking_pref bp ON bkg_id = bp.bpr_bkg_id
							  JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg_vehicle_type_id
							  JOIN vehicle_category ON vct_id = scv.scv_vct_id
							 WHERE
							  bkg_pickup_date BETWEEN NOW()
												  AND DATE_ADD(
														NOW(),
														INTERVAL 360 MINUTE) AND
							  bkg_status IN (2,
											 3,
											 5) AND
							  bp.bkg_is_msg_matched_flexxi = 0
							 GROUP BY
							  bkg_bcb_id
							 HAVING
							  remaining > 1 AND
							  isFlexxi = 0) a";
		$result	 = DBUtil::queryAll($sql);
		return $result;
	}

	public function findFlexxiBookingOfLastMinuteForConfirmation()
	{
		$sql	 = "SELECT
						bkg_bcb_id
					   FROM
						(SELECT
						  bkg_bcb_id,
						  (vehicle_category.vct_capacity -
						   SUM(
							 IFNULL(
							   booking_add_info.bkg_no_person,
							   0)))
							remainingSeats
						 FROM
						  booking
						  INNER JOIN booking_add_info ON booking_add_info.bad_bkg_id =booking.bkg_id
						  JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg_vehicle_type_id
						  JOIN vehicle_category ON vct_id = scv.scv_vct_id
						   JOIN booking_pref bp ON bkg_id = bp.bpr_bkg_id
						 WHERE
						  bkg_flexxi_type = 2 AND
						  bkg_pickup_date BETWEEN NOW()
											  AND DATE_ADD(
													NOW(),
													INTERVAL 360 MINUTE) AND
						  bkg_status IN (2,
										 3,
										 5) AND
						  bp.bkg_is_msg_matched_flexxi = 0
						 GROUP BY
						  bkg_bcb_id
						 HAVING
						  remainingSeats <= 1) a";
		$result	 = DBUtil::queryAll($sql);
		return $result;
	}

	public function your_array_diff($arraya, $arrayb)
	{
		foreach ($arraya as $keya => $valuea)
		{
			if (in_array($valuea, $arrayb))
			{
				unset($arraya[$keya]);
			}
		}
		return $arraya;
	}

	public function getBkgIdByBcbIdForFlexxiMatch($bcbId)
	{
		$sql		 = "SELECT bkg_id FROM `booking` WHERE bkg_bcb_id='$bcbId' AND bkg_status IN(2,3,5) AND bkg_flexxi_type=2 AND bkg_fp_id is null AND bkg_flexxi_time_slot IS NOT NULL";
		$recordSet	 = DBUtil::queryAll($sql);
		return $recordSet;
	}

	public function markSettled()
	{
		$limit	 = 5000;
		$sql	 = "SELECT bkg_id FROM booking INNER JOIN booking_pref ON booking.bkg_id = booking_pref.bpr_bkg_id  WHERE bkg_status= 6 AND
				bkg_account_flag = 0 AND
              DATE_ADD(bkg_pickup_date,INTERVAL (if(`bkg_trip_duration`='' OR `bkg_trip_duration` IS NULL , 300 ,`bkg_trip_duration`))
              MINUTE) < DATE_SUB(NOW(), INTERVAL 2 MONTH) ORDER BY bkg_create_date ASC LIMIT $limit";
		$dataSet = DBUtil::queryAll($sql);
		$i		 = 0;
		foreach ($dataSet as $dt)
		{
			echo $bkgId = $dt['bkg_id'];

			$model		 = Booking::model()->findByPk($bkgId);
			$oldModel	 = $model;

			$sql		 = "UPDATE booking SET bkg_status= 7 WHERE bkg_status= 6  AND bkg_id = $bkgId ";
			$rowsUpdated = DBUtil::command($sql)->execute();
			if ($rowsUpdated)
			{
				$eventId						 = BookingLog::BOOKING_MARKED_SETTLED;
				$desc							 = "Booking Marked as settled ";
				$params['blg_booking_status']	 = $model->bkg_status;
				$userInfo						 = UserInfo::model();
				BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel, $params);
				$i++;
			}
		}
		echo $i . " Out Of " . $limit . " Mark Settled Successfully";
	}

	/**
	 * Function for rating of particular city
	 * @param type $city_id
	 */
	public function getFromCityRatings($city_id)
	{
		$sql = "SELECT b.bkg_from_city_id,
				IF(AVG(IFNULL(r.rtg_customer_overall, 4.4)) <= 4, '4.2', ROUND(AVG(IFNULL(r.rtg_customer_overall, 4.4)), 1)) as avgrating, COUNT(1) as cnt
				FROM booking b
				LEFT JOIN ratings r ON r.rtg_booking_id = b.bkg_id AND r.rtg_customer_overall > 0 AND r.rtg_active = 1
				WHERE b.bkg_status IN (6,7) AND b.bkg_active = 1 AND b.bkg_from_city_id=" . $city_id . "
				GROUP BY b.bkg_from_city_id";

		$resBookingRatings = DBUtil::queryAll($sql);
		if ($resBookingRatings && count($resBookingRatings) > 0)
		{
			$rating		 = $resBookingRatings[0]['avgrating'];
			$cnt		 = ($resBookingRatings[0]['cnt'] > 10 ? $resBookingRatings[0]['cnt'] : 10);
			$avgRating	 = array("avgrating" => $rating, "cnt" => $cnt);
		}
		else
		{
			$avgRating = array("avgrating" => "4.4", "cnt" => 10);
		}
		return $avgRating;
	}

	/**
	 * Function for getting the Structured Markup Data as defined by schema
	 * @param $objBooking Booking
	 */
	public function getStructMarkupForBookingConfirmation($objBooking)
	{
// Main Node
		$arrStructData						 = array();
		$arrStructData['@context']			 = "http://schema.org/";
		$arrStructData['@type']				 = "RentalCarReservation";
		$arrStructData['reservationNumber']	 = $objBooking->bkg_booking_id;
		$arrStructData['reservationStatus']	 = 'Confirmed';
//		$response							 = Contact::referenceUserData($objBooking->bkgUserInfo->bui_id, 3);
//		if ($response->getStatus())
//		{
		$phone								 = $objBooking->bkgUserInfo->bkg_contact_no;
		$firstName							 = $objBooking->bkgUserInfo->bkg_user_fname;
		$lastName							 = $objBooking->bkgUserInfo->bkg_user_lname;
		$email								 = $objBooking->bkgUserInfo->bkg_user_email;
//}
// Provider
		$arrStructData['provider']			 = array();
		$arrStructData['provider']['@type']	 = "Organization";
		$arrStructData['provider']['name']	 = 'GozoCabs';
		$arrStructData['provider']['url']	 = Yii::app()->getBaseUrl(true);
		$arrStructData['provider']['logo']	 = Yii::app()->getBaseUrl(true) . "/images/logo2_outstation.png";

// Provider Rating
		$arrCompanyInfo												 = Yii::app()->params['companyInfo'];
		$arrStructData['provider']['aggregateRating']				 = array();
		$arrStructData['provider']['aggregateRating']['@type']		 = "AggregateRating";
		$arrStructData['provider']['aggregateRating']['ratingValue'] = $arrCompanyInfo['rating'];
		$arrStructData['provider']['aggregateRating']['ratingCount'] = $arrCompanyInfo['ratingCount'];

// Provider Contact Point
		$arrStructData['provider']['contactPoint'] = array();

// Contact Point
		$arrContactPoint							 = array();
		$arrContactPoint['@type']					 = "ContactPoint";
		$arrContactPoint['telephone']				 = "+91-90518-77-000";
		$arrContactPoint['contactType']				 = "Customer service";
		$arrStructData['provider']['contactPoint'][] = $arrContactPoint;
		$arrContactPoint['telephone']				 = "+1-650-741-4696";
		$arrStructData['provider']['contactPoint'][] = $arrContactPoint;

// Booked By
		$arrStructData['underName']			 = array();
		$arrStructData['underName']['@type'] = "Person";
		$arrStructData['underName']['name']	 = trim($firstName) . ' ' . trim($lastName);
		$arrStructData['underName']['email'] = $email;

// Reservation Info
		$arrStructData['reservationFor']					 = array();
		$arrStructData['reservationFor']['@type']			 = "RentalCar";
		$arrStructData['reservationFor']['name']			 = $objBooking->bkgSvcClassVhcCat->scc_VehicleCategory->vct_label . ' (' . $objBooking->bkgSvcClassVhcCat->scc_ServiceClass->scc_label . ')';
		$arrStructData['reservationFor']['model']			 = $objBooking->bkgSvcClassVhcCat->scc_VehicleCategory->vct_desc;
		$arrStructData['reservationFor']['brand']			 = array();
		$arrStructData['reservationFor']['brand']['@type']	 = "Brand";
		$arrStructData['reservationFor']['brand']['name']	 = $objBooking->bkgSvcClassVhcCat->scc_VehicleCategory->vct_label . ' (' . $objBooking->bkgSvcClassVhcCat->scc_ServiceClass->scc_label . ')';

		$arrStructData['reservationFor']['rentalCompany']			 = array();
		$arrStructData['reservationFor']['rentalCompany']['@type']	 = "Organization";
		$arrStructData['reservationFor']['rentalCompany']['name']	 = "GozoCabs";

// Pickup Info
		$fromCtyGarageAddress	 = $objBooking->bkgFromCity->cty_garage_address;
		$toCtyGarageAddress		 = $objBooking->bkgToCity->cty_garage_address;

		$arrStructData['pickupLocation']				 = array();
		$arrStructData['pickupLocation']['@type']		 = "Place";
		$arrStructData['pickupLocation']['name']		 = $objBooking->bkgFromCity->cty_name;
		$arrStructData['pickupLocation']['telephone']	 = $phone;

		$arrStructData['pickupLocation']['address']						 = array();
		$arrStructData['pickupLocation']['address']['@type']			 = "PostalAddress";
		$arrStructData['pickupLocation']['address']['addressCountry']	 = 'India';
		$arrStructData['pickupLocation']['address']['addressLocality']	 = $objBooking->bkgFromCity->cty_name;
		$arrStructData['pickupLocation']['address']['addressRegion']	 = $objBooking->bkgFromCity->ctyState->stt_name;

		if (!is_null($objBooking->bkg_pickup_address) && trim($objBooking->bkg_pickup_address) != '')
		{
			$arrStructData['pickupLocation']['address']['streetAddress'] = trim($objBooking->bkg_pickup_address);
		}
		else
		{
			$arrStructData['pickupLocation']['address']['streetAddress'] = $fromCtyGarageAddress;
		}

//$arrStructData['pickupLocation']['address']['postalCode'] = $this->extractPincodeFromAddress($arrStructData['pickupLocation']['address']['streetAddress']);
// Pickup DateTime
		$objDate					 = new \DateTime($objBooking->bkg_pickup_date, new \DateTimeZone('Asia/Kolkata'));
		$objDate->setTimezone(new \DateTimeZone('UTC'));
		$arrStructData['pickupTime'] = $objDate->format("Y-m-d\TH:i:s") . "+05:30";

// Drop Info
		$arrStructData['dropoffLocation']				 = array();
		$arrStructData['dropoffLocation']['@type']		 = "Place";
		$arrStructData['dropoffLocation']['name']		 = $objBooking->bkgToCity->cty_name;
		$arrStructData['dropoffLocation']['telephone']	 = $phone;

		$arrStructData['dropoffLocation']['address']					 = array();
		$arrStructData['dropoffLocation']['address']['@type']			 = "PostalAddress";
		$arrStructData['dropoffLocation']['address']['addressCountry']	 = 'India';
		$arrStructData['dropoffLocation']['address']['addressLocality']	 = $objBooking->bkgToCity->cty_name;
		$arrStructData['dropoffLocation']['address']['addressRegion']	 = $objBooking->bkgToCity->ctyState->stt_name;

		if (!is_null($objBooking->bkg_drop_address) && trim($objBooking->bkg_drop_address) != '')
		{
			$arrStructData['dropoffLocation']['address']['streetAddress'] = trim($objBooking->bkg_drop_address);
		}
		else
		{
			$arrStructData['dropoffLocation']['address']['streetAddress'] = $toCtyGarageAddress;
		}


		$objDate						 = new \DateTime($objBooking->bkg_pickup_date, new \DateTimeZone('Asia/Kolkata'));
		$objDate->modify('+' . $objBooking->bkg_trip_duration . ' minutes');
//}
		$objDate->setTimezone(new \DateTimeZone('UTC'));
		$arrStructData['dropoffTime']	 = $objDate->format("Y-m-d\TH:i:s") . "+05:30";

// Booking View Url
		$urlView = Yii::app()->createAbsoluteUrl("booking/view") . "?bookingID=" . $objBooking->bkg_id;

// Potential Action
		$arrStructData['potentialAction']			 = array();
		$arrStructData['potentialAction']['@type']	 = "ViewAction";
		$arrStructData['potentialAction']['url']	 = $urlView;

// Modified DateTime
		if (!is_null($objBooking->bkg_modified_on) && trim($objBooking->bkg_modified_on) != '')
		{
			$objDate = new \DateTime($objBooking->bkg_modified_on, new \DateTimeZone('Asia/Kolkata'));
		}
		else
		{
			$objDate = new \DateTime($objBooking->bkg_pickup_date, new \DateTimeZone('Asia/Kolkata'));
		}
		$objDate->setTimezone(new \DateTimeZone('UTC'));
		$arrStructData['modifiedTime']			 = $objDate->format("Y-m-d\TH:i:s") . "+05:30";
		$arrStructData['modifyReservationUrl']	 = $urlView;

//echo "<pre>";
//print_r($arrStructData);

		return $arrStructData;
	}

	public function extractPincodeFromAddress($address)
	{
		$pincode = '';
		if ($address != '')
		{
			preg_match('/(?<![0-9])[0-9]{6}(?![0-9])/', $address, $matches);
			$pincode = $matches[0];
		}
		return $pincode;
	}

	public function fetchUberList($pageSize = 100, $type = 'data', $csrId = 0, $count)
	{
		$sort	 = "bkg_pickup_date";
		$order	 = [1 => 'DESC', 2 => 'ASC', 3 => 'ASC', 5 => 'DESC', 6 => 'ASC', 7 => 'ASC'];

		if ($this->bkg_status == 0)
		{
			$strStatus = "2,3,5";
		}
		$sql = $this->getListQuery($csrId, 1, $strStatus);

		if ($type == 'data')
		{
			if ($count === null)
			{
				$count = DBUtil::command("SELECT COUNT(1) FROM ($sql) abc")->queryScalar();
			}

			$dataprovider = new CSqlDataProvider($sql, [
				'totalItemCount' => $count,
				'pagination'	 => ['pageSize' => $pageSize],
			]);
			return $dataprovider;
		}
		elseif ($type == 'command')
		{
			return DBUtil::queryAll($sql);
		}
	}

	public function getBooingIdForNotifyCustomer($fromDate, $toDate, $fromCity, $toCity)
	{
		$sql = "SELECT COUNT(1) FROM booking WHERE bkg_from_city_id=$fromCity AND bkg_to_city_id=$toCity AND bkg_pickup_date>'$fromDate' AND bkg_pickup_date<'$toDate' AND bkg_flexxi_type=1 AND bkg_active=1 AND bkg_status IN(2,3,5)";
		return DBUtil::command($sql)->queryScalar();
	}

	/**
	 * Finds a single active record with the specified primary key.
	 * See {@link find()} for detailed explanation about $condition and $params.
	 * @param mixed $pk primary key value(s). Use array for multiple primary keys. For composite key, each key value must be an array (column name=>column value).
	 * @param mixed $condition query condition or criteria.
	 * @param array $params parameters to be bound to an SQL statement.
	 * @return static|null the record found. Null if none is found.
	 */
	public function findByPk($pk, $condition = '', $params = array())
	{
		Yii::trace(get_class($this) . '.findByPk()', 'system.db.ar.CActiveRecord');
//	$prefix=$this->getTableAlias(true).'.';
		$criteria = new CDbCriteria();
		$criteria->compare("bkg_id", $pk);
		return $this->query($criteria);
	}

	public function validationSendingSMS($zoneId, $limit = 300, $interval = 30)
	{
		$sql = "SELECT
				IF(
					DATE_ADD(
						last_msg_send,
						INTERVAL $interval MINUTE
					) < NOW(), 1, 0) AS validateSMS,cnt,
                    DATE_ADD(
						last_msg_send,
						INTERVAL $interval MINUTE
					), NOW()
				FROM
					(
					SELECT
						COUNT(1) AS cnt,
						MAX(
							booking_unreg_vendor.buv_created_at
						) AS last_msg_send
					FROM
						`booking_unreg_vendor`
					INNER JOIN `booking` ON booking.bkg_id=booking_unreg_vendor.buv_bkg_id
					AND DATE(booking.bkg_pickup_date)=DATE(booking_unreg_vendor.buv_bkg_pickup_date)
					WHERE
						booking_unreg_vendor.buv_zon_id = '$zoneId'
				) a";
		$row = DBUtil::queryRow($sql);
		if ($row['cnt'] >= $limit)
		{
			$returnVal = $row['validateSMS'];
		}
		else
		{
			$returnVal = 1;
		}
		return $returnVal;
	}

	public function sendSMSToUnregisteredVendors($bkgId)
	{
		/* @var $objBooking Booking */
		$objBooking	 = Booking::model()->resetScope()->findByPk($bkgId);
		$bkgStatus	 = $objBooking->bkg_status;
		$fromCityId	 = $objBooking->bkg_from_city_id;
		$toCityId	 = $objBooking->bkg_to_city_id;
		$limit		 = 500;
		$limitTotal	 = 500;
		$smsInterval = 15;
		if ($bkgStatus == 2)
		{
// From City Route
			$fromRouteId = Route::model()->getRutidbyCities($fromCityId, $toCityId);
// Booking City Zone
			$fromZoneId	 = 0;
			$zones		 = ZoneCities::getZonesByCity($fromCityId);
			if ($zones)
			{
				$fromZoneId = $zones;
			}
// To City Route
			$toRouteId	 = Route::model()->getRutidbyCities($toCityId, $fromCityId);
// Booking City Zone
			$toZoneId	 = 0;
			$zones		 = ZoneCities::getZonesByCity($toCityId);
			if ($zones)
			{
				$toZoneId = $zones;
			}
// Getting Unregistered Operators (From Zone)
			$resUnVerOperators = BookingUnregVendor::model()->findPhoneByBkgZone($bkgId, $fromZoneId, $limit);
// If From City unregistered vendors not available
			if (!$resUnVerOperators)
			{
// Getting Unregistered Operators (To Zone)
				$resUnVerOperators = BookingUnregVendor::model()->findPhoneByBkgZone($bkgId, $toZoneId, $limit);
			}
			$flgSMSSend		 = true;
			$countLead		 = count($resUnVerOperators);
			static $countSms = 0;
			if ($resUnVerOperators && count($resUnVerOperators) > 0)
			{
				$validateTotalSms = $this->validationSendingSMS($resUnVerOperators[0]['uo_zone'], $limitTotal, $smsInterval);
				if ($validateTotalSms == 0)
				{
					$errorMsg = "You can try this feature after $smsInterval minutes of the previous successful attempt.";
					return ['success' => false, 'error' => $errorMsg];
				}

				foreach ($resUnVerOperators as $unVerOperator)
				{
					$uoId							 = $unVerOperator['uo_id'];
					$uoName							 = trim($unVerOperator['uo_name']);
					$uoPhone						 = trim($unVerOperator['uo_phone']);
					$buvModel						 = new BookingUnregVendor();
					$buvModel->buv_uo_id			 = $uoId;
					$buvModel->buv_bkg_id			 = $bkgId;
					$buvModel->buv_bcb_id			 = $objBooking->bkg_bcb_id;
					$buvModel->buv_vendor_id		 = 0;
					$buvModel->buv_is_apply			 = 0;
					$buvModel->buv_is_add			 = 0;
					$buvModel->buv_sent_by			 = UserInfo::getUserId();
					$buvModel->buv_zon_id			 = $unVerOperator['uo_zone'];
					$buvModel->buv_bkg_pickup_date	 = $objBooking->bkg_pickup_date;
					$buvModel->buv_active			 = 1;
					if ($buvModel->validate())
					{
						if ($buvModel->save())
						{
							$buvId = $buvModel->buv_id;
						}
						else
						{
							$errors = $buvModel->getErrors();
						}
					}
					else
					{
						$errors = $buvModel->getErrors();
					}

					if (isset($buvId) && $buvId > 0)
					{
						$objSMS	 = new smsWrapper();
						$slgId	 = $objSMS->sendSMSToUnregisteredVendors($objBooking, $uoId, $uoPhone, $buvId, 91);
						if ($slgId > 0)
						{
							$countSms = ($countSms + 1);
						}
					}
				}
			}
			if ($countLead > 0 && $countSms == 0)
			{
				$flgSMSSend = false;
			}
			return ['success' => $flgSMSSend, 'countSms' => $countSms];
		}
		else
		{
			return ['success' => false, 'error' => ''];
		}
	}

	/* ----Service Tier Phase 2 Checked------- */

	public function create($postParams, $type = 'sale')
	{
		$success	 = false;
		$errors		 = '';
		$transaction = DBUtil::beginTransaction();
		try
		{
			$userInfo						 = UserInfo::getInstance();
			$userId							 = $userInfo->userId;
			$bmodel							 = new Booking();
			$bmodel->bkgInvoice				 = new BookingInvoice();
			$bmodel->bkgPf					 = new BookingPriceFactor();
			$bmodel->bkgTrack				 = new BookingTrack();
			$bmodel->bkgUserInfo			 = new BookingUser();
			$bmodel->bkgAddInfo				 = new BookingAddInfo();
			$bmodel->bkgTrail				 = new BookingTrail();
			$brtModel						 = new BookingRoute();
			$brtModel->brt_from_city_id		 = $postParams['rut_from_city_id'];
			$brtModel->brt_to_city_id		 = $postParams['rut_to_city_id'];
			$brtModel->brt_pickup_date_date	 = date('d/m/Y', strtotime($postParams['fls_pickup_date']));
			$brtModel->brt_pickup_date_time	 = date('h:i A', strtotime($postParams['fls_pickup_date']));
			$brtModel->brt_pickup_datetime	 = $postParams['fls_pickup_date'];
			$pickupCity						 = $brtModel->brt_from_city_id;
			$dropCity						 = $brtModel->brt_to_city_id;
			$bookingRoutes[]				 = $brtModel;
			$bmodel->bkg_pickup_address		 = $postParams['fls_pickup_address'];
			$bmodel->bkg_drop_address		 = $postParams['fls_drop_address'];
			$bmodel->bkg_flexxi_type		 = 2;
			$bmodel->bkg_booking_type		 = 1;
			$scvId							 = SvcClassVhcCat::model()->getScvIdByCatId(VehicleCategory:: SHARED_SEDAN_ECONOMIC, 1);
			$bmodel->bkg_vehicle_type_id	 = $scvId;
			$carType						 = $scvId;
			$bkgType						 = $bmodel->bkg_booking_type;
			$partnerId						 = Yii::app()->params['gozoChannelPartnerId'];
			$quote							 = new Quote();
			$quote->routes					 = $bookingRoutes;
			$quote->tripType				 = $bkgType;
			$quote->partnerId				 = $partnerId;
			$quote->quoteDate				 = date('Y-m-d H:i:s');
			$quote->pickupDate				 = $postParams['fls_pickup_date'];
			$quote->returnDate				 = '';
			$quote->flexxi_type				 = 2;
			if ($bmodel->bkg_flexxi_type == 2)
			{
				$quote->noofseat			 = 1;
				$quote->flexxi_base_amount	 = 1;
			}
			$quote->setCabTypeArr();
			$qt												 = $quote->getQuote($carType);
			$routeRates										 = $qt[11]->routeRates;
			$routeDistance									 = $qt[11]->routeDistance;
			$routeDuration									 = $qt[11]->routeDuration;
			$bmodel->bkg_from_city_id						 = $pickupCity;
			$bmodel->bkg_to_city_id							 = $dropCity;
			$bmodel->bkg_trip_distance						 = $routeDistance->quotedDistance;   // $qt['routeData']['quoted_km'];
			$bmodel->bkg_trip_duration						 = (string) $routeDuration->tripDuration; // $qt['routeData']['days']['totalMin'];
			$bmodel->bkg_pickup_date						 = $routeDuration->fromDate; //  $qt['routeData']['startTripDate'];
			$bmodel->bkgInvoice->bkg_chargeable_distance	 = $routeDistance->quotedDistance;   // $arrQuot['chargeableDistance'];
			$bmodel->bkgTrack->bkg_garage_time				 = $routeDuration->totalMinutes + $routeDuration->garageTimeEnd + $routeDuration->garageTimeStart;
			$bmodel->bkgInvoice->bkg_driver_allowance_amount = round(($routeRates->driverAllowance) / 4);   //$arrQuot['driverAllowance'];
			$bmodel->bkgInvoice->bkg_gozo_base_amount		 = round($routeRates->baseAmount);
			$bmodel->bkgInvoice->bkg_base_amount			 = FlashSale::getFlashBaseAmount();
			$bmodel->bkgInvoice->bkg_rate_per_km_extra		 = 0;
			$bmodel->bkgInvoice->bkg_rate_per_km			 = round($routeRates->costPerKM);
			$bmodel->bkgUserInfo->bkg_user_id				 = $userId;
			$bmodel->bkgInvoice->bkg_night_pickup_included	 = 0;
			$bmodel->bkgInvoice->bkg_night_drop_included	 = 0;
			$bmodel->bkgUserInfo->bkg_user_fname			 = $postParams['usr_name'];
			$bmodel->bkgUserInfo->bkg_user_lname			 = $postParams['usr_lname'];
			$bmodel->bkgUserInfo->bkg_user_email			 = $postParams['usr_email'];
			$bmodel->bkgUserInfo->bkg_contact_no			 = ($postParams['usr_mobile'] != '') ? str_replace(' ', '', $postParams['usr_mobile']) : $postParams['usr_mobile'];
			$bmodel->bkgInvoice->bkg_vendor_amount			 = $routeRates->vendorAmount;
			$bmodel->bkgAddInfo->bkg_no_person				 = 1;
			$bmodel->bkgInvoice->bkg_is_state_tax_included	 = 1;
			$bmodel->bkgInvoice->bkg_state_tax				 = round(($routeRates->stateTax) / 4);
			$bmodel->bkgInvoice->bkg_is_toll_tax_included	 = 1;
			$bmodel->bkgInvoice->bkg_toll_tax				 = round(($routeRates->tollTaxAmount) / 4);
			$pModel											 = Promos::model()->getByCode('FLATRE199');
			$bmodel->bkgInvoice->bkg_promo1_code			 = $pModel->prm_code;
			$bmodel->bkgInvoice->bkg_promo1_id				 = $pModel->prm_id;
			$bmodel->bkgInvoice->bkg_promo1_amt				 = 0;
			$bmodel->bkgInvoice->calculateTotal();
			$bmodel->bkg_booking_id							 = 'temp';
			$isPayment										 = 0;
			$flashSaleStatus								 = FlashSale::model()->findByRouteCities($postParams['fls_pickup_date'], $postParams['rut_from_city_id'], $postParams['rut_to_city_id'], $isPayment);
			$uniqueUserStatus								 = BookingSub::model()->findUserByRouteCities($postParams['fls_pickup_date'], $postParams['rut_from_city_id'], $postParams['rut_to_city_id'], $userId);
			if ($flashSaleStatus == 1)
			{
				$errorTxt = "You cannot place this booking as all 4 seats are already SOLD OUT.";
				throw new Exception($errorTxt);
			}

			if ($uniqueUserStatus == 1)
			{
				$errorTxt = "A seat has already been booked with this account. Please log in with a different Facebook account.";
				throw new Exception($errorTxt);
			}
			if ($bmodel->validate() && $bmodel->save())
			{
				$bmodel->bkgInvoice->biv_bkg_id	 = $bmodel->bkg_id;
				$bmodel->bkgUserInfo->bui_bkg_id = $bmodel->bkg_id;
				$bmodel->bkgTrack->btk_bkg_id	 = $bmodel->bkg_id;
				$bmodel->bkgAddInfo->bad_bkg_id	 = $bmodel->bkg_id;
				if ($bmodel->bkgInvoice->save() && $bmodel->bkgUserInfo->save() && $bmodel->bkgTrack->save() && $bmodel->bkgAddInfo->save())
				{
					$bcbId		 = BookingSub::getBcbByPickupDate($postParams['fls_pickup_date'], $postParams['rut_from_city_id'], $postParams['rut_to_city_id']);
					$userGender	 = Users::model()->findByRouteCities($postParams['fls_pickup_date'], $postParams['rut_from_city_id'], $postParams['rut_to_city_id'], $userId, $bcbId);
					if ($userGender['success'] == 1)
					{
						$errorTxt = "Sorry, this booking is for " . $userGender['gender'] . " passengers only.";
						throw new Exception($errorTxt);
					}
					if (!$bcbId)
					{
						$bcbModel					 = new BookingCab();
						$bcbModel->bcb_vendor_amount = $bmodel->bkgInvoice->bkg_vendor_amount;
						$bcbModel->bcb_bkg_id1		 = $bmodel->bkg_id;
						if ($bcbModel->save())
						{
							$bcbId = $bcbModel->bcb_id;
						}
						else
						{
							throw new Exception("Failed to create booking Cab => " . json_encode($bcbModel->getErrors()));
						}
						BookingRoute::model()->setBookingCabStartEndTime($bcbModel->bcb_id, $bcbModel->bcb_bkg_id1);
					}
					if ($bcbId > 0)
					{
						$booking_id						 = 'SH' . date('y') . str_pad($bmodel->bkg_id, 7, 0, STR_PAD_LEFT);
						$bmodel->bkg_booking_id			 = $booking_id;
						$bmodel->bkgTrail->setPaymentExpiryTime($bmodel->bkg_pickup_date);
						$bmodel->bkg_bcb_id				 = $bcbId;
						$bmodel->bkgTrail->bkg_platform	 = 1;
						$bmodel->bkgTrail->btr_bkg_id	 = $bmodel->bkg_id;
						$bmodel->bkgTrail->save();
						$bmodel->save();
					}

					foreach ($bookingRoutes as $route)
					{
						$route->brt_bkg_id	 = $bmodel->bkg_id;
						$route->brt_bcb_id	 = $bcbId;
						if ($route->validate() && $route->save())
						{
							if (!$bcbId)
							{
								$bcbModel->bcb_brt_id = $route->brt_id;
								$bcbModel->save();
								if (!$bcbModel->save())
								{
									throw new Exception("Failed to create booking Route => " . json_encode($bcbModel->getErrors()));
								}
							}
						}
						else
						{
							throw new Exception("Failed to create booking Route => " . json_encode($route->getErrors()));
						}
					}
					$bookingPref = BookingPref::model()->getByBooking($bmodel->bkg_id);
					if ($bookingPref == '')
					{
						$bookingPref			 = new BookingPref();
						$bookingPref->bpr_bkg_id = $bmodel->bkg_id;
						if (!$bookingPref->save())
						{
							throw new Exception("Failed to create booking Pref => " . json_encode($bookingPref->getErrors()));
						}
					}
					if ($bmodel->bkg_status == 1)
					{
						$bmodel->bkgTrack	 = BookingTrack::model()->sendTripOtp($bmodel->bkg_id, $sendOtp			 = false);
						$bmodel->bkgTrack->save();
					}
				}
			}
			else
			{
				throw new Exception("Not Validate : " . json_encode($bmodel->getErrors()));
			}
			$desc	 = "Booking created by customer";
			BookingLog::model()->createLog($bmodel->bkg_id, $desc, $userInfo, BookingLog::BOOKING_CREATED);
			$data	 = ['bkg_id' => $bmodel->bkg_id];
			$success = DBUtil::commitTransaction($transaction);
		}
		catch (Exception $ex)
		{
			DBUtil::rollbackTransaction($transaction);
			$errors = $ex->getMessage();
		}
		return ['success' => $success, 'data' => $data, 'errors' => $errors];
	}

	public function apiMapping()
	{
		$data										 = array();
		$data['bkg_no_person']						 = $this->bkgAddInfo->bkg_no_person;
		$data['no_of_days']							 = $this->no_of_days;
		$data['trip_duration_format']				 = $this->trip_duration_format;
		$data['trip_distance_format']				 = $this->trip_distance_format;
		$data['bkg_user_name']						 = $this->bkgUserInfo->bkg_user_fname;
		$data['bkgFlexxiMinPay']					 = $this->bkgFlexxiMinPay;
		$data['bkg_id']								 = $this->bkg_id;
		$data['bkg_booking_id']						 = $this->bkg_booking_id;
		$data['bkg_bcb_id']							 = $this->bkg_bcb_id;
		$data['bkg_user_id']						 = $this->bkgUserInfo->bkg_user_id;
		$data['bkg_user_lname']						 = $this->bkgUserInfo->bkg_user_lname;
		$data['bkg_pickup_date']					 = $this->bkg_pickup_date;
		$data['bkg_pickup_time']					 = date('H:i:s', strtotime($this->bkg_pickup_date));
		$data['bkg_booking_type']					 = $this->bkg_booking_type;
		$data['bkg_transfer_type']					 = $this->bkg_transfer_type;
		$data['bkg_from_city_id']					 = $this->bkg_from_city_id;
		$data['bkg_to_city_id']						 = $this->bkg_to_city_id;
		$data['bkg_trip_type']						 = '1';
		$data['bkg_user_trip_type']					 = $this->bkgAddInfo->bkg_user_trip_type;
		$data['bkg_trip_distance']					 = $this->bkg_trip_distance;
		$data['bkg_trip_duration']					 = $this->bkg_trip_duration;
		$data['bkg_country_code']					 = $this->bkgUserInfo->bkg_country_code;
		$data['bkg_contact_no']						 = $this->bkgUserInfo->bkg_contact_no;
		$data['bkg_alternate_contact']				 = $this->bkgUserInfo->bkg_alt_contact_no;
		$data['bkg_alt_country_code']				 = $this->bkgUserInfo->bkg_alt_country_code;
		$data['bkg_user_email']						 = $this->bkgUserInfo->bkg_user_email;
		$data['bkg_vehicle_type_id']				 = $this->bkg_vehicle_type_id; //$this->bkg_vehicle_type_id;
		$data['bkg_flexxi_type']					 = $this->bkg_flexxi_type;
		$data['bkg_send_email']						 = $this->bkgPref->bkg_send_email;
		$data['bkg_send_sms']						 = $this->bkgPref->bkg_send_sms;
		$data['bkg_num_large_bag']					 = $this->bkgAddInfo->bkg_num_large_bag;
		$data['bkg_num_small_bag']					 = $this->bkgAddInfo->bkg_num_small_bag;
		$data['bkg_spl_req_senior_citizen_trvl']	 = $this->bkgAddInfo->bkg_spl_req_senior_citizen_trvl;
		$data['bkg_spl_req_kids_trvl']				 = $this->bkgAddInfo->bkg_spl_req_kids_trvl;
		$data['bkg_spl_req_woman_trvl']				 = $this->bkgAddInfo->bkg_spl_req_woman_trvl;
		$data['bkg_spl_req_carrier']				 = $this->bkgAddInfo->bkg_spl_req_carrier;
		$data['bkg_spl_req_driver_hindi_speaking']	 = $this->bkgAddInfo->bkg_spl_req_driver_hindi_speaking;
		$data['bkg_spl_req_driver_english_speaking'] = $this->bkgAddInfo->bkg_spl_req_driver_english_speaking;
		$data['bkg_spl_req_lunch_break_time']		 = $this->bkgAddInfo->bkg_spl_req_lunch_break_time;
		$data['bkg_spl_req_other']					 = $this->bkgAddInfo->bkg_spl_req_other;
		$data['bkg_user_city']						 = $this->bkgUserInfo->bkg_user_city;
		$data['bkg_user_country']					 = $this->bkgUserInfo->bkg_user_country;
		$data['bkg_platform']						 = $this->bkgTrail->bkg_platform;
		$data['bkg_gozo_base_amount']				 = $this->bkgInvoice->bkg_gozo_base_amount;
		$data['bkg_base_amount']					 = $this->bkgInvoice->bkg_base_amount;
		$data['bkg_flexxi_base_amount']				 = $this->bkgInvoice->bkg_flexxi_base_amount;
		$data['bkg_discount_amount']				 = $this->bkgInvoice->bkg_discount_amount;
		$data['bkg_corporate_credit']				 = $this->bkgInvoice->bkg_corporate_credit;
		$data['bkg_total_amount']					 = $this->bkgInvoice->bkg_total_amount;
		$data['bkg_vendor_amount']					 = $this->bkgInvoice->bkg_vendor_amount;
		$data['bkg_quoted_vendor_amount']			 = $this->bkgInvoice->bkg_quoted_vendor_amount;
		$data['bkg_vendor_collected']				 = $this->bkgInvoice->bkg_vendor_collected;
		$data['bkg_gozo_amount']					 = $this->bkgInvoice->bkg_gozo_amount;
		$data['bkg_due_amount']						 = $this->bkgInvoice->bkg_due_amount;
		$data['bkg_advance_amount']					 = $this->bkgInvoice->bkg_advance_amount;
		$data['bkg_refund_amount']					 = $this->bkgInvoice->bkg_refund_amount;
		$data['bkg_chargeable_distance']			 = $this->bkgInvoice->bkg_chargeable_distance;
		$data['bkg_driver_allowance_amount']		 = $this->bkgInvoice->bkg_driver_allowance_amount;
		$data['bkg_additional_charge']				 = $this->bkgInvoice->bkg_additional_charge;
		$data['bkg_is_toll_tax_included']			 = $this->bkgInvoice->bkg_is_toll_tax_included;
		$data['bkg_is_state_tax_included']			 = $this->bkgInvoice->bkg_is_state_tax_included;
		$data['bkg_is_parking_included']			 = $this->bkgInvoice->bkg_is_parking_included;
		$data['bkg_toll_tax']						 = $this->bkgInvoice->bkg_toll_tax;
		$data['bkg_state_tax']						 = $this->bkgInvoice->bkg_state_tax;
		$data['bkg_service_tax']					 = $this->bkgInvoice->bkg_service_tax;
		$data['bkg_service_tax_rate']				 = $this->bkgInvoice->bkg_service_tax_rate;
		$data['bkg_extra_km_charge']				 = $this->bkgInvoice->bkg_extra_km_charge;
		$data['bkg_extra_km']						 = $this->bkgInvoice->bkg_extra_km;
		$data['bkg_parking_charge']					 = $this->bkgInvoice->bkg_parking_charge;
		$data['bkg_extra_toll_tax']					 = $this->bkgInvoice->bkg_extra_toll_tax;
		$data['bkg_extra_state_tax']				 = $this->bkgInvoice->bkg_extra_state_tax;
		$data['bkg_rate_per_km']					 = $this->bkgInvoice->bkg_rate_per_km;
		$data['bkg_rate_per_km_extra']				 = $this->bkgInvoice->bkg_rate_per_km_extra;
		$data['bkg_bill_fullname']					 = $this->bkgUserInfo->bkg_bill_fullname;
		$data['bkg_bill_contact']					 = $this->bkgUserInfo->bkg_bill_contact;
		$data['bkg_bill_email']						 = $this->bkgUserInfo->bkg_bill_email;
		$data['bkg_bill_address']					 = $this->bkgUserInfo->bkg_bill_address;
		$data['bkg_bill_country']					 = $this->bkgUserInfo->bkg_bill_country;
		$data['bkg_bill_state']						 = $this->bkgUserInfo->bkg_bill_state;
		$data['bkg_bill_city']						 = $this->bkgUserInfo->bkg_bill_city;
		$data['bkg_bill_postalcode']				 = $this->bkgUserInfo->bkg_bill_postalcode;
		$data['bkg_status']							 = $this->bkg_status;
		$data['bkg_active']							 = $this->bkg_active;
		$data['bkg_create_date']					 = $this->bkg_create_date;
		$data['bkg_payment_expiry_time']			 = $this->bkgTrail->bkg_payment_expiry_time;
		$data['bkg_tnc_id']							 = $this->bkgTrail->bkg_tnc_id;
		$data['bkg_tnc']							 = $this->bkgTrail->bkg_tnc;
		$data['bkg_is_related_booking']				 = $this->bkgTrail->bkg_is_related_booking;
		$data['bkg_agent_markup']					 = $this->bkgInvoice->bkg_agent_markup;
		$data['bkg_gozo_markup']					 = $this->bkgInvoice->bkg_gozo_markup;
		$data['bkg_vendor_request_cnt']				 = $this->bkgTrail->bkg_vendor_request_cnt;
		$data['bkg_account_flag']					 = $this->bkgPref->bkg_account_flag;
		$data['bkg_credits_used']					 = $this->bkgInvoice->bkg_credits_used;
		$data['bkg_trip_status']					 = '0';
		$data['bkg_corporate_discount']				 = $this->bkgInvoice->bkg_corporate_discount;
		$data['bkg_convenience_charge']				 = $this->bkgInvoice->bkg_convenience_charge;
		$data['bkg_reconfirm_id']					 = $this->bkg_reconfirm_flag;
		$data['bkg_arrived_for_pickup']				 = 1; //$this->bkgTrack->bkg_arrived_for_pickup;
		$data['bkg_settled_flag']					 = $this->bkgPref->bkg_settled_flag;
		$data['bkg_phone_verified']					 = $this->bkgUserInfo->bkg_phone_verified;
		$data['bkg_email_verified']					 = $this->bkgUserInfo->bkg_email_verified;
		$data['bkg_night_pickup_included']			 = $this->bkgInvoice->bkg_night_pickup_included;
		$data['bkg_night_drop_included']			 = $this->bkgInvoice->bkg_night_drop_included;
		if ($this->bkg_pickup_address != '' || $this->bkg_pickup_address != null)
		{
			$data['bkg_pickup_address'] = $this->bkg_pickup_address;
		}

		if ($this->bkg_drop_address != '' || $this->bkg_drop_address != null)
		{
			$data['bkg_drop_address'] = $this->bkg_drop_address;
		}
		if ($this->bkgSvcClassVhcCat->scc_VehicleCategory->vct_label != '' || $this->bkgSvcClassVhcCat->scc_VehicleCategory->vct_label != null)
		{
			$data['bkgVehicleType']['vht_make'] = $this->bkgSvcClassVhcCat->scc_VehicleCategory->vct_label;
		}
		return $data;
	}

	public function createApiBooking($data)
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		try
		{
			if (isset($data['totalAmount']))
			{
				$partnerTotalAmount = $data['totalAmount'];
			}
			$tripType					 = $data['tripType'];
			$routes						 = $data['routes'];
			$tripReturnDate				 = $data['tripEndDate'];
			$tripReturnTime				 = $data['tripEndTime'];
			$bmodel						 = Booking::model();
			$bmodel->bkg_booking_type	 = $tripType;
			$routeArr					 = [];
			$rCount						 = count($routes);
			$bmodel->bkg_from_city_id	 = $routes[0]['pickupCity'];
			$bmodel->bkg_to_city_id		 = $routes[$rCount - 1]['dropCity'];
			$pickupDateTime				 = $routes[0]['pickupDate'] . " " . $routes[0]['pickupTime'];
			$typeAction					 = PartnerApiTracking::CREATE_BOOKING;
			$userInfo					 = UserInfo::getInstance();
			$patModel					 = PartnerApiTracking::add($typeAction, $data, $userInfo->userId, $bmodel, $pickupDateTime);
			if ($tripType == 2 && $tripReturnDate != '')
			{
				$returnDateTime			 = $tripReturnDate . ' ' . date('H:i:s', strtotime($tripReturnTime));
				$routeDuration			 = Route::model()->getRouteDurationbyCities($routes[0]['dropCity'], $routes[0]['pickupCity']);
				$returnPickupDateTime	 = date('Y-m-d H:i:s', strtotime($returnDateTime . '-' . $routeDuration . ' minute'));
				$returnPickupDate		 = date('Y-m-d', strtotime($returnPickupDateTime));
				$returnPickupTime		 = date('H:i:s', strtotime($returnPickupDateTime));
				$bmodel->bkg_return_date = $returnDateTime;
			}
			foreach ($routes as $key => $value)
			{
				$routeModel						 = new BookingRoute();
				$routeModel->brt_from_city_id	 = $value['pickupCity'];
				$routeModel->brt_to_city_id		 = $value['dropCity'];
				if ($tripType == 2 && $tripReturnDate != '' && $key == 1)
				{
					$routeModel->brt_pickup_datetime	 = $tripReturnDate . " " . $tripReturnTime;
					DateTimeFormat::parseDateTime($routeModel->brt_pickup_datetime, $date, $time);
					$routes1[$key]['pickupDate']		 = $tripReturnDate;
					$routes1[$key]['pickupTime']		 = $tripReturnTime;
					$routeModel->brt_pickup_date_date	 = $date;
					$routeModel->brt_pickup_date_time	 = $time;
				}
				else
				{
					$pickupTimeVal						 = date('H:i:s', strtotime($value['pickupTime']));
					$routeModel->brt_pickup_datetime	 = $value['pickupDate'] . " " . $pickupTimeVal;
					DateTimeFormat::parseDateTime($routeModel->brt_pickup_datetime, $date, $time);
					$routeModel->brt_pickup_date_date	 = $date;
					$routeModel->brt_pickup_date_time	 = $time;
				}
				$routeModel->brt_to_location	 = $value['dropAddress'];
				$routeModel->brt_from_location	 = $value['pickupAddress'];
				$routeModel->brt_to_pincode		 = $value['dropPincode'];
				$routeModel->brt_from_pincode	 = $value['pickupPincode'];
				$routeArr[]						 = $routeModel;
			}
			$bmodel->bookingRoutes = $routeArr;
			$bmodel->setScenario('apiroutes');

			$result = CActiveForm::validate($bmodel, null, false);
			if ($result == '[]')
			{
				$arr = [];
				foreach ($routes as $key => $val)
				{
					$pickupTimeVal				 = date('H:i:s', strtotime($val['pickupTime']));
					$arr[$key]['date']			 = $val['pickupDate'] . " " . $pickupTimeVal;
					$arr[$key]['drop_city']		 = $val['dropCity'];
					$arr[$key]['pickup_city']	 = $val['pickupCity'];
					$arr[$key]['drop_address']	 = $val['dropAddress'];
					$arr[$key]['drop_pincode']	 = $val['dropPincode'];
					$arr[$key]['pickup_address'] = $val['pickupAddress'];
					$arr[$key]['pickup_pincode'] = $val['pickupPincode'];
				}
				$arr	 = json_encode($arr);
				$arr	 = json_decode($arr);
				$result	 = $this->createBooking($data, $arr, $tripType, $partnerTotalAmount);
				$status	 = 1;
				if ($result['errors'] != '')
				{
					$errors = [];
					foreach ($result['errors'] as $key => $value)
					{
						$qModel			 = new Quote();
						$key			 = $qModel->errorMapping($key);
						$errors[$key]	 = $value;
					}
					$status				 = 2;
					$result['errors']	 = $errors;
				}
			}
			else
			{
				$errors = [];
				foreach ($bmodel->getErrors() as $key => $value)
				{
					$qModel	 = new Quote();
					$key	 = $qModel->errorMapping($key);

					$errors[$key] = $value;
				}
				$status	 = 2;
				$result	 = ['success' => false, 'errortype' => 5, 'errors' => $errors['routes']];
			}

			$bkgModel = $this->getBkgIdByBookingId($result['data']['bookingId']);

			$patModel->updateData($result, $status, $bkgModel->bkg_id, $result['errortype'], $result['errors'][0]);
		}
		catch (Exception $e)
		{
			$result = ['success' => false, 'errortype' => 5, 'errors' => 'Unable to create booking, Some data missing'];
			Logger::exception($e);
		}
		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);

		return $result;
	}

	/**
	 *
	 */
	public function createBooking($data, $routes, $tripType, $partnerTotalAmount = 0)
	{
		$submodel		 = new BookingSub();
		$model			 = $submodel->mappingCp($data);
		$apkVersion		 = $data['apkVersion'];
		$advanceConfirm	 = 0;
		if (isset($data['confirmOnAdvance']))
		{
			$advanceConfirm = $data['confirmOnAdvance'];
		}
		$model->bkg_booking_type				 = $tripType;
		$userInfo								 = UserInfo::getInstance();
		$model->bkg_agent_id					 = $userInfo->userId;
		$model->bkgAddInfo->bkg_info_source		 = BookingComponent::AGENT; //'Agent'
		$model->bkgTrail->bkg_platform			 = Booking::Platform_Agent;
		$cityInfo								 = UserLog::model()->getCitynCountrycodefromIP($model->bkgTrail->bkg_user_ip);
		$model->bkgUserInfo->bkg_user_city		 = $cityInfo['city'];
		$model->bkgUserInfo->bkg_user_country	 = $cityInfo['country'];
		$data									 = ['success' => false, 'data' => $model, "errors" => $model->getErrors()];
		$result									 = CActiveForm::validate($model);
//check credit limit exceeded or not
//	$isRechargeAccount			 = AgentTransactions::model()->checkCreditLimit($model->bkg_agent_id, $routes, $model->bkg_booking_type, $model->bkgInvoice->bkg_corporate_credit, $requestData, 3);
//	if ($isRechargeAccount)
//	{
//	    $model->addError('bkg_id', "Booking failed as your credit limit exceeded, please recharge.");
//	    $data = ['success' => false, "errors" => $model->getErrors()];
//	}
//check credit limit exceeded or not

		if ($result == '[]')
		{
			if ($model->bkg_id == '')
			{
				$model->bkg_id = null;
			}
			$carType		 = $model->bkg_vehicle_type_id;
			$returnDateTime	 = null;
			$route			 = [];
			foreach ($routes as $key => $val)
			{
				$routeModel							 = new BookingRoute();
				$routeModel->brt_from_city_id		 = $val->pickup_city;
				$routeModel->brt_to_city_id			 = $val->drop_city;
				$routeModel->brt_pickup_datetime	 = $val->date;
				$routeModel->brt_pickup_date_date	 = date('d/m/Y', strtotime($val->date));
				$routeModel->brt_pickup_date_time	 = date('h:i A', strtotime($val->date));
				$routeModel->brt_to_location		 = $val->drop_address;
				$routeModel->brt_from_location		 = $val->pickup_address;
				$routeModel->brt_to_pincode			 = $val->drop_pincode;
				$routeModel->brt_from_pincode		 = $val->pickup_pincode;
				$route[]							 = $routeModel;
			}

			if ($model->bkg_booking_type == 2)
			{
				$lastRoute		 = $route[count($route) - 1];
				$pickupTime		 = $lastRoute->brt_pickup_datetime;
				$routeDuration	 = Route::model()->getRouteDurationbyCities($lastRoute->brt_from_city_id, $lastRoute->brt_to_city_id);
				$returnDateTime	 = date('Y-m-d H:i:s', strtotime($pickupTime . ' + ' . $routeDuration . ' minute'));
			}
			$partnerId				 = $userInfo->userId;
			$quote					 = new Quote();
			$quote->routes			 = $route;
			$quote->tripType		 = $model->bkg_booking_type;
			$quote->partnerId		 = $partnerId;
			$quote->quoteDate		 = $model->bkg_create_date;
			$quote->pickupDate		 = $model->bkg_pickup_date;
			$quote->returnDate		 = $returnDateTime;
			$quote->sourceQuotation	 = Quote::Platform_Admin;
			$quote->isB2Cbooking	 = false;
			$quote->setCabTypeArr();
			$quotData				 = $quote->getQuote($carType);
			$arrQuot				 = $quotData[$carType];
//new changes
			$routeRates				 = $arrQuot->routeRates;
			$routeDistance			 = $arrQuot->routeDistance;
			$routeDuration			 = $arrQuot->routeDuration;
			$agtType				 = Agents::model()->findByPk($model->bkg_agent_id)->agt_type;
			if ($agtType == 0 || $agtType == 1)
			{
				$routeRates = Agents::model()->getBaseDiscFare($arrQuot->routeRates, $agtType, $model->bkg_agent_id);
			}
//new changes

			if (!$arrQuot->success)
			{
				throw new Exception("Request cannot be processed", 102);
			}
			$rCount												 = count($routes);
			$model->bkg_from_city_id							 = $route[0]->brt_from_city_id;
			$model->bkg_to_city_id								 = $route[$rCount - 1]->brt_to_city_id;
			$model->bkg_trip_distance							 = $routeDistance->quotedDistance; // $qt['routeData']['quoted_km'];
			$model->bkg_trip_duration							 = (string) $routeDuration->tripDuration; // $qt['routeData']['days']['totalMin'];
			$model->bkg_pickup_address							 = $routes[0]->pickup_address;
			$model->bkg_drop_address							 = $routes[$rCount - 1]->drop_address;
			$model->bkg_pickup_date								 = $routeDuration->fromDate;
			$model->bkgInvoice->bkg_chargeable_distance			 = $routeDistance->quotedDistance;
			$model->bkgTrack->bkg_garage_time					 = $routeDuration->totalMinutes + $routeDuration->garageTimeEnd + $routeDuration->garageTimeStart;
			$model->bkgInvoice->bkg_driver_allowance_amount		 = $routeRates->driverAllowance;
			$model->bkgInvoice->bkg_gozo_base_amount			 = round($routeRates->baseAmount);
			$model->bkgInvoice->bkg_base_amount					 = round($routeRates->baseAmount);
			$model->bkgInvoice->bkg_rate_per_km_extra			 = round($routeRates->ratePerKM);
			$model->bkgInvoice->bkg_rate_per_km					 = round($routeRates->costPerKM);
			$model->bkgInvoice->bkg_night_pickup_included		 = $routeRates->isNightPickupIncluded;
			$model->bkgInvoice->bkg_night_drop_included			 = $routeRates->isNightDropIncluded;
			$model->bkgInvoice->bkg_surge_differentiate_amount	 = $routeRates->differentiateSurgeAmount;
			$model->bkgPf->bpf_bkg_id							 = $model->bkg_id;
			if ($model->bkg_agent_id != 123)
			{
				$model->bkgInvoice->bkg_toll_tax				 = round($routeRates->tollTaxAmount | 0);
				$model->bkgInvoice->bkg_state_tax				 = round($routeRates->stateTax | 0);
				$model->bkgInvoice->bkg_is_toll_tax_included	 = $routeRates->isTollIncluded | 0;
				$model->bkgInvoice->bkg_is_state_tax_included	 = $routeRates->isStateTaxIncluded | 0;
				$model->bkgInvoice->bkg_vendor_amount			 = round($routeRates->vendorAmount);
				$model->bkgInvoice->bkg_quoted_vendor_amount	 = round($routeRates->vendorAmount);
			}
			else
			{
				$model->bkgInvoice->bkg_toll_tax	 = 0;
				$model->bkgInvoice->bkg_state_tax	 = 0;
				if (round($routeRates->tollTaxAmount | 0) == 0 && round($routeRates->stateTax | 0) == 0)
				{
					$model->bkgInvoice->bkg_is_toll_tax_included	 = $routeRates->isTollIncluded | 0;
					$model->bkgInvoice->bkg_is_state_tax_included	 = $routeRates->isStateTaxIncluded | 0;
				}
				else
				{
					$model->bkgInvoice->bkg_is_toll_tax_included	 = 0;
					$model->bkgInvoice->bkg_is_state_tax_included	 = 0;
				}
				$model->bkgInvoice->bkg_vendor_amount		 = (round($routeRates->vendorAmount) - round($model->bkgInvoice->bkg_toll_tax) - round($model->bkgInvoice->bkg_state_tax));
				$model->bkgInvoice->bkg_quoted_vendor_amount = (round($routeRates->vendorAmount) - round($model->bkgInvoice->bkg_toll_tax) - round($model->bkgInvoice->bkg_state_tax));
			}
			if ($model->bkg_booking_type == 2 || $model->bkg_booking_type == 3)
			{
				$returnDate					 = $routeDuration->toDate;
				$model->bkg_return_date_date = DateTimeFormat::DateTimeToDatePicker($returnDate);
				$model->bkg_return_date_time = date('H:i:00', strtotime($returnDate));
				$model->bkg_return_date		 = $returnDate;
			}
			$model->bkgInvoice->populateAmount(true, false, true, true, $model->bkg_agent_id);
			if ($model->bkg_agent_id != '')
			{
				$agtModel = Agents::model()->findByPk($model->bkg_agent_id);
				if ($agtModel->agt_city == 30706)
				{
					$model->bkgInvoice->bkg_cgst = Yii::app()->params['cgst'];
					$model->bkgInvoice->bkg_sgst = Yii::app()->params['sgst'];
					$model->bkgInvoice->bkg_igst = 0;
				}
				else
				{
					$model->bkgInvoice->bkg_igst = Yii::app()->params['igst'];
					$model->bkgInvoice->bkg_cgst = 0;
					$model->bkgInvoice->bkg_sgst = 0;
				}
			}
			else
			{
				if ($model->bkg_from_city_id == 30706)
				{
					$model->bkgInvoice->bkg_cgst = Yii::app()->params['cgst'];
					$model->bkgInvoice->bkg_sgst = Yii::app()->params['sgst'];
					$model->bkgInvoice->bkg_igst = 0;
				}
				else
				{
					$model->bkgInvoice->bkg_igst = Yii::app()->params['igst'];
					$model->bkgInvoice->bkg_cgst = 0;
					$model->bkgInvoice->bkg_sgst = 0;
				}
			}
			$partnerTotalAmount = (float) $partnerTotalAmount;
			if ($partnerTotalAmount == 0 || $partnerTotalAmount == null)
			{
				$partnerTotalAmount = $model->bkgInvoice->bkg_total_amount;
			}
			if ($model->bkgInvoice->bkg_total_amount <= $partnerTotalAmount)
			{
				$model->bkgUserInfo->bkg_user_last_updated_on	 = new CDbExpression('NOW()');
				$model->scenario								 = 'cabAgent';
				$model->bkg_booking_id							 = 'temp';
				$difference										 = $model->bkgInvoice->bkg_total_amount - $partnerTotalAmount;
				if ($difference > 0)
				{
					$newDifference						 = ((100 - Yii::app()->params['gst']) / 100) * $difference;
					$model->bkgInvoice->bkg_base_amount	 = (int) round($model->bkgInvoice->bkg_base_amount - $newDifference);
				}
				if ($difference < 0)
				{
					$newDifference						 = ((100 - Yii::app()->params['gst']) / 100) * (-1) * $difference;
					$model->bkgInvoice->bkg_base_amount	 = (int) round($model->bkgInvoice->bkg_base_amount + $newDifference);
				}
				$model->bkgInvoice->populateAmount(true, false, true, true, $model->bkg_agent_id);

				if ($model->validate())
				{
					$transaction = DBUtil::beginTransaction();
					try
					{
						$sendConf = false;
						if ($model->bkgUserInfo->bkg_user_id == null || $model->bkgUserInfo->bkg_user_id == '')
						{
							$userModel = Users::model()->linkUserByEmail($model->bkg_id, Booking::Platform_Agent);
							if ($userModel)
							{
								$model->bkgUserInfo->bkg_user_id = $userModel->user_id;
							}
						}
						$model->bkgUserInfo->bkg_user_last_updated_on	 = new CDbExpression('NOW()');
						$tmodel											 = Terms::model()->getText(1);
						$model->bkgTrail->bkg_tnc_id					 = $tmodel->tnc_id;
						$model->bkgTrail->bkg_tnc_time					 = new CDbExpression('NOW()');
						$transAmount									 = $model->bkgInvoice->bkg_corporate_credit;
						$model->bkgInvoice->bkg_corporate_credit		 = 0;
						if (!$model->save())
						{
							throw new Exception("Failed to create booking", 101);
						}
						$booking_id								 = $this->generateBookingid($model);
						$model->bkg_booking_id					 = $booking_id;
						$model->bkgTrail->btr_bkg_id			 = $model->bkg_id;
						$model->bkgTrail->setPaymentExpiryTime();
						$isRealtedBooking						 = $model->findRelatedBooking($model->bkg_id);
						$model->bkgTrail->bkg_is_related_booking = ($isRealtedBooking) ? 1 : 0;
						if (!$model->save())
						{
							throw new Exception("Failed to create booking", 101);
						}
						$model->bkgInvoice->biv_bkg_id = $model->bkg_id;
						if (!$model->bkgInvoice->save())
						{
							throw new Exception("Failed to create booking", 101);
						}
						$model->bkgUserInfo->bui_bkg_id = $model->bkg_id;
						if (!$model->bkgUserInfo->save())
						{
							throw new Exception("Failed to create booking", 101);
						}
						$model->bkgTrack->btk_bkg_id = $model->bkg_id;
						if (!$model->bkgTrack->save())
						{
							throw new Exception("Failed to create booking", 101);
						}
						$model->bkgPf->bpf_bkg_id = $model->bkg_id;
						if (!$model->bkgPf->updateFromQuote($arrQuot))
						{
							throw new Exception("Failed to create booking", 101);
						}

						$resultInvoice = CActiveForm::validate($model->bkgTrail);
						if (!$model->bkgTrail->save())
						{
							throw new Exception("Failed to create booking", 101);
						}
						$model->bkgAddInfo->bad_bkg_id = $model->bkg_id;
						if (!$model->bkgAddInfo->save())
						{
							throw new Exception("Failed to create booking", 101);
						}
						$bookingCab						 = new BookingCab('matchtrip');
						$bookingCab->bcb_vendor_amount	 = $model->bkgInvoice->bkg_vendor_amount;
						$bookingCab->bcb_bkg_id1		 = $model->bkg_id;
						$bookingCab->save();
						$model->bkg_bcb_id				 = $bookingCab->bcb_id;
						$model->update();
						foreach ($route as $rmodel)
						{
							$rmodel->brt_bkg_id	 = $model->bkg_id;
							$rmodel->brt_bcb_id	 = $bookingCab->bcb_id;
							$rmodel->save();
						}
						BookingRoute::model()->setBookingCabStartEndTime($bookingCab->bcb_id, $bookingCab->bcb_bkg_id1);
//booking pref
						if ($model->bkgPref == '')
						{
							$model->bkgPref = new BookingPref();
						}
						$model->bkgPref->bpr_bkg_id			 = $model->bkg_id;
						$agentsModel						 = Agents::model()->findByPk($model->bkg_agent_id);
						$model->bkgUserInfo->bkg_crp_name	 = ($agentsModel->agt_copybooking_name != '') ? $agentsModel->agt_copybooking_name : $agentsModel->agt_fname . " " . $agentsModel->agt_lname;
						$model->bkgUserInfo->bkg_crp_email	 = ($agentsModel->agt_copybooking_email != '') ? $agentsModel->agt_copybooking_email : '';
						$model->bkgUserInfo->bkg_crp_phone	 = ($agentsModel->agt_copybooking_phone != '') ? $agentsModel->agt_copybooking_phone : '';
						if ($agentsModel->agt_trvl_sendupdate == 1)
						{
							$model->bkgPref->bkg_trv_send_email	 = $agentsModel->agt_trvl_isemail;
							$model->bkgPref->bkg_trv_send_sms	 = $agentsModel->agt_trvl_issms;
						}
						else
						{
							$model->bkgPref->bkg_trv_send_email	 = 0;
							$model->bkgPref->bkg_trv_send_sms	 = 0;
						}
						$model->bkgUserInfo->save();
						BookingUser::model()->saveVerificationOtp($model->bkg_id);
						$model->bkgPref->save();
//booking pref
//agentnotifydetails
						$arrEvents = AgentMessages::model()->getEvents();
						foreach ($arrEvents as $key => $value)
						{
							$bookingMessages = BookingMessages::model()->getByEventAndBookingId($model->bkg_id, $key);
							if ($bookingMessages == '')
							{
								$bookingMessages				 = new BookingMessages();
								$bookingMessages->getMessageDefaults($model->bkg_agent_id, $key);
								$bookingMessages->bkg_booking_id = $model->bkg_id;
								$bookingMessages->bkg_event_id	 = $key;
								$bookingMessages->save();
							}
						}
//agentnotifydetails
						if ($model->bkg_status == 1)
						{
							$model->bkgTrack = BookingTrack::model()->sendTripOtp($model->bkg_id, $sendOtp		 = false);
							$model->bkgTrack->save();
							$logType		 = UserInfo::TYPE_SYSTEM;
							$sendConf		 = true;
							$amount			 = $transAmount | 0; //Credit added by agent;
							$desc			 = "Partner Credits Used";
							if ($amount > 0)
							{
								$bankLedgerID	 = PaymentType::model()->ledgerList(PaymentType::TYPE_AGENT_CORP_CREDIT);
								$checkUpdate	 = $model->updateAdvance($amount, $model->bkg_pickup_date, PaymentType:: TYPE_AGENT_CORP_CREDIT, UserInfo:: getInstance(), null, "Partner Wallet Used");
								if (!$checkUpdate)
								{
									throw new Exception("Advance Update Failed.");
								}
							}
							$model->bkgInvoice->refresh();
							if ($model->bkgInvoice->getAdvanceReceived() > 0 && $model->bkg_status == 1)
							{
//$model->confirmBooking($logType);
								$model->confirm(true);
							}
						}
						$bkgid			 = $model->bkg_id;
						$processedRoute	 = BookingLog::model()->logRouteProcessed($arrQuot, $bkgid);
						$desc			 = "Booking created by agent - $processedRoute";
						$userInfo		 = UserInfo::getInstance();
						$eventid		 = BookingLog::BOOKING_CREATED;
						BookingLog::model()->createLog($bkgid, $desc, $userInfo, $eventid);
						DBUtil::commitTransaction($transaction);
						if ($sendConf)
						{
//   $model->sendConfirmation($logType);
							$emailWrapper	 = new emailWrapper();
							$emailWrapper->gotBookingemail($model->bkg_id, $logType);
							$emailWrapper->gotBookingAgentUser($model->bkg_id);
							$msgCom			 = new smsWrapper();
							$msgCom->gotBooking($model, $logType);
						}
					}
					catch (Exception $e)
					{
						$model->addError('bkg_id', $e->getMessage());
						Logger::create("Error log: ", json_encode($e->getMessage()), CLogger::LEVEL_TRACE);
						DBUtil::rollbackTransaction($transaction);
					}
				}
				$success = !$model->hasErrors();
				if ($success)
				{
					$model						 = Booking::model()->with('bkgFromCity', 'bkgToCity', 'bkgSvcClassVhcCat')->findbyPk($model->bkg_id);
					$model->trip_duration_format = $model->bkg_trip_duration . ' mins';
					$model->trip_distance_format = $model->bkg_trip_distance . ' Km';
					$agentGatewayStatus			 = BookingSub::model()->getAgentGatewayStatus($model->bkg_id);
					$gatewayStatus				 = $agentGatewayStatus['gateway'];
					$activeVersion				 = Config::get("Version.Android.agent"); //Yii::app()->params['versionCheck']['agent'];

					$dataReturn = $submodel->newReverseMapping($model);

					if ($gatewayStatus == 1)
					{
						$hash					 = Yii::app()->shortHash->hash($model->bkg_id);
						$paymentLink			 = $_SERVER['HTTP_HOST'] . '/bkpn/' . $model->bkg_id . '/' . $hash;
						$note					 = "2.5% will be chargeable using this system";
						$dataReturn['payment']	 = ["link" => " $paymentLink", "notes" => $note];
					}

					$data = ['success' => true, 'message' => 'Booking created successfully', 'data' => $dataReturn, 'note' => 'Given "Total Amount" consider as a "Total Booking Amount"'];
				}
				else
				{
					$data = ['success' => false, 'errors' => $model->getErrors()];
					Logger::create("Error log: ", json_encode($model->getErrors()), CLogger::LEVEL_TRACE);
				}
			}
			else
			{
				$errors	 = ["status" => "error", "message" => "Booking Failed: Prices have increased"];
				$data	 = ['success' => false, 'errors' => $errors];
			}
		}
		else
		{
			$data = ['success' => false, 'errors' => $model->getErrors()];
		}
		return $data;
	}

	public function getDetailsApi($data)
	{
		$userInfo	 = UserInfo::getInstance();
		$apkVersion	 = $data['apkVersion'];
		$typeAction	 = PartnerApiTracking::GET_DETAILS;
		$bkgModel	 = $this->getDetailbyIdAgent($data['bookingId']);
		$patModel	 = PartnerApiTracking::add($typeAction, $data, $userInfo->userId, $bkgModel, $bkgModel->bkg_pickup_date);
		if ($bkgModel != '' && $bkgModel->bkg_agent_id == $userInfo->userId)
		{
			$bkgModel->trip_duration_format	 = $bkgModel->bkg_trip_duration . ' mins';
			$bkgModel->trip_distance_format	 = $bkgModel->bkg_trip_distance . ' Km';
			$activeApkVersion				 = Config::get("Version.Android.agent"); //Yii::app()->params['versionCheck']['agent'];
			$subModel						 = new BookingSub();
			$data							 = $subModel->newReverseMapping($bkgModel);
			$agentGatewayStatus				 = $subModel->getAgentGatewayStatus($bkgModel->bkg_id);
			$gatewayStatus					 = $agentGatewayStatus['gateway'];
			if ($gatewayStatus == 1)
			{
				$hash			 = Yii::app()->shortHash->hash($bkgModel->bkg_id);
				$paymentLink	 = $_SERVER['HTTP_HOST'] . '/bkpn/' . $bkgModel->bkg_id . '/' . $hash;
				$note			 = "2.5% will be chargeable using this system";
				$data['payment'] = ["link" => " $paymentLink", "notes" => $note];
			}
			$status	 = 1;
			$data	 = ['success' => true, 'data' => $data];
		}

		$patModel->updateData($data, $status, $bkgModel->bkg_id, $data['errortype'], $data['error']);
		return $data;
	}

	public function cancelBookingApi($data)
	{
		try
		{
			$bookingId		 = $data->bookingId;
			$reason			 = $data->reason;
			$reasonId		 = $data->reasonId;
			$userInfo		 = UserInfo::getInstance();
			$typeAction		 = PartnerApiTracking::CANCEL;
			$bookingModel	 = $this->getBkgIdByBookingId($bookingId);
			$bkgAgentId		 = $bookingModel->bkg_agent_id;
			$agentId		 = $userInfo->userId;
			$bkgId			 = $bookingModel->bkg_id;
			$spiceId		 = Config::get('spicejet.partner.id');
			$sugerboxId		 = Config::get('sugerbox.partner.id');
			if ($agentId != '' && ($bkgId != '' && $bkgId != null))
			{
				$patModel = PartnerApiTracking::add($typeAction, $data, $userInfo->userId, $bookingModel, $bookingModel->bkg_pickup_date);
				if ($bookingModel != '' && ($bkgAgentId == $agentId) && !in_array($bookingModel->bkg_status, [1, 2, 3, 5, 15]))
				{
					$status	 = 2;
					$result	 = ['success' => false, 'errortype' => '8', 'errors' => "Booking already cancelled or completed"];
				}
				elseif ($bookingModel != '')
				{
					$reason				 = trim($reason);
					$model				 = $this->findByPk($bkgId);
					$oldModel			 = clone $model;
					$success			 = $this->canBooking($bkgId, $reason, $reasonId, $userInfo);
					$cancelCharges		 = $model->calculateRefund();
					$cancellationCharge	 = abs($cancelCharges->charges);
					$refundAmount		 = ($cancelCharges->refund < 0) ? 0 : $cancelCharges->refund;
					if ($bkgAgentId == $spiceId || $bkgAgentId == $sugerboxId)
					{
						$refundAmount = 0;
					}
					$status	 = 1;
					$desc	 = "Booking cancelled by agent.";
					$eventId = BookingLog::BOOKING_CANCELLED;
					BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel);
					$result	 = ['success' => true, 'bookingId' => $bookingId, 'message' => "Booking cancelled successfully", 'cancellationCharge' => $cancellationCharge, 'refundAmount' => $refundAmount];
				}
				else
				{
					$result = ['success' => false, 'errortype' => '8', 'errors' => "Error In Booking Cancellation"];
				}
			}
			else
			{
				$result = ['success' => false, 'errortype' => '8', 'errors' => "Error In Booking Cancellation"];
			}
			if ($patModel != '')
			{
				$patModel->updateData($result, $status, $bookingModel->bkg_id, $result['errortype'], $result['errors']);
			}
		}
		catch (Exception $ex)
		{
			$result = ReturnSet::setException($e);
			$patModel->updateData($result, 2, null, $e->getCode(), $e->getMessage());
			//$result = ['success' => false, 'errortype' => 8, 'errors' => 'Error In Booking Cancellation'];
			//Logger::create("Cancel booking Error log: ", json_encode($e), CLogger::LEVEL_TRACE);
		}
		return $result;
	}

	/**
	 * This function is used for getting the booking status
	 * @param type $bkgCode
	 * @return type integer
	 */
	public static function getStatusByCode($bkgCode)
	{
		$model = self::model()->getByCode($bkgCode);
		return $model->bkg_status;
	}

	/**
	 * This function is used for generating the booking link
	 * @param type $bkgCode
	 * @return type
	 */
	public static function getLink($bkgCode)
	{
		$response = Booking::validateUser($bkgCode);
		if (!$response->getStatus())
		{
			return $response;
		}
		$fileLink = BookingUser::getPaymentLinkByPhone($response->getData());
		$response->setData($fileLink);
		return $response;
	}

	/**
	 * This function is used for canceling all types of booking
	 * @param type $jsonData
	 * @return \ReturnSet
	 */
	public static function validateCancelData($jsonData)
	{
		$response = self::validateUser($jsonData->bookingId);
		if (!$response->getStatus())
		{
			return $response;
		}
		$jsonData->bookingId = $response->getData();
		$cancelResponse		 = ($model->bkg_agent_id > 0) ? Booking::model()->cancelBookingApi($jsonData) : Booking::model()->cancelBooking($jsonData);
		$status				 = ($cancelResponse['success']) ? true : false;
		$response->setStatus($status);
		$response->setMessage($cancelResponse["message"]);
		return $response;
	}

	/**
	 * This function validates whether a booking belongs to that user
	 * @param type $bkgCode
	 * @return \ReturnSet
	 */
	public static function validateUser($bkgCode)
	{
		$returnSet		 = new ReturnSet();
		$model			 = self::model()->getByCode($bkgCode);
		$bkgUserModel	 = BookingUser::model()->getByBkgId($model->bkg_id);
		$loggedInUserId	 = UserInfo::getUserId();
		$userId			 = $bkgUserModel->bkg_user_id;
		if ($loggedInUserId != $userId)
		{
			$returnSet->setMessage("Oops!Seems like you are not the owner of this booking");
			goto skipAll;
		}
		$returnSet->setStatus(true);
		$returnSet->setData($model->bkg_id);
		skipAll:
		return $returnSet;
	}

	/**
	 * This function is used for generating the review link
	 * @param type $bkgCode
	 * @return \Returnset
	 */
	public static function getReviewLink($bkgCode)
	{
		$response = self::validateUser($bkgCode);
		if (!$response->getStatus())
		{
			return $response;
		}
		$uniqueid	 = Booking::model()->generateLinkUniqueid($response->getData());
		$link		 = Yii::app()->createAbsoluteUrl('r/' . $uniqueid);
		$response->setData($link);
		return $response;
	}

	/**
	 * This function gives you that details of all booking based on bkgCode
	 * @param type $jsonData
	 * @return type
	 */
	public static function getDetails($jsonData)
	{
		$response = self::validateUser($jsonData->id);
		if (!$response->getStatus())
		{
			return $response;
		}
		$jsonData->id = $response->getData();
		return self::details($jsonData);
	}

	/**
	 *
	 * @param object $jsonObj
	 * @return \ReturnSet
	 * @throws Exception
	 */
	public static function details($jsonObj)
	{
		$returnSet = new ReturnSet();
		if (property_exists($jsonObj, 'id'))
		{
			$model = self::model()->findByPk($jsonObj->id);
		}
		elseif (property_exists($jsonObj, 'code'))
		{
			$model = self::model()->getByCode($jsonObj->code);
		}
		if (!$model)
		{
			throw new Exception("Invalid Booking", ReturnSet::ERROR_INVALID_DATA);
		}
// FOR PACKAGE
		if ($model->bkg_booking_type == 5)
		{
			$model->bookingRoutes	 = BookingRoute::model()->populateRouteByPackageId($model->bkg_package_id, $model->bkg_pickup_date, true);
			$packageData			 = Package::model()->getPackage($model->bkg_package_id);
			$packageName			 = $packageData['pck_name'];
		}
		$response	 = new \Stub\booking\GetDetailsResponse();
		$response->setData($model, $packageName);
		$response	 = Filter::removeNull($response);
		$returnSet->setData($response);
		$returnSet->setStatus(true);
		return $returnSet;
	}

	/**
	 *
	 * @param array $data
	 * @return Array
	 */
	public function cancelBooking($data)
	{
		$success			 = false;
		$id					 = $data->bookingId;
		$reason				 = trim($data->reason);
		$reasonId			 = $data->reasonId;
		$isCancelReschedule	 = $data->cancelReschedule;
		$userInfo			 = UserInfo::getInstance();
		Logger::create("Request : " . json_encode($userInfo), CLogger::LEVEL_INFO);
		/** @var $bookingModel Booking */
		$bookingModel		 = Booking::model()->findByPk($id);
		if ($bookingModel != '')
		{
			$bookingModel->scenario = 'deny_vendor';
			if ($bookingModel->validate())
			{
				if ($bookingModel->bkg_status != 9)
				{
					if ($isCancelReschedule == 1)
					{
						$reasonid	 = CancelReasons::CR_BOOKING_RESCHEDULED;
						$reasonText	 = "Reschedule request cancelled. (previous booking ID: " . Booking::model()->getCodeById($bookingModel->bkgPref->bpr_rescheduled_from);
					}

					$tripTimeDiff		 = $this->getPickupDifferencebyBkgid($bookingModel->bkg_id);
					$totalAdvance		 = PaymentGateway::model()->getTotalAdvance($bookingModel->bkg_id);
					$oldModel			 = clone $bookingModel;
					$success			 = Booking::model()->canBooking($bookingModel->bkg_id, $reason, $reasonId, $userInfo);
					Logger::create("Booking Id : " . $bookingModel->bkg_id, CLogger::LEVEL_INFO);
					$cancelCharges		 = BookingPref::model()->calculateRefund($tripTimeDiff, $bookingModel->bkgInvoice->bkg_total_amount, $totalAdvance, 6, $bookingModel->bkg_id);
					$cancellationCharge	 = abs($cancelCharges['cancelCharge']);
					$refundAmount		 = ($cancelCharges['refund'] < 0) ? 0 : $cancelCharges['refund'];
					if ($success)
					{
						$bkgId	 = $success;
						$desc	 = "Booking cancelled by user.(Reason: " . $reason . ")";
						$eventId = BookingLog::BOOKING_CANCELLED;
						BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel);
						if ($bookingModel->bkgBcb->bcb_driver_id != "")
						{
							$userInfo		 = UserInfo::getInstance();
							$type			 = $this->userArr[$userInfo->userType];
							$message		 = "Booking " . $bookingModel->bkg_booking_id . " Cancelled by $type (Reason: " . $reason . ")";
							$image			 = null;
							$bkgID			 = $bookingModel->bkg_booking_id;
							$notificationId	 = substr(round(microtime(true) * 1000), -5);
							$payLoadData	 = ['EventCode' => BookingLog::BOOKING_CANCELLED];
							AppTokens::model()->notifyDriver($bookingModel->bkgBcb->bcb_driver_id, $payLoadData, $notificationId, $message, $image, "Booking Cancelled", $bkgID);
						}
						//$emailObj	 = new emailWrapper();
						emailWrapper::bookingCancellationMail($bookingModel->bkg_id);

						if ($isCancelReschedule == 1)
						{
							$model									 = Booking::model()->findByPk($bookingModel->bkg_id);
							$model->bkgPref->bpr_rescheduled_from	 = 0;
							$model->bkgPref->save();
						}

						$success = true;
						$message = "Booking cancelled successfully";
					}
				}
				else
				{
					$message = "Booking already cancelled. Please refresh your list";
				}
			}
			else
			{
				$message = "Departure time should be atleast 4 hours to cancel. please contact our customer support";
			}
		}
		$result = ['success' => $success, 'bookingId' => $bookingModel->bkg_id, 'errors' => $message, "message" => $message, 'cancellationCharge' => $cancellationCharge, 'refundAmount' => $refundAmount];
		return $result;
	}

	public function updateBookingApi($model, $bkgModel)
	{
		$returnSet = new ReturnSet();
		try
		{
			if ($bkgModel != '' && $model != '')
			{
				$oldModel	 = clone $bkgModel;
				$oldData	 = $oldModel->getDetailsbyId($bkgModel->bkg_id);
				$cabModel	 = $bkgModel->bkgBcb;
				$routeModel	 = $bkgModel->bookingRoutes;
				$amtPaid	 = $model->bkgInvoice->bkg_advance_amount;
				if ($cabModel != '' && $routeModel != '')
				{
					if ($amtPaid != '')
					{
						$currentAdvanceAmount	 = $amtPaid;
						$amount					 = $currentAdvanceAmount | 0;
//						if ($amount > 0)
//						{
						$desc					 = "Credits used";
						$agtcomm				 = $bkgModel->updateAdvance($amount, $bkgModel->bkg_pickup_date, PaymentType:: TYPE_AGENT_CORP_CREDIT, $userInfo, null, $desc, false, 1);
						if ($agtcomm == true)
						{
							$returnSet->setStatus(true);
							$returnSet->setMessage('update booking successfully');
						}
						$isUserUpdate	 = BookingUser::model()->updateData($model->bkgUserInfo, $bkgModel->bkg_id);
						$isAddInfoUpdate = BookingAddInfo::model()->updateData($model->bkgAddInfo, $bkgModel->bkg_id);
						if ($isUserUpdate == true || $isAddInfoUpdate == true)
						{
							$returnSet->setStatus(true);
							$returnSet->setMessage('update booking successfully');
						}
						$newData			 = $this->getDetailsbyId($bkgModel->bkg_id);
						$getOldDifference	 = array_diff_assoc($oldData, $newData);
						$changesForLog		 = " Old Values: " . Agents::model()->getModificationMSG($getOldDifference, 'log');
						if ($getOldDifference)
						{
							$logDesc = "Booking modified";
							$eventId = BookingLog::BOOKING_MODIFIED;
							$desc	 = $logDesc . $changesForLog;
							$bkgId	 = $bkgModel->bkg_id;
							BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel);
						}
//						}
//						else
//						{
//
//							throw new Exception("UPDATE Failed: Amount should be greater than zero", ReturnSet::ERROR_INVALID_DATA);
//						}
					}
					else
					{
						throw new Exception("UPDATE Failed:Amount cannot be null", ReturnSet::ERROR_INVALID_DATA);
					}
				}
			}
			else
			{
				throw new Exception("UPDATE Failed:Invalid Data", ReturnSet::ERROR_INVALID_DATA);
			}
		}
		catch (Exception $ex)
		{
			$returnSet = ReturnSet::setException($ex);
		}
		return $returnSet;
	}

	public function getBookingForAutoCancel()
	{
		$sql		 = "
						SELECT bkg_id FROM booking
INNER JOIN booking_pref ON bpr_bkg_id = bkg_id
WHERE `bkg_critical_score` >= 0.92 AND bkg_status=2
AND bkg_reconfirm_flag=1 AND bkg_manual_assignment=0";
		$recordsets	 = DBUtil::queryAll($sql);
		return $recordsets;
	}

	public function getQuoteBookingToUnverified_OLD()
	{
		$sql = "SELECT
				bkg_id,
				TIMESTAMPDIFF(MINUTE, bkg_create_date, bkg_pickup_date) AS minutesGiven,
				TIMESTAMPDIFF(MINUTE, bkg_create_date, NOW()) AS minutePassed

				FROM booking
				INNER JOIN booking_pref ON bkg_id = bpr_bkg_id 
				INNER JOIN booking_trail btr ON btr.btr_bkg_id = booking.bkg_id 
				LEFT JOIN payment_gateway ON apg_
				WHERE bkg_status = 15 AND bkg_active = 1 AND 
				(
				bkg_pickup_date < NOW() 
				OR 
				(bkg_platform IN (7,10) AND bkg_create_date <= DATE_SUB(NOW(), INTERVAL 30 MINUTE)) 
				OR 
				(bkg_platform NOT IN (7,10) AND bkg_is_gozonow<>1 AND (TIMESTAMPDIFF(MINUTE, bkg_create_date, NOW()) / TIMESTAMPDIFF(MINUTE, bkg_create_date, bkg_pickup_date)) > 0.2)
				OR 
				(bkg_platform NOT IN (7,10) AND bkg_is_gozonow=1 AND (TIMESTAMPDIFF(MINUTE, bkg_create_date, NOW()) / TIMESTAMPDIFF(MINUTE, bkg_create_date, bkg_pickup_date)) > 0.2
					AND TIMESTAMPDIFF(MINUTE, bkg_create_date, NOW())>30
				)
				)";
		return DBUtil::queryAll($sql, DBUtil::SDB());
	}

	public function getQuoteBookingToUnverified()
	{
		$sql = "SELECT DISTINCT bkg_id 
				FROM booking 
				INNER JOIN booking_pref ON bkg_id = bpr_bkg_id 
				INNER JOIN booking_trail btr ON btr.btr_bkg_id = booking.bkg_id 
				LEFT JOIN payment_gateway apg ON apg.apg_booking_id=bkg_id AND apg.apg_status=0 AND apg.apg_date > DATE_SUB(NOW(), INTERVAL 30 MINUTE) AND apg.apg_mode = 2 
				WHERE bkg_status = 15 AND bkg_active = 1 AND apg.apg_id IS NULL 
				AND (bkg_pickup_date < NOW() OR bkg_quote_expire_date < NOW())
				ORDER BY bkg_id DESC LIMIT 0, 100";
		return DBUtil::queryAll($sql, DBUtil::SDB());
	}

	public function getBookingForCriticalAssignment()
	{
		$sql		 = "SELECT bkg_id FROM booking
INNER JOIN booking_pref ON bpr_bkg_id = bkg_id
					INNER JOIN booking_trail ON btr_bkg_id = bkg_id
					WHERE `bkg_critical_score` >= 0.88 AND  bkg_status=2
						AND bkg_reconfirm_flag=1 AND bkg_critical_assignment=0
						AND (
								(TIMESTAMPDIFF(MINUTE,bkg_confirm_datetime, NOW()) > 90)
								OR
								(TIMESTAMPDIFF(MINUTE, NOW(),bkg_pickup_date) < 120)
							)";
		$recordsets	 = DBUtil::queryAll($sql);
		return $recordsets;
	}

///////  MMT API Functions  ////////

	public function holdBookingMmt($data)
	{
		$error_msg		 = '';
		$error_type		 = '';
		$pickupDate		 = DateTimeFormat::DatePickerToDate($data['tripDetails']['departureDate']);
		$pickupTime		 = $data['tripDetails']['pickupTime'] . ':00';
		$pickupDateTime	 = $pickupDate . ' ' . $pickupTime;
		$dropCity		 = MmtCity::model()->getCityId($data['tripDetails']['destinationCity']);
		$dropCityName	 = Cities::getName($dropCity);
		if ($data['tripDetails']['destinationLocation']['address'] != '')
		{
			$dropAddress = $data['tripDetails']['destinationLocation']['address'];
		}
		else
		{
			$dropAddress = $dropCityName;
		}
		$pickupCity		 = MmtCity::model()->getCityId($data['tripDetails']['sourceCity']);
		$pickupAddress	 = $data['tripDetails']['pickupAddress'];
		Logger::create("2");
		$bookingType	 = $data['tripDetails']['tripType'];
		$aatType		 = AgentApiTracking::TYPE_HOLD_BOOKING;
		$toMmtCode		 = $data['tripDetails']['destinationCity'];
		$fromMmtCode	 = $data['tripDetails']['sourceCity'];
		if ($dropCity != '' && $pickupCity != '')
		{
			if ($data['tripDetails']['returnDate'] != '')
			{
				$returnDate				 = DateTimeFormat::DatePickerToDate($data['tripDetails']['returnDate']);
				$returnTime				 = date('H:i:s', strtotime($data['tripDetails']['dropTime']));
				$returnDateTime			 = $returnDate . ' ' . $returnTime;
				$routeDuration			 = Route::model()->getRouteDurationbyCities($dropCity, $pickupCity);
				$returnpickupDateTime	 = date('Y-m-d H:i:s', strtotime($returnDateTime . '- ' . $routeDuration . ' minute'));
				$returnpickupDate		 = date('Y-m-d', strtotime($returnpickupDateTime));
				$returnpickupTime		 = date('H:i:s', strtotime($returnpickupDateTime));
				$bmodel->bkg_return_date = $returnDateTime;
// $bmodel->bkg_return_time = $returnTime;
			}
			if ($bookingType == 'RT')
			{
				$triptype	 = 2;
				$routes		 = [
					0	 => ['pickupDate'	 => $pickupDate, 'pickupTime'	 => $pickupTime,
						'dropCity'		 => $dropCity, 'dropPincode'	 => '',
						'dropAddress'	 => $dropAddress, 'pickupCity'	 => $pickupCity,
						'pickupPincode'	 => '', 'pickupAddress'	 => $pickupAddress],
					1	 => ['pickupDate'	 => $returnpickupDate, 'pickupTime'	 => $returnpickupTime,
						'dropCity'		 => $pickupCity, 'dropPincode'	 => '',
						'dropAddress'	 => $pickupAddress, 'pickupCity'	 => $dropCity,
						'pickupPincode'	 => '', 'pickupAddress'	 => $dropAddress]];
			}
			if ($bookingType == 'OW')
			{
				$triptype	 = 1;
				$routes		 = [0 => ['pickupDate' => $pickupDate, 'pickupTime' => $pickupTime, 'dropCity' => $dropCity, 'dropPincode' => '', 'dropAddress' => $dropAddress, 'pickupCity' => $pickupCity, 'pickupPincode' => '', 'pickupAddress' => $pickupAddress]];
			}
			if ($bookingType == 'AT')
			{
				$triptype	 = 4;
				$routes		 = [0 => ['pickupDate' => $pickupDate, 'pickupTime' => $pickupTime, 'dropCity' => $dropCity, 'dropPincode' => '', 'dropAddress' => $dropAddress, 'pickupCity' => $pickupCity, 'pickupPincode' => '', 'pickupAddress' => $pickupAddress]];
			}
			$bmodel						 = Booking::model();
			$bmodel->bkg_booking_type	 = $triptype;
			$bmodel->bkg_pickup_date	 = $pickupDateTime;
			$routeArr					 = [];
			$rCount						 = count($routes);
			$bmodel->bkg_from_city_id	 = $routes[0]['pickupCity'];
			$bmodel->bkg_to_city_id		 = $routes[$rCount - 1]['dropCity'];
			$aatModel					 = AgentApiTracking::model()->add($aatType, $data, $bmodel, \Filter::getUserIP(), $toMmtCode, $fromMmtCode);
			foreach ($routes as $key => $value)
			{
				$routeModel							 = new BookingRoute();
				$routeModel->brt_from_city_id		 = $value['pickupCity'];
				$routeModel->brt_to_city_id			 = $value['dropCity'];
				$routeModel->brt_pickup_datetime	 = $value['pickupDate'] . " " . $value['pickupTime'];
				DateTimeFormat::parseDateTime($routeModel->brt_pickup_datetime, $date, $time);
				$routeModel->brt_pickup_date_date	 = $date;
				$routeModel->brt_pickup_date_time	 = $time;
				$routeModel->brt_to_location		 = $value['dropAddress'];
				$routeModel->brt_from_location		 = $value['pickupAddress'];
				$routeModel->brt_to_pincode			 = $value['dropPincode'];
				$routeModel->brt_from_pincode		 = $value['pickupPincode'];
				$routeArr[]							 = $routeModel;
			}
			$bmodel->bookingRoutes	 = $routeArr;
			$bmodel->bkg_agent_id	 = 450;
			$bmodel->setScenario('apiroutes');
			$result					 = CActiveForm::validate($bmodel, null, false);
			Logger::create("3");
			if ($result == '[]')
			{
				$arr = [];
				foreach ($routes as $key => $val)
				{
					$arr[$key]['date']			 = $val['pickupDate'] . " " . $val['pickupTime'];
					$arr[$key]['drop_city']		 = $val['dropCity'];
					$arr[$key]['pickup_city']	 = $val['pickupCity'];
					$arr[$key]['drop_address']	 = $val['dropAddress'];
					$arr[$key]['drop_pincode']	 = $val['dropPincode'];
					$arr[$key]['pickup_address'] = $val['pickupAddress'];
					$arr[$key]['pickup_pincode'] = $val['pickupPincode'];
				}
				$arr	 = json_encode($arr);
				$arr	 = json_decode($arr);
				$result	 = $this->holdBooking($data, $arr, $triptype, $data['bookingId'], $data['fareDetails']['total_amount'], $dropCityName);
				$status	 = 1;
				Logger::create("4");

				if ($result['errors'] != '')
				{
					$errors = [];
					foreach ($result['errors'] as $key => $value)
					{
						$qModel			 = new Quote();
						$key			 = $qModel->errorMapping($key);
						$errors[$key]	 = $value;
						$error_msg		 = $value[0];
					}
					if ($error_msg == 'Prices have increased')
					{
						$error_type = 3;
					}
					else
					{
						$error_type = 4;
					}
					$result['errors']	 = $errors;
					$status				 = 2;
				}
			}
			else
			{
				$errors = [];
				foreach ($bmodel->getErrors() as $key => $value)
				{
					$qModel			 = new Quote();
					$key			 = $qModel->errorMapping($key);
					$errors[$key]	 = $value;
					$error_msg		 = $value[0];
				}
				if ($error_msg == 'Route not supported')
				{
					$error_type = 2;
				}
				else
				{
					$error_type = 4;
				}
				$status	 = 2;
				$result	 = ['booking_id' => $data['bookingId'], 'hold_key' => '', 'vendor_response' => ['message' => 'HOLD Failed: ' . $errors[$key][0], 'is_success' => false], 'response_type' => 'HOLD', 'status' => 'error', 'errors' => $errors];
			}
		}
		else
		{
			$status		 = 2;
			$result		 = ['booking_id' => $data['bookingId'], 'hold_key' => '', 'vendor_response' => ['message' => 'HOLD Failed: City not found', 'is_success' => false], 'response_type' => 'HOLD', 'status' => 'error', 'errors' => ['route' => ['0' => 'City not found']]];
			$error_msg	 = 'City not found';
			$error_type	 = 1;
		}
		Logger::create("5");
		$time = Filter::getExecutionTime();
		$aatModel->updateResponse($result, $result['hold_key'], $status, $error_type, $error_msg, $time);
		Logger::create("MMT HOLD DONE.", CLogger::LEVEL_INFO);
		return $result;
	}

	public function partnerBookingList($command = false)
	{
		$sql = "
SELECT bkg_id, bkg_booking_id, bkg_create_date, bkg_pickup_date,fcty.cty_name from_city,tcty.cty_name to_city,
agt_fname, agt_lname, agt_company,biv.*
FROM   booking
       JOIN booking_pref ON bkg_id = bpr_bkg_id
	   JOIN booking_invoice biv ON bkg_id = biv_bkg_id
       JOIN agents ON agt_id = bkg_agent_id
	   JOIN cities fcty ON fcty.cty_id = bkg_from_city_id
	   JOIN cities tcty ON tcty.cty_id = bkg_to_city_id
	   WHERE  bkg_status IN (2,3,5) AND bkg_agent_id > 0
";
		if ($this->bkg_agent_id != 1249 && $this->bkg_agent_id > 0)
		{
			$sql .= " AND bkg_agent_id =" . $this->bkg_agent_id;
		}
		else
		{
			$sql .= " AND bkg_agent_id =0";
		}
		if ($this->bkgids != '')
		{
			$sql .= " AND bkg_id IN (" . $this->bkgids . ")";
		}

		if ($this->bkg_pickup_date1 != "" && $this->bkg_pickup_date2 != "")
		{
			$sql .= " AND (bkg_pickup_date BETWEEN '{$this->bkg_pickup_date1} 00:00:00' AND '{$this->bkg_pickup_date2} 23:59:59' )";
		}
		if ($this->bkg_create_date1 != "" && $this->bkg_create_date2 != "")
		{
			$sql .= " AND (bkg_create_date BETWEEN '{$this->bkg_create_date1} 00:00:00' AND '{$this->bkg_create_date2} 23:59:59' )";
		}
		$success = true;

		if ($_POST && !$command)
		{
			$success = $this->validate();
			if (!$success)
			{
				$sql .= " AND 1=2";
			}
		}


		$defaultOrder = " bkg_pickup_date DESC";
		if ($command)
		{
			$sql .= " ORDER BY $defaultOrder";
			return DBUtil::queryAll($sql);
		}

		$count = DBUtil::command("SELECT COUNT(*) FROM ($sql) abc")->queryScalar();

		$dataprovider = new CSqlDataProvider($sql, [
			'totalItemCount' => $count,
			'sort'			 =>
			['attributes'	 => [],
				'defaultOrder'	 => $defaultOrder],
			'pagination'	 => ['pageSize' => 50],
		]);

		return $dataprovider;
	}

	public function holdBooking($data, $routes, $tripType, $mmtBookingId, $mmtTotalAmount, $dropCityName)
	{
		$includeTax		 = true;
		$mmtIncludedKms	 = $data["fareDetails"]["approx_distance"];
		$subModel		 = new BookingSub();
		$arraymodel		 = $subModel->mappingMmt($data, $dropCityName);

		$model			 = $arraymodel['booking'];
		$bkgUserModel	 = $arraymodel['bkgUserModel'];
		$bkgPrefModel	 = $arraymodel['bkgPrefModel'];
		$bkgTrailModel	 = $arraymodel['bkgTrailModel'];
		$bkgInvoiceModel = $arraymodel['bkgInvoiceModel'];
		$bkgPfModel		 = new BookingPriceFactor();
		$bkgAddInfoModel = new BookingAddInfo();
		$bkgTrackModel	 = new BookingTrack();

		$model->bkg_booking_type			 = $tripType;
		$model->bkg_agent_id				 = 450;
//$bkgTrailModel->bkg_info_source	 = 'Agent';
		$bkgAddInfoModel->bkg_info_source	 = 21;
		$bkgTrailModel->bkg_platform		 = Booking::Platform_Agent;

		$result = CActiveForm::validate($model);
		Logger::create("31");

		if ($result == '[]')
		{
			$trans = DBUtil::beginTransaction();
			try
			{
				if ($model->bkg_id == '')
				{
					$model->bkg_id = null;
				}
				$carType = $model->bkg_vehicle_type_id;
				$route	 = [];
				foreach ($routes as $key => $val)
				{
					$routeModel							 = new BookingRoute();
					$routeModel->brt_from_city_id		 = $val->pickup_city;
					$routeModel->brt_to_city_id			 = $val->drop_city;
					$routeModel->brt_pickup_datetime	 = $val->date;
					$routeModel->brt_pickup_date_date	 = DateTimeFormat::DateTimeToDatePicker($val->date);
					$routeModel->brt_pickup_date_time	 = date('h:i A', strtotime($val->date));
					$routeModel->brt_to_location		 = $val->drop_address;
					$routeModel->brt_from_location		 = $val->pickup_address;
					$routeModel->brt_to_pincode			 = $val->drop_pincode;
					$routeModel->brt_from_pincode		 = $val->pickup_pincode;
					$route[]							 = $routeModel;
				}
				Logger::create("32");

				$quoteM					 = new Quote();
				$quoteM->routes			 = $route;
				$quoteM->tripType		 = $tripType;
				$quoteM->partnerId		 = $model->bkg_agent_id;
				$quoteM->quoteDate		 = date("Y-m-d H:i:s");
				$quoteM->pickupDate		 = $routes[0]->date;
				$quoteM->isB2Cbooking	 = false;
				$quoteM->setCabTypeArr();
// $quote->returnDate = ;
				$qt						 = $quoteM->getQuote($carType, true, false);

//            $qt = Quotation::model()->getQuote($route, $model->bkg_booking_type, $model->bkg_agent_id, $carType, true, false);
				Logger::create("33");

				$arrQuot = $qt[$carType];
				if (!$arrQuot->success)
				{
					throw new Exception("Request cannot be processed: " . $arrQuot->errorText, $arrQuot->errorCode);
				}
				$routeDistance	 = $arrQuot->routeDistance;
				$routeDuration	 = $arrQuot->routeDuration;
				$routeRates		 = $arrQuot->routeRates;

				$servingRoute = $arrQuot->servingRoute;

				$rCount										 = count($routes);
				$bkgInvoiceModel->bkg_rate_per_km_extra		 = $routeRates->ratePerKM; // $arrQuot['km_rate'];
				$bkgInvoiceModel->bkg_rate_per_km			 = $routeRates->ratePerKM; // $arrQuot['km_rate'];
				$bkgInvoiceModel->bkg_toll_tax				 = 0;
				$bkgInvoiceModel->bkg_state_tax				 = 0;
				$bkgInvoiceModel->bkg_is_toll_tax_included	 = 0;
				$bkgInvoiceModel->bkg_is_state_tax_included	 = 0;
				$model->bkg_from_city_id					 = $arrQuot->routes[0]->brt_from_city_id; // $qt['routeData']['pickupCity'];
				$model->bkg_to_city_id						 = $arrQuot->routes[count($arrQuot->routes) - 1]->brt_to_city_id; //$qt['routeData']['dropCity'];
				$model->bkg_trip_distance					 = $routeDistance->quotedDistance; //$qt['routeData']['quoted_km'];
				$model->bkg_trip_duration					 = (string) $routeDuration->totalMinutes; // $qt['routeData']['days']['totalMin'];
//$model->bkg_pickup_pincode			 = $routes[0]->pickup_pincode;
//$model->bkg_drop_pincode			 = $routes[$rCount - 1]->drop_pincode;
				$model->bkg_pickup_date						 = $routeDuration->fromDate; //$qt['routeData']['startTripDate'];
				$bkgInvoiceModel->bkg_chargeable_distance	 = $routeDistance->quotedDistance; // $arrQuot['chargeableDistance'];
//$bkgTrackModel->bkg_garage_time				 = $routeDuration->totalGarage; //  $qt['routeData']['totalGarage'];
				$bkgTrackModel->bkg_garage_time				 = $routeDistance->totalGarage;
//$model->bkg_pickup_time				 = date('H:i:00', strtotime($routeDuration->fromDate));
				if ($model->bkg_booking_type == 2)
				{
					$model->bkg_return_date = $routeDuration->toDate;
//$model->bkg_return_time	 = date('H:i:00', strtotime($routeDuration->toDate));
				}
				$bkgInvoiceModel->bkg_driver_allowance_amount	 = $routeRates->driverAllowance; //$arrQuot['driverAllowance'];
				$bkgInvoiceModel->bkg_gozo_base_amount			 = round($routeRates->baseAmount); //round($arrQuot['gozo_base_amount']);
				$bkgInvoiceModel->bkg_base_amount				 = round($routeRates->baseAmount); //round($arrQuot['base_amt']);
				if ($model->bkg_trip_distance < $mmtIncludedKms)
				{
					$diffKMS							 = $mmtIncludedKms - $model->bkg_trip_distance;
					$extraFare							 = round(($diffKMS * $bkgInvoiceModel->bkg_rate_per_km_extra) / 1.05);
					$model->bkg_trip_distance			 = $mmtIncludedKms;
					$bkgInvoiceModel->bkg_base_amount	 = $bkgInvoiceModel->bkg_base_amount + $extraFare;
				}
//      $model->bkg_vendor_amount = (round($arrQuot['vendor_amount']) - round($arrQuot['toll_tax']) - round($arrQuot['state_tax']));
//      $model->bkg_quoted_vendor_amount = (round($arrQuot['vendor_amount']) - round($arrQuot['toll_tax']) - round($arrQuot['state_tax']));

				$isAirport		 = Cities::model()->findByPk($model->bkg_from_city_id)->cty_is_airport;
				$isDropAirport	 = Cities::model()->findByPk($model->bkg_to_city_id)->cty_is_airport;
//    if ((round($arrQuot['toll_tax']) == 0 && round($arrQuot['state_tax']) == 0) || ($carType == 5 || $carType == 6)) {

				$bkgInvoiceModel->bkg_is_toll_tax_included	 = $routeRates->isTollIncluded | 0;
				$bkgInvoiceModel->bkg_is_state_tax_included	 = $routeRates->isStateTaxIncluded | 0;
				$bkgInvoiceModel->bkg_is_parking_included	 = $routeRates->isParkingIncluded | 0;
				$bkgInvoiceModel->bkg_toll_tax				 = round($routeRates->tollTaxAmount);
				$bkgInvoiceModel->bkg_state_tax				 = round($routeRates->stateTax);
				$bkgInvoiceModel->bkg_vendor_amount			 = round($routeRates->vendorAmount);
				$bkgInvoiceModel->bkg_quoted_vendor_amount	 = round($routeRates->vendorAmount);

				$bkgInvoiceModel->bkg_surge_differentiate_amount = $routeRates->differentiateSurgeAmount;
				$bkgPfModel->bpf_bkg_id							 = $model->bkg_id;

				if (($routeRates->isTollIncluded == 1 && $isAirport == 1))
				{
					$bkgInvoiceModel->bkg_base_amount	 = $bkgInvoiceModel->bkg_base_amount + 100;
					$bkgInvoiceModel->bkg_vendor_amount	 = $bkgInvoiceModel->bkg_vendor_amount + 100;
				}
//    }
				if ($model->bkg_booking_type == 2)
				{
					$bkgInvoiceModel->bkg_base_amount	 = round($bkgInvoiceModel->bkg_base_amount * 0.98);
					$diff								 = $routeRates->baseAmount - $bkgInvoiceModel->bkg_base_amount;
					$bkgInvoiceModel->bkg_vendor_amount	 = round($bkgInvoiceModel->bkg_vendor_amount - ($diff * 0.5));
				}
				if ($model->bkg_booking_type == 4)
				{
					if ($isAirport == 1)
					{
						$model->bkg_transfer_type = 1;
					}
					elseif ($isDropAirport == 1)
					{
						$model->bkg_transfer_type = 2;
					}
				}

				$difference	 = ((strtotime($model->bkg_pickup_date) - time()) / 60);
				$currentHour = (int) date('H');
				$slot		 = 0;
				if ($currentHour < 2 || $currentHour > 22)
				{
					$slot = 1;
				}
				elseif ($currentHour < 5 || $currentHour > 21)
				{
					$slot = 2;
				}
				if (($slot == 1 && $difference <= 360) || ($slot == 2 && $difference <= 270))
				{
					$bkgInvoiceModel->bkg_base_amount = round($bkgInvoiceModel->bkg_base_amount * 1.25);
				}
				elseif (($slot == 0 && $difference <= 180) || ($slot == 1 && $difference <= 360) || ($slot == 2 && $difference <= 360))
				{
					$bkgInvoiceModel->bkg_base_amount = round($bkgInvoiceModel->bkg_base_amount * 1.15);
				}
				elseif ($slot == 0 && $difference < 210)
				{
					$bkgInvoiceModel->bkg_base_amount = round($bkgInvoiceModel->bkg_base_amount * 1);
				}

				$model->bkg_booking_id = 'temp';
				if (!$model->save())
				{
					throw new Exception("Failed to create booking", 101);
				}
				if ($model->bkg_id)
				{
					$bkgUserModel->setAttribute('bui_bkg_id', $model->bkg_id);
					$bkgInvoiceModel->setAttribute('biv_bkg_id', $model->bkg_id);
					$bkgAddInfoModel->setAttribute('bad_bkg_id', $model->bkg_id);
					$bkgTrailModel->setAttribute('btr_bkg_id', $model->bkg_id);
					$bkgTrackModel->setAttribute('btk_bkg_id', $model->bkg_id);
					$bkgPrefModel->setAttribute('bpr_bkg_id', $model->bkg_id);
					$bkgPfModel->setAttribute('bpf_bkg_id', $model->bkg_id);
				}
				$bkgInvoiceModel->populateAmount(true, false, true, true, $model->bkg_agent_id);
//$model->calculateVendorAmount();
				if ($model->bkg_agent_id != '')
				{
					$agtModel = Agents::model()->findByPk($model->bkg_agent_id);
					if ($agtModel->agt_city == 30706)
					{
						$bkgInvoiceModel->bkg_cgst	 = Yii::app()->params['cgst'];
						$bkgInvoiceModel->bkg_sgst	 = Yii::app()->params['sgst'];
						$bkgInvoiceModel->bkg_igst	 = 0;
					}
					else
					{
						$bkgInvoiceModel->bkg_igst	 = Yii::app()->params['igst'];
						$bkgInvoiceModel->bkg_cgst	 = 0;
						$bkgInvoiceModel->bkg_sgst	 = 0;
					}
				}
				else
				{
					if ($model->bkg_from_city_id == 30706)
					{
						$bkgInvoiceModel->bkg_cgst	 = Yii::app()->params['cgst'];
						$bkgInvoiceModel->bkg_sgst	 = Yii::app()->params['sgst'];
						$bkgInvoiceModel->bkg_igst	 = 0;
					}
					else
					{
						$bkgInvoiceModel->bkg_igst	 = Yii::app()->params['igst'];
						$bkgInvoiceModel->bkg_cgst	 = 0;
						$bkgInvoiceModel->bkg_sgst	 = 0;
					}
				}
				Logger::create("34");

				$bkgUserModel->bkg_user_last_updated_on	 = new CDbExpression('NOW()');
				$model->scenario						 = 'cabRateAgent';
				$bkgUserModel->scenario					 = 'cabRateAgent';
				$effectiveTotalAmount					 = (int) round(0.98 * $bkgInvoiceModel->bkg_total_amount);
				if ($effectiveTotalAmount <= $mmtTotalAmount)
				{
					$difference = $bkgInvoiceModel->bkg_total_amount - $mmtTotalAmount;
					if ($difference > 0)
					{
						$newDifference						 = ((100 - Yii::app()->params['gst']) / 100) * $difference;
						$bkgInvoiceModel->bkg_base_amount	 = (int) round($bkgInvoiceModel->bkg_base_amount - $newDifference);
					}
					if ($difference < 0)
					{
						$newDifference						 = ((100 - Yii::app()->params['gst']) / 100) * (-1) * $difference;
						$bkgInvoiceModel->bkg_base_amount	 = (int) round($bkgInvoiceModel->bkg_base_amount + $newDifference);
					}
					$bkgInvoiceModel->populateAmount(true, false, true, true, $model->bkg_agent_id);
//$model->calculateVendorAmount();
					if ($model->validate() && $bkgUserModel->validate() && $bkgInvoiceModel->validate() && $bkgAddInfoModel->validate() && $bkgTrailModel->validate() && $bkgTrackModel->validate() && !$bkgPfModel->updateFromQuote($arrQuot))
					{
//try {
						Logger::create("341");
						$sendConf								 = false;
//                        if ($model->bkg_user_id == NULL || $model->bkg_user_id == '') {
//                            $userModel = Users::model()->linkUserByEmail($model->bkg_user_email, $model->bkg_contact_no, $model->bkg_user_name, $model->bkg_user_lname, $model->bkg_country_code, $model->bkg_id, Booking::Platform_Agent, false);
//                            if ($userModel) {
//                                $model->bkg_user_id = $userModel->user_id;
//                            }
//                        }
						Logger::create("35");
						$bkgUserModel->bkg_user_last_updated_on	 = new CDbExpression('NOW()');
						$tmodel									 = Terms::model()->getText(1);
						$bkgTrailModel->bkg_tnc_id				 = $tmodel->tnc_id;
						$bkgTrailModel->bkg_tnc_time			 = new CDbExpression('NOW()');

						if (!$model->save() || !$bkgUserModel->save() || !$bkgInvoiceModel->save() || !$bkgAddInfoModel->save() || !$bkgTrailModel->save() || !$bkgTrackModel->save() || !$bkgPrefModel->save() || !$bkgPfModel->save())
						{
							throw new Exception("Failed to create booking", 101);
						}

						$booking_id				 = Booking::model()->generateBookingid($model);
						$model->bkg_booking_id	 = $booking_id;
						$bkgTrailModel->setPaymentExpiryTime();

						Logger::create("351");

						$isRealtedBooking = false;
//             $isRealtedBooking = $model->findRelatedBooking($model->bkg_id);
						Logger::create("352");

						$bkgTrailModel->bkg_is_related_booking = ($isRealtedBooking) ? 1 : 0;

						if (!$bkgTrailModel->save())
						{
							throw new Exception("Failed to create booking", 101);
						}
						$bookingCab						 = new BookingCab('matchtrip');
						$bookingCab->bcb_vendor_amount	 = $bkgInvoiceModel->bkg_vendor_amount;
						$bookingCab->bcb_bkg_id1		 = $model->bkg_id;
						$bookingCab->save();
						$model->bkg_bcb_id				 = $bookingCab->bcb_id;
						$model->update();
						Logger::create("353");
						foreach ($route as $rmodel)
						{
							$rmodel->brt_bkg_id	 = $model->bkg_id;
							$rmodel->brt_bcb_id	 = $bookingCab->bcb_id;
							$rmodel->save();
						}
						BookingRoute::model()->setBookingCabStartEndTime($bookingCab->bcb_id, $bookingCab->bcb_bkg_id1);
						if ($model->bkg_status == 1)
						{
							$logType	 = UserInfo::TYPE_SYSTEM;
							$sendConf	 = false;
						}
						$bkgid			 = $model->bkg_id;
						$processedRoute	 = BookingLog::model()->logRouteProcessed($arrQuot, $model->bkg_id);
						$desc			 = "Booking created by agent - $processedRoute";
						$userInfo		 = UserInfo::getInstance();

						$eventid = BookingLog::BOOKING_CREATED;
						BookingLog::model()->createLog($bkgid, $desc, $userInfo, $eventid);
						Logger::create("354");

						if ($sendConf)
						{
							$model->sendConfirmation($logType);
							$emailWrapper = new emailWrapper();
							$emailWrapper->gotBookingAgentUser($bkgid);
						}
						Logger::create("355");
					}

					Logger::create("36");

					$success			 = !$model->hasErrors();
					$successUser		 = !$bkgUserModel->hasErrors();
					$successInvoice		 = !$bkgInvoiceModel->hasErrors();
					$successAddinfo		 = !$bkgAddInfoModel->hasErrors();
					$successTrail		 = !$bkgTrailModel->hasErrors();
					$successTrack		 = !$bkgTrackModel->hasErrors();
					$successPref		 = !$bkgPrefModel->hasErrors();
					$successPriceFactor	 = !$bkgPfModel->hasErrors();

					if ($success && $successUser && $successInvoice && $successAddinfo && $successTrail && $successTrack && $successPref && $successPriceFactor)
					{
						DBUtil::commitTransaction($trans);

						$data = ['booking_id'		 => $mmtBookingId,
							'hold_key'			 => $model->bkg_id,
							'vendor_response'	 => ['message' => 'HOLD Booking success', 'is_success' => true],
							'response_type'		 => 'HOLD', 'status'			 => 'success'];
					}
					else
					{
						$errors = [];
						foreach ($model->getErrors() as $key => $value)
						{
							$qModel			 = new Quote();
							$key			 = $qModel->errorMapping($key);
							$errors[$key]	 = $value;
						}

						foreach ($bkgUserModel->getErrors() as $key => $value)
						{
							$qModel			 = new Quote();
							$key			 = $qModel->errorMapping($key);
							$errors[$key]	 = $value;
						}

						foreach ($bkgInvoiceModel->getErrors() as $key => $value)
						{
							$qModel			 = new Quote();
							$key			 = $qModel->errorMapping($key);
							$errors[$key]	 = $value;
						}

						foreach ($bkgAddInfoModel->getErrors() as $key => $value)
						{
							$qModel			 = new Quote();
							$key			 = $qModel->errorMapping($key);
							$errors[$key]	 = $value;
						}

						foreach ($bkgTrailModel->getErrors() as $key => $value)
						{
							$qModel			 = new Quote();
							$key			 = $qModel->errorMapping($key);
							$errors[$key]	 = $value;
						}

						foreach ($bkgTrackModel->getErrors() as $key => $value)
						{
							$qModel			 = new Quote();
							$key			 = $qModel->errorMapping($key);
							$errors[$key]	 = $value;
						}

						foreach ($bkgPrefModel->getErrors() as $key => $value)
						{
							$qModel			 = new Quote();
							$key			 = $qModel->errorMapping($key);
							$errors[$key]	 = $value;
						}

						foreach ($bkgPfModel->getErrors() as $key => $value)
						{
							$qModel			 = new Quote();
							$key			 = $qModel->errorMapping($key);
							$errors[$key]	 = $value;
						}

						DBUtil::rollbackTransaction($trans);
						$data = ['booking_id'		 => $mmtBookingId,
							'hold_key'			 => '',
							'vendor_response'	 => ['message' => 'HOLD Failed: ' . $errors[$key][0], 'is_success' => false],
							'response_type'		 => 'HOLD', 'status'			 => 'error',
							'errors'			 => $errors];
					}
				}
				else
				{
					DBUtil::rollbackTransaction($trans);
					$data = ['booking_id'		 => $mmtBookingId,
						'hold_key'			 => '',
						'vendor_response'	 => ['message' => 'HOLD Failed: Prices have increased', 'is_success' => false],
						'response_type'		 => 'HOLD',
						'status'			 => 'error',
						'errors'			 => ['Price' => ['0' => 'Prices have increased']]];
				}
			}
			catch (Exception $e)
			{
				$model->addError('bkg_id', $e->getMessage());
				DBUtil::rollbackTransaction($trans);
			}
		}
		else
		{
			$errors = [];
			foreach ($model->getErrors() as $key => $value)
			{
				$qModel			 = new Quote();
				$key			 = $qModel->errorMapping($key);
				$errors[$key]	 = $value;
			}

			$data = ['booking_id'		 => $mmtBookingId,
				'hold_key'			 => '',
				'vendor_response'	 => ['message' => 'HOLD Failed: ' . $errors[$key][0], 'is_success' => false],
				'response_type'		 => 'HOLD',
				'status'			 => 'error',
				'errors'			 => $errors];
		}

		Logger::create("37");
		return $data;
	}

	public function tripMarkComplete($bkg_id, $userType = 2, $platform = '', $odoEndReading = '')
	{
		$model								 = Booking::model()->findByPk($bkg_id);
		$userInfo							 = UserInfo::getInstance();
		$userInfo->userType					 = ($userType == 2) ? UserInfo::TYPE_VENDOR : UserInfo::TYPE_DRIVER;
		$success							 = false;
		$model->bkgTrack->bkg_ride_complete	 = 1;
		if ($platform != '')
		{
			$model->bkgTrack->btk_end_platform	 = $platform;
			$model->bkgTrack->bkg_end_odometer	 = ($model->bkgTrack->bkg_start_odometer != '' && $model->bkgTrack->bkg_start_odometer < $odoEndReading) ? $odoEndReading : '';
		}
		else
		{
			$model->bkgTrack->btk_end_platform = ($userType == 2) ? 4 : 2;
		}
		$model->bkgTrack->bkg_trip_end_time		 = new CDbExpression('NOW()');
		$model->bkgTrack->bkg_trip_end_user_id	 = $userInfo->userId;
		$model->bkgTrack->bkg_trip_end_user_type = $userInfo->userType;
		$pickupDate								 = $model->bkg_pickup_date;
		$nowTime								 = date("Y-m-d H:i:s");

		$dur = $model->bkg_trip_duration - 30;
		if ($dur < 0)
		{
			$dur = 30;
		}

		$estimateComplete = date("Y-m-d H:i:s", strtotime($pickupDate . " $dur minutes"));

		if ($model->bkgTrack->save())
		{
			$success						 = true;
			$errors							 = [];
			$eventId						 = BookingLog::REF_RIDE_COMPLETE;
			$desc							 = ($userType == 2) ? "Ride completed by the vendor." : "Ride completed by the driver.";
			$params['blg_booking_status']	 = $model->bkg_status;
			if ($userType != 3)
			{
				BookingLog::model()->createLog($bkg_id, $desc, $userInfo, $eventId, false, $params);
			}
			if ($userType == 2)
			{
				BookingTrackLog::model()->addByNonDriver($userInfo->getUserType(), $bkg_id, 104);
			}
			if ($estimateComplete <= $nowTime && $model->bkgTrack->bkg_is_no_show != 1 && $model->bkgPref->bkg_account_flag != 1 && $model->bkgPref->bkg_duty_slip_required != 1)
			{
				$success = Booking::model()->markComplete($bkg_id);
				$model->refresh();
			}
			if ($model->bkgBcb->bcb_driver_id != "")
			{
				$userInfo		 = UserInfo::getInstance();
				$type			 = $this->userArr[$userInfo->userType];
				$message		 = "Booking " . $model->bkg_booking_id . " Ended by $type";
				$image			 = null;
				$bkgID			 = $model->bkg_booking_id;
				$notificationId	 = substr(round(microtime(true) * 1000), -5);
				$payLoadData	 = ['EventCode' => Booking::CODE_TRIP_END_NOTIFICATION];
				if ($userType != 3)
				{
					AppTokens::model()->notifyDriver($model->bkgBcb->bcb_driver_id, $payLoadData, $notificationId, $message, $image, "Trip End", $bkgID);
				}
			}
			$vendor_id			 = $model->bkgBcb->bcb_vendor_id;
			$showVendorSticky	 = VendorStats::model()->updateStickyScore($vendor_id);
			Booking::notifyBookingComplete($bkg_id);
		}
		else
		{
			$success = false;
			$model->addError("bkg_id", "Oops! Unable to mark complete.");
			$error	 = $model->getErrors();
			throw new Exception(json_encode($error), 1);
		}
		return $success;
	}

	public function findBookingZoneForNotification()
	{
		$sql = "SELECT GROUP_CONCAT(DISTINCT zct_zon_id ORDER BY zct_zon_id ASC SEPARATOR ',') AS zone, GROUP_CONCAT(DISTINCT bkg_from_city_id ORDER BY bkg_from_city_id ASC SEPARATOR ',') AS city
				FROM   booking
					   INNER JOIN booking_pref ON bpr_bkg_id = bkg_id AND bkg_tentative_booking = 0 AND bkg_active = 1 AND bkg_status = 2 AND booking.bkg_flexxi_type NOT IN (1, 2)
					   INNER JOIN zone_cities ON bkg_from_city_id = zct_cty_id
					   INNER JOIN booking_cab ON bcb_id = bkg_bcb_id
					   LEFT JOIN calendar cln ON cln.cln_date = DATE(booking.bkg_pickup_date)
					   LEFT JOIN booking_vendor_request ON bvr_bcb_id = bcb_id
				WHERE
				((TIMESTAMPDIFF(MINUTE, NOW(), bkg_pickup_date) BETWEEN 360 AND 7200) OR cln.cln_pre_assignment = 1)
				AND bkg_create_date > DATE_SUB(NOW(), INTERVAL 10 MINUTE) AND bvr_id IS NULL";
		return DBUtil::queryRow($sql);
	}

	public static function getManualAssignments($bkg_id = '')
	{
		$where = '';
		if ($bkg_id > 0)
		{
			$where = " AND booking.bkg_id = {$bkg_id}";
		}
// It will wait for minimum 16.67% of confirm time to be passed or it should be less than 90 minutes of pickup.
// UPDATED 21-12-2020 by KG & DA, It will wait for minimum 16.67% of confirm time to be passed or it should be less than 240 minutes of working time to pickup.
		$manualScore = Yii::app()->params['assignmentScore']['manual'];
		$sql		 = "SELECT bkg_id, bkg_bcb_id FROM booking
						INNER JOIN booking_pref ON bpr_bkg_id = bkg_id
						INNER JOIN booking_trail ON btr_bkg_id = bkg_id
						WHERE (`bkg_critical_score` >= {$manualScore} OR (btr_is_dem_sup_misfire = 1 AND `bkg_critical_score`>={$manualScore}*0.85) OR (booking_pref.bkg_critical_score >= 0.75 AND booking_pref.bpr_uncommon_route = 1))  AND bkg_status=2
							{$where}  AND bkg_reconfirm_flag=1 AND bkg_manual_assignment=0
							AND ((TIMESTAMPDIFF(MINUTE,bkg_confirm_datetime, NOW()) * 6 > TIMESTAMPDIFF(MINUTE,bkg_confirm_datetime, bkg_pickup_date))
								 OR (CalcWorkingHour(NOW(),bkg_pickup_date) < 4))
							";
//OR (TIMESTAMPDIFF(MINUTE, NOW(),bkg_pickup_date) < 90))
		$recordsets	 = DBUtil::queryAll($sql, DBUtil::SDB());
		return $recordsets;
	}

	public function getCriticalAssignments($bkg_id = '')
	{
		$where = '';
		if ($bkg_id > 0)
		{
			$where = " AND booking.bkg_id = {$bkg_id}";
		}

		$criticalScore = Yii::app()->params['assignmentScore']['critical'];

// It will wait for minimum 25% of confirm time to be passed or it should be less than 60 minutes of pickup.
		$sql		 = "SELECT bkg_id FROM booking
					INNER JOIN booking_pref ON bpr_bkg_id = bkg_id
					INNER JOIN booking_trail ON btr_bkg_id = bkg_id
						WHERE (`bkg_critical_score` >= {$criticalScore} OR (booking_pref.bkg_critical_score >= ({$criticalScore}*0.9) AND booking_pref.bpr_uncommon_route = 1)) AND  bkg_status=2
							AND bkg_reconfirm_flag=1 AND bkg_critical_assignment=0 {$where}
							AND ((TIMESTAMPDIFF(MINUTE,bkg_confirm_datetime, NOW()) * 6 > TIMESTAMPDIFF(MINUTE,bkg_confirm_datetime, bkg_pickup_date))
									OR (TIMESTAMPDIFF(MINUTE, NOW(),bkg_pickup_date) < 60))";
		$recordsets	 = DBUtil::queryAll($sql, DBUtil::SDB());
		return $recordsets;
	}

	public function cancelSelfAssignedBookings()
	{
		$sql = "SELECT booking.bkg_id FROM booking
				INNER JOIN booking_pref ON booking_pref.bpr_bkg_id = booking.bkg_id AND booking_pref.bpr_vnd_recmnd = 1
				INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id = booking.bkg_id AND booking_invoice.bkg_advance_amount = 0
				WHERE booking.bkg_agent_id IS NOT NULL AND booking.bkg_agent_id > 0 AND booking.bkg_status = 2";

		$result = DBUtil::queryAll($sql);
		if ($result != '')
		{
			foreach ($result as $key => $value)
			{
				$userInfo	 = UserInfo::getInstance();
				$reasonId	 = 17;
				$reasonText	 = 'Self Assigned Booking Uassigned By Vendor';
				$bkgId		 = Booking::model()->canBooking($value['bkg_id'], $reasonText, $reasonId, $userInfo);
				BookingLog::model()->createLog($bkgId, $reasonText, $userInfo, Booking::STATUS_VERIFY_CANCELLED);
				echo "\n Booking ID : " . $bkgId . " cancelled by System.";
			}
		}
		else
		{
			echo 'No Booking IDs found';
		}
	}

	public function getCabListLatest($data, $triptype, $transfertype, $is_corporate, $phone, $country_code, $email, $lead_id)
	{
		$count1			 = count($data);
		$route			 = [];
		$leadRouteArr	 = [];
		foreach ($data as $key => $val)
		{
			$routeModel							 = new BookingRoute();
			$routeModel->brt_from_city_id		 = $val->pickup_city;
			$routeModel->brt_to_city_id			 = $val->drop_city;
			$routeModel->brt_pickup_datetime	 = $val->date;
			$routeModel->brt_pickup_date_date	 = DateTimeFormat::DateTimeToDatePicker($val->date);
			$routeModel->brt_pickup_date_time	 = date('h:i A', strtotime($val->date));
			$routeModel->brt_to_location		 = $val->drop_address;
			$routeModel->brt_from_location		 = $val->pickup_address;
			$routeModel->brt_to_pincode			 = $val->drop_pincode;
			$routeModel->brt_from_pincode		 = $val->pickup_pincode;
			$leadRouteArr[]						 = array_filter($routeModel->attributes);
			$route[]							 = $routeModel;
		}
		if ($lead_id > 0)
		{
			$btmodel = BookingTemp::model()->findByPk($lead_id);
		}
		else
		{
			$btmodel = new BookingTemp('new');
		}
		$btmodel->bookingRoutes		 = $route;
		$leadDataArr				 = CJSON::encode($leadRouteArr);
		$btmodel->bkg_route_data	 = $leadDataArr;
		$btmodel->bkg_contact_no	 = $phone;
		$btmodel->bkg_country_code	 = $country_code;
		$btmodel->bkg_user_email	 = $email;
		$btmodel->bkg_from_city_id	 = $data[0]->pickup_city;

		$btmodel->parsePickupDateTime($data[0]->date);
		$btmodel->bkg_booking_type = $triptype;
		if ($btmodel->bkg_booking_type == 4 || $btmodel->bkg_booking_type == 15)
		{
			$btmodel->bkg_transfer_type = $transfertype;
		}

		$btmodel->bkg_to_city_id = $data[$count1 - 1]->drop_city;
		$btmodel->bkg_platform	 = Booking::Platform_App;
		if ($btmodel->bkg_id == "")
		{
			$btmodel->bkg_id = null;
		}
		$user_id = (Yii::app()->user->getId() > 0) ? Yii::app()->user->getId() : '';
		if ($user_id)
		{
			$btmodel->bkg_user_id	 = $user_id;
			$usrmodel				 = Users::model()->findByPk($user_id);
			if ($is_corporate)
			{
				$btmodel->bkg_agent_id = $usrmodel->usr_corporate_id;
			}
		}
		$btmodel->bkg_user_ip				 = \Filter::getUserIP();
		$cityinfo							 = UserLog::model()->getCitynCountrycodefromIP(\Filter::getUserIP());
		$btmodel->bkg_user_city				 = $cityinfo['city'];
		$btmodel->bkg_user_country			 = $cityinfo['country'];
		$btmodel->bkg_user_device			 = UserLog::model()->getDevice();
		$btmodel->bkg_user_last_updated_on	 = new CDbExpression('NOW()');
		$tmodel								 = Terms::model()->getText(1);
		$btmodel->bkg_tnc_id				 = $tmodel->tnc_id;
		$btmodel->bkg_tnc_time				 = new CDbExpression('NOW()');
		$btmodel->bkg_transfer_type			 = 1;
		$btmodel->bkg_booking_id			 = 'temp';
		$btmodel->setScenario('multiroute');
		$transaction						 = Yii::app()->db->beginTransaction();
		$result								 = CActiveForm::validate($btmodel, null, false);
		$errorMessages						 = '';
		if ($result == '[]')
		{
			try
			{
				if (!$btmodel->save())
				{
					throw new Exception("Failed to create booking", 101);
				}
				$booking_id				 = BookingTemp::model()->generateBookingid($btmodel);
				$btmodel->bkg_booking_id = $booking_id;
				if (!$btmodel->save())
				{
					throw new Exception("Failed to create booking", 101);
				}


				$desc		 = "Quote generated by user.";
				$userInfo	 = UserInfo::getInstance();
				$eventid	 = BookingLog::BOOKING_CREATED;
				LeadLog::model()->createLog($booking_id, $desc, $userInfo, '', '', $eventid);
				$transaction->commit();
				$success	 = true;
				$errors		 = [];
			}
			catch (Exception $e)
			{
				$btmodel->addError('bkg_id', $e->getMessage());
				$transaction->rollback();
				$success = false;
				$errors	 = $btmodel->getErrors();
				foreach ($errors as $value)
				{
					$errorMessages = $value[0];
					break;
				}
			}
		}
		else
		{
			$success = false;
			$errors	 = $btmodel->getErrors();
			foreach ($errors as $value)
			{
				$errorMessages = $value[0];

//
			}
		}
		if ($success)
		{
			$success				 = false;
			$errors					 = 'Something went wrong';
			$partnerId				 = Yii::app()->params['gozoChannelPartnerId'];
			$btmodel->refresh();
			$quote					 = new Quote();
			$quote->routes			 = $route;
			$quote->tripType		 = $triptype;
			$quote->partnerId		 = $partnerId;
			$quote->quoteDate		 = $btmodel->bkg_create_date;
			$quote->pickupDate		 = $btmodel->bkg_pickup_date;
			$quote->sourceQuotation	 = Quote::Platform_App;
			$quote->setCabTypeArr();
			Quote::$updateCounter	 = true;
			$resultQuote			 = $quote->getQuote();
			$resultQuotMap			 = Booking::model()->mapQuotecablistNew($resultQuote);
			$cabList				 = $resultQuotMap['cabList'];
			if (count($resultQuote) > 0)
			{
				$success	 = true;
				$errors		 = [];
				$createDate	 = $btmodel->bkg_create_date;
				$pickDate	 = $btmodel->bkg_pickup_date;
				$promoRule	 = Promotions::model()->getExpTimeAdvPromo($createDate, $pickDate);
				$count		 = count($resultQuote);
				$resultArr	 = [];
				$$result1	 = [];
				foreach ($resultQuote as $cab => $cabQuotes)
				{
					if (!$cabQuotes->success)
					{
						continue;
					}
//                        $routeDistance                      = $cabQuotes->routeDistance;
//                        $routeDuration                      = $cabQuotes->routeDuration;
					$routeRates									 = $cabQuotes->routeRates;
					$bookingInvoice								 = BookingInvoice::model();
					$userId										 = Yii::app()->user->getId();
					$bookingInvoice->bkg_gozo_base_amount		 = $routeRates->baseAmount;
					$bookingInvoice->bkg_base_amount			 = $routeRates->baseAmount;
					$bookingInvoice->bkg_driver_allowance_amount = $routeRates->driverAllowance;
					$bookingInvoice->bkg_toll_tax				 = $routeRates->tollTaxAmount | 0;
					$bookingInvoice->bkg_state_tax				 = $routeRates->stateTax | 0;
					$bookingInvoice->bkg_is_toll_tax_included	 = $routeRates->isTollIncluded | 0;
					$bookingInvoice->bkg_is_state_tax_included	 = $routeRates->isStateTaxIncluded | 0;
					if ($is_corporate)
					{
						$userModel	 = Users::model()->findByPk($userId);
						$corporateId = $userModel->usr_corporate_id;
						$bookingInvoice->populateCorporateAmount($corporateId);
//$resultArr[$cab]['corporate_amt']	 = $bookingInvoice->bkg_corporate_discount;
					}
					else
					{
						$bookingInvoice->populateAmount(true, false, true, false, $btmodel->bkg_agent_id);
//$resultArr[$cab]['corporate_amt'] = 0;
					}
					$promoModel				 = new Promos();
					$promoModel->promoCode	 = '';
					$promoModel->totalAmount = $routeRates->baseAmount;
					$promoModel->createDate	 = $btmodel->bkg_create_date;
					$promoModel->pickupDate	 = $btmodel->bkg_pickup_date;
					$promoModel->fromCityId	 = $btmodel->bkg_from_city_id;
					$promoModel->toCityId	 = $btmodel->bkg_to_city_id;
					$promoModel->userId		 = $btmodel->bkg_user_id;
					$promoModel->platform	 = $btmodel->bkg_platform;
					$promoModel->carType	 = $btmodel->bkg_vehicle_type_id;
					$promoModel->bookingType = $btmodel->bkg_booking_type;
					$promoModel->email		 = $btmodel->bkg_user_email;
					$promoModel->phone		 = $btmodel->bkg_contact_no;
					$promoModel->bkgId		 = '';
					$promoArr				 = $promoModel->getApplicableCodes(true);

					if (count($promoArr) == 0)
					{
						$promoValue	 = 0;
						$promoMax	 = 0;
						$promoMin	 = 0;
						$promoCode	 = "";
					}
					else
					{
						$promoArr			 = array_values($promoArr);
						$promoValue[$key]	 = $promoArr[0]['pcn_value_cash'];
						$promoMax[$key]		 = $promoArr[0]['pcn_max_cash'];
						$promoMin[$key]		 = $promoArr[0]['pcn_min_cash'];
						$promoCode[$key]	 = $promoArr[0]['prm_code'];
						$promoId[$key]		 = $promoArr[0]['prm_id'];
					}
					$resultArr[$cab]['toll_tax']			 = $bookingInvoice->bkg_toll_tax;
					$resultArr[$cab]['state_tax']			 = $bookingInvoice->bkg_state_tax;
					$resultArr[$cab]['toll_tax_included']	 = $bookingInvoice->bkg_is_toll_tax_included;
					$resultArr[$cab]['state_tax_included']	 = $bookingInvoice->bkg_is_state_tax_included;

					$normalFareArr					 = [];
					$normalFareArr['base_amt']		 = $bookingInvoice->bkg_base_amount;
					$normalFareArr['total_amt']		 = $bookingInvoice->bkg_total_amount;
					$normalFareArr['service_tax']	 = $bookingInvoice->bkg_service_tax;

					$discountedArr								 = [];
					$discountedArr['discounted_base_fare']		 = $bookingInvoice->bkg_base_amount - PromoCalculation::model()->calculatePromoAmount($promoMax[$key], $promoMin[$key], 1, $promoValue[$key], $bookingInvoice->bkg_base_amount);
					$discountedArr['discount_amt']				 = $bookingInvoice->bkg_base_amount - $discountedArr['discounted_base_fare'];
					$discountedArr['applicable_promo']			 = $promoCode[$key];
					$discountedArr['applicable_promo_id']		 = $promoId[$key];
					$staxrate									 = BookingInvoice::getGstTaxRate($bookingInvoice->bivBkg->bkg_agent_id, $bookingInvoice->bivBkg->bkg_booking_type);
					$discountedArr['discounted_service_tax']	 = round($discountedArr['discounted_base_fare'] * ($staxrate) * 0.01);
					$discountedArr['total_discounted_payable']	 = round($discountedArr['discounted_base_fare'] + $discountedArr['discounted_service_tax'] + (($bookingInvoice->bkg_is_toll_tax_included == 1) ? $bookingInvoice->bkg_toll_tax : 0) + (($bookingInvoice->bkg_is_state_tax_included == 1) ? $bookingInvoice->bkg_state_tax : 0) + $bookingInvoice->bkg_driver_allowance_amount);

					$resultArr[$cab]['normal_fare']		 = $normalFareArr;
					$resultArr[$cab]['discounted_fare']	 = $discountedArr;

					$result1[$cab] = $cabList[$cab] + $resultArr[$cab];
				}
			}
		}
		if ($result1 != '')
		{
			$result = ['cabList' => array_values($result1), 'routeData' => $resultQuotMap['routeData'], 'km' => $resultQuote[1]->routeDistance->tripDistance];
		}
		else
		{
			
		}
		return $result;
	}

	public function enablePaymentLink()
	{
		$bkgId				 = $this->bkg_id;
//$event		 = 34;
//$result	 = false;
		$sql				 = "
			SELECT
			MAX(IFNULL(blg34.blg_created, booking.bkg_create_date)) AS sentpaymentlinkdate,
			MAX(IFNULL(blg33.blg_created, booking.bkg_create_date)) AS sendconfirmadate,
			booking.bkg_create_date, now() AS currentdate
			FROM   booking
			LEFT JOIN booking_log blg33 ON booking.bkg_id = blg33.blg_booking_id AND   blg33.blg_active = 1 AND blg33.blg_event_id = 33
			LEFT JOIN booking_log blg34 ON booking.bkg_id = blg34.blg_booking_id AND   blg34.blg_active = 1 AND blg34.blg_event_id = 34
			WHERE  booking.bkg_id = $bkgId
			group by booking.bkg_id";
		$result				 = DBUtil::queryRow($sql);
		$diffpaymentlinkdate = round((strtotime($result['currentdate']) - strtotime($result['sentpaymentlinkdate'])) / 60);
		$diffconfirmadate	 = round((strtotime($result['currentdate']) - strtotime($result['sendconfirmadate'])) / 60);

		$nextsentpaymentlinkdate = date("H:i a", strtotime('+30 minutes', strtotime($result['sentpaymentlinkdate'])));
		$nextsendconfirmadate	 = date("H:i a", strtotime('+30 minutes', strtotime($result['sendconfirmadate'])));

//$endTime = date("H:i",strtotime('+30 minutes',$time));
		$result = ['enablePaymentLink'			 => false,
			'enableConfirmLink'			 => false,
			'sentpaymentlinkdate'		 => date("H:i a", strtotime($result['sentpaymentlinkdate'])),
			'sendconfirmadate'			 => date("H:i a", strtotime($result['sendconfirmadate'])),
			'nextsentpaymentlinkdate'	 => $nextsentpaymentlinkdate,
			'nextsendconfirmadate'		 => $nextsendconfirmadate,
		];
		if ($diffpaymentlinkdate > 30)
		{
			$result['enablePaymentLink'] = true;
		}
		if ($diffconfirmadate > 30)
		{
			$result['enableConfirmLink'] = true;
		}

		return $result;
	}

	public static function getTripId($bkgid)
	{
		$sql = "SELECT bkg_bcb_id FROM booking
				WHERE bkg_id=$bkgid";
		$res = DBUtil::command($sql)->queryScalar();
		return $res;
	}

	public static function updateMaxAllowableVendorAmount($bkgId, $round)
	{
		$bcbId = Booking::getTripId($bkgId);
		BookingCab::model()->updateMaxAllowableVendorAmount($bcbId, $round);
	}

	public function getAdminBkgDetails($searchText = '')
	{
		if ($region == 7)
		{
			$regionCond = "";
		}
		else
		{
			$regionCond = "AND s.stt_zone IN ($region)";
		}
		$qry		 = "SELECT
						bkg_id,
						bkg_booking_id,
						bkg_bcb_id,
						a.cty_name AS from_city,
						b.cty_name AS to_city,
						s.stt_zone AS Region,
						z.zon_name AS sourceZone,
						bkg.bkg_pickup_date,
						bkg_status
						FROM
							`booking` `bkg`
						 JOIN booking_pref bpr ON
                            bpr.bpr_bkg_id = bkg.bkg_id
						 JOIN `cities` `a` ON
							a.cty_id = bkg.bkg_from_city_id
						 JOIN `cities` `b` ON
							b.cty_id = bkg.bkg_to_city_id
						 JOIN states s ON
                        	s.stt_id = a.cty_state_id
						LEFT JOIN zone_cities zc ON
                        	zc.zct_cty_id = bkg.bkg_from_city_id
                        LEFT JOIN zones z ON
							z.zon_id = zc.zct_zon_id
                       WHERE
							(bkg.bkg_id LIKE '%$searchText%' OR bkg.bkg_bcb_id LIKE '%$searchText%') AND bkg.bkg_pickup_date > '2018-04-01 00:00:00 $regionCond'
						ORDER BY
						   bkg.bkg_pickup_date ASC";
		$recordset	 = DBUtil::queryAll($qry);
		return $recordset;
	}

	public function validateShuttle($attribute, $params)
	{
		$success = true;
		if ($this->bkg_booking_type != 7)
		{
			$this->addError("bkg_shuttle_id", "There is some problem with the booking");
			$success = false;
		}
		if ($this->bkg_shuttle_id == '')
		{
			$this->addError("bkg_shuttle_id", "Shuttle is not selected");
			$success = false;
		}
		else
		{
			$arr['slt_id']	 = $this->bkg_shuttle_id;
			$shuttleDetails	 = Shuttle::model()->fetchData($arr);
			if (sizeof($shuttleDetails) > 0)
			{
				$pickupDateTime	 = $shuttleDetails[0]['slt_pickup_datetime'];
				$seatAvailable	 = $shuttleDetails[0]['available_seat'];
				$currentTime	 = DBUtil::getCurrentTime();

				if ($currentTime > $pickupDateTime)
				{
					$this->addError("bkg_shuttle_id", "Shuttle with past pickup time is selected");
					$success = false;
				}
				else
				{
					$this->bkg_pickup_date = $shuttleDetails[0]['slt_pickup_datetime'];
					$this->parsePickupDateTime($this->bkg_pickup_date);
				}
				if ($seatAvailable == 0)
				{
					$this->addError("bkg_shuttle_id", "No seat is available in the shuttle");
					$success = false;
				}
			}
			else
			{
				$this->addError("bkg_shuttle_id", "No Shuttle");
				$success = false;
			}
			if ($this->bkg_no_of_seats === 0)
			{
				$this->addError("bkg_no_of_seats", "Seat count is not selected");
				$success = false;
			}
		}
		return $success;
	}

	public function createShuttle($model, $slt_id, $platform, $agent_id = '')
	{
		$bkgUser = $model->bkgUserInfo;

		$bkgInvoice	 = new BookingInvoice();
//		$bkgUser	 = new BookingUser();
		$bkgAddInfo	 = new BookingAddInfo();
		$bkgTrail	 = new BookingTrail();
		$bkgTrack	 = new BookingTrack();
		$bkgPref	 = new BookingPref();
		$bkgPf		 = new BookingPriceFactor();

		if ($agent_id > 0)
		{
			$model->bkg_agent_id			 = $agent_id;
			$agtModel						 = Agents::model()->findByPk($model->bkg_agent_id);
			$bkgPref->bkg_send_email		 = 1;
			$bkgPref->bkg_send_sms			 = 1;
			$bkgPref->bkg_trip_otp_required	 = $agtModel->agt_otp_required;

			if ($agtModel->agt_city == 30706)
			{
				$bkgInvoice->bkg_cgst	 = Yii::app()->params['cgst'];
				$bkgInvoice->bkg_sgst	 = Yii::app()->params['sgst'];
				$bkgInvoice->bkg_igst	 = 0;
			}
			else
			{
				$bkgInvoice->bkg_igst	 = Yii::app()->params['igst'];
				$bkgInvoice->bkg_cgst	 = 0;
				$bkgInvoice->bkg_sgst	 = 0;
			}
		}

		$shuttleData			 = Shuttle::model()->getDetailbyId($slt_id);
		$model->bkg_booking_type = 7;

		$model->populateFromShuttle($shuttleData);

		$cabType							 = $shuttleData['cab_data']['scv_id'];
		$amount								 = $shuttleData['slt_base_fare'];
		$bkgInvoice->bkg_gozo_base_amount	 = $shuttleData['slt_base_fare'];

		$agtModel						 = Agents::model()->findByPk($model->bkg_agent_id);
		$indVendorAmount				 = round($shuttleData['slt_vendor_amount'] / $shuttleData['slt_seat_availability']);
		$shuttleData['vendor_amount']	 = $indVendorAmount;
		$shuttleData					 = $agtModel->getShuttleBaseDiscFare($shuttleData, $cabType, $amount);

		$bkgInvoice->bkg_base_amount			 = $shuttleData['slt_base_fare'];
		$bkgInvoice->bkg_driver_allowance_amount = $shuttleData['slt_driver_allowance'];
		$bkgInvoice->bkg_chargeable_distance	 = $model->bkg_trip_distance;
		$bkgTrack->bkg_garage_time				 = $model->bkg_trip_duration;
//  $cabData['totalGarage'];
		$bkgInvoice->bkg_vendor_amount			 = $indVendorAmount;
		$bkgInvoice->bkg_is_toll_tax_included	 = 1;
		$bkgInvoice->bkg_is_state_tax_included	 = 1;
		$bkgInvoice->bkg_toll_tax				 = $shuttleData['slt_toll_tax'];
		$bkgInvoice->bkg_state_tax				 = $shuttleData['slt_state_tax'];
		$bkgInvoice->bkg_quoted_vendor_amount	 = $indVendorAmount;

		$bookingRoutes						 = [];
		$bookingRoute						 = new BookingRoute();
		$bookingRoute->with('brtFromCity,brtToCity');
		$bookingRoute->brt_from_city_id		 = $model->bkg_from_city_id;
		$bookingRoute->brt_to_city_id		 = $model->bkg_to_city_id;
		$bookingRoute->brt_from_location	 = $model->bkg_pickup_address;
		$bookingRoute->brt_from_latitude	 = $model->bkg_pickup_lat;
		$bookingRoute->brt_from_longitude	 = $model->bkg_pickup_long;
		$bookingRoute->brt_to_location		 = $model->bkg_drop_address;
		$bookingRoute->brt_to_latitude		 = $model->bkg_dropup_lat;
		$bookingRoute->brt_to_longitude		 = $model->bkg_dropup_long;
		$bookingRoute->brt_trip_distance	 = $model->bkg_trip_distance;
		$bookingRoute->brt_trip_duration	 = $model->bkg_trip_duration;
		$bookingRoute->brt_pickup_datetime	 = $model->bkg_pickup_date;
		$bookingRoutes[]					 = $bookingRoute;

		if ($amount > 0)
		{
			$bkgInvoice->calculateConvenienceFee(0);
			$bkgInvoice->populateAmount(true, false, true, true, $model->bkg_agent_id);
		}


		$bkgUser->bkg_user_last_updated_on = new CDbExpression('NOW()');

		$bkgTrail->bkg_platform = $platform;
		if ($bkgAddInfo->bkg_info_source == '')
		{
			$bkgAddInfo->bkg_info_source = 6;
		}

		$bkgTrail->bkg_user_ip = \Filter::getUserIP();

		$userModel = Users::model()->linkUserByBookingUserModel($bkgUser, Booking::Platform_Agent);
		if ($userModel)
		{
			$user_id				 = $userModel->user_id;
			$bkgUser->bkg_user_id	 = $user_id;
		}
		$cityinfo					 = UserLog::model()->getCitynCountrycodefromIP(\Filter::getUserIP());
		$bkgUser->bkg_user_city		 = $cityinfo['city'];
		$bkgUser->bkg_user_country	 = $cityinfo['country'];
		$bkgTrail->bkg_user_device	 = UserLog::model()->getDevice();
		$bkgTrail->setPaymentExpiryTime($model->bkg_pickup_date);
		$model->scenario			 = 'cabRate';
		$transaction				 = DBUtil::beginTransaction();
		if ($model->validate() && !$model->hasErrors())
		{
			try
			{
				$bkgUser->bkg_user_last_updated_on	 = new CDbExpression('NOW()');
				$tmodel								 = Terms::model()->getText(1);
				$bkgTrail->bkg_tnc_id				 = $tmodel->tnc_id;
				$bkgTrail->bkg_tnc_time				 = new CDbExpression('NOW()');
				$isRealtedBooking					 = $model->findRelatedBooking($model->bkg_id);
				$model->bkg_status					 = 1;
				$model->bkg_booking_id				 = 'temp';
				$bkgTrail->bkg_is_related_booking	 = ($isRealtedBooking) ? 1 : 0;
				$userInfo							 = UserInfo::getInstance();
				$bkgTrail->bkg_create_user_type		 = $userInfo->userType;
				$bkgTrail->bkg_create_user_id		 = $userInfo->userId;
				$bkgTrail->bkg_create_type			 = BookingTrail::CreateType_Self;
				if (!$model->save())
				{
					throw new Exception("Failed to create booking", 101);
				}
				$bkgPf->bpf_bkg_id		 = $model->bkg_id;
				$bkgAddInfo->bad_bkg_id	 = $model->bkg_id;
				$bkgInvoice->biv_bkg_id	 = $model->bkg_id;
				$bkgPref->bpr_bkg_id	 = $model->bkg_id;
				$bkgTrack->btk_bkg_id	 = $model->bkg_id;
				$bkgTrail->btr_bkg_id	 = $model->bkg_id;
				$bkgUser->bui_bkg_id	 = $model->bkg_id;
				$bkgAddInfo->save();
				$bkgInvoice->save();
				$bkgPref->save();
				$bkgPf->save();
//						$bkgPf->updateFromQuote($quoteData);
				$bkgTrack->save();
				$bkgTrail->save();
				$bkgUser->save();
				foreach ($bookingRoutes as $k => $t)
				{
					$t->scenario	 = "admCreate";
					$t->attributes	 = $t;
					$t->brt_bkg_id	 = $model->bkg_id;
					$t->save();
				}

				if ($bkgPref == '')
				{
					$bkgPref			 = new BookingPref();
					$bkgPref->bpr_bkg_id = $model->bkg_id;
				}
//Update partner commission and gozoamount
				$bkgInvoice->refresh();
				$bkgInvoice->calculateDues();
				$bkgInvoice->save();

				$bkgUser->bkg_crp_name			 = $agtModel->agt_copybooking_name;
				$bkgPref->bkg_crp_send_email	 = 1;
				$bkgPref->bkg_crp_send_sms		 = 1;
				$bkgUser->bkg_crp_email			 = $agtModel->agt_copybooking_email;
				$bkgUser->bkg_crp_phone			 = $agtModel->agt_copybooking_phone;
				$bkgUser->bkg_crp_country_code	 = $agtModel->agt_phone_country_code;
				$bkgUser->save();
				$bkgPref->save();
				$arrEvents						 = AgentMessages::getEvents();
				foreach ($arrEvents as $key => $value)
				{
					$bookingMessages = BookingMessages::model()->getByEventAndBookingId($model->bkg_id, $key);
					if ($bookingMessages == '')
					{
						$bookingMessages = new BookingMessages();
						$bookingMessages->getMessageDefaults($model->bkg_agent_id, $key);
						if ($_POST['payBy'] == 2 && $model->bkg_status == 1)
						{
							if ($key == AgentMessages::BOOKING_CONF_WITH_PAYMENTINFO || $key == AgentMessages::PAYMENT_CONFIRM || $key == AgentMessages::PAYMENT_FAILED || $key == AgentMessages::INVOICE || $key == AgentMessages::RATING_AND_REVIEWS || $key == AgentMessages::CANCEL_TRIP)
							{
								$bookingMessages->bkg_agent_email	 = 1;
								$bookingMessages->bkg_agent_sms		 = 1;
								$bookingMessages->bkg_trvl_email	 = 1;
								$bookingMessages->bkg_trvl_sms		 = 1;
								$bookingMessages->bkg_agent_whatsapp = 1;
								$bookingMessages->bkg_trvl_whatsapp	 = 1;
							}
							if ($key == AgentMessages::BOOKING_CONF_WITHOUT_PAYMENTINFO || $key == AgentMessages::CAB_ASSIGNED)
							{
								$bookingMessages->bkg_trvl_email	 = 0;
								$bookingMessages->bkg_trvl_sms		 = 0;
								$bookingMessages->bkg_trvl_whatsapp	 = 0;
							}
						}
						$bookingMessages->bkg_booking_id = $model->bkg_id;
						$bookingMessages->bkg_event_id	 = $key;
						$bookingMessages->save();
					}
				}
				$bookingCab = $model->getRelatedShuttleTrip();
				BookingsDataCreated::model()->setData($model->bkg_id);
				if (!$bookingCab)
				{
					$bookingCab						 = new BookingCab();
					$bookingCab->bcb_vendor_amount	 = $shuttleData['slt_vendor_amount'];
					$bookingCab->bcb_bkg_id1		 = $model->bkg_id;
					$bookingCab->bcb_trip_type		 = 1;
					$bookingCab->save();
				}

				BookingRoute::model()->setBookingCabStartEndTime($bookingCab->bcb_id, $model->bkg_id);
				$model->refresh();
				$model->bkg_bcb_id		 = $bookingCab->bcb_id;
				$booking_id				 = $model->generateBookingid($model);
				$model->bkg_booking_id	 = $booking_id;
				if (!$model->save())
				{
					throw new Exception("Failed to create booking", 101);
				}
				$bkgTrack	 = BookingTrack::model()->sendTripOtp($model->bkg_id, false);
				$bkgTrack->save();
//				$processedRoute	 = BookingLog::model()->logRouteProcessed($quoteData, $model->bkg_id);
//				$desc			 = "Booking created by Agent - $processedRoute";
				$desc		 = "Shuttle Booking created by Agent (ST#$slt_id)";
				$eventid	 = BookingLog::BOOKING_CREATED;
				BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, $eventid);
				$bookingRoute->clearQuoteSession();
				if ($_POST['payBy'] == 1 && $model->bkg_status == 1)
				{
					$bkgInvoice->bkg_corporate_remunerator	 = 2;
					$amount									 = $bkgInvoice->bkg_total_amount | 0;
					$bkgInvoice->save();

					$isUpdated = $model->with('bkgPref', 'bkgAgent', 'bkgUserInfo', 'bkgInvoice', 'bkgAddInfo', 'bkgTrack', 'bkgTrail')->updateAdvance($amount, $model->bkg_pickup_date, PaymentType:: TYPE_AGENT_CORP_CREDIT, UserInfo:: getInstance(), null, "Partner Wallet Used");
					if (!$isUpdated)
					{
						throw new Exception("Booking failed as partner credit limit exceeded.");
					}
					$model->bkg_status				 = 2;
					$model->bkg_reconfirm_flag		 = 1;
					$model->save();
					$bkgTrail->bkg_confirm_user_type = $userInfo->userType;
					$bkgTrail->bkg_confirm_user_id	 = $userInfo->userId;
					$bkgTrail->bkg_confirm_datetime	 = new CDbExpression('NOW()');
					$bkgTrail->bkg_confirm_type		 = BookingTrail::ConfirmType_Self;
					$bkgTrail->save();
					if ($model->bkg_status == 2)
					{
						$emailCom	 = new emailWrapper();
						$emailCom->gotBookingemail($model->bkg_id, UserInfo:: TYPE_SYSTEM, $model->bkg_agent_id);
						$emailCom->gotBookingAgentUser($model->bkg_id);
						$msgCom		 = new smsWrapper();
						$msgCom->gotBooking($model, UserInfo::TYPE_SYSTEM);
					}
				}

				$bkgBookingUser		 = BookingUser::model()->saveVerificationOtp($model->bkg_id);
				$model->bkgUserInfo	 = $bkgBookingUser;
				DBUtil::commitTransaction($transaction);

				if ($_POST['payBy'] == 2 && $model->bkg_status == 1)
				{
					$isAlready2Sms = SmsLog::model()->getCountVerifySms($model->bkg_id);
					if ($isAlready2Sms <= 2)
					{
						$bkgUser->sendVerificationCode(10, true);
					}
				}
				return $model;
			}
			catch (Exception $e)
			{
				$model->addError('bkg_id', $e->getMessage());
				DBUtil::rollbackTransaction($transaction);
			}
		}
	}

	public function getRelatedShuttleTrip()
	{
		$shuttle_id	 = $this->bkg_shuttle_id;
		$tripId		 = Booking::model()->getTripIdbyShuttleId($shuttle_id);
		if ($tripId && $tripId > 0)
		{
			return BookingCab::model()->findByPk($tripId);
		}
		return false;
	}

	public function getTripIdbyShuttleId($shuttle_id)
	{
		$sql		 = "SELECT distinct bkg_bcb_id from booking where bkg_shuttle_id=:shuttleid";
		$resultRow	 = DBUtil::queryRow($sql, DBUtil:: MDB(), ['shuttleid' => $shuttle_id]);
		if (isset($resultRow['bkg_bcb_id']))
		{
			return $resultRow['bkg_bcb_id'];
		}
		return false;
	}

	public function getRelatedUnverifedShuttleBooking()
	{
		$sql		 = "SELECT distinct bkg_bcb_id from booking where bkg_shuttle_id=:shuttleid";
		$resultRow	 = DBUtil::queryRow($sql, DBUtil:: MDB(), ['shuttleid' => $shuttle_id]);
		if (isset($resultRow['bkg_bcb_id']))
		{
			return $resultRow['bkg_bcb_id'];
		}
		return false;
	}

	public function getDelegatedOMList($searchTxt = '')
	{
		$params = ['searchTxt' => $searchTxt];
		if ($searchTxt != '')
		{
			$searchText = " AND bkg.bkg_id LIKE CONCAT('%', :searchTxt, '%')";
		}
		else
		{
			$searchText = "";
		}
		$qry = "SELECT bkg_id, bkg_booking_id, bkg_bcb_id, a.cty_name AS from_city, b.cty_name AS to_city, s.stt_zone AS Region,
					z.zon_name AS sourceZone, bkg.bkg_pickup_date, bkg_status
				FROM `booking` `bkg`
				INNER JOIN booking_pref bpr ON bpr.bpr_bkg_id = bkg.bkg_id
				INNER JOIN `cities` `a` ON a.cty_id = bkg.bkg_from_city_id
				INNER JOIN `cities` `b` ON b.cty_id = bkg.bkg_to_city_id
				INNER JOIN states s ON s.stt_id = a.cty_state_id
				LEFT JOIN zone_cities zc ON zc.zct_cty_id = bkg.bkg_from_city_id
                LEFT JOIN zones z ON z.zon_id = zc.zct_zon_id
				WHERE bpr.bpr_assignment_level = 2 AND bkg.bkg_status IN(2) AND bkg.bkg_pickup_date > '2018-04-01 00:00:00'
					$searchText
				ORDER BY bkg.bkg_pickup_date";

		$recordset = DBUtil::queryAll($qry, DBUtil:: SDB(), $params);
		return $recordset;
	}

	public function autoMarkCompleteBookingCron()
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		try
		{
			echo "Step1\n";
			$sql = "SELECT
				`bkg_id`,
				a.pickupDate AS bkg_pickup_date,
				a.brt_trip_duration AS bkg_trip_duration,
				bkg_booking_type,
				bkg_agent_id,
				(
					IFNULL(
						booking_invoice.bkg_gozo_amount,
						0
					) + IFNULL(
						booking_invoice.bkg_partner_commission,
						0
					) + IFNULL(
						booking_invoice.bkg_service_tax,
						0
					)
				) AS gozo,
				(
					(
						(
							IFNULL(
								booking_invoice.bkg_advance_amount,
								0
							) + IFNULL(
								booking_invoice.bkg_credits_used,
								0
							)
						) - IFNULL(
							booking_invoice.bkg_refund_amount,
							0
						)
					)
				) AS vnd,
				booking_track.bkg_ride_complete
			FROM
				`booking`
			INNER JOIN(
				SELECT
					MAX(brt_pickup_datetime) AS pickupDate,
					brt_trip_duration,
					brt_bkg_id
				FROM
					booking_route
				WHERE
					brt_active = 1
				GROUP BY
					brt_bkg_id
			) a
			ON
			   booking.bkg_id = a.brt_bkg_id
			INNER JOIN booking_track ON booking_track.btk_bkg_id = booking.bkg_id AND bkg_is_no_show = 0
			INNER JOIN booking_invoice ON booking.bkg_id = booking_invoice.biv_bkg_id
			INNER JOIN booking_pref ON booking.bkg_id = booking_pref.bpr_bkg_id  AND bkg_duty_slip_required = 0
			WHERE
				booking.bkg_status = 5 AND booking.bkg_active = 1 AND booking.bkg_pickup_date > DATE_SUB(NOW(), INTERVAL 30 DAY) AND booking_pref.`bkg_account_flag` = 0 AND DATE_ADD(
					bkg_pickup_date,
					INTERVAL(bkg_trip_duration + 180) MINUTE
				) <= NOW()
			HAVING
				(
					addWorkingMinutes(720,
					DATE_ADD(bkg_pickup_date,
						INTERVAL(bkg_trip_duration) MINUTE)
					) <= NOW()) OR booking_track.bkg_ride_complete = 1";

			$recordset = DBUtil::queryAll($sql);
			if (count($recordset) > 0)
			{
				$i = 1;
				foreach ($recordset as $key => $value)
				{
					if ($value['bkg_id'] != '')
					{
						$bkid	 = $value['bkg_id'];
						echo "Step2\n";
						Logger::trace("Booking going to mark complete: Booking Id " . $bkid);
						$success = Booking::model()->markComplete($bkid);
						echo "Step3\n";
						if (!$success)
						{
							Logger::trace("Booking mark complete failed: status " . $success);
							echo "error";
						}
						else
						{
							Logger::trace("Booking mark complete sucess: status " . $success);
							echo "Marked Complete " . $bkid . "<br>";
						}
					}
					$i++;
				}
			}
		}
		catch (Exception $ex)
		{
			echo $ex->getMessage();
			echo $ex->getTraceAsString();
		}
	}

	public function deactivateRelatedBookings($id)
	{
		$model = Booking::model()->findByPk($id);

		$fromCityIds	 = ZoneCities::getRelatedcities($model->bkg_from_city_id);
		$fromAllCities	 = $fromCityIds['all_city'];
		$toCityIds		 = ZoneCities::getRelatedcities($model->bkg_to_city_id);
		$toAllCities	 = $toCityIds['all_city'];

		$userInfo		 = new UserInfo();
		$followStatus	 = 4;
		$eventid		 = 4;

// Booking
		$sql						 = "SELECT bkg.* FROM booking bkg
				INNER JOIN booking_user bui ON bkg.bkg_id = bui.bui_bkg_id AND bkg.bkg_status = 15
				WHERE bkg.bkg_from_city_id IN ($fromAllCities) AND bkg.bkg_to_city_id IN ($toAllCities)
				AND (DATE(bkg.bkg_create_date) = DATE(:bkgCreateDate) OR DATE(bkg.bkg_pickup_date) = DATE(:bkgPickupDate))
				AND ((bui.bkg_contact_no=:bkgContactNo AND bui.bkg_contact_no <> '') OR (bui.bkg_user_email=:bkgUserEmail AND bui.bkg_user_email <> ''))
				AND bkg_status = 15 AND bkg_id != :bkgId";
		$email						 = $model->bkgUserInfo->bkg_user_email;
		$arrParams					 = [];
		$arrParams['bkgId']			 = $id;
		$arrParams['bkgCreateDate']	 = $model->bkg_create_date;
		$arrParams['bkgPickupDate']	 = $model->bkg_pickup_date;
		$arrParams['bkgContactNo']	 = $model->bkgUserInfo->bkg_contact_no;
		$arrParams['bkgUserEmail']	 = $email;

		$models = Booking::model()->findAllBySql($sql, $arrParams);
		if (count($models) > 0)
		{
			foreach ($models as $model)
			{
				$model->bkg_status		 = 1;
				$model->bkg_booking_id	 = Booking::model()->generateBookingid($model);
				$model->save();

				$reasonText	 = "Another booking confirmed";
				$desc		 = "Booking sent to unverified state.(Reason: " . $reasonText . ")";
				$eventid	 = BookingLog::QUOTE_CONVERT_TO_UNVERIFIED;
				BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, $eventid);
			}
		}
	}

	public function swapRouteForAirportTransfer($routes, $multijsondata, $transferType)
	{
		$newRoutes			 = $routes;
		$newMultijsondata	 = $multijsondata;
		if ($transferType == 2)
		{
			foreach ($routes as $key => $routeArray)
			{
				if ($key == 0)
				{
					$newRoutes[$key + 1]['brt_to_city_id']			 = $routeArray['brt_from_city_id'];
					$newRoutes[$key + 1]['brt_to_location']			 = $routeArray['brt_from_location'];
					$newRoutes[$key + 1]['brt_to_latitude']			 = $routeArray['brt_from_latitude'];
					$newRoutes[$key + 1]['brt_to_longitude']		 = $routeArray['brt_from_longitude'];
					$newRoutes[$key + 1]['brt_to_place_id']			 = $routeArray['brt_from_place_id'];
					$newRoutes[$key + 1]['brt_to_formatted_address'] = $routeArray['brt_from_formatted_address'];
					$newRoutes[$key + 1]['brt_to_city_is_airport']	 = $routeArray['brt_from_city_is_airport'];
				}
				else
				{
					$newRoutes[$key - 1]['brt_from_city_id']			 = $routeArray['brt_to_city_id'];
					$newRoutes[$key - 1]['brt_from_location']			 = $routeArray['brt_to_location'];
					$newRoutes[$key - 1]['brt_from_latitude']			 = $routeArray['brt_to_latitude'];
					$newRoutes[$key - 1]['brt_from_longitude']			 = $routeArray['brt_to_longitude'];
					$newRoutes[$key - 1]['brt_from_place_id']			 = $routeArray['brt_to_place_id'];
					$newRoutes[$key - 1]['brt_from_formatted_address']	 = $routeArray['brt_to_formatted_address'];
					$newRoutes[$key - 1]['brt_from_city_is_airport']	 = $routeArray['brt_to_city_is_airport'];
				}
			}

			foreach ($multijsondata as $key => $data)
			{
				$newMultijsondata[$key]["pickup_city"]		 = $data["drop_city"];
				$newMultijsondata[$key]["drop_city"]		 = $data["pickup_city"];
				$newMultijsondata[$key]["pickup_address"]	 = $data["drop_address"];
				$newMultijsondata[$key]["drop_address"]		 = $data["pickup_address"];
				$newMultijsondata[$key]["date"]				 = $data["date"];
				$newMultijsondata[$key]["distance"]			 = $data["distance"];
				$newMultijsondata[$key]["duration"]			 = $data["duration"];
			}
		}
		if ($newRoutes[0]['brt_from_city_is_airport'] == "1")
		{
			$airportRadius = Cities::getCtyRadiusByCtyId($newRoutes[0]['brt_from_city_id']);
		}
		elseif ($newRoutes[1]['brt_to_city_is_airport'] == "1")
		{
			$airportRadius = Cities::getCtyRadiusByCtyId($newRoutes[1]['brt_to_city_id']);
		}

		$distance				 = ROUND(SQRT(POW(69.1 * ($newRoutes[0]['brt_from_latitude'] - $newRoutes[1]['brt_to_latitude']), 2) + POW(69.1 * ($newRoutes[1]['brt_to_longitude'] - $newRoutes[0]['brt_from_longitude']) * COS($newRoutes[0]['brt_from_latitude'] / 57.3), 2)), 2);
		$dis					 = round($distance * 1.60934);
		$result['errors']		 = '';
		$result['booking_type']	 = '4';
		if ($dis > $airportRadius)
		{
			$result['booking_type'] = '1';
		}
		elseif ($dis < 0.5)
		{
			$result['errors'] = ['Cab not available within that distance'];
		}

		return ["routes" => $newRoutes, "multicityjsondata" => $newMultijsondata, 'routeValidResult' => $result];
	}

	public function unassignCabDriver($bkgId, $reason = null)
	{
		$bModel		 = Booking::model()->findByPk($bkgId);
		$oldModel	 = clone $bModel;
		if ($bModel)
		{
			$bModel->undoActions($bkgId);
			$bModel->refresh();
			$bModel->bkgBcb->bcb_driver_id		 = $bModel->bkgBcb->bcb_driver_name	 = $bModel->bkgBcb->bcb_driver_phone	 = $bModel->bkgBcb->bcb_driver_rating	 = $bModel->bkgBcb->bcb_driver_trips	 = null;
			$bModel->bkgBcb->bcb_cab_id			 = $bModel->bkgBcb->bcb_cab_number		 = $bModel->bkgBcb->bcb_cab_rating		 = $bModel->bkgBcb->bcb_cab_trips		 = null;
			$bModel->bkgBcb->save();
			$eventid							 = BookingLog::DRIVER_UNASSIGNED;
			BookingLog::model()->createLog($bkgId, $reason, null, $eventid, $oldModel);
		}
	}

	public function validateCriticalScore($isPrePostTime, $timeSchedule)
	{
		$success			 = false;
		$criticalScore		 = $this->bkgPref->bkg_critical_score;
		$getBookingLogInfo	 = BookingLog::model()->getRescheduleTimeLog($this->bkg_id);
		$spiceId			 = Config::get('spicejet.partner.id');
		$sugerboxId			 = Config::get('sugerbox.partner.id');
		$transferzId		 = Config::get('transferz.partner.id');

		if ($isPrePostTime == '' || $timeSchedule == '')
		{
			$this->addError("bkg_id", "Please select all fields.");
			return false;
		}
		if ($getBookingLogInfo != '')
		{
			if ($this->bkg_agent_id == $spiceId || $this->bkg_agent_id == $sugerboxId || $this->bkg_agent_id == $transferzId)
			{
				$success = true;
			}
			else
			{
				$this->addError("bkg_id", "Can't change reschedule pickup time more than once.");
				return false;
			}
		}
		if ($criticalScore < 0.9)
		{
			if ($criticalScore < 0.5)
			{
				$success = true;
			}
			elseif ($criticalScore > 0.5 && $isPrePostTime == 1)
			{
				$success = true;
			}
			else
			{
//$this->addError("bkg_id", "It is too late to prepone this booking. You may only postpone this booking.");
				$success = true;
			}
		}
		else
		{
//$this->addError("bkg_id", "It's too late to change pickup time as editing of pickup time has been expired");
//$success = false;
			$success = true;
		}
		if ($success)
		{
			if ($isPrePostTime == 1)
			{
				$updatedDate = date('Y-m-d H:i:s', strtotime($this->bkg_pickup_date . '+ ' . $timeSchedule . ' minute'));
			}
			else
			{
				$updatedDate = date('Y-m-d H:i:s', strtotime($this->bkg_pickup_date . '- ' . $timeSchedule . ' minute'));
			}

			if (date("Y-m-d", strtotime($updatedDate)) != date("Y-m-d", strtotime($this->bkg_pickup_date)))
			{
				$this->addError("bkg_id", "Pickup time modification is only possible within same date.");
				$success = false;
			}
			else
			{
				$this->parsePickupDateTime($updatedDate);
				$this->bkg_pickup_date = $updatedDate;
			}

			$diff = strtotime($this->bkg_pickup_date) - time();

			if ($diff < 1)
			{
				$success = false;
				$this->addError("bkg_id", "Pickup Date should not be in past.");
			}
		}

		return $success;
	}

	public function saveRescheduleTime($bkgId, $isPrePostTime, $timeSchedule)
	{
		$bookingRouteModel	 = BookingRoute::model()->getByBkgid($bkgId);
		$phoneNumber		 = $this->bkgUserInfo->bkg_contact_no;
		$emailAddress		 = $this->bkgUserInfo->bkg_user_email;
		$userName			 = $this->bkgUserInfo->bkg_user_fname . ' ' . $this->bkgUserInfo->bkg_user_lname;
		$ext				 = $this->bkgUserInfo->bkg_country_code;
		$firstName			 = $this->bkgUserInfo->bkg_user_fname;
		$lastName			 = $this->bkgUserInfo->bkg_user_lname;
		$isValidated		 = $this->validateCriticalScore($isPrePostTime, $timeSchedule);
		$scheduledTime		 = $bookingRouteModel->brt_pickup_datetime;
		$rescheduledTime	 = $this->bkg_pickup_date;
		try
		{
			if ($isValidated)
			{
				$oldPickupTime	 = date("h:i A", strtotime($scheduledTime));
				$pickupDate		 = date("d/m/Y", strtotime($this->bkg_pickup_date));
				$pickupTime		 = date("h:i A", strtotime($rescheduledTime));
				$bookingRouteModel->parsePickupDateTime($rescheduledTime);
				if ($bookingRouteModel->save())
				{
					$bcbId					 = $this->bkg_bcb_id;
					$updatetripStartTime	 = BookingRoute::model()->setBookingCabStartEndTime($bcbId, $bkgId);
					$model					 = Booking::model()->findByPk($bkgId);
					$model->bkg_pickup_date	 = $rescheduledTime;
					$model->save();
					if (strlen($phoneNumber) >= 10)
					{
						$msgCom	 = new smsWrapper();
						$msg	 = "$this->bkg_booking_id updated. New Pickup date: $pickupDate and time: $pickupTime - Gozocabs";
						$slgId	 = $msgCom->sendRescheduleTime($this->bkg_booking_id, $ext, $phoneNumber, $msg);
						Logger::create("SMS Error: " . json_encode($slgId), CLogger::LEVEL_INFO);
					}
					if ($emailAddress != '')
					{
						$emailModel	 = new emailWrapper();
						$msg		 = "";
						$elgId		 = $emailModel->sendRescheduleTime($bkgId, $oldPickupTime, $userName, $emailAddress);
						Logger::create("Email Error: " . json_encode($elgId), CLogger::LEVEL_INFO);
					}
					$desc					 = "(original pickup time – $oldPickupTime) Updated time – $pickupTime";
					$eventId				 = BookingLog::BOOKING_MODIFIED;
					$params['blg_ref_id']	 = BookingLog::RESCHEDEULE_PICKUP_TIME;
					BookingLog::model()->createLog($bkgId, $desc, UserInfo:: getInstance(), $eventId, false, $params);
				}
				else
				{
					return false;
				}
			}
			else
			{
				$return['message'] = $this->getError('bkg_id');
				return false;
			}
		}
		catch (Exception $e)
		{
			$this->addError('bkg_id', $e->getMessage());
			$return['error'] = $this->getErrors();
			return false;
		}
		return true;
	}

	public static function checkLeadContactAccess($status, $assignCsrId, $searchTxt, $contact, $createUserType, $createUserId)
	{
		$checkContactAccess = Yii::app()->user->checkAccess("bookingContactAccess");
		if ($checkContactAccess)
		{
			return true;
		}
		if ($createUserId == UserInfo::getUserId() && $createUserType == UserInfo::getUserType())
		{
			return true;
		}
		if (!in_array($status, [1, 15]))
		{
			return true;
		}
		if ($assignCsrId == UserInfo::getUserId())
		{
			return true;
		}
		if (trim($searchTxt) == trim($contact))
		{
			return true;
		}
		return false;
	}

	public static function getMaskNoForCustToDriver($model)
	{
		$maskNumbers	 = Yii::app()->params['maskNumbers'];
		$driver_phone	 = '+91' . $model->bkgBcb->bcb_driver_phone;
		if (!$maskNumbers)
		{
			goto skipMask;
		}

		if (in_array($model->bkg_agent_id, [450, 18190]))
		{ //for b2b mmt and ibibo
			$driver_phone = Yii::app()->params['customerToDriverforMMT'];
		}
		else
		{
			$driver_phone = Yii::app()->params['customerToDriver'];
		}

		skipMask:
		return $driver_phone;
	}

	public function copyAttributes(Booking $model)
	{
		$this->attributes				 = $model->attributes;
		unset($this->bkg_id);
		unset($this->bkg_bcb_id);
		$this->bkgPref->attributes		 = $model->bkgPref->attributes;
		unset($this->bkgPref->bpr_id);
		$this->bkgPf->attributes		 = $model->bkgPf->attributes;
		unset($this->bkgPf->bpf_id);
		$this->bkgUserInfo->attributes	 = $model->bkgUserInfo->attributes;
		unset($this->bkgUserInfo->bui_id);
		$this->bkgAddInfo->attributes	 = $model->bkgAddInfo->attributes;
		unset($this->bkgAddInfo->bad_id);
	}

	public function loadInvoice(Booking $model, $surgeApplicable = 1)
	{
		if ($surgeApplicable == 1)
		{
			$this->loadQuote();

			if ($this->bkg_agent_id == null || $this->bkg_agent_id <= 0 || $this->bkg_agent_id == 1249)
			{
				$this->bkgInvoice->populateAmount(true, true, true, true, $this->bkg_agent_id);
			}
//$this->bkgInvoice->bkg_advance_amount = 0;
		}
		else
		{
			$this->bkgInvoice->attributes			 = $model->bkgInvoice->attributes;
			unset($this->bkgInvoice->biv_id);
			unset($this->bkgInvoice->biv_bkg_id);
			$this->bkgInvoice->bkg_discount_amount	 = 0;
			$this->bkgInvoice->bkg_promo1_id		 = 0;
			$this->bkgInvoice->bkg_promo1_code		 = "";
			$this->bkgInvoice->bkg_promo1_amt		 = 0;
			$this->bkgInvoice->bkg_credits_used		 = 0;
//$this->bkgInvoice->bkg_advance_amount	 = 0;
			$this->bkgInvoice->calculateAmount();
			$this->bkgInvoice->calculateTotal();
		}
	}

	public function bookingConfirmation()
	{
		$logType = UserInfo::TYPE_SYSTEM;
		$isCod	 = BookingSub::model()->getApplicable($this->bkg_from_city_id, $this->bkg_to_city_id, 3);
		if (!$this->confirmBooking($logType, $isCod))
		{
			throw new Exception("Failed to create booking");
		}
		$this->refresh();
		$this->bkgTrack	 = BookingTrack::model()->sendTripOtp($this->bkg_id, $sendOtp		 = false);
		$this->bkgTrack->save();
		$this->sendConfirmation($logType);
	}

	/**
	 * [confirmBookingContact This function is used for confirming the traveler contact items]
	 * @param  integer $bkgId [description]
	 * @return [type]         [description]
	 */
	public static function confirmBookingContact($bkgId = 0)
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		if (empty($bkgId))
		{
			throw new Exception("Invalid data", ReturnSet::ERROR_INVALID_DATA);
		}
		try
		{
			$bkgUserModel	 = BookingUser::model()->getByBkgId($bkgId);
			$cttId			 = Contact::createbyBookingUser($bkgUserModel, null, false);
			Logger::profile("Contact::createbyBookingUser Done");
			if ($cttId != '' && ($bkgUserModel->buiBkg->bkg_agent_id == '' || $bkgUserModel->buiBkg->bkg_agent_id == NULL))
			{
				$bkgUserModel->bkg_contact_id = $cttId;
				if (!$bkgUserModel->update())
				{
					throw new Exception("No contact created", ReturnSet::ERROR_INVALID_DATA);
				}
			}

			$contactId	 = $bkgUserModel->bkg_contact_id;
			$response	 = Contact::referenceUserData($bkgUserModel->bui_id, 3);
			Logger::profile("Contact::referenceUserData Done");
			if ($response->getStatus())
			{
				$contactPhone	 = $response->getData()->phone['number'];
				$contactEmail	 = $response->getData()->email['email'];
			}
			$isVerify = 1;
		}
		catch (Exception $e)
		{
			Logger::exception($e);
		}
//	Contact::verifyItem($contactId, Contact:: TYPE_EMAIL, Contact:: MODE_LINK, $isVerify, $contactEmail);
//	Contact::verifyItem($contactId, Contact:: TYPE_PHONE, Contact:: MODE_OTP, $isVerify, $contactPhone);
		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
	}

	public static function validatePickupTime($bkgId)
	{
		$params	 = ['bkgId' => $bkgId];
		$sql	 = "SELECT IF(bkg_pickup_date > DATE_ADD(NOW(), INTERVAL 12 HOUR) ,1,0) AS  pickup FROM `booking` WHERE bkg_id = :bkgId";
		$pickup	 = DBUtil::command($sql, DBUtil::MDB())->queryScalar($params);
		return $pickup;
	}

	public function getUserbyId($bkgId)
	{
		$params	 = ['bkgId' => $bkgId];
		$sql	 = "SELECT bkg_id,CONCAT(bkg_user_fname, ' ', bkg_user_lname) as user_name,
						`bkg_user_id`, `bkg_user_fname`, `bkg_user_lname`, `bkg_country_code`, `bkg_contact_no`,
					   `bkg_alt_contact_no`, `bkg_user_email`as email
					FROM booking
					INNER JOIN booking_user on bui_bkg_id = bkg_id
					WHERE bkg_id=:bkgId";
		$result	 = DBUtil::queryRow($sql, DBUtil:: SDB(), $params);
		return $result;
	}

	public static function getUserbyIdNew($bkgId, $agentId = 0)
	{
		$where	 = $agentId == 0 ? " " : "  AND bkg_agent_id=$agentId ";
		$params	 = ['bkgId' => $bkgId];
		$sql	 = "SELECT * , CONCAT(c1.cty_name, ' - ', GROUP_CONCAT(cities.cty_name SEPARATOR ' - ')) as to_cities
					FROM booking
					INNER JOIN booking_user on bui_bkg_id = bkg_id
					LEFT JOIN users on user_id=bkg_user_id
					INNER JOIN cities ON cities.cty_id = booking.bkg_from_city_id
					INNER JOIN cities c1 ON c1.cty_id = booking.bkg_to_city_id
					WHERE bkg_id=:bkgId $where";
		$result	 = DBUtil::queryRow($sql, DBUtil:: SDB(), $params);
		return $result;
	}

	public static function findByOrderNo($refNo)
	{
		$model = Booking::model()->find('bkg_agent_ref_code=:code ', ['code' => $refNo]);
		return $model;
	}

	public static function getBookingStatusForGOIBIBO($stid = 0)
	{
		$arrStatus = [
			1	 => 'FAILURE',
			2	 => 'CONFIRMED',
			3	 => 'CONFIRMED',
			5	 => 'CONFIRMED',
			6	 => 'CONFIRMED',
			7	 => 'CONFIRMED',
			8	 => 'CANCELLED',
			9	 => 'CANCELLED',
			10	 => 'CANCELLED',
			15	 => 'HOLD',
		];
		if ($stid != 0)
		{
			return $arrStatus[$stid];
		}
	}

	public function getBkgbyuserid($userid)
	{
		$params = ['userid' => $userid];

		$sql	 = "SELECT Group_concat(bkg_id) as bkg_id FROM booking
					INNER JOIN booking_user on bui_bkg_id = bkg_id
					LEFT JOIN users on user_id=bkg_user_id
					WHERE bkg_user_id=:userid";
		$result	 = DBUtil::queryAll($sql, DBUtil:: SDB(), $params);
		return $result;
	}

	public static function getUserDriverRating($userId)
	{
		$params	 = ['userid' => $userId];
		$sql	 = "SELECT count(rtg_customer_overall) cntcustomer,  count(rtg_customer_driver) cntdriver, rtg_customer_overall, rtg_customer_driver
					FROM booking bkg
					INNER JOIN booking_user bku ON bku.bui_bkg_id = bkg.bkg_id
					INNER JOIN ratings ON ratings.rtg_booking_id = bkg.bkg_id
					WHERE bkg.bkg_status IN(6) AND bku.bkg_user_id=:userid";
		return $result	 = DBUtil::queryRow($sql, DBUtil:: SDB(), $params);
	}

	public static function getActiveAssignedQuotes($uid, $csrId)
	{
		$params	 = ['csrId' => $csrId, 'uid' => $uid];
		$sql	 = "SELECT * FROM booking
					INNER JOIN booking_user ON booking.bkg_id = booking_user.bui_bkg_id
					INNER JOIN booking_trail ON booking.bkg_id = booking_trail.btr_bkg_id
					WHERE bkg_user_id=:uid AND bkg_pickup_date > NOW() AND
						btr_unv_followup_time IS NULL
						AND bkg_status=15 AND bkg_assign_csr=:csrId
					ORDER BY bkg_id DESC";
		return $result	 = DBUtil::queryAll($sql, DBUtil::SDB(true), $params);
	}

	public static function getTotalEnquiry($userId)
	{
		$params	 = ['userid' => $userId];
		$sql	 = "SELECT COUNT(1) cnt FROM booking
					INNER JOIN booking_user ON booking.bkg_id=booking_user.bui_bkg_id
					WHERE 1 AND bkg_status IN(15) AND bkg_user_id=:userid";
		return $result	 = DBUtil::queryAll($sql, DBUtil:: SDB(), $params);
	}

	public static function getTotalTripComplete($userId)
	{
		$params	 = ['userid' => $userId];
		$sql	 = "SELECT COUNT(1) cnt, SUM(IF((bkg_pickup_date >=  DATE_SUB(NOW(), INTERVAL 7 DAY)), 1, 0)) as cnt7day,
						SUM(IF((DATE(bkg_pickup_date) >=  DATE_SUB(NOW(), INTERVAL 30 DAY)), 1, 0)) as cnt30day,
						SUM(IF((bkg_pickup_date >=  DATE_SUB(NOW(), INTERVAL 90 DAY)), 1, 0)) as cnt90day
					FROM booking
					INNER JOIN booking_user ON booking.bkg_id = booking_user.bui_bkg_id
					WHERE bkg_status IN(6,7) AND bkg_user_id=:userid";
		return $result	 = DBUtil::queryAll($sql, DBUtil:: SDB(), $params);
	}

	public static function getCountTireUsed($userId)
	{
		if ($userId == "" || $userId == null)
		{
			throw new Exception("Required data missing", ReturnSet::ERROR_INVALID_DATA);
		}
		$params	 = ['userid' => $userId];
		$sql	 = "SELECT COUNT(scc_label) cnt, scc_label
					FROM booking bkg
					INNER JOIN svc_class_vhc_cat bkgSvcClassVhcCat ON (bkg_vehicle_type_id=bkgSvcClassVhcCat.scv_id)
					INNER JOIN service_class sc ON (sc.scc_id=bkgSvcClassVhcCat.scv_scc_id)
					INNER JOIN vehicle_category scc_VehicleCategory ON (bkgSvcClassVhcCat.scv_vct_id=scc_VehicleCategory.vct_id)
					INNER JOIN booking_user bku ON bku.bui_bkg_id=bkg.bkg_id
					WHERE bkg.bkg_status IN(6) AND bku.bkg_user_id=:userid
					GROUP BY scc_id";
		return $result	 = DBUtil::queryAll($sql, DBUtil::SDB(), $params);
	}

	public static function getCityTraveled($userId)
	{
		$params	 = ['userid' => $userId];
		$sql	 = "SELECT COUNT(1) AS cnt, CONCAT(cities.cty_name,', ',c1.cty_name,', ') as city_name
					FROM booking bkg
					INNER JOIN cities ON cities.cty_id=bkg.bkg_from_city_id
					INNER JOIN cities c1 ON c1.cty_id=bkg.bkg_to_city_id
					INNER JOIN booking_user bku ON bku.bui_bkg_id=bkg.bkg_id
					LEFT JOIN ratings ON ratings.rtg_booking_id=bkg.bkg_id
					WHERE bkg.bkg_status IN(6) AND bku.bkg_user_id=:userid
					GROUP BY bkg.bkg_from_city_id,bkg.bkg_to_city_id";
		return $result	 = DBUtil::queryAll($sql, DBUtil:: SDB(), $params);
	}

	public static function getRelatedQuoteIds($leadId)
	{
		$sql = "SELECT GROUP_CONCAT(DISTINCT u.bkg_id) as leadIds
				FROM booking t,
					booking_user tbu, booking_trail tbtr,
					booking u, booking_user rbu, booking_trail rbtr
				WHERE
					t.bkg_id = tbtr.btr_bkg_id AND t.bkg_id = tbu.bui_bkg_id AND t.bkg_status IN (1,15) AND
					u.bkg_id = rbtr.btr_bkg_id AND u.bkg_id = rbu.bui_bkg_id AND u.bkg_status IN (1,15) AND
					t.bkg_id=:leadId AND t.bkg_id<>u.bkg_id AND ((abs(TIMESTAMPDIFF(MINUTE, t.bkg_create_date, u.bkg_create_date))<240 AND
					(((rbu.bkg_user_email <> '' AND rbu.bkg_user_email = tbu.bkg_user_email) OR
					 (rbu.bkg_contact_no <> '' AND rbu.bkg_contact_no = tbu.bkg_contact_no)))) OR
					 (abs(TIMESTAMPDIFF(MINUTE, t.bkg_create_date, u.bkg_create_date))<30 AND rbtr.bkg_user_ip = tbtr.bkg_user_ip AND trim(rbtr.bkg_user_ip) <> '')) AND rbtr.bkg_create_user_type<>4";
		return DBUtil::command($sql)->queryScalar(['leadId' => $leadId]);
	}

	public static function assignRelatedIds($leadId, $csr)
	{
		$success = false;
		$leadIds = self::getRelatedQuoteIds($leadId);
		if (!$leadIds)
		{
			goto end;
		}

		$sql	 = "UPDATE booking, booking_trail SET bkg_assign_csr=:csr WHERE bkg_id=btr_bkg_id AND bkg_status IN (1,15) AND bkg_id IN ($leadIds) AND bkg_agent_id IS NULL";
		$numrows = DBUtil::command($sql)->execute(['csr' => $csr]);
		if ($numrows == 0)
		{
			goto end;
		}

		$arrLead = explode(",", $leadIds);
		foreach ($arrLead as $lead)
		{
			$aname	 = Admins::model()->findByPk($csr)->getName();
			$desc	 = "Related Quote assigned to $aname (Source Quote: $leadId)";
			BookingLog::model()->createLog($lead, $desc, UserInfo:: model(), BookingLog:: CSR_ASSIGN, false, false);
		}
		$success = true;
		end:
		return $success;
	}

	/**
	 *
	 * @param type $userid
	 * @param type $useremail
	 * @param type $usercontact
	 * @return type
	 */
	public static function getRelatedExistings($userid, $useremail, $usercontact)
	{
		$params	 = ['userid' => $userid, 'useremail' => $useremail, 'usercontact' => $usercontact];
		$sql	 = "SELECT  DISTINCT t.bkg_id
		FROM booking t
		INNER JOIN booking_user tbu ON tbu.bui_bkg_id = t.bkg_id
		INNER JOIN booking_trail tbtr ON tbtr.btr_bkg_id = t.bkg_id
		WHERE
			 t.bkg_status IN (2, 3, 5)  AND
			(
				(tbu.bkg_user_email IS NOT NULL AND tbu.bkg_user_email <> '' AND tbu.bkg_user_email =:useremail)
				OR
				( tbu.bkg_contact_no IS NOT NULL AND  tbu.bkg_contact_no <> '' AND tbu.bkg_contact_no =:usercontact)
				OR
				(tbu.bkg_user_id <> '' AND tbu.bkg_user_id =:userid)
			)
			AND trim(tbtr.bkg_user_ip) <> ''
			AND tbu.bkg_contact_no <> ''
			AND bkg_pickup_date > NOW()
			AND bkg_followup_active = 1
			AND (tbtr.bkg_assign_csr IS NULL OR tbtr.bkg_assign_csr = 0)
			AND bkg_follow_type_id = 10
			AND bkg_agent_id IS NULL
			AND bkg_followup_date < NOW()
			";
		return DBUtil::query($sql, DBUtil::MDB(), $params);
	}

	public static function assignRelatedExisting($bkgList, $csr, $leadId)
	{
		$success = false;
		if (!$bkgList)
		{
			goto end;
		}
		$aname = Admins::model()->findByPk($csr)->getName();
		foreach ($bkgList as $quoteArr)
		{
			$bkgid	 = $quoteArr['bkg_id'];
			$sql	 = "UPDATE booking, booking_trail SET bkg_assign_csr=:csr
  					WHERE bkg_id=btr_bkg_id AND bkg_status IN (2, 3, 5)
  					AND bkg_id =:bkgid AND bkg_agent_id IS NULL ";
			$numrows = DBUtil::execute($sql, ['csr' => $csr, 'bkgid' => $bkgid]);

			if ($numrows != 0)
			{
				$desc = "Related Booking assigned to $aname (Source Quote: $leadId)";
				BookingLog::model()->createLog($bkgid, $desc, UserInfo:: model(), BookingLog:: CSR_ASSIGN, false, false);
			}
		}
		$success = true;
		end:
		return $success;
	}

	/**
	 *
	 * @param type $userid
	 * @param type $useremail
	 * @param type $usercontact
	 * @return type
	 */
	public static function getRelatedIds($userid, $useremail, $usercontact, $agentId = 0)
	{
		$where	 = $agentId == 0 ? " " : "  AND t.bkg_agent_id=$agentId ";
		$params	 = ['userid' => $userid, 'useremail' => $useremail, 'usercontact' => $usercontact];
		$sql	 = "SELECT  DISTINCT t.bkg_id
				FROM booking t
                INNER JOIN booking_user tbu ON tbu.bui_bkg_id = t.bkg_id
                INNER JOIN booking_trail tbtr ON tbtr.btr_bkg_id = t.bkg_id
				WHERE
					 t.bkg_status IN (15)
                     AND
					(
						(tbu.bkg_user_email IS NOT NULL AND tbu.bkg_user_email <> '' AND tbu.bkg_user_email =:useremail)
                        OR
						( tbu.bkg_contact_no IS NOT NULL AND  tbu.bkg_contact_no <> '' AND tbu.bkg_contact_no =:usercontact)
                        OR
						(tbu.bkg_user_id <> '' AND tbu.bkg_user_id =:userid)
						)
						AND trim(tbtr.bkg_user_ip) <> ''
						AND tbu.bkg_contact_no <> ''
						AND bkg_pickup_date > NOW()
						$where
                     ";
		return DBUtil::query($sql, DBUtil::SDB(), $params);
	}

	public static function assignedIds($quoteList, $csr, $leadId, $agentId = 0)
	{
		$success = false;
		if (!$quoteList)
		{
			goto end;
		}
		$aname	 = Admins::model()->findByPk($csr)->getName();
		$where	 = $agentId == 0 ? " AND bkg_agent_id IS NULL " : " AND bkg_agent_id=$agentId ";
		foreach ($quoteList as $quoteArr)
		{
			$quote	 = $quoteArr['bkg_id'];
			$sql	 = "UPDATE booking, booking_trail SET bkg_assign_csr=:csr WHERE bkg_id=btr_bkg_id AND bkg_status IN (15) AND bkg_id =:quote $where";
			$numrows = DBUtil::execute($sql, ['csr' => $csr, 'quote' => $quote]);

			if ($numrows != 0)
			{
				Logger::trace("Booking::getRelatedquote $quote");
				$desc = "Related Quote assigned to $aname (Source Quote: $leadId)";
				BookingLog::model()->createLog($quote, $desc, UserInfo:: model(), BookingLog:: CSR_ASSIGN, false, false);
			}
		}
		$success = true;
		end:
		return $success;
	}

	public function getAdpList($search = '', $case = '')
	{
		$search	 = trim($search);
		$where	 = "WHERE bkg_pickup_date >= (DATE_SUB(NOW(), INTERVAL 1 MONTH))";
		if ($search != '')
		{
			$search = States::model()->findRegionNumber($search);
			if (in_array($search, [1, 2, 3, 4, 5, 6, 7]))
			{
				$isRegion = 1;
			}
			$params = [':search' => $search];
			if ($isRegion == 1)
			{
				$where .= "AND (s.stt_zone LIKE CONCAT('%', :search, '%'))";
			}
			else
			{
				$where .= "AND ((bkg.bkg_booking_id LIKE CONCAT('%', :search, '%')) OR (bkg.bkg_id  LIKE CONCAT('%', :search, '%'))
			                OR bkg.bkg_from_city_id IN(
							SELECT DISTINCT a.zct_cty_id  FROM
							(
							SELECT zct_cty_id FROM zone_cities
							INNER JOIN zones ON zones.zon_id = zone_cities.zct_zon_id
							WHERE  zon_name LIKE CONCAT('%', :search, '%')
							)a
							)
						)";
			}
		}
		switch ($case)
		{
			case 224:
				$where .= " AND bpr.bpr_assignment_level IN(2,3) AND bkg.bkg_status IN(2)";
				break;

			case 225:
				$where	 .= " AND bkg.bkg_status IN(2) AND bpr.bkg_manual_assignment=1 AND bpr.bkg_critical_assignment=0 ";
				break;
			case 226:
				$where	 .= " AND bkg.bkg_status IN(2) AND bpr.bkg_critical_assignment=1";
				break;
			case 250:
				$where	 .= " AND   bkg.bkg_id IN(
					SELECT DISTINCT a.bkg_id  FROM
					(
					SELECT bkg.bkg_id,bkg.bkg_bcb_id,bkg.bkg_status,bkg_pickup_date,apt_last_login from booking bkg
					JOIN booking_cab bcb ON bkg.bkg_bcb_id=bcb.bcb_id AND bcb.bcb_active = 1
					LEFT JOIN app_tokens apt ON apt.apt_entity_id = bcb.bcb_driver_id AND   apt.apt_status = 1 AND apt.apt_user_type = 5
					AND DATE_SUB(bkg.bkg_pickup_date,INTERVAL 4 HOUR) < apt.apt_last_login
					WHERE bkg.bkg_status=5 AND DATE_SUB(bkg.bkg_pickup_date,INTERVAL 4 HOUR) < NOW()
					AND DATE_ADD(bkg.bkg_pickup_date,INTERVAL 150 MINUTE) > NOW() AND apt.apt_id IS NULL
										)a
									)";
				break;
			case 251:
				$where	 .= " AND  bkg.bkg_id IN(
					SELECT DISTINCT a.bkg_id  FROM
					(
					SELECT bkg.bkg_id, bkg.bkg_status,bkg_pickup_date FROM booking bkg
					LEFT JOIN booking_track_log btl ON btl.btl_bkg_id = bkg.bkg_id AND btl.btl_event_type_id = 201
					WHERE bkg.bkg_status=5 AND DATE_SUB(bkg.bkg_pickup_date,INTERVAL 4 HOUR) < NOW()
					AND DATE_ADD(bkg.bkg_pickup_date,INTERVAL 150 MINUTE) > NOW() AND
					btl.btl_id IS NULL
					)a
					)";
				break;

			case 252:
				$where .= " AND bkg.bkg_status=2 AND bkg.bkg_active=1 AND btr.btr_auto_cancel_value IS NOT NULL AND btr.btr_auto_cancel_reason_id NOT IN(33) ";
				break;
		}
		$sql = "SELECT bkg.bkg_id,
									bkg.bkg_booking_id,
									bkg.bkg_bcb_id,
									bkg.bkg_pickup_date,
									bkg.bkg_from_city_id,
									bkg.bkg_create_date,
									bkg.bkg_status,
									bkg.bkg_booking_type,
									bkg.bkg_trip_distance,
									bkg.bkg_trip_duration,
									bpr.bpr_assignment_level,
									bpr.bpr_assignment_id,
									bpr.bpr_assignment_fdate,
									bpr.bpr_assignment_ldate,
									bpr.bkg_critical_score,
									DATE_ADD(bkg.bkg_pickup_date,INTERVAL bkg.bkg_trip_duration MINUTE) AS completion_time,
									btr.btr_manual_assign_date,
									btr.btr_critical_assign_date,
									s.stt_zone,
									bcb.bcb_driver_id,
									btr.btr_auto_cancel_reason_id,
									btr.btr_auto_cancel_value,
									btr.btr_auto_cancel_create_date

							FROM booking bkg
						    INNER JOIN booking_pref bpr ON  bpr.bpr_bkg_id = bkg.bkg_id
							JOIN  booking_trail btr ON btr.btr_bkg_id = bkg.bkg_id
							LEFT JOIN cities  ON cities.cty_id = bkg.bkg_from_city_id
							LEFT JOIN states s ON s.stt_id = cities.cty_state_id
							JOIN booking_cab bcb ON bkg.bkg_bcb_id=bcb.bcb_id AND bcb.bcb_active = 1
							INNER JOIN booking_track btl ON bkg.bkg_id=btl.btk_bkg_id
						    $where ORDER BY  CASE WHEN bkg.bkg_pickup_date IS NOT NULL THEN 0 ELSE 1 END,
                            bkg.bkg_pickup_date ASC";
		return DBUtil::query($sql, DBUtil::SDB(), $params);
	}

	public static function getBookingForAutoCancelRule()
	{
		$sql		 = "SELECT bkg_id,cnr_id,cnr_reason,booking_trail.btr_auto_cancel_rule_id AS autoCancelRuleId FROM booking
						INNER JOIN  booking_trail ON btr_bkg_id=bkg_id
						INNER JOIN booking_pref ON bpr_bkg_id = bkg_id AND  booking_pref.bkg_autocancel=0
						INNER JOIN cancel_reasons ON cancel_reasons.cnr_id=booking_trail.btr_auto_cancel_reason_id
						INNER JOIN auto_cancel_rule ON auto_cancel_rule.acr_id=booking_trail.btr_auto_cancel_rule_id
						WHERE 1 
						AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16)
						AND  bkg_status=2
						AND  booking_trail.btr_auto_cancel_reason_id NOT IN (33)
						AND  btr_auto_cancel_value=1
						AND  cancel_reasons.cnr_active=1 
						AND  btr_auto_cancel_create_date IS NOT NULL 
						AND (booking_pref.bkg_critical_score>=auto_cancel_rule.acr_cancel_cs AND TIMESTAMPDIFF(MINUTE,booking.bkg_pickup_date,NOW())<=auto_cancel_rule.acr_cancel_minpickuptime)
						AND  btr_auto_cancel_create_date<=DATE_SUB(NOW(), INTERVAL 1 HOUR)";
		$recordsets	 = DBUtil::query($sql, DBUtil::SDB());
		return $recordsets;
	}

	/**
	 * This function is used for assigning QTBooking to CSR
	 * @param type $refId
	 * @param type $csr
	 * @return type
	 */
	public static function assignQT($refId, $csr)
	{
		BookingTrail::model()->updateCsr($refId, $csr);
		$admin	 = Admins::model()->findByPk($csr);
		$aname	 = $admin->adm_fname;
		$desc	 = "CSR ($aname) Auto Assigned";
		BookingLog::model()->createLog($refId, $desc, UserInfo::model(), BookingLog::CSR_ASSIGN, false, false);
		return $desc;
	}

	public static function getListToUnassignVendor($orderBy = false)
	{
		$params = ['minutes1' => 180, 'minutes2' => 120, 'minutes3' => 60, 'minutes4' => 30];
		if ($orderBy)
		{
			$select		 = " IF(addWorkingMinutes(:minutes4, booking_trail.bkg_assigned_at) <=NOW() AND CalcWorkingHour(booking_trail.bkg_assigned_at,booking.bkg_pickup_date) <=4 AND TIMESTAMPDIFF(MINUTE, booking_trail.bkg_assigned_at, NOW()) > 60,1,0) AS  timeRank4hr,  
                       IF(addWorkingMinutes(:minutes3, booking_trail.bkg_assigned_at) <=NOW() AND (CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) >4 AND CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) <=8 ),2,0) AS timeRank8hr,
                       IF(addWorkingMinutes(:minutes2, booking_trail.bkg_assigned_at) <=NOW() AND (CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) >8 AND CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) <=12 ),3,0) AS timeRank12hr,
                       IF(addWorkingMinutes(:minutes1, booking_trail.bkg_assigned_at) <=NOW() AND  CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) >12,4,0) AS timeRankmore12hr,
					";
			$orderRank	 = " ORDER BY  timeRank4hr ASC,timeRank8hr ASC,timeRank12hr ASC ,timeRankmore12hr ASC,booking_trail.bkg_assigned_at ASC ";
		}


		$sql = "SELECT
					bkg_id,
					bkg_booking_id,
					bkg_bcb_id,
					bcb_vendor_id,
					bcb_vendor_amount,
					bkg_assigned_at,
					$select
					bcb_assign_mode,
					bkg_pickup_date,
					bkg_agent_id
					FROM booking
					INNER JOIN booking_cab ON booking_cab.bcb_id = booking.bkg_bcb_id
					INNER JOIN booking_trail ON booking_trail.btr_bkg_id = booking.bkg_id 
					INNER JOIN booking_pref ON booking_pref.bpr_bkg_id = booking.bkg_id
					WHERE     1
					AND booking_cab.bcb_vendor_id > 0
					AND booking.bkg_status IN (3)
					AND booking_cab.bcb_cab_id IS NULL
					AND booking_cab.bcb_driver_id IS NULL
					AND booking_cab.bcb_block_autounassignment = 0 
					AND
					(
						(
						  addWorkingMinutes(:minutes1, booking_trail.bkg_assigned_at) <=NOW() AND  CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) >12
						)
					    OR
						(
						  addWorkingMinutes(:minutes2, booking_trail.bkg_assigned_at) <=NOW()  AND (CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) >8 AND CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) <=12 )
						)
						OR
						(
						  addWorkingMinutes(:minutes3, booking_trail.bkg_assigned_at) <=NOW() AND (CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) >4 AND CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) <=8 )
						)
						OR
						(
							 addWorkingMinutes(:minutes4, booking_trail.bkg_assigned_at) <=NOW() AND CalcWorkingHour( booking_trail.bkg_assigned_at,booking.bkg_pickup_date) <=4 AND TIMESTAMPDIFF(MINUTE, booking_trail.bkg_assigned_at, NOW()) > 60
						)
					) $orderRank ";

		return DBUtil::query($sql, DBUtil::SDB(), $params);
	}

	public function useWalletPayment(UserInfo $userInfo = null)
	{
		$model = $this;
//		$model->bkgInvoice->bkg_is_wallet_selected;

		if ($userInfo == null)
		{
			$userInfo = UserInfo::model(UserInfo::TYPE_CONSUMER, $model->bkgUserInfo->bkg_user_id);
		}

		if ($model->bkgInvoice->bkg_is_wallet_selected == 1 && $model->bkgInvoice->bkg_wallet_used > 0)
		{
			$paymentType = PaymentType::TYPE_WALLET;
			$model->updateAdvance1(0, $userInfo->userType, $paymentType);
			if ($model->hasErrors())
			{
				throw new Exception("Booking advance update failed");
			}

			$returnSet = UserWallet::useWallet($model->bkgUserInfo->bkg_user_id, $model->bkg_id, true, true, $model->bkgInvoice->bkg_wallet_used, 0, $userInfo);
		}
		return $returnSet;
	}

	public function payRoutingWallet($paymentGateway, $userInfo)
	{
		$model	 = $this;
		$amount	 = $paymentGateway->apg_amount;

		if ($paymentGateway->apg_status == 1)
		{
			$remarks				 = $paymentGateway->apg_response_message;
			$params					 = [];
			$params['blg_ref_id']	 = $paymentGateway->apg_id;
			$resmsg					 = ($paymentGateway->apg_response_details == '') ? '' : '; Response : ' . "Transaction Successful";
			$paymentType			 = $remarks . " - Online payment completed";
			$transDet				 = $paymentGateway->apg_code;
			if ($paymentGateway->apg_code == '')
			{
				$paymentType = $remarks . " - Payment Added";
				$transDet	 = $model->bkg_booking_id;
			}
			$ptpString	 = PaymentGateway::model()->getPayment($paymentGateway->apg_ptp_id);
			$desc		 = " $paymentType ({$ptpString} - {$transDet})$resmsg";
			BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, BookingLog::PAYMENT_COMPLETED, '', $params);
		}

		$success1 = $paymentGateway->addToWallet($amount, $userInfo);
		if ($success1)
		{
			$model->bkgInvoice->bkg_is_wallet_selected	 = 1;
			$model->bkgInvoice->bkg_wallet_used			 = $amount;
			$model->bkgInvoice->save();
			$returnSet									 = $model->useWalletPayment($userInfo);
		}
		return $returnSet;
	}

	/**
	 * This function is used for calculating cancel amount
	 * New implementation of calculate cancel function instead of calculateRefundable() *
	 * @var Booking $model
	 * @return Array
	 */
	public function calculateRefund()
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		$model		 = $this;
		$refundArr	 = CancellationPolicy::initiateRequest($model);
		Logger::trace("calculateRefund Done Booking Id: " . $model->bkg_id . "cancel Charges:" . $refundArr->charges . "slabs:" . array_values($refundArr->slabs)[1]);
		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
		return $refundArr;
	}

	/**

	  /**
	 * This function is now deprecated and new function is calculateRefund()
	 * @var Booking $model
	 * @return Array
	 */
	public function calculateRefundable()
	{
		$model			 = $this;
		Logger::beginProfile("Get Total advance for booking  {$model->bkg_id}");
		$totalAdvance	 = PaymentGateway::model()->getTotalAdvance($model->bkg_id);
		Logger::endProfile("Get Total advance for booking  {$model->bkg_id}");
		$tripTimeDiff	 = Filter::getTimeDiff($model->bkg_pickup_date); // $this->getPickupDifferencebyBkgid($model->bkg_id);
		$rule			 = 1;
		if ($model->bkg_agent_id > 0)
		{
			$agentModel = Agents::model()->find('agt_id=:id', ['id' => $model->bkg_agent_id]);
			if ($agentModel->agt_cancel_rule != '')
			{
				$rule = $agentModel->agt_cancel_rule;
			}
		}
		if ($model->bkg_agent_id == 450 || $model->bkg_agent_id == 18190)
		{
			Logger::beginProfile("Calculate refund for  MMT booking   {$model->bkg_id}");
			$createTimeDiff	 = Filter::getTimeDiff(Filter::getDBDateTime(), $model->bkg_create_date);
			$refundArr		 = BookingPref::model()->calculateRefundMMT($tripTimeDiff, $model->bkgInvoice->bkg_total_amount, $totalAdvance, $rule, $createTimeDiff, $model->bkg_id);
			Logger::endProfile("Calculate refund for  MMT booking   {$model->bkg_id}");
		}
		elseif ($model->bkg_agent_id == 3936)
		{
			Logger::beginProfile("Calculate refund for  Upcurve booking   {$model->bkg_id}");
			$createTimeDiff	 = Filter::getTimeDiff($model->bkg_pickup_date, $model->bkgTrail->btr_cancel_date);
			$refundArr		 = BookingPref::model()->calculateUpcurveRefund($tripTimeDiff, $model->bkgInvoice->bkg_total_amount, $totalAdvance, $rule, $createTimeDiff, $model->bkg_id);
			Logger::endProfile("Calculate refund for  Upcurve booking   {$model->bkg_id}");
		}
		elseif ($model->bkg_agent_id == 18621)
		{
			Logger::beginProfile("Calculate refund for  EasyMyTrip booking   {$model->bkg_id}");
			$createTimeDiff	 = Filter::getTimeDiff($model->bkg_pickup_date, $model->bkgTrail->btr_cancel_date);
			$refundArr		 = BookingPref::model()->calculateEasyMyTripRefund($tripTimeDiff, $model->bkgInvoice->bkg_total_amount, $totalAdvance, $rule, $createTimeDiff, $model->bkg_id);
			Logger::endProfile("Calculate refund for  EasyMyTrip booking   {$model->bkg_id}");
		}
		elseif ($model->bkg_agent_id == 30242)
		{
			Logger::beginProfile("Calculate refund for  Ebix booking   {$model->bkg_id}");
			$createTimeDiff	 = Filter::getTimeDiff($model->bkg_pickup_date, $model->bkgTrail->btr_cancel_date);
			$refundArr		 = BookingPref::model()->calculateEbixRefund($tripTimeDiff, $model->bkgInvoice->bkg_total_amount, $totalAdvance, $rule, $createTimeDiff, $model->bkg_id);
			Logger::endProfile("Calculate refund for  Ebix booking   {$model->bkg_id}");
		}
		else
		{
			Logger::beginProfile("Calculate refund for  other cp booking   {$model->bkg_id}");
			$totalAdvance	 = $totalAdvance - $model->bkgInvoice->bkg_credits_used;
			$refundArr		 = BookingPref::model()->calculateRefund($tripTimeDiff, $model->bkgInvoice->bkg_total_amount, $totalAdvance, $rule, $model->bkg_id);
			Logger::endProfile("Calculate refund for  other cp booking   {$model->bkg_id}");
		}
		return $refundArr;
	}

	/**
	 * This function is used for creating booking by bot
	 * @param type $jsonObj
	 * @return type
	 * @throws Exception
	 */
	public static function createByBot($jsonObj)
	{
		$returnSet	 = new ReturnSet();
		$jsonMapper	 = new JsonMapper();
		try
		{
			/* @var $obj \Stub\booking\CreateRequest */
			$obj = $jsonMapper->map($jsonObj, new \Stub\booking\CreateRequest());

			/** @var Booking $model */
			$model = $obj->getModel();
			if ($model->bkg_booking_type == 5 && $model->bkg_package_id > 0)
			{
				$model->bkg_pickup_date	 = $model->bkg_pickup_date . " " . Yii::app()->params['defaultPackagePickupTime'];
				$routes					 = BookingRoute::model()->populateRouteByPackageId($model->bkg_package_id, $model->bkg_pickup_date);
				$model->bookingRoutes	 = $routes;
				$rCount					 = count($routes);
				$model->bkg_from_city_id = $routes[0]->brt_from_city_id;
				$model->bkg_to_city_id	 = $routes[$rCount - 1]->brt_to_city_id;
			}
			$model->bkgTrail->bkg_platform	 = Booking::Platform_Bot;
			unset($model->bkg_agent_id);
			$model->scenario				 = 'validateData';
			$errors							 = CActiveForm::validate($model, null, false);
			if ($errors != '[]')
			{
				goto handleErrors;
			}
			$model->platform		 = Quote::Platform_Bot;
			$model->addNew($includeNightAllowance	 = true, $isAllowed				 = true);
			Logger::info("Booking Created Successfully");
			if ($model->hasErrors())
			{
				goto handleErrors;
			}
			$response = new \Stub\booking\CreateResponse();
			$response->setData($model);

			$data1 = Filter::removeNull($response);
			$returnSet->setStatus(true);
			$returnSet->setData($data1);
			Logger::trace("Response : " . CJSON::encode($returnSet));
			goto result;

			handleErrors:
			$errors = $model->getErrors();
			throw new Exception(CJSON::encode($errors), ReturnSet::ERROR_VALIDATION);
		}
		catch (Exception $e)
		{
			$returnSet = $returnSet->setException($e);
			Logger::exception($e);
		}

		result:
		return $returnSet;
	}

	public static function reconcile($bkgId)
	{
		try
		{
			$success = false;
			if ($bkgId != '')
			{
				$model			 = Booking::model()->findByPk($bkgId);
				$createTimeDiff	 = Filter::getTimeDiff($model->bkgTrail->btr_cancel_date, $model->bkg_create_date);
				$tripTimeDiff	 = Filter::getTimeDiff($model->bkg_pickup_date, $model->bkgTrail->btr_cancel_date);
				$totalAdvance	 = $model->bkgInvoice->bkg_advance_amount;
				$refundArr		 = BookingPref::model()->calculateRefundMMT($tripTimeDiff, $model->bkgInvoice->bkg_total_amount, $totalAdvance, 2, $createTimeDiff, $model->bkg_id);
//$cancelFee			 = $refundArr['cancelCharge'];

				$cancelCharges	 = $model->calculateRefund();
				$cancelFee		 = $cancelCharges->charges;

				$cancelFeeCharged	 = PaymentGateway::model()->getTotalAdvance($model->bkg_id);
				$refund				 = $cancelFeeCharged - $cancelFee;
				$transaction		 = DBUtil::beginTransaction();
				if ($refund > 0)
				{
					AccountTransactions::model()->AddCancellationCharge($bkgId, $model->bkgTrail->btr_cancel_date, $cancelFee);
					$success = AccountTransactions::model()->refundBooking($model->bkgTrail->btr_cancel_date, $refund, $bkgId, PaymentType::TYPE_AGENT_CORP_CREDIT, "Cancellation charge recalculated");
				}
				DBUtil::commitTransaction($transaction);
			}
		}
		catch (Exception $ex)
		{
			DBUtil::rollbackTransaction($transaction);
			$success = false;
			Logger::exception($ex);
		}
		return $success;
	}

	public static function expireQuote($model)
	{
		$model->bkgTrail->bkg_payment_expiry_time = new CDbExpression('NOW()');
		if ($model->bkgTrail->save())
		{
			BookingSub::model()->unverifiedAutoCanel($model->bkg_id);
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 *
	 * @deprecated since version 28/03/2022
	 *
	 */
	public static function SpecificCabType($bkgId)
	{
		$model	 = Booking::model()->findByPk($bkgId);
		$vhtId	 = $model->bkg_vht_id;
		$vht	 = VehicleTypes::model()->findByPk($vhtId);
		return $type	 = $vht->vht_make . "  " . $vht->vht_model;
	}

	/**
	 * This function is used for Create Fbg booking
	 * @return $this
	 */
	public function fbg()
	{
		$success	 = false;
		$transaction = DBUtil::beginTransaction();
		try
		{
			$userInfo = UserInfo::getInstance();
//Booking
			if ($this->bkg_agent_id == Config::get('transferz.partner.id'))
			{
				$this->bkg_status = ($this->isGozonow == true) ? 2 : 15;
			}
			else
			{
				$this->bkg_status = 2;
			}

			$this->bkg_booking_id = strtolower(rand(100100, 999999));
			if ($this->save())
			{
// BookingInvoice
				$refModel = $this->bkgInvoice;

				$serviceTaxRate = BookingInvoice::getGstTaxRate($this->bkg_agent_id, $this->bkg_booking_type);
				if ($this->bkg_agent_id == Config::get('transferz.partner.id'))
				{
					$airportCharge							 = CitiesStats::getAirportEntryCharges($this->bkg_from_city_id, $this->bkg_to_city_id);
					$staxRate								 = round($this->bkgInvoice->bkg_total_amount - $this->bkgInvoice->bkg_total_amount / (1 + (0.01 * $serviceTaxRate)));
					$totWithoutTax							 = ($this->bkgInvoice->bkg_total_amount - Config::get('TransferzBooking.parking.charge') - $staxRate - $airportCharge);
					$refModel->bkg_base_amount				 = $totWithoutTax;
					$refModel->bkg_parking_charge			 = Config::get('TransferzBooking.parking.charge');
					$refModel->bkg_vendor_amount			 = round($this->bkgInvoice->bkg_total_amount * 0.75);
					$refModel->bkg_quoted_vendor_amount		 = $refModel->bkg_vendor_amount;
					$gst									 = round(($refModel->bkg_base_amount + $refModel->bkg_parking_charge + $airportCharge) * $serviceTaxRate * 0.01);
					$refModel->bkg_service_tax				 = $staxRate;
					$refModel->bkg_airport_entry_fee		 = $airportCharge;
					$refModel->bkg_is_airport_fee_included	 = $airportCharge > 0 ? 1 : 0;
					$refModel->bkg_rate_per_km_extra		 = 20;
					$refModel->bkg_is_toll_tax_included		 = 1;
					$refModel->bkg_is_state_tax_included	 = 1;
				}

				$refModel->initializePartnerCommission($this->bkg_agent_id);
				$netbasefare						 = $this->getnetBaseFare();
				$agt_type							 = $this->bkgAgent->agt_type;
//cal commission
				$refModel->bkg_partner_commission	 = $refModel->calcCPCommission($netbasefare, $refModel->bkg_discount_amount, $refModel->bkg_cp_comm_type, $refModel->bkg_cp_comm_value, $agt_type);

				$refModel->biv_bkg_id	 = $this->bkg_id;
				$refModel->bkg_igst		 = $serviceTaxRate;
				$refModel->bkg_cgst		 = 0;
				$refModel->bkg_sgst		 = 0;

				$refModel->bkg_service_tax_rate = $serviceTaxRate;

				$refModel->bkg_gozo_amount = $refModel->bkg_total_amount - $refModel->bkg_vendor_amount - $refModel->bkg_service_tax - $refModel->bkg_partner_commission;

				$result = $refModel->save();
				if (!$result)
				{
					throw new Exception(json_encode($refModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}

// BookingCab
				$refModel					 = $this->bkgBcb;
				$refModel->bcb_bkg_id1		 = $this->bkg_id;
				$refModel->bcb_vendor_amount = $this->bkgInvoice->bkg_vendor_amount;
				$result						 = $refModel->save();
				if (!$result)
				{
					throw new Exception(json_encode($refModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}

// BookingPref
				$refModel						 = $this->bkgPref;
				$refModel->bpr_bkg_id			 = $this->bkg_id;
				$svcModelCat					 = SvcClassVhcCat::model()->getVctSvcList('object', 0, 0, $this->bkg_vehicle_type_id);
				$cancelRuleId					 = CancellationPolicy::getCancelRuleId($this->bkg_agent_id, $svcModelCat->scv_id, $this->bkg_from_city_id, $this->bkg_to_city_id, $this->bkg_booking_type);
				$refModel->bkg_cancel_rule_id	 = $cancelRuleId;

				if ($this->bkg_agent_id == Config::get('transferz.partner.id') && $this->isGozonow == true)
				{
					$refModel->bkg_is_gozonow = 1;
				}

				if (SvcClassVhcCat::getClassById($this->bkg_vehicle_type_id) == (ServiceClass::CLASS_VALUE_CNG))
				{
					$refModel->bkg_cng_allowed = 1;
				}


//                $cancelRuleId = CancellationPolicyRule::getCancellationRuleId($this->bkg_vehicle_type_id, $this->bkg_agent_id);
//                $refModel->bkg_cancel_rule_id = $cancelRuleId;

				if ($this->bkg_agent_id == 18190)
				{
					$refModel->bkg_is_fbg_type = 1;
				}
				else
				{
					//$refModel->bkg_is_fbg_type		 = 2;
					//$refModel->bkg_is_fbg_confirm	 = 1;
					if ($this->bkg_agent_id != Config::get('transferz.partner.id'))
					{

						$this->setReconfirm();
					}
				}
				$result = $refModel->save();
				if (!$result)
				{
					throw new Exception(json_encode($refModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}
// BookingRoute
				$refModels = $this->bookingRoutes;

// BookingRoute Validation
				$errors	 = BookingRoute::validateRoutes($refModels, $this->bkg_booking_type, $this->bkg_transfer_type, $agtId	 = 0, $this->bkgPref->bkg_is_fbg_type);
				if (count(array_filter($errors, function ($value) {
									return $value !== false;
								})) > 0)
				{
					throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
				}
// BookingRoutes
				foreach ($refModels as $routeModel)
				{
					$routeModel->brt_bkg_id			 = $this->bkg_id;
					$routeModel->brt_bcb_id			 = $this->bkgBcb->bcb_id;
					$routeModel->brt_trip_distance	 = $this->bkg_trip_distance;

					$result = $routeModel->save();
					if (!$result)
					{
						$errors = $routeModel->getErrors();
						throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
					}
				}



//Booking Track
				$refModel				 = $this->bkgTrack;
				$refModel->btk_bkg_id	 = $this->bkg_id;
				if ($refModel->bkg_trip_otp == '')
				{
					$refModel->bkg_trip_otp = strtolower(rand(100100, 999999));
				}
				$result = $refModel->save();
				if (!$result)
				{
					throw new Exception(json_encode($refModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}

// BookingTrail
				$refModel				 = $this->bkgTrail;
				$refModel->btr_bkg_id	 = $this->bkg_id;
				if ($this->bkg_agent_id == Config::get('transferz.partner.id'))
				{
					$refModel->bkg_gnow_created_at = new CDbExpression('NOW()');
				}
				$refModel->bkg_confirm_datetime	 = new CDbExpression('NOW()');
				$result							 = $refModel->save();
				if (!$result)
				{
					throw new Exception(json_encode($refModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}

//Booking additional info
				$refModel				 = $this->bkgAddInfo;
				$refModel->bad_bkg_id	 = $this->bkg_id;
				$result					 = $refModel->save();
				if (!$result)
				{
					throw new Exception(json_encode($refModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}

//Booking user
				$refModel				 = $this->bkgUserInfo;
				$refModel->bui_bkg_id	 = $this->bkg_id;
				$result					 = $refModel->save();
				if (!$result)
				{
					throw new Exception(json_encode($refModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}

//Booking price factor
				$refModel				 = $this->bkgPf;
				$refModel->bpf_bkg_id	 = $this->bkg_id;
				$result					 = $refModel->save();
				if (!$result)
				{
					throw new Exception(json_encode($refModel->getErrors()), ReturnSet::ERROR_VALIDATION);
				}
// Booking
				$this->bkg_bcb_id		 = $this->bkgBcb->bcb_id;
				$this->bkg_booking_id	 = $this->generateBookingid($this);
				$result					 = $this->update();
				if (!$result)
				{
					$errors = $refModel->getErrors();
					throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
				}
//Booking Log
				if ($this->bkg_agent_id == 22311)
				{
					$desc = " FBG Booking " . $this->bkg_booking_id . " Created by Reseller Agent.";
				}
				if ($this->bkg_agent_id == 18190)
				{
					$desc = " Reverse Booking " . $this->bkg_booking_id . " Created by Reseller Agent.";
				}
				if ($this->bkg_agent_id == Config::get('transferz.partner.id'))
				{
					$desc = "Booking " . $this->bkg_booking_id . " Created by transferz.";
				}
				$eventId = BookingLog::BOOKING_CREATED;
				BookingLog::model()->createLog($this->bkg_id, $desc, $userInfo, $eventId);
				$success = true;
			}
			else
			{
				$errors = $this->getErrors();
				throw new CHttpException(1, json_encode($errors), ReturnSet::ERROR_VALIDATION);
			}
			DBUtil::commitTransaction($transaction);
		}
		catch (Exception $exc)
		{
			if ($exc->getCode() == ReturnSet::ERROR_VALIDATION)
			{
				$this->addErrors(json_decode($exc->getMessage()));
			}
			else
			{
				$this->addError('bkg_id', $exc->getMessage());
			}
			DBUtil::rollbackTransaction($transaction);
		}
		return $this;
	}

	public static function getBookingId($bkgId)
	{
		$sql = "SELECT bkg_id FROM booking WHERE bkg_booking_id =:bkgId OR bkg_id=:bkgId ";
		return DBUtil::queryScalar($sql, DBUtil::MDB(), ['bkgId' => $bkgId]);
	}

	/**
	 * This function is used for unassigning QTBooking from CSR
	 * @param integer $refId
	 * @param integer $csr
	 * @return string
	 */
	public static function unassignQT($refId, $csr)
	{
		BookingTrail::model()->updateCsr($refId, 0);
		$admin	 = Admins::model()->findByPk($csr);
		$aname	 = $admin->adm_fname;
		$desc	 = "CSR ($aname) Un Assigned";
		BookingLog::model()->createLog($refId, $desc, UserInfo::model(), BookingLog::CSR_UNASSIGN, false, false);
		return $desc;
	}

	/**
	 * This function is used for unassignment of releated  booking  from csr
	 * @param integer $bkgids
	 * @param integer $csr
	 * @param integer $leadId
	 * @return boolean
	 */
	public static function unassignRelatedExisting($bkgids, $csr, $leadId)
	{
		$success = false;
		if (!$bkgids)
		{
			goto end;
		}
		$aname	 = Admins::model()->findByPk($csr)->getName();
		$bkgList = explode(",", $bkgids);
		foreach ($bkgList as $bkgid)
		{
			$sql	 = "UPDATE booking, booking_trail SET bkg_assign_csr=:csr
  					WHERE bkg_id=btr_bkg_id AND bkg_status IN (2, 3, 5)
  					AND bkg_id =:bkgid AND bkg_agent_id IS NULL ";
			$numrows = DBUtil::execute($sql, ['csr' => null, 'bkgid' => $bkgid]);

			if ($numrows != 0)
			{
				$desc = "Related Booking unassigned from $aname (Source Quote: $leadId)";
				BookingLog::model()->createLog($bkgid, $desc, UserInfo:: model(), BookingLog::CSR_UNASSIGN, false, false);
			}
		}
		$success = true;
		end:
		return $success;
	}

	/*
	 * function to get the small luggage, large luggage and no of person for specific booking model
	 * @input integer $vctId
	 * @input integer $sccId
	 * @output array
	 */

	public function getLuggageCapacityDetails($vctId, $sccId)
	{
		$sbagRecord	 = VehicleCatSvcClass::smallbagBycategoryClass($vctId, $sccId);
		$largeBag	 = floor($sbagRecord['vcsc_small_bag'] / 2);
		$smallBag	 = $sbagRecord['vcsc_small_bag'];
//   $noOfPerson  = $model->bkgAddInfo->bkg_no_person;
		$arr		 = ['largeBag' => $largeBag, 'smallBag' => $smallBag];
		return $arr;
	}

	public static function processVendorPenalty($bookingModel, $reasonid)
	{
		$bkgid = $bookingModel->bkg_id;
		if ($reasonid == 22 && $bkgid != '' && ($bookingModel->bkgBcb->bcb_vendor_id != '' || $bookingModel->bkgBcb->bcb_vendor_id != NULL))
		{
			$prows			 = PenaltyRules::getValueByPenaltyType(PenaltyRules::PTYPE_CAB_NO_SHOW);
			$p_Amount		 = $prows['plt_value'];
			$vndAmount		 = $bookingModel->bkgBcb->bcb_vendor_amount;
			$penaltyAmount	 = min($vndAmount, $p_Amount);
			if ($bookingModel->bkgPref->bkg_is_gozonow == 1)
			{
				$gnowPenaltyAmount	 = 500;
				$penaltyAmount		 = min($vndAmount, $gnowPenaltyAmount);
			}
//$penaltyArr[] = 5;
			$penaltyArr	 = AccountTransactions::model()->mapVendorPenalty($reasonid);
			$remarks	 = 'Auto-Penalized of booking #' . $bookingModel->bkg_booking_id . ' for cancellation reason is car no show. Penalty Amount : Rs' . $penaltyAmount;
			$penaltyType = PenaltyRules::PTYPE_CAB_NO_SHOW;
			$result		 = AccountTransactions::checkAppliedPenaltyByType($bkgid, $penaltyType);
			if ($result)
			{
				AccountTransactions::model()->addVendorPenalty($bkgid, $bookingModel->bkgBcb->bcb_vendor_id, $penaltyAmount, $remarks, $penaltyArr, $penaltyType);
			}
		}
	}

	public static function getAllBookingForDemMisFire()
	{
		$sql = "SELECT bkg_id,stt_zone
                FROM `booking_pref`
                INNER JOIN booking ON booking.bkg_id = bpr_bkg_id
                INNER JOIN booking_trail ON booking.bkg_id = booking_trail.btr_bkg_id
                INNER JOIN  cities on bkg_from_city_id = cty_id
                INNER JOIN  states on cty_state_id = stt_id
                WHERE 1 
                AND  bkg_pickup_date >= NOW()
                AND booking.bkg_status=2 
                AND booking_pref.bkg_critical_assignment=1
                ORDER BY bkg_critical_score DESC,booking.bkg_pickup_date ASC";
		return DBUtil::query($sql, DBUtil::SDB());
	}

	/**
	 * This function is used for unassignment of releated  booking  from csr
	 * @param integer $bkgids
	 * @param integer $csr
	 * @param integer $leadId
	 * @return boolean
	 */
	public static function unassignedIds($bkgids, $csr, $leadId, $agentId = 0)
	{
		$success = false;
		if (!$bkgids)
		{
			goto end;
		}
		$aname	 = Admins::model()->findByPk($csr)->getName();
		$bkgList = explode(",", $bkgids);
		$where	 = $agentId == 0 ? " AND bkg_agent_id IS NULL " : " AND bkg_agent_id=$agentId ";
		foreach ($bkgList as $bkgid)
		{
			$sql	 = "UPDATE booking, booking_trail SET bkg_assign_csr=:csr
  					WHERE bkg_id=btr_bkg_id AND bkg_status IN (15)
  					AND bkg_id =:bkgid $where ";
			$numrows = DBUtil::execute($sql, ['csr' => null, 'bkgid' => $bkgid]);

			if ($numrows != 0)
			{
				$desc = "Related Booking unassigned from $aname (Source Quote: $leadId)";
				BookingLog::model()->createLog($bkgid, $desc, UserInfo:: model(), BookingLog::CSR_UNASSIGN, false, false);
			}
		}
		$success = true;
		end:
		return $success;
	}

	/**
	 * This function is used to get all auto cbr for upsell with rating and their comments
	 * @param string $param
	 * @param string $type
	 * @return CSqlDataProvider
	 */
	public function getServicePerformance($param, $type = '')
	{
		if ($param == '')
		{
			$cond = ' AND bkg_pickup_date BETWEEN CURDATE() AND NOW()';
		}
		else
		{
			$cond = $param;
		}
		$sql = " SELECT
				bkg_id,
				bkg_booking_id,
				bkg_booking_type,
				bkg_pickup_date,
				CONCAT(vct.vct_label,' (',scc.scc_label,')') AS cabtype,
				bkg_pickup_date,
				rtg_customer_overall,
				IF(service_call_queue.scq_follow_up_queue_type IN (12,18),service_call_queue.scq_disposition_comments,NULL) AS disposition_comments,
				IF(scq.scq_follow_up_queue_type IN (5) AND JSON_VALUE(scq.scq_additional_param,'$.rating')=1 ,scq.scq_disposition_comments,NULL) AS post_disposition_comments,
				btl_sync_time  AS ArrivedForPickupTime,
				IF(btl_sync_time>bkg_pickup_date,TIMESTAMPDIFF(MINUTE,bkg_pickup_date,btl_sync_time),-1) AS delay
				FROM booking
				LEFT JOIN service_call_queue ON booking.bkg_id = service_call_queue.scq_related_bkg_id AND service_call_queue.scq_follow_up_queue_type IN (12,18)
				LEFT JOIN service_call_queue scq ON booking.bkg_id = scq.scq_related_bkg_id  AND scq.scq_follow_up_queue_type IN (5) AND JSON_VALUE(scq.scq_additional_param,'$.rating')=1
				INNER JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg_vehicle_type_id
				INNER JOIN service_class scc ON scc.scc_id = scv.scv_scc_id
				INNER JOIN vehicle_category vct ON vct.vct_id = scv.scv_vct_id
				LEFT JOIN ratings ON rtg_booking_id = bkg_id AND ratings.rtg_active = 1
				LEFT JOIN booking_track_log ON  btl_bkg_id = bkg_id AND btl_event_type_id = 203 AND btl_user_type_id = '3'
				WHERE 1
				AND
				(
						(service_call_queue.scq_follow_up_queue_type IN (12, 18) AND service_call_queue.scq_id IS NOT NULL)
						 OR
						(scq.scq_follow_up_queue_type IN (5) AND JSON_VALUE(scq.scq_additional_param,'$.rating')=1 AND scq.scq_id IS NOT NULL)
				)
				$cond GROUP BY bkg_id  ";
		if ($type == 'Command')
		{
			$sqlCount		 = "SELECT
								bkg_id
								FROM booking
								LEFT JOIN service_call_queue ON booking.bkg_id = service_call_queue.scq_related_bkg_id AND service_call_queue.scq_follow_up_queue_type IN (12,18)
								LEFT JOIN service_call_queue scq ON booking.bkg_id = scq.scq_related_bkg_id  AND scq.scq_follow_up_queue_type IN (5) AND JSON_VALUE(scq.scq_additional_param,'$.rating')=1
								INNER JOIN svc_class_vhc_cat scv ON scv.scv_id = bkg_vehicle_type_id
								INNER JOIN service_class scc ON scc.scc_id = scv.scv_scc_id
								INNER JOIN vehicle_category vct ON vct.vct_id = scv.scv_vct_id
								LEFT JOIN ratings ON rtg_booking_id = bkg_id AND ratings.rtg_active = 1
								LEFT JOIN booking_track_log ON  btl_bkg_id = bkg_id AND btl_event_type_id = 203 AND btl_user_type_id = '3'
								WHERE 1
								AND
								(
										(service_call_queue.scq_follow_up_queue_type IN (12, 18) AND service_call_queue.scq_id IS NOT NULL)
										 OR
										(scq.scq_follow_up_queue_type IN (5) AND JSON_VALUE(scq.scq_additional_param,'$.rating')=1 AND scq.scq_id IS NOT NULL)
								)
								$cond GROUP BY bkg_id ";
			$count			 = DBUtil::command("SELECT COUNT(*) FROM ($sqlCount) abc", DBUtil::SDB())->queryScalar();
			$dataprovider	 = new CSqlDataProvider($sql, [
				'totalItemCount' => $count,
				'db'			 => DBUtil::SDB(),
				'sort'			 => ['attributes'	 => ['bkg_pickup_date', 'rtg_customer_overall', 'bkg_id', 'delay', 'ArrivedForPickupTime'],
					'defaultOrder'	 => 'delay DESC'], 'pagination'	 => ['pageSize' => 250],
			]);
			return $dataprovider;
		}
		else
		{
			$recordset = DBUtil::query($sql, DBUtil::SDB());
			return $recordset;
		}
	}

	public static function getAllBookingAssignToDriver()
	{
		$sql = "SELECT bkg_id, bkg_booking_id, bcb.bcb_driver_id, cr_is_consumer, phn_phone_no, phn_is_primary
				FROM `booking`
				INNER JOIN booking_cab bcb ON bcb.bcb_id = booking.bkg_bcb_id
				INNER JOIN booking_trail btr ON btr.btr_bkg_id = bkg_id AND btr.btr_driver_free_pickup_msg = 0
				INNER JOIN drivers drv ON drv.drv_id = bcb.bcb_driver_id
				INNER JOIN contact_profile ON bcb.bcb_driver_id = cr_is_driver AND cr_status = 1
				INNER JOIN contact_phone ON cr_contact_id = phn_contact_id AND phn_active = 1 AND phn_is_verified = 1
				WHERE bkg_pickup_date >= NOW() AND bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 4 Hour)
				AND bkg_status = 5 AND bcb.bcb_vendor_id IS NOT NULL
				AND bcb.bcb_driver_id IS NOT NULL
				GROUP BY bkg_id";

		return DBUtil::query($sql, DBUtil::SDB());
	}

	/**
	 * @param int $referenceId
	 * @return int | false
	 *  */
	public function checkDuplicateReferenceId($referenceId, $agentId)
	{
		$sql = "SELECT COUNT(*) as cnt FROM booking
                WHERE bkg_agent_ref_code =:referenceId AND bkg_agent_id =:agentId";
		return DBUtil::queryScalar($sql, DBUtil::MDB(), ['referenceId' => $referenceId, 'agentId' => $agentId]);
	}

	/**
	 * @param int $referenceId
	 * @return int | false
	 *  */
	public function checkDuplicateSpiceReferenceId($referenceId)
	{
		$spiceId = Config::get('spicejet.partner.id');
		$sql	 = "SELECT COUNT(*) as cnt FROM booking
                WHERE bkg_agent_ref_code =:referenceId AND bkg_agent_id = $spiceId AND bkg_active = 1 AND bkg_status <> 15";
		return DBUtil::queryScalar($sql, DBUtil::MDB(), ['referenceId' => $referenceId]);
	}

	/**
	 * function used to break smart match
	 * @param type $bcbid
	 * @return boolean|string
	 */
	public static function breakSmartMatch($bcbid, $userInfo)
	{
		$cabmodel	 = BookingCab::model()->findByPk($bcbid);
		$bcount		 = count($cabmodel->bookings);
		$first_city	 = Cities::getName($cabmodel->bookings[0]->bkg_from_city_id);
		$pickup_date = $cabmodel->bookings[0]->bkg_pickup_date;
		$last_city	 = Cities::getName($cabmodel->bookings[$bcount - 1]->bkg_to_city_id);
		$models		 = $cabmodel->bookings;

		if ($cabmodel)
		{
			$bcb_row	 = BookingCab::model()->getBkgIdByTripId($bcbid);
			$bookingIDs	 = $bcb_row['bkg_ids'];
			foreach ($models as $key => $model)
			{
				try
				{
					if (in_array($model->bkg_status, [3, 5, 6, 7]))
					{

						$success = 2;
						return $success;
					}
					$oldModel = clone $model;

					$newCabModel = new BookingCab();

					$bkgAmount						 = $model->bkgInvoice->bkg_vendor_amount;
					$newCabModel->bcb_vendor_amount	 = $bkgAmount;

					$newCabModel->bcb_bkg_id1	 = $model->bkg_id;
					$newCabModel->bcb_trip_type	 = 0;

					$newCabModel->save();

					BookingRoute::model()->setBookingCabStartEndTime($newCabModel->bcb_id, $newCabModel->bcb_bkg_id1);
					$model->bkg_bcb_id = $newCabModel->bcb_id;
					if ($model->validate())
					{
						$desc						 = "Booking smart match break manually.";
						$eventid					 = BookingLog::SMARTMATCH_BREAK;
						$params['blg_booking_id']	 = $newCabModel->bcb_bkg_id1;

						BookingLog::model()->createLog($model->bkg_id, $desc, $userInfo, $eventid, $oldModel, $params);

						$routeModels = $model->bookingRoutes;
						foreach ($routeModels as $routeModel)
						{
							$routeModel->brt_bcb_id = $newCabModel->bcb_id;
							$routeModel->save();
						}
						if ($model->save())
						{

							$succResult["success"] = true;
						}


						BookingCab::resetBidStartTime($newCabModel->bcb_id);
					}

					$success = true;
				}
				catch (Exception $e)
				{

					$returnSet = $returnSet->setException($e);
					Logger::exception($e);
				}
			}

			return $success;
		}
	}

	/**
	 *
	 * @param  $model
	 * @param string $type
	 * @return \CSqlDataProvider
	 */
	public function dailylossReport($model, $type)
	{
		$fromdate	 = $model->bkg_pickup_date1;
		$todate		 = $model->bkg_pickup_date2;
		$status		 = $model->preData;
		$dataSelect	 = 'SELECT
                        bkg.bkg_id,
                        blg.blg_admin_id,
                        blg.blg_vendor_id,
                        bkg.bkg_booking_type,
                        bkg.bkg_pickup_date,
                        bkg.bkg_create_date,
                        bkg_total_amount,
                        bkg_gozo_amount,
                        sc.scc_label,
                        bcb_vendor_amount AS LVendorAmount,
                        if(btr_count_vendor_assign=0 || btr_count_vendor_assign=1 || btr_count_vendor_assign IS NULL ,bcb_vendor_amount,0) AS FVendorAmount,
                        bcb_vendor_amount AS LVendorAmount,
                        bcb_vendor_id AS LVendorID,
                        if(btr_count_vendor_assign=0 || btr_count_vendor_assign=1 || btr_count_vendor_assign IS NULL ,bcb_vendor_id,blg1.blg_vendor_assigned_id) AS FVendorID,
                        if(btr_count_vendor_assign=0 || btr_count_vendor_assign=1 || btr_count_vendor_assign IS NULL ,1,btr_count_vendor_assign) AS AssigbedCount,
                        btr_vendor_assign_fdate  AS LVendorAssignmentDate,
                        btr_vendor_assign_ldate AS FVendorAssignmentDate,
                        CASE
                            WHEN bkg_assign_mode=0 THEN  "System"
                            WHEN bkg_assign_mode=1 THEN  "Manaully"
                            WHEN bkg_assign_mode=2 THEN  "Direct Accepted"
                        END AS LastAssigntype,
                        sourceZone,
                        destinationZone,
                        btr_count_vendor_assign ';

		$countSelect = "SELECT bkg.bkg_id ";
		$sqlBody	 = "FROM booking bkg
                        INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id=bkg.bkg_id AND bkg.bkg_active=1 AND bkg.bkg_status IN (5,6,7)
                        INNER JOIN booking_trail ON booking_trail.btr_bkg_id=bkg.bkg_id
                        INNER  JOIN booking_cab bcb ON bcb.bcb_id=bkg.bkg_bcb_id AND bcb_active=1
                        INNER JOIN svc_class_vhc_cat scv ON scv.scv_id=bkg.bkg_vehicle_type_id AND  scv.scv_active=1
                        INNER JOIN service_class sc ON scv.scv_scc_id = sc.scc_id     AND scc_active=1
                        INNER JOIN cities fromCity ON bkg.bkg_from_city_id=fromCity.cty_id
                        INNER  JOIN cities toCity ON bkg.bkg_to_city_id=toCity.cty_id
                        INNER JOIN booking_log AS blg  ON  bkg.bkg_id = blg.blg_booking_id AND blg.blg_id =(SELECT max(blg_id) FROM `booking_log` WHERE `blg_event_id` = 7 AND blg_booking_id = bkg.bkg_id AND blg_active = 1 ORDER BY blg_id DESC limit 0,1)
                        INNER JOIN booking_log AS blg1  ON blg1.blg_id =(SELECT MIN(blg_id) FROM `booking_log` WHERE `blg_event_id` = 7 AND blg_booking_id = bkg.bkg_id AND blg_active = 1 ORDER BY blg_id ASC limit 0,1)
                        LEFT JOIN
                        (
                            SELECT zones.zon_name as sourceZone,zone_cities.zct_cty_id
                            FROM `zone_cities`
                            INNER JOIN `zones` ON zones.zon_id=zone_cities.zct_zon_id
                            GROUP BY zone_cities.zct_cty_id
                        ) zon1 ON zon1.zct_cty_id=bkg.bkg_from_city_id
                        LEFT JOIN
                        (
                            SELECT zones.zon_name as destinationZone,zone_cities.zct_cty_id
                            FROM `zone_cities`
                            INNER JOIN `zones` ON zones.zon_id=zone_cities.zct_zon_id
                            GROUP BY zone_cities.zct_cty_id
                         ) zon2 ON zon2.zct_cty_id=bkg.bkg_to_city_id

                         WHERE 1 AND bkg.bkg_pickup_date BETWEEN '$fromdate' AND '$todate' AND bkg.bkg_status IN($status)
                    ";

		$sqlData	 = $dataSelect . $sqlBody;
		$sqlCount	 = $countSelect . $sqlBody;
		if ($type == "dataProvider")
		{
			$count			 = DBUtil::command("SELECT COUNT(*) AS CNT FROM ($sqlCount) abc", DBUtil::SDB())->queryScalar();
			$dataprovider	 = new CSqlDataProvider($sqlData, [
				'totalItemCount' => $count,
				'db'			 => DBUtil::SDB(),
				'sort'			 => ['attributes'	 => ['bkg_id', 'bkg_create_date', 'bkg_pickup_date', 'AssigbedCount', 'bkg_gozo_amount'],
					'defaultOrder'	 => 'bkg_id DESC'],
				'pagination'	 => ['pageSize' => 100],
			]);
			return $dataprovider;
		}
		else
		{
			return DBUtil::query($sqlData, DBUtil::SDB());
		}
	}

	public function getBookingReport($command = false)
	{

		if ($this->bkg_create_date1 != '' && $this->bkg_create_date2 != '')
		{

			$fromTime		 = '00:00:00';
			$toTime			 = '23:59:59';
			$fromDateTime	 = $this->bkg_create_date1 . ' ' . $fromTime;
			$toDateTime		 = $this->bkg_create_date2 . ' ' . $toTime;
		}
		if (($this->bkg_create_date1 != '' && $this->bkg_create_date1 != '1970-01-01') && ($this->bkg_create_date2 != '' && $this->bkg_create_date2 != '1970-01-01'))
		{
			$condition .= " AND bkg_pickup_date BETWEEN '$fromDateTime' AND '$toDateTime' ";
		}

		$sql = "SELECT
                    bkg.bkg_id as 'bkgId', bkg.bkg_booking_id as 'bookigId', bkg_pickup_date as pickupDate,
                    biv.bkg_base_amount as 'baseAmount', biv.bkg_discount_amount as 'discountAmount', biv.bkg_additional_charge as 'additionalCharge',
                    IF(bkg_status=9, biv.bkg_net_advance_amount-IFNULL(biv.bkg_credits_used,0), biv.bkg_net_advance_amount) as 'netAdvanceAmount',
                    IFNULL(bkg_driver_allowance_amount, 0) as 'driverAllowance',
                    IFNULL(biv.bkg_extra_km_charge, 0) as 'extraCharge',
                    IF(bkg_status=9, ROUND((biv.bkg_net_advance_amount-IFNULL(biv.bkg_credits_used,0))/1.05),
                    (bkg_net_base_amount + IFNULL(bkg_driver_allowance_amount, 0))) as 'totalGmv',
                    IF(bkg_status=9, (biv.bkg_net_advance_amount-IFNULL(biv.bkg_credits_used,0) - ROUND((biv.bkg_net_advance_amount-
                    IFNULL(biv.bkg_credits_used,0))/1.05)), biv.bkg_service_tax) as 'serviceTax',
                    IF(bkg_status=9, 0, (IFNULL(biv.bkg_toll_tax, 0) + IFNULL(biv.bkg_extra_toll_tax, 0))) as 'tollTax',
                    IF(bkg_status=9, 0, biv.bkg_is_toll_tax_included) AS isTollTaxIncluded,
                    IF(bkg_status=9, 0, (IFNULL(biv.bkg_state_tax, 0) + IFNULL(biv.bkg_extra_state_tax, 0))) as 'stateTax',
                    IF(bkg_status=9, 0, biv.bkg_is_state_tax_included) AS isStateTaxIncluded,
                    IF(bkg_status=9, 0, (IFNULL(biv.bkg_airport_entry_fee, 0) + IFNULL(biv.bkg_parking_charge, 0))) as 'totalParking',
                    IF(bkg_status=9, (biv.bkg_net_advance_amount-IFNULL(biv.bkg_credits_used,0)), biv.bkg_total_amount) as 'totalAmount',
                    (CASE bkg.bkg_status
                    WHEN 2 THEN 'NEW'
                    WHEN 3 THEN 'Assigned'
                    WHEN 5 THEN 'On the way'
                    WHEN 6 THEN 'Completed'
                    WHEN 7 THEN 'Settled'
                    WHEN 9 THEN 'cancelled'
                    ELSE '' END) as 'bkgStatus',
                    bkg.bkg_agent_id as 'agentId',IFNULL(agt.agt_company,CONCAT(agt.agt_fname,'',agt.agt_lname)) as 'companyName',
                    IFNULL(bkg.bkg_cancel_id,'') as 'cancelId', IFNULL(cnr.cnr_reason,'') as 'cancelReason'
                    FROM booking bkg
                    INNER JOIN booking_invoice biv ON bkg.bkg_id = biv.biv_bkg_id
                    LEFT JOIN cancel_reasons cnr ON cnr.cnr_id =bkg.bkg_cancel_id
                    LEFT JOIN agents agt ON agt.agt_id = bkg.bkg_agent_id
                    WHERE 1 AND bkg.bkg_status IN (2,3,5,6,7,9) $condition ORDER BY bkg_pickup_date, bkg_status";
		if ($command == false)
		{
			$count			 = Yii::app()->db->createCommand("SELECT COUNT(*) FROM ($sql) abc")->queryScalar();
			$pageSize		 = 25;
			$dataProvider	 = new CSqlDataProvider($sql, [
				'totalItemCount' => $count,
				'sort'			 => ['attributes'	 => ['pickupDate', 'bkgId'],
					'defaultOrder'	 => 'pickupDate  DESC'],
				'pagination'	 => ['pageSize' => $pageSize],
			]);
			return $dataProvider;
		}
		else
		{
			return DBUtil::query($sql, DBUtil::SDB());
		}
	}

	public function validateSpicejetCancel($attribute, $params)
	{
		$error = false;
		if (!in_array($this->bkg_status, [2, 3, 5]))
		{
			$strCancel = 'Booking not confirmed or already cancelled';
			if (in_array($this->bkg_status, array(6, 7)))
			{
				$strCancel = "Booking already marked as completed";
			}

			$error = true;
			$this->addError('bkg_status', $strCancel);
		}
		return $error;
	}

	public function validateSpicejetUpdate($attribute, $params)
	{
		$error = false;
		if (in_array($this->bkg_status, array(6, 7, 9)))
		{
			$strCancel	 = "Booking already marked as completed or cancelled";
			$error		 = true;
			$this->addError('bkg_status', $strCancel);
		}


		return $error;
	}

	/**
	 *
	 * @param  $model
	 * @return boolean|string
	 */
	public function updateSpicejet($bkgModel)
	{
		$returnSet = new ReturnSet();
		try
		{
			if ($bkgModel != '')
			{
				$oldModel	 = clone $bkgModel;
				$oldData	 = $oldModel->getDetailsbyId($bkgModel->bkg_id);
				if (!$bkgModel->save())
				{
					$returnSet->setStatus(false);
					throw new Exception("Error occurred while saving address");
				}
				else
				{
					$returnSet->setStatus(true);
					$returnSet->setMessage('update booking successfully');
				}

				$newData			 = $this->getDetailsbyId($bkgModel->bkg_id);
				$getOldDifference	 = array_diff_assoc($oldData, $newData);
				$changesForLog		 = " Old Values: " . Agents::model()->getModificationMSG($getOldDifference, 'log');
				if ($getOldDifference)
				{
					$logDesc = "Booking modified";
					$eventId = BookingLog::BOOKING_MODIFIED;
					$desc	 = $logDesc . $changesForLog;
					$bkgId	 = $bkgModel->bkg_id;
					BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel);
				}
			}
			else
			{
				throw new Exception("UPDATE Failed:Invalid Data", ReturnSet::ERROR_INVALID_DATA);
			}
		}
		catch (Exception $ex)
		{
			$returnSet = ReturnSet::setException($ex);
		}
		return $returnSet;
	}

	/**
	 *
	 * @param  $model
	 * @return boolean|string
	 */
	public static function checkAirportPackage($model)
	{
		$atTransferType	 = 0;
		$agentId		 = $model->bkg_agent_id;
		/* @var $route BookingRoute */
		$route			 = $model->bookingRoutes[0];
		if ($route->brtFromCity->cty_is_airport == 1)
		{
			$atTransferType	 = 1;
			$airportId		 = $route->brt_from_city_id;
		}
		if ($route->brtToCity->cty_is_airport == 1)
		{
			$atTransferType	 = 2;
			$airportId		 = $route->brt_to_city_id;
		}
		$quotedDistance	 = 25;
		$patRes			 = PartnerAirportTransfer::getRates($agentId, $airportId, $atTransferType, $model->bkg_vehicle_type_id, $quotedDistance);
		return $patRes;
	}

	public static function getGNowTripDetails($tripId, $status = NULL, $vendorId = 0, $isApp = 0)
	{

		if ($tripId == "" || $tripId == null)
		{
			throw new Exception("Required data missing", ReturnSet::ERROR_INVALID_DATA);
		}
		$uberAgentId = Yii::app()->params['uberAgentId'];
		$condition	 = ($status != NULL) ? "6,7" : "2, 3, 5";

		$from		 = "`booking` bkg
					  LEFT JOIN booking_cab bcb ON bkg.bkg_bcb_id = bcb.bcb_id";
		$where		 = "bkg.bkg_bcb_id = $tripId AND bkg.bkg_status IN($condition)";
		$totTrans	 = 0;
		$vndIsFreeze = 0;
		if ($vendorId > 0)
		{
			$isAccessible = BookingCab::checkVendorTripRelation($tripId, $vendorId);
			if (!$isAccessible)
			{
				throw new Exception("Not authorised to proceed", ReturnSet::ERROR_UNAUTHORISED);
			}
			$row		 = AccountTransDetails::getTotTransByVndId($vendorId);
			$totTrans	 = ($row['totTrans'] > 0) ? $row['totTrans'] : 0;
			$vndIsFreeze = ($row['vnd_is_freeze'] > 0) ? $row['vnd_is_freeze'] : 0;
		}

		$qry		 = "SELECT DISTINCT
			bkg.bkg_id,bkg.bkg_bcb_id,
			IF(bkg_flexxi_type=1,true,false) isPromoter,
			IF(bkg_flexxi_type IN(1,2),true,false) isFlexxi,
			IF(bkgaddinfo.bkg_no_person > 0,bkgaddinfo.bkg_no_person,vct.vct_capacity) AS seatingCapacity,
            IF(bkgaddinfo.bkg_num_large_bag > 0,bkgaddinfo.bkg_num_large_bag,vct.vct_big_bag_capacity) AS bigBagCapacity,
            IF(bkgaddinfo.bkg_num_small_bag > 0,bkgaddinfo.bkg_num_small_bag,vct.vct_small_bag_capacity) AS bagCapacity,
			bcb.bcb_id,bkg.bkg_booking_id,
			bkg.bkg_return_date, bkg.bkg_modified_on,
			bkg.bkg_pickup_address,
			bkg.bkg_drop_address,
			ct1.cty_display_name AS from_city,
			ct2.cty_display_name AS to_city,
			bkguser.bkg_user_fname AS bkg_user_name,
			bkg.bkg_trip_distance,
			vht.vct_desc AS bkg_cab_assigned,
			bkg.bkg_status,
			bkgaddinfo.bkg_no_person,
			bkguser.bkg_user_lname,
			bkg.bkg_pickup_date,
			bkguser.bkg_country_code,
			bkginv.bkg_night_pickup_included,
			bkginv.bkg_night_drop_included,
			bkginv.bkg_rate_per_km_extra,
			bkginv.bkg_extra_charge,
			bkginv.bkg_extra_total_km,
			bkginv.bkg_extra_toll_tax,
			bkginv.bkg_extra_state_tax,
			bkginv.bkg_parking_charge,
			bkginv.bkg_driver_allowance_amount,
            phn.phn_phone_no AS bkg_driver_number,
			drv.drv_name AS bkg_driver_name,
			vhc.vhc_number AS bkg_cab_number,
			bkg.bkg_trip_duration,
			IF(bkg.bkg_status IN (3,5), bkguser.bkg_contact_no,'') AS bkg_contact_no,
			bkguser.bkg_alt_contact_no as bkg_alternate_contact,
			bkguser.bkg_user_email,
			bkgtrack.bkg_ride_start,
			bkgtrack.bkg_ride_complete,
			vehicle_types.vht_make,
            vehicle_types.vht_model,
			IF(bkgtrack.bkg_ride_start>0 AND DATE_ADD(bkg.bkg_pickup_date , INTERVAL (bkg.bkg_trip_duration/2) MINUTE) < NOW() ,bkgtrack.bkg_ride_complete,1) as bkg_ride_complete_old,
			CONCAT(
          CASE
             WHEN     (TIMESTAMPDIFF(MINUTE,NOW(), bkg.bkg_pickup_date) > 0) AND
						((TIMESTAMPDIFF(MINUTE,NOW(),DATE_ADD(bkg.bkg_pickup_date, INTERVAL bkg.bkg_trip_duration MINUTE))) > 0)
             THEN 0
             WHEN     (TIMESTAMPDIFF(MINUTE,NOW(), bkg.bkg_pickup_date) < 0)
                  AND ((TIMESTAMPDIFF( MINUTE,NOW(),DATE_ADD(bkg.bkg_pickup_date,INTERVAL bkg.bkg_trip_duration MINUTE))) > 0)
             THEN 1
             WHEN     (TIMESTAMPDIFF(MINUTE,NOW(), bkg.bkg_pickup_date) < 0)
                  AND ((TIMESTAMPDIFF(MINUTE,NOW(),DATE_ADD(bkg.bkg_pickup_date,INTERVAL bkg.bkg_trip_duration MINUTE))) < 0)
             THEN 2
			ELSE 0
          END)
          AS is_start_overDue,
			bkginv.bkg_base_amount,
			bkginv.bkg_total_amount,
			bkginv.bkg_advance_amount,
			bkginv.bkg_due_amount,
			bkginv.bkg_service_tax,
			bkginv.bkg_service_tax_rate,
			bkginv.bkg_is_airport_fee_included as isAirportEntryFeeIncluded,
			bkginv.bkg_airport_entry_fee,
			vct.vct_desc AS bkg_cab_type,
			bkg.bkg_booking_type,
			bkg.bkg_instruction_to_driver_vendor,
            scc.scc_desc, scc.scc_vnd_desc,
            scc.scc_id,
			vhc.vhc_id,
			drv.drv_id,
			bkginv.bkg_is_toll_tax_included,
			IF(bkg.bkg_return_date IS NULL, DATE_ADD(bkg.bkg_pickup_date, INTERVAL bkg.bkg_trip_duration MINUTE), bkg.bkg_return_date) AS trip_completion_time,
			bkginv.bkg_is_state_tax_included,
			bkg.bkg_reconfirm_flag as bkg_reconfirm_id,
			bkgtrack.bkg_is_no_show,
			bpr.bkg_duty_slip_required is_duty_slip_required, bpr.bkg_driver_app_required is_driver_app_required,
			bpr.bkg_cng_allowed AS is_cng_allowed ,bpr.bkg_driver_app_required,
			vct.vct_label cab_model,
			vht.vct_label cab_model_assigned,
            '0' AS show_total_amount,
            rtg.rtg_vendor_customer,
            rtg.rtg_vendor_csr,
            rtg.rtg_vendor_review,
            bkg.bkg_pickup_date as brt_pickup_datetime,
            bkg.bkg_trip_duration as brt_trip_duration,
            IF(bkg.bkg_pickup_lat > 0, bkg.bkg_pickup_lat, ct1.cty_lat) AS pickup_lat,
            IF(bkg.bkg_pickup_long > 0, bkg.bkg_pickup_long, ct1.cty_long) AS pickup_long,
            IF(bkg.bkg_dropup_lat > 0, bkg.bkg_dropup_lat, ct2.cty_lat) AS drop_lat,
            IF(bkg.bkg_dropup_long > 0, bkg.bkg_dropup_long, ct2.cty_long) AS drop_long,
	        bkg.bkg_from_city_id as brt_from_city_id, bkg.bkg_to_city_id as brt_to_city_id,
            bpr.bpr_vnd_ctrl_trip AS hasTripCtrl,
			IF(bpr.bkg_is_gozonow IN(1,2),1,0) isGozoNow,
            IF(bkg.bkg_agent_id > 0, 1, 0) AS is_agent,
			IF(bkg.bkg_agent_id =$uberAgentId,'UBER',IF(bkg.bkg_agent_id is null,'','B2B')) As agent_name,
            IF( vct.vct_id IN(5, 6), '1', '0' ) AS is_assured,
			if(bkgtrack.bkg_is_trip_verified=1,2,bpr.bkg_trip_otp_required) bpr_trip_otp_required,
			IF(DATE_ADD(NOW(), INTERVAL 13 HOUR) >= bkg.bkg_pickup_date AND bkg.bkg_reconfirm_flag=1,0,1) AS is_biddable,
			bvr.bvr_id,bkg.bkg_booking_type,
			bvr.bvr_bid_amount,
			bcb.bcb_vendor_amount AS max_bid_amount,
			(bcb.bcb_vendor_amount * 0.7) AS min_bid_amount,
		(CASE
			WHEN (($vndIsFreeze = 1) AND ($totTrans > 0) ) THEN '1'
			WHEN ($vndIsFreeze = 1) THEN '2'
			ELSE '0' END) AS payment_due,
        (CASE
			WHEN (($vndIsFreeze = 1) AND ($totTrans > 0) )
			THEN CONCAT('Your amount due is ', ABS($totTrans), '. Please send payment immediately')
			WHEN ($vndIsFreeze = 1) THEN 'Your Gozo Account is temporarily frozen. Please contact your Account Manager or Gozo Team to have it resolved.'
			ELSE ''
		END) AS payment_msg,
			bcb.bcb_vendor_amount AS vendor_ammount,
			bcb.bcb_vendor_amount,
			scc.scc_label AS cab_label,
			ROUND(bcb.bcb_vendor_amount * 0.98) AS recommended_vendor_amount
            FROM
                $from
         	LEFT JOIN booking_vendor_request bvr ON bvr.bvr_bcb_id = bcb.bcb_id AND bvr_vendor_id = $vendorId
			LEFT JOIN booking_user bkguser ON bkg.bkg_id = bkguser.bui_bkg_id
			LEFT JOIN booking_add_info bkgaddinfo ON bkg.bkg_id = bkgaddinfo.bad_bkg_id
			INNER JOIN booking_invoice bkginv ON bkg.bkg_id = bkginv.biv_bkg_id
			INNER JOIN booking_track bkgtrack ON bkg.bkg_id = bkgtrack.btk_bkg_id
			INNER JOIN booking_trail bkgtrail ON bkg.bkg_id = bkgtrail.btr_bkg_id
			INNER JOIN booking_pref bpr ON bkg.bkg_id = bpr.bpr_bkg_id
			INNER JOIN cities ct1 ON ct1.cty_id = bkg.bkg_from_city_id
			INNER JOIN cities ct2 ON ct2.cty_id = bkg.bkg_to_city_id
			LEFT JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
			LEFT JOIN `vehicles` vhc ON vhc.vhc_id = bcb.bcb_cab_id
			LEFT JOIN vcv_cat_vhc_type vcvt ON vcvt.vcv_vht_id = vhc.vhc_type_id
			LEFT JOIN vehicle_category vht ON vht.vct_id = vcvt.vcv_vct_id
			LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id
			LEFT JOIN contact ctt ON ctt.ctt_id = drv.drv_contact_id
			LEFT JOIN contact_phone phn ON phn.phn_contact_id = ctt.ctt_id AND phn.phn_is_primary = 1 AND phn.phn_active = 1
			LEFT JOIN svc_class_vhc_cat scv ON bkg.bkg_vehicle_type_id = scv.scv_id
			LEFT JOIN `vehicle_category` vct ON scv.scv_vct_id = vct.vct_id
			LEFT JOIN service_class scc ON scc.scc_id = scv.scv_scc_id
			LEFT JOIN vehicle_types ON vehicle_types.vht_id = scv.scv_model
			LEFT JOIN `ratings` rtg ON bkg.bkg_id = rtg.rtg_booking_id
			LEFT JOIN `agents` agts ON bkg.bkg_agent_id = agts.agt_id
		WHERE    $where
		ORDER BY bkg.bkg_pickup_date  DESC";
#echo $qry;
		Logger::create("Query:- " . $qry, CLogger::LEVEL_INFO);
		$recordset	 = [];
		$recordObj	 = DBUtil::query($qry);
		foreach ($recordObj as $key => $val)
		{
			$recordset[$key]						 = $val;
			$bkgs									 = BookingCab::model()->getBkgIdByTripId($val['bkg_bcb_id']);
			$timeDuration							 = Filter::getTimeDurationbyMinute($val['bkg_trip_duration']);
			$tripDay								 = Filter::getTripDayByRoute($val['bkg_id']);
			$tot									 = $timeDuration . '(' . $tripDay . 'day)';
			$recordset[$key]['totalTripDuration']	 = $tot;

			if ($val['agent_name'] == 'UBER')
			{
				$recordset[$key]['bkg_pickup_date'] = BookingCab::model()->getPickupDateTime("Y-m-d H:i:s", $recordset[$key]['bkg_pickup_date'], $uberAgentId);
			}
			if ($val['bkg_id'] > 0)
			{
				$recordset[$key]['bkg_instruction_to_driver_vendor'] = Booking::model()->getFullInstructionsByid($val['bkg_id'], $isApp);
			}
			if ($val['bkg_agent_id'] > 0 && $val['is_duty_slip_required'] == 0)
			{
				$agentModel									 = Agents::model()->findByPk($val['bkg_agent_id']);
				$recordset[$key]['is_duty_slip_required']	 = $agentModel->agt_duty_slip_required;
			}
			if ($val['bkg_agent_id'] > 0 && $val['is_driver_app_required'] == 0)
			{
				$agentModel									 = Agents::model()->findByPk($val['bkg_agent_id']);
				$recordset[$key]['is_driver_app_required']	 = $agentModel->agt_driver_app_required;
			}
			if ($val['is_cng_allowed'] > 0)
			{
				$recordset[$key]['is_cng_allowed'] = $val['is_cng_allowed'];
			}
			if ($val['bkg_driver_app_required'] > 0)
			{
				$recordset[$key]['bkg_driver_app_required'] = (int) $val['bkg_driver_app_required'];
			}
			$recordset[$key]['seatingCapacity']				 = (int) $val['seatingCapacity'];
			$recordset[$key]['bagCapacity']					 = (int) $val['bagCapacity'];
			$recordset[$key]['bigBagCapacity']				 = (int) $val['bigBagCapacity'];
			$recordset[$key]['hasTripCtrl']					 = (int) $val['hasTripCtrl'];
			$recordset[$key]['bkg_driver_allowance_amount']	 = (int) $val['bkg_driver_allowance_amount'];
			$recordset[$key]['bkg_parking_charge']			 = (int) $val['bkg_parking_charge'];
			$recordset[$key]['bpr_trip_otp_required']		 = (int) $val['bpr_trip_otp_required'];
			$recordset[$key]['bkg_route_name']				 = BookingRoute::getRouteCityFullName($val['bkg_id']);
			$sccVndDesc										 = json_decode($recordset[$key]['scc_vnd_desc']);
			if (in_array($recordset[$key]['bkg_booking_type'], [2, 3]))
			{
				$pickupdata						 = BookingRoute::model()->getPickupLatLngByBkgId($val['bkg_id']);
				$recordset[$key]['pickup_lat']	 = $pickupdata['pickup_lat'];
				$recordset[$key]['pickup_long']	 = $pickupdata['pickup_long'];
			}
			$recordset[$key]['isAirportEntryFeeIncluded']		 = (int) $val['isAirportEntryFeeIncluded'];
			$recordset[$key]['bkg_instruction_to_driver_vendor'] = (($recordset[$key]['scc_id'] != ServiceClass::CLASS_ECONOMIC) ? (($recordset[$key]['bkg_instruction_to_driver_vendor'] != '') ? $recordset[$key]['bkg_instruction_to_driver_vendor'] . ", " . implode(", ", $sccVndDesc) : implode(", ", $sccVndDesc)) : ($recordset[$key]['bkg_instruction_to_driver_vendor']));
			$hashBkgId											 = Yii::app()->shortHash->hash($val['bkg_id']);
			$hashVndId											 = Yii::app()->shortHash->hash($vendorId);
//$recordset[$key]['bkvn_url']	 ='http://gozo-server.ddns.net:6172'.'/bkvn/'. $hashBkgId . '/' . $hashVndId;
			$recordset[$key]['bkvn_url']						 = Yii::app()->params['fullBaseURL'] . '/bkvn/' . $hashBkgId . '/' . $hashVndId;

			if ($recordset[$key]['bkg_status'] < 5)
			{
				$recordset[$key]['bkg_pickup_address']	 = 'xxxxxxx' . ', ' . $recordset[$key]['from_city'];
				$recordset[$key]['bkg_drop_address']	 = 'xxxxxxx' . ', ' . $recordset[$key]['to_city'];
				$recordset[$key]['pickup_lat']			 = round($recordset[$key]['pickup_lat'], 2);
				$recordset[$key]['pickup_long']			 = round($recordset[$key]['pickup_long'], 2);
			}
			else
			{
				$recordset[$key]['bkg_pickup_address']	 = $recordset[$key]['bkg_pickup_address'];
				$recordset[$key]['bkg_drop_address']	 = $recordset[$key]['bkg_drop_address'];
				$recordset[$key]['pickup_lat']			 = $recordset[$key]['pickup_lat'];
				$recordset[$key]['pickup_long']			 = $recordset[$key]['pickup_long'];
			}

			Logger::create("IS OVER DUE ==>" . $recordset[$key]['is_start_overDue'] . " bkgID ==>" . $recordset[$key]['bkg_id']);
		}

		return $recordset;
	}

	/**
	 *
	 * @param  $model
	 * @return Exception
	 */
	public function validateSpicejetPickupTime()
	{
		if ($this->bkg_transfer_type == 2)
		{
			$minutesToPickup = Filter::getTimeDiff($this->bkg_pickup_date);
			$minTime		 = \Config::get('spicejet.dropOff.mintime');
			if ($minutesToPickup < $minTime)
			{
				$endDate = new DateTime(Filter::getDBDateTime());
				$endDate->add(new DateInterval('PT' . $minTime . 'M'));
				throw new Exception('Departure time should be after ' . $endDate->format('Y-m-d H:i:s'), ReturnSet::ERROR_NO_RECORDS_FOUND);
			}
		}
	}

	public static function processSessionData($sessArr, $requestId, $page)
	{
		$response	 = new \Stub\booking\SessionRequest();
		$response->setData($sessArr);
//$requestId->requestId	 = $response;
		$rstId		 = [$requestId => $response];
		$data		 = [$page => $rstId];
		$sessionReq	 = Filter::removeNull($data);
		$sessData	 = json_encode($sessionReq);
		return $sessData;
	}

	public static function stopAutoAssignDuplicateQuote($bkgId)
	{
		$success = true;
		try
		{
			$model = Booking::model()->findByPk($bkgId);
			if ($model->bkg_agent_id > 0)
			{
				goto end;
			}
			$params	 = ["userId" => $model->bkgUserInfo->bkg_user_id, "bkgId" => $bkgId];
			$sql	 = "UPDATE booking 
					INNER JOIN booking_user ON bkg_id=bui_bkg_id AND bkg_status=15 AND bkg_agent_id IS NULL AND bkg_user_id=:userId AND bkg_id<>:bkgId
					INNER JOIN booking_trail ON btr_bkg_id=bkg_id AND (bkg_assign_csr=0 OR bkg_assign_csr IS NULL)
					SET bkg_assign_csr=-1
				";
			DBUtil::execute($sql, $params);
		}
		catch (Exception $exc)
		{
			ReturnSet::setException($exc);
			$success = false;
		}
		end:
		return $success;
	}

	public function saveBooking($leadId)
	{
		Logger::setModelCategory(__CLASS__, __FUNCTION__);
		$tempModel	 = BookingTemp::model()->findByPk($leadId);
		Logger::profile("got tempmodel");
		$contactId	 = null;
		$bkgModel	 = Booking::getNewInstance();

		if ($tempModel->bkg_agent_id == Config::get('Mobisign.partner.id') || $tempModel->bkg_agent_id == Config::get('Kayak.partner.id'))
		{
			goto skipusercontact;
		}
		if ($tempModel->bkg_user_id != '')
		{
			$contactId = ContactProfile::getByUserId($tempModel->bkg_user_id);
		}
		///if (is_int($contactId))
		if ($contactId)
		{
			$bkgModel->bkgUserInfo->bkg_contact_id = $contactId;
		}
		skipusercontact:

		$bkgModel->populateFromLead($tempModel, true);
		$bkgModel->bkgTravellBy	 = $this->bkgTravellBy;
		$result					 = $bkgModel->createQuote();
		Logger::profile("got createQuote");
		BookingTemp::setInactiveRelatedLeads($bkgModel->bkg_id);
		Booking::stopAutoAssignDuplicateQuote($bkgModel->bkg_id);
// for auto closing the lead / quote from service call queue
		if ($bkgModel->bkg_agent_id == null)
		{
			ServiceCallQueue::autoCloseRelatedLeadQuote($bkgModel->bkg_id);
		}
		Logger::profile("got $bkgModel->bkg_id");
		Logger::unsetModelCategory(__CLASS__, __FUNCTION__);
		return $bkgModel->bkg_id;
	}

	/**
	 *
	 * @param  $model
	 * @return boolean|string
	 */
	public function checkNewGstPickupTime($pickupDatetime)
	{
		$result	 = false;
		$pickup	 = date('Y-m-d H:i:s', strtotime($pickupDatetime));
		$date	 = "2022-04-01 00:00:00";
		if ($pickup >= $date)
		{
			$result = true;
		}
		return $result;
	}

	/*
	 * @param array $request
	 * @return true | false
	 * @return data
	 */

	public static function getBookingTripByCity($params)
	{
//$apiURL = Config::get('dataServerUrl') ."getBookingTripByCity";
		$apiURL		 = "http://167.71.226.38/data/getBookingTripByCity/";
		$postData	 = json_encode($params);

		$ch		 = curl_init();
		curl_setopt($ch, CURLOPT_URL, $apiURL);
		curl_setopt($ch, CURLOPT_POST, 1);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_VERBOSE, true);
		curl_setopt($ch, CURLOPT_TIMEOUT_MS, 100);
		$result	 = curl_exec($ch);

		$jsonResponse		 = curl_exec($ch);
		$responseParamList	 = json_decode($jsonResponse, false);
		return $responseParamList;
	}

	public static function getPrefferedTripData($objPage)
	{
		$param				 = [];
		$routes				 = $objPage->booking->routes[0];
		$param['fromCity']	 = $routes->source->code;
		$param['toCity']	 = $routes->destination->code;
		$param['tripType']	 = $objPage->booking->tripType;
		$getPrefferedData	 = Booking::getBookingTripByCity($param);
		$prefData			 = $getPrefferedData->data;
		return $prefData;
	}

	public static function getPayMessageByStatus($bkgId, $status, $reconfirm, $isGozoNow)
	{
		$hash		 = Yii::app()->shortHash->hash($bkgId);
		$paymentLink = Yii::app()->createAbsoluteUrl('bkpn/' . $bkgId . '/' . $hash);
		$slink		 = Filter::shortUrl($paymentLink);
		$ratingModel = Ratings::findByBkgId($bkgId);
		switch ($status)
		{
			case '1':
				$text		 = "This quote has expired";
				$txtColor	 = "";
				$link		 = "";
				break;
			case ($status == 2 && $reconfirm == 0 && $isGozoNow == 1):
				$text		 = "Payment Pending";
				$txtColor	 = "text-warning";
				$link		 = $slink;
				break;
			case (in_array($status, [2, 3, 4, 5])):
				$text		 = "Booking confirmed!";
				$txtColor	 = "color-green2";
				$link		 = $slink;
				break;
			case (in_array($status, [6, 7])):
				if ($ratingModel != null)
				{
					$text = "Trip has been completed!";
				}
				else
				{
					$text = "Trip completed. We need you to rate the driver!!";
				}
				$txtColor	 = "color-green2";
				$link		 = $slink;
				break;
			case (in_array($status, [9, 10])):
				$text		 = "Booking cancelled";
				$txtColor	 = "";
				$link		 = "";
				break;
			case '15':
				$text		 = "Review your booking details";
				$txtColor	 = "";
				$link		 = '';
				break;
		}
		return ['text' => $text, 'txtColor' => $txtColor, 'slink' => $link];
	}

	public function getDetailsOfCabDriverForCustomer()
	{
		$sql = "SELECT
					DISTINCT(bkg.bkg_id),
					bkg.bkg_booking_id,
					bkg.bkg_pickup_date,
					bcb.bcb_cab_number,
					bcb.bcb_driver_phone,
					bui.bkg_country_code,
					bui.bkg_contact_no,
					CONCAT(ctt.ctt_first_name,' ',ctt.ctt_last_name) AS drv_name,
					bkg_agent_id
					FROM
					booking bkg
					INNER JOIN booking_cab bcb ON bcb.bcb_id = bkg.bkg_bcb_id
					INNER JOIN booking_user bui ON bui.bui_bkg_id = bkg.bkg_id
					INNER JOIN drivers d1 ON bcb.bcb_driver_id = d1.drv_id
					INNER JOIN drivers d2 ON d2.drv_id = d1.drv_ref_code AND d2.drv_active = 1
					INNER JOIN contact_profile as cp ON cp.cr_is_driver = d2.drv_id and cp.cr_status =1
					INNER JOIN contact as ctt ON ctt.ctt_id = cp.cr_contact_id
					INNER JOIN contact as ctt2 ON ctt2.ctt_id = ctt.ctt_ref_code and ctt2.ctt_active = 1
					WHERE bkg.bkg_status = 5
					AND(bkg.bkg_pickup_date BETWEEN DATE_ADD(NOW(), INTERVAL 120 MINUTE) AND DATE_ADD(NOW(), INTERVAL 180 MINUTE)) GROUP BY bkg.bkg_id";
		return DBUtil::query($sql, DBUtil::SDB());
	}

	public static function getAllTripStartBooking()
	{
		$sql = "SELECT
                bkg.bkg_id,
                bkg_agent_id
                FROM
                booking bkg					
                WHERE 1 AND bkg.bkg_status = 5
                AND bkg.bkg_pickup_date BETWEEN DATE_SUB(NOW(), INTERVAL 120 MINUTE) AND DATE_ADD(NOW(), INTERVAL 60 MINUTE)";
		return DBUtil::query($sql, DBUtil::SDB());
	}

	/**
	 *
	 * @param  $model
	 * @return boolean|string
	 */
	public static function isInstantSearchDateTime($model)
	{
		$minTime			 = Config::getMinPickupDuration($model->bkg_agent_id, $model->bkg_booking_type, 0);
		$nextAvailableTime	 = $minTime + \Config::get('instantsearch.pickup.mintime');
		$pickupDateTime		 = Filter::addWorkingMinutes($nextAvailableTime, Filter::getDBDateTime());
		return $pickupDateTime;
	}

	/**
	 * Round down minutes to the nearest Higher interval of a DateTime object.
	 * 
	 * @param \DateTime $dateTime
	 * @param int $minuteInterval
	 * @return \DateTime
	 */
	public static function roundUpToMinuteInterval(\DateTime $dateTime, $minuteInterval = 15)
	{
		return $dateTime->setTime(
						$dateTime->format('H'),
						ceil($dateTime->format('i') / $minuteInterval) * $minuteInterval,
						0
		);
	}

	public static function getBookingCountByRowIdentifier($rowIdentifier)
	{

		$params					 = array();
		$params['regionId']		 = (int) substr($rowIdentifier, 1, 2);
		$params['fromZone']		 = (int) substr($rowIdentifier, 3, 5);
		$params['toZone']		 = (int) substr($rowIdentifier, 8, 5);
		$params['vehicleId']	 = (int) substr($rowIdentifier, 13, 3);
		$params['bookingType']	 = (int) substr($rowIdentifier, 16, 2);

		$sql = "SELECT 
                COUNT(bkg_id) AS cntInquiry,
                SUM(IF(bkg_status IN (2,3,4,5,6,7,9),1,0)) AS cntCreated
                FROM booking bkg
                JOIN booking_cab ON booking_cab.bcb_id = bkg.bkg_bcb_id
                JOIN booking_invoice biv ON biv.biv_bkg_id = bkg.bkg_id
                JOIN booking_price_factor bpf ON bpf.bpf_bkg_id = bkg.bkg_id
                JOIN booking_trail btr ON btr.btr_bkg_id = bkg.bkg_id
                JOIN svc_class_vhc_cat scvc ON scvc.scv_id = bkg.bkg_vehicle_type_id AND scvc.scv_active=1
                JOIN vehicle_category vhc ON scvc.scv_vct_id = vhc.vct_id AND vhc.vct_active=1
                JOIN service_class sc ON scvc.scv_scc_id = sc.scc_id AND sc.scc_active=1
                JOIN cities a ON a.cty_id = bkg.bkg_from_city_id AND a.cty_active=1
                JOIN cities b ON b.cty_id = bkg.bkg_to_city_id   AND b.cty_active=1
                JOIN states stt ON stt.stt_id = a.cty_state_id  AND stt.stt_active='1'
                JOIN states s2 ON s2.stt_id = b.cty_state_id  AND s2.stt_active='1'
                JOIN zone_cities zc1 ON zc1.zct_cty_id = bkg.bkg_from_city_id AND zc1.zct_active=1
                JOIN zone_cities zc2 ON zc2.zct_cty_id = bkg.bkg_to_city_id  AND zc2.zct_active=1
                JOIN zones z1 ON z1.zon_id = zc1.zct_zon_id  AND z1.zon_active=1
                JOIN zones z2 ON z2.zon_id = zc2.zct_zon_id  AND z2.zon_active=1
                JOIN geo_zones1 gz1 ON z1.zon_id = gz1.zon_id  
                JOIN geo_zones1 gz2 ON z2.zon_id = gz2.zon_id
                WHERE 1 AND bkg.bkg_create_date BETWEEN (CURDATE() - INTERVAL 01 DAY) AND CURDATE() 
                AND booking_cab.bcb_trip_type=0
                AND stt.stt_zone=:regionId
                AND z1.zon_id=:fromZone
                AND z2.zon_id=:toZone
                AND scvc.scv_id=:vehicleId
                AND bkg.bkg_booking_type=:bookingType";
		return DBUtil::queryRow($sql, DBUtil::SDB(), $params);
	}

	public static function getBookingCountByRowIdentifierDump($rowIdentifier, $fromDate, $toDate)
	{
//        Logger::info("\n******************getBookingCountByRowIdentifierDump Start********************\n");
		try
		{
			$params					 = array();
			$params['regionId']		 = (int) substr($rowIdentifier, 1, 2);
			$params['fromZone']		 = (int) substr($rowIdentifier, 3, 5);
			$params['toZone']		 = (int) substr($rowIdentifier, 8, 5);
			$params['vehicleId']	 = (int) substr($rowIdentifier, 13, 3);
			$params['bookingType']	 = (int) substr($rowIdentifier, 16, 2);
			$params['fromDate']		 = $fromDate;
			$params['toDate']		 = $toDate;
//            Logger::info("\n******************getBookingCountByRowIdentifierDump params=".json_encode($params)."********************\n");
			$sql					 = "SELECT 
                COUNT(bkg_id) AS cntInquiry,
                SUM(IF(bkg_status IN (2,3,4,5,6,7,9),1,0)) AS cntCreated
                FROM booking bkg
                JOIN booking_cab ON booking_cab.bcb_id = bkg.bkg_bcb_id
                JOIN booking_invoice biv ON biv.biv_bkg_id = bkg.bkg_id
                JOIN booking_price_factor bpf ON bpf.bpf_bkg_id = bkg.bkg_id
                JOIN booking_trail btr ON btr.btr_bkg_id = bkg.bkg_id
                JOIN svc_class_vhc_cat scvc ON scvc.scv_id = bkg.bkg_vehicle_type_id AND scvc.scv_active=1
                JOIN vehicle_category vhc ON scvc.scv_vct_id = vhc.vct_id AND vhc.vct_active=1
                JOIN service_class sc ON scvc.scv_scc_id = sc.scc_id AND sc.scc_active=1
                JOIN cities a ON a.cty_id = bkg.bkg_from_city_id AND a.cty_active=1
                JOIN cities b ON b.cty_id = bkg.bkg_to_city_id   AND b.cty_active=1
                JOIN states stt ON stt.stt_id = a.cty_state_id  AND stt.stt_active='1'
                JOIN states s2 ON s2.stt_id = b.cty_state_id  AND s2.stt_active='1'
                JOIN zone_cities zc1 ON zc1.zct_cty_id = bkg.bkg_from_city_id AND zc1.zct_active=1
                JOIN zone_cities zc2 ON zc2.zct_cty_id = bkg.bkg_to_city_id  AND zc2.zct_active=1
                JOIN zones z1 ON z1.zon_id = zc1.zct_zon_id  AND z1.zon_active=1
                JOIN zones z2 ON z2.zon_id = zc2.zct_zon_id  AND z2.zon_active=1
                JOIN geo_zones1 gz1 ON z1.zon_id = gz1.zon_id  
                JOIN geo_zones1 gz2 ON z2.zon_id = gz2.zon_id
                WHERE 1 AND bkg.bkg_create_date BETWEEN :fromDate AND :toDate 
                AND booking_cab.bcb_trip_type=0
                AND stt.stt_zone=:regionId
                AND z1.zon_id=:fromZone
                AND z2.zon_id=:toZone
                AND scvc.scv_id=:vehicleId
                AND bkg.bkg_booking_type=:bookingType";
//            Logger::info("\n******************getBookingCountByRowIdentifierDump sql=".$sql."********************\n");
			return DBUtil::queryRow($sql, DBUtil::SDB(), $params);
		}
		catch (Exception $ex)
		{
			Logger::writeToConsole($ex->getMessage());
//            Logger::info("\n****************** getBookingCountByRowIdentifierDump  Exception=" . $ex->getMessage() . " *********************************************\n");
		}
//        Logger::info("\n****************** getBookingCountByRowIdentifierDump Ends********************\n");
	}

	public static function isDupilcate($bkgId)
	{
		$bookingIds = "";
		try
		{
			$model		 = Booking::model()->findByPk($bkgId);
			$params		 = [
				"bkg_contact_no"	 => $model->bkgUserInfo->bkg_contact_no,
				"bkg_user_email"	 => $model->bkgUserInfo->bkg_user_email,
				"bkg_from_city_id"	 => $model->bkg_from_city_id,
				"bkg_to_city_id"	 => $model->bkg_to_city_id,
				"bkg_create_date"	 => $model->bkg_create_date,
				"bkg_pickup_date"	 => $model->bkg_pickup_date];
			$sql		 = "SELECT GROUP_CONCAT(bkg_id) AS duplicateIds
                        FROM `booking`  INNER JOIN `booking_user`  ON bkg_id=bui_bkg_id 
                        WHERE (`bkg_from_city_id`= :bkg_from_city_id AND `bkg_to_city_id`= :bkg_to_city_id)
                        AND 
						( 
							( DATE(bkg_create_date) =DATE(:bkg_create_date))
							 OR  
							(DATE(bkg_pickup_date) = DATE(:bkg_pickup_date))                    
                        )
                        AND 
						( 
							(bkg_contact_no=:bkg_contact_no AND bkg_contact_no<>'')
							 OR 
							(bkg_user_email=:bkg_user_email AND bkg_user_email<>'')
						)";
			$bookingIds	 = DBUtil::queryScalar($sql, DBUtil::SDB(), $params);
		}
		catch (Exception $exc)
		{
			ReturnSet::setException($exc);
			$bookingIds = null;
		}
		return $bookingIds;
	}

	public static function getGNowTimerData($bkgModel)
	{
		$formatDateTime = 'Y-m-d H:i:s';

		$step1Duration	 = 1;
		$step2Duration	 = 5;
		$step1Date		 = date($formatDateTime, strtotime($bkgModel->bkg_create_date . "+ {$step1Duration} MINUTE"));
		$step2Date		 = date($formatDateTime, strtotime($bkgModel->bkg_create_date . "+ {$step2Duration} MINUTE"));

		$currentDateTime = Filter::getDBDateTime();
		$pickupDiffSecs	 = Filter::getTimeDiffinSeconds($bkgModel->bkg_pickup_date);
		$step1DiffSecs	 = Filter::getTimeDiffinSeconds($step1Date);
		$step2DiffSecs	 = Filter::getTimeDiffinSeconds($step2Date);

		$pickupDiffMinutes = Filter::getTimeDiff($bkgModel->bkg_pickup_date);

		$minimumPickupDuration	 = Config::getMinGozoNowPickupDuration($bkgModel->bkg_booking_type);
		$timerMaxSeconds		 = 5 * 60;
		$bkgId					 = $bkgModel->bkg_id;
		$timerLog				 = [];
		$timerLogJson			 = BookingTrail::getGnowTimerLog($bkgId);
		if (!$timerLogJson)
		{
			$startTime = Filter::getDBDateTime();

			$timerLog		 = ['count' => 1, 'startTime' => $startTime];
			$timerLogJson	 = json_encode($timerLog);
			BookingTrail::updateGnowTimerLog($bkgId, $timerLogJson);
			if ($timerLog['count'] === 1)
			{
				$userInfo	 = UserInfo::getInstance();
				$desc		 = "Bid timer started";
				BookingLog::model()->createLog($bkgId, $desc, $userInfo, BookingLog::BID_TIMER_START, false);
			}
		}

		$timerLog	 = json_decode($timerLogJson, true);
		$timerCount	 = $timerLog['count'];

		$createDate		 = $timerLog['startTime'];
		$createDiffSecs	 = -1 * Filter::getTimeDiffinSeconds($createDate);

		$durationRemaining	 = $pickupDiffMinutes - $minimumPickupDuration; //;
		$step1DiffSecs		 = (($timerMaxSeconds - $createDiffSecs ) > 0) ? ($timerMaxSeconds - $createDiffSecs) : 0;
		$step1DiffSecs		 = max(min(($durationRemaining * 60), $step1DiffSecs), 0);
		$hash				 = Yii::app()->shortHash->hash($bkgId);
		$result				 = [
			'currentDateTime'	 => $currentDateTime,
			'pickupDiffSecs'	 => (int) $pickupDiffSecs,
			'createDiffSecs'	 => (int) $createDiffSecs,
			'step1DiffSecs'		 => (int) $step1DiffSecs,
			'step1Date'			 => $step1Date,
			'step2Date'			 => $step2Date,
			'hash'				 => $hash
		];
		return $result;
	}

	public function checkGozoNowEligibility()
	{

		$this->bkgPref->bkg_is_gozonow		 = 0;
		$response							 = $this->checkTime($this);
		$response->maxGNowAllowedDuration	 = 6 * 60;
		if ($response->isAllowed && ($response->pickDiff > $response->maxGNowAllowedDuration ||
				($this->bkg_agent_id > 0 && $this->bkg_agent_id <> 1249 ) )
		)
		{
			return $response;
		}

		$checkGozoNowEnabled = Config::checkGozoNowEnabled();
		$diff				 = floor((strtotime($this->bkg_pickup_date) - time()) / 60);

		$isApplicableBkgType = true;
		$isApplicableZone	 = true;

		if ($checkGozoNowEnabled && $this->bkg_agent_id == '' && $isApplicableBkgType && $isApplicableZone)
		{
			if ($this->bkg_vehicle_type_id > 0)
			{
				$svcModel	 = SvcClassVhcCat::model()->findByPk($this->bkg_vehicle_type_id);
				$tier		 = $svcModel->scv_scc_id;
			}
			$gzminTime					 = Config::getMinGozoNowPickupDuration($this->bkg_booking_type, $tier);
			$response->timeDifference	 = $gzminTime;
			if ($gzminTime < $diff)
			{
				$response->isAllowed			 = true;
				$this->bkgPref->bkg_is_gozonow	 = 1;
			}
		}
		return $response;
	}

	public function checkGozoNowExpiryTime()
	{
		$createTime		 = $this->bkg_create_date;
		$pickupTime		 = $this->bkg_pickup_date;
//WHERE (GREATEST(LEAST(DATE_ADD(bkg_create_date, INTERVAL 3 HOUR), DATE_SUB(bkg_pickup_date, INTERVAL 1 HOUR)),DATE_ADD(bkg_create_date, INTERVAL 30 MINUTE)) < NOW()) 
		$nowTime		 = DBUtil::getCurrentTime();
		$expiryTimeStamp = max(min(strtotime($createTime . "+ 3 HOUR"), strtotime($pickupTime . "- 1 HOUR")), strtotime($createTime . "+ 30 MINUTE"));
		$expiryTime		 = date(DateTimeFormat::$dateTimeOutcomeFormat, ($expiryTimeStamp));
		return $expiryTime;
	}

	public static function getGNowOfferList($bkgId, $listType = 'append', $viewType = 'html')
	{

		$bkgModel	 = Booking::model()->findByPk($bkgId);
//		$bkgId		 = $bkgModel->bkg_id;
		$tripId		 = $bkgModel->bkg_bcb_id;
		$hashval	 = Yii::app()->request->getParam('hash');
		$hash		 = Yii::app()->shortHash->hash($bkgId);

		if ($bkgModel->bkgPref->bkg_is_gozonow != 1)
		{
			throw new CHttpException(400, 'This booking does not comes under Gozo Now scenario.');
		}

		if (in_array($bkgModel->bkg_status, [9, 10, 8]))
		{
			$timerStat = [
				'stepValidation' => '0_0_1',
				'message'		 => 'The request is cancelled. Contact customer care'
			];

			return ['cnt' => 0, 'timerStat' => $timerStat];
			Yii::app()->end();
		}

		if (in_array($bkgModel->bkg_status, [6, 7]))
		{
			$timerStat = [
				'stepValidation' => '0_0_1',
				'message'		 => 'The booking is already processed'
			];

			return ['cnt' => 0, 'timerStat' => $timerStat];
			Yii::app()->end();
		}

		if ($hash != $hashval)
		{
//			throw new CHttpException(400, 'Invalid data');
		}

		$dataexist = BookingVendorRequest::getPreferredVendorbyBooking($tripId);
		if ($dataexist)
		{
			if ($viewType == 'html')
			{
				if ($bkgModel->bkg_drop_address == $bkgModel->bkgToCity->cty_garage_address)
				{
					$this->redirect(['booking/address', "bkgid" => $bkgId, 'hash' => $hash]);
				}

				$hash	 = Yii::app()->shortHash->hash($bkgId);
				$url	 = Yii::app()->createUrl('booking/review', ['bkgid' => $bkgId, 'hash' => $hash]);
//			$url	 = Yii::app()->createAbsoluteUrl('bkpn/' . $bkgId . '/' . $hash);
				return ['type' => 'url', 'url' => $url];
			}
			else
			{
				$timerStat = [
					'message' => 'An offer is already selected'
				];

				return ['cnt' => 0, 'timerStat' => $timerStat];
				Yii::app()->end();
			}
		}
		else
		{
			$bdIds		 = Yii::app()->request->getParam('bdids');
			$data		 = BookingVendorRequest::getGNowAcceptedData($tripId);
			$returnData	 = [];

			$rowCount = $data->getRowCount();

			$createDate		 = $bkgModel->bkg_create_date;
			BookingTrail::updateGnowTimerCustomerLastSync($bkgId);
			$timerStat		 = [];
			$cachekey		 = "getGNowAcceptedListHtml_{$tripId}_{$rowCount}";
			$timerLog		 = [];
			$timerLogJson	 = BookingTrail::getGnowTimerLog($bkgId);
			if (!$timerLogJson)
			{
				$startTime = Filter::getDBDateTime();

				$timerLog		 = ['count' => 1, 'startTime' => $startTime];
				$timerLogJson	 = json_encode($timerLog);
				BookingTrail::updateGnowTimerLog($bkgId, $timerLogJson);
				$timerCount		 = $timerLog['count'];
				if ($timerCount === 1)
				{

					$userInfo	 = UserInfo::getInstance();
					$desc		 = "Bid timer started";
					BookingLog::model()->createLog($bkgId, $desc, $userInfo, BookingLog::BID_TIMER_START, false);
				}
			}
			$bidrows = $data->readAll();
			$res	 = [];
//			$res = BookingVendorRequest::getBidTimerStat($bidrows, $timerLogJson);

			$returnTimer = '';

			$pickupDiffMinutes = Filter::getTimeDiff($bkgModel->bkg_pickup_date);

			$minimumPickupDuration	 = Config::getMinGozoNowPickupDuration($bkgModel->bkg_booking_type);
			$timerMaxSeconds		 = 5 * 60;

			$timerLog	 = json_decode($timerLogJson, true);
			$timerCount	 = $timerLog['count'];

			$createDate			 = $timerLog['startTime'];
			$createDiffSecs		 = -1 * Filter::getTimeDiffinSeconds($createDate);
			$currentDateTime	 = Filter::getDBDateTime();
			$pickupDiffSecs		 = Filter::getTimeDiffinSeconds($bkgModel->bkg_pickup_date);
			$durationRemaining	 = $pickupDiffMinutes - $minimumPickupDuration; //;
			$step1DiffSecs		 = (($timerMaxSeconds - $createDiffSecs ) > 0) ? ($timerMaxSeconds - $createDiffSecs) : 0;
			$step1DiffSecs		 = max(min(($durationRemaining * 60), $step1DiffSecs), 0);

			$res['stepValidation']	 = '1_1_1';
			$res['timerRunning']	 = '1';

			if ($step1DiffSecs > 0)
			{
				$res['timerRunning'] = 'timer1';
			}


			if ($res['timerRunning'] == 'timer1')
			{
//				$returnTimer = $this->renderPartial('gnowTimerStep1', ['model' => $bkgModel, 'step1DiffSecs' => $step1DiffSecs], true);
			}
			$timerStat							 = [
				'currentDateTime'	 => $currentDateTime,
				'pickupDiffMinutes'	 => (int) $pickupDiffMinutes,
				'dataHtml'			 => $returnTimer,
				'step1DiffSecs'		 => $step1DiffSecs,
				'durationRemaining'	 => $durationRemaining,
				'timerRunning'		 => $res['timerRunning'],
				'stepValidation'	 => $res['stepValidation']
			];
			$timerStat['startedAt']				 = $bkgModel->bkgTrail->bkg_gnow_created_at;
			$pickupDate							 = $bkgModel->bkg_pickup_date;
			$timerStat['preferredPickupTime']	 = $pickupDate;
			$timerStat['expireAt']				 = date('Y-m-d H:i:s', strtotime($pickupDate . " -$minimumPickupDuration MINUTE"));

			if ($durationRemaining < 0)
			{
//				BookingLog::gnowOfferSearchTimeout($bkgId, $timerStat);
			}
			if ($durationRemaining < 0)
			{
//				$timerStat = [
//					'stepValidation' => '0_0_1',
//					'message'		 => "The pickup time needs to be at least $minimumPickupDuration minutes from now"
//				];
//				return ['cnt' => 0, 'timerStat' => $timerStat];
//				Yii::app()->end();
			}


			if ($returnData == false && $rowCount > 0)
			{
				$dataList	 = BookingVendorRequest::getGNowAcceptedList($tripId, $viewType);
				$countBid	 = $rowCount;
				$data		 = $dataList;
				$bidIds		 = [];
				if ($data['success'])
				{
					$existingBidIds = explode(',', $bdIds);
					foreach ($data['data'] as $key => $value)
					{
//					$bidIds[] = $value['bvr_id'];
						$bidIdVal	 = 'bid' . '_' . $value['bvr_id'] . '_' . $value['bvr_bid_amount'];
						$bidIds[]	 = $bidIdVal;
						if ($listType == 'append')
						{
							if (in_array($bidIdVal, $existingBidIds))
							{
								continue;
							}
							$returnData[$bidIdVal] = $this->renderPartial('bkGZNowBidListTemplate', ['value' => $value], true);
						}
					}
					$bidArrDiff	 = array_diff($existingBidIds, $bidIds);
					$removeIds	 = [];
					if (sizeof($bidArrDiff) > 0 && $bdIds != '')
					{
//						$countBid = $countBid - sizeof($bidArrDiff);
						$removeIds = array_values($bidArrDiff);
					}
				}
				if ($viewType == 'html')
				{
					$timerStat['type'] = 'html';
					Yii::app()->cache->set($cachekey2, $returnData, 6000);
					return ['type' => 'html', 'dataHtml' => $returnData, 'cnt' => $countBid, 'bidIds' => $bidIds, 'removeIds' => $removeIds, 'timerStat' => $timerStat];
				}
				return ['success' => $data['success'], 'cnt' => $countBid, 'timerStat' => $timerStat, 'dataList' => $dataList];
			}

			return ['cnt' => $rowCount, 'timerStat' => $timerStat];
		}
	}

	/**
	 * 
	 * @param int $bidId
	 * @return ReturnSet
	 * @throws CHttpException
	 */
	public function proceedGNowOfferDeny($bidId)
	{

		$bookingId	 = $this->bkg_id;
		/** @var BookingVendorRequest $bvrModel */
		$bvrModel	 = BookingVendorRequest::model()->findByPk($bidId);
		$bkgId		 = $bvrModel->bvr_booking_id;
		$returnSet	 = new ReturnSet();
		$transaction = DBUtil::beginTransaction();

		try
		{
			if ($bookingId != $bkgId)
			{
				throw new Exception('Invalid booking data  ', ReturnSet::ERROR_INVALID_DATA);
			}
			if ($this->bkg_status != 2)
			{
				$error = ['Already processed '];
				throw new Exception(CJSON::encode($error), ReturnSet::ERROR_VALIDATION);
			}
			if ($this->bkgPref->bkg_is_gozonow != 1)
			{
				$error = ['This booking does not comes under Gozo Now scenario.'];
				throw new Exception(CJSON::encode($error), ReturnSet::ERROR_VALIDATION);
			}
			$success	 = false;
			$dataexist	 = BookingVendorRequest::getPreferredVendorbyBooking($this->bkg_bcb_id);
			if ($dataexist)
			{
				$error = ['Cab is already selected. Cannot reject the offer'];
				throw new Exception(CJSON::encode($error), ReturnSet::ERROR_VALIDATION);
			}
			if (!$dataexist)
			{
				$vendorid	 = $bvrModel->bvr_vendor_id;
				$tripId		 = $bvrModel->bvr_bcb_id;
				$amount		 = $bvrModel->bvr_bid_amount;
				$success	 = BookingVendorRequest::deactivateOffer($vendorid, $tripId);
				if ($success)
				{
					$vendorName	 = $bvrModel->bvrVendor->vnd_name;
					$userInfo	 = UserInfo::getInstance();
					$desc		 = "Customer rejected Gozo now offer from $vendorName, amount: &#x20B9;$amount";
					BookingLog::model()->createLog($bkgId, $desc, $userInfo, BookingLog::GOZONOW_CUSTOMER_REJECTED_OFFER, false);

					$model		 = Booking::model()->findByPk($bkgId);
					$notify		 = new Stub\common\Notification();
					$title		 = "Customer declined offer for trip: $tripId";
					$notify->setGNowNotify($model, $title);
					$payLoadData = json_decode(json_encode($notify->payload), true);
					$message	 = $notify->message;

					BookingCab::gnowNotifyVendor($vendorid, $payLoadData, $message, $title);
					$returnSet->setStatus(true);
				}
			}
			DBUtil::commitTransaction($transaction);
		}
		catch (Exception $e)
		{
			DBUtil::rollbackTransaction($transaction);
			$returnSet = ReturnSet::setException($e);
		}
		return $returnSet;
	}

	public static function cancelGNow($bkgId)
	{

		$model = booking::model()->findByPk($bkgId);
		if (!$model)
		{
			throw new CHttpException(400, 'This booking does not exist.');
		}
		$reasonText	 = 'Booking cancelled by user. Reconfirm not received';
		$desc		 = 'Booking cancelled by user. Reconfirm not received';
		$eventId	 = BookingLog::BOOKING_CANCELLED;
		$userInfo	 = UserInfo::getInstance();

		$success = Booking::model()->canBooking($model->bkg_id, $reasonText, 1, $userInfo);
		if ($success)
		{
			$oldModel = $model;

			$params['blg_booking_status'] = $model->bkg_status;
//			$userInfo						 = UserInfo::getInstance();
			BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel, $params);
		}
		return $success;
	}

	public static function getAutoFurBookingCancellationByHighPrice()
	{
		$sql = "SELECT 
				booking.bkg_id,
				booking.bkg_cancel_delete_reason,
				booking_user.bkg_user_id,
				booking_user.bkg_country_code,
				booking_user.bkg_contact_no
				FROM booking
				INNER JOIN booking_cab  ON booking_cab.bcb_id=booking.bkg_bcb_id
				INNER JOIN booking_user  ON booking_user.bui_bkg_id=booking.bkg_id
				INNER JOIN booking_trail ON booking_trail.btr_bkg_id=booking.bkg_id
				WHERE 1 
				AND booking.bkg_agent_id IS NULL
				AND bkg_cancel_id=5
				AND btr_cancel_date BETWEEN CONCAT(DATE_SUB(CURDATE(),INTERVAL 1 DAY), ' 00:00:00') AND CONCAT(DATE_SUB(CURDATE(),INTERVAL 1 DAY), ' 23:59:59')
				AND bkg_status IN (10,9)";
		return DBUtil::query($sql, DBUtil::SDB());
	}

	/**
	 * 
	 * @param type $tripId
	 * @return CDbDataReader
	 */
	public static function getByTripId($tripId)
	{
		$params = ["tripId" => $tripId];

		$dataSql = "SELECT * FROM booking bkg  				 
				WHERE bkg.bkg_bcb_id= :tripId AND bkg.bkg_status NOT IN (1,7,8,9,10,11,12,13,14,15)";
		return DBUtil::query($dataSql, DBUtil::SDB(), $params);
	}

	public static function checkSelfAssignment($bkgid)
	{
		$success = false;
		$csrID	 = UserInfo::getUserId();
		$params	 = ['csrID' => $csrID, 'bkgId' => $bkgid];
		$sql	 = "SELECT  scq_id
				FROM `service_call_queue`
				WHERE `scq_follow_up_queue_type` IN (19,33)
				AND `scq_status`  IN (2)
				AND scq_assigned_uid=:csrID
				AND `scq_active` = 1
				AND `scq_related_bkg_id` =:bkgId";
		$return	 = DBUtil::queryScalar($sql, DBUtil::MDB(), $params);
		if ($return != '')
		{
			$success = true;
		}
		return $success;
	}

	public static function checkExitingAssigment($bkgid)
	{
		$success = false;
		$params	 = ['bkgId' => $bkgid];
		$sql1	 = "SELECT  scq_assigned_uid
					FROM `service_call_queue`
					WHERE `scq_follow_up_queue_type` IN (19,33)
					AND `scq_status` IN (1,3)
					AND `scq_active` = 1
					AND `scq_related_bkg_id` =:bkgId
					ORDER BY scq_id DESC";
		$return	 = DBUtil::queryScalar($sql1, DBUtil::MDB(), $params);
		if ($return == '' || $return == null)
		{
			$success = true;
		}
		return $success;
	}

	public static function checkSelfReassignment($bkgid, $bkgPickupDate = "")
	{
		$success			 = false;
		$selfAssignedId		 = self::checkSelfAssignment($bkgid);
		$existingAssignedId	 = self::checkExitingAssigment($bkgid);
		$checkTimeAccess	 = $bkgPickupDate != "" ? self::checkTimeAccess($bkgPickupDate) : false;
		if (($selfAssignedId && $existingAssignedId) || $checkTimeAccess)
		{
			$success = true;
		}
		return $success;
	}

	public static function getBookingByCityZoneWise($cty, $type)
	{
		$where	 = $type == 0 ? " AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) " : " AND booking.bkg_booking_type  IN (4,9,10,11,12,14,8,15,16) ";
		$sql	 = "SELECT 
				bkg_id,
				bkg_booking_type,
				bpr_assignment_id,
				2 AS type
				FROM booking_pref		
                JOIN booking ON booking.bkg_id = booking_pref.bpr_bkg_id
				JOIN booking_cab ON booking.bkg_bcb_id = booking_cab.bcb_id
				JOIN cities  ON cities.cty_id = booking.bkg_from_city_id AND cty_active=1 AND  booking.bkg_from_city_id=:cty
				JOIN zone_cities ON zone_cities.zct_cty_id = booking.bkg_from_city_id AND zone_cities.zct_active=1
				JOIN zones ON zones.zon_id = zone_cities.zct_zon_id  AND zones.zon_active=1
				LEFT JOIN service_call_queue ON service_call_queue.scq_related_bkg_id=booking.bkg_id AND scq_follow_up_queue_type IN (19,33,32)  AND scq_status IN (1,3)
				WHERE 1 
				AND bkg_is_fbg_type=0
				AND ( bpr_skip_csr_assignment IS NULL OR (bpr_skip_csr_assignment IS NOT NULL AND bpr_skip_csr_assignment<=NOW()))
				AND bpr_askmanual_assignment=0
				AND bkg_pickup_date >= NOW()
				$where
				AND booking_pref.bpr_assignment_level IN (0,1)
				AND bkg_status=2 
				AND scq_id IS NULL
				AND (bkg_manual_assignment=1 OR  bkg_critical_assignment=1)
                GROUP BY booking.bkg_id
				ORDER BY  bkg_critical_assignment DESC, bkg_manual_assignment DESC, bkg_critical_score DESC,booking.bkg_pickup_date ASC,bkg_create_date ASC LIMIT 0,5";
		return DBUtil::query($sql, DBUtil::MDB(), ['cty' => $cty]);
	}

	public static function getBookingDestinationZoneByCityZoneWise($cty, $type)
	{
		$where	 = $type == 0 ? " AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) " : " AND booking.bkg_booking_type  IN (4,9,10,11,12,14,8,15,16) ";
		$sql	 = "SELECT 
				GROUP_CONCAT(DISTINCT zfr.zon_id SEPARATOR ',') AS fromZones, 
				GROUP_CONCAT(DISTINCT zto.zon_id SEPARATOR ',') AS toZones
				FROM booking_pref		
				JOIN booking ON booking.bkg_id = booking_pref.bpr_bkg_id
				JOIN booking_cab ON booking.bkg_bcb_id = booking_cab.bcb_id
				JOIN cities  cfr  ON cfr.cty_id = booking.bkg_from_city_id AND cfr.cty_active=1  AND  booking.bkg_from_city_id=:cty
				JOIN zone_cities zcfr ON zcfr.zct_cty_id = cfr.cty_id AND zcfr.zct_active=1
				JOIN zones zfr ON zfr.zon_id = zcfr.zct_zon_id  AND zfr.zon_active=1
				JOIN cities ctyto  ON ctyto.cty_id = booking.bkg_to_city_id AND ctyto.cty_active=1
				JOIN zone_cities zcto ON zcto.zct_cty_id = ctyto.cty_id AND zcto.zct_active=1
				JOIN zones zto ON zto.zon_id = zcto.zct_zon_id  AND zto.zon_active=1				
				WHERE 1 
				$where
				AND	(bkg_manual_assignment=1 OR bkg_critical_assignment=1) 
				AND bkg_pickup_date >= NOW() 
				AND bkg_status=2";
		return DBUtil::queryRow($sql, DBUtil::MDB(), ['cty' => $cty]);
	}

	public static function getBookingSourceZoneWise($fromZones, $toZones, $type)
	{
		$where	 = $type == 0 ? " AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) " : " AND booking.bkg_booking_type  IN (4,9,10,11,12,14,8,15,16) ";
		$sql	 = "SELECT 
				DISTINCT bkg_id,
				bkg_booking_type,
				bpr_assignment_id,
				2 AS type
				FROM booking_pref		
				JOIN booking ON booking.bkg_id = booking_pref.bpr_bkg_id
				JOIN booking_cab ON booking.bkg_bcb_id = booking_cab.bcb_id
				JOIN cities  cfr  ON cfr.cty_id = booking.bkg_from_city_id AND cfr.cty_active=1 
				JOIN zone_cities zcfr ON zcfr.zct_cty_id = cfr.cty_id AND zcfr.zct_active=1
				JOIN zones zfr ON zfr.zon_id = zcfr.zct_zon_id  AND zfr.zon_active=1   AND zfr.zon_id IN ($toZones)  
				JOIN cities ctyto  ON ctyto.cty_id = booking.bkg_to_city_id AND ctyto.cty_active=1
				JOIN zone_cities zcto ON zcto.zct_cty_id = ctyto.cty_id AND zcto.zct_active=1
				JOIN zones zto ON zto.zon_id = zcto.zct_zon_id  AND zto.zon_active=1  AND zto.zon_id IN ($fromZones)
				LEFT JOIN service_call_queue ON service_call_queue.scq_related_bkg_id=booking.bkg_id AND scq_follow_up_queue_type IN (19,33,32)  AND scq_status IN (1,3)
				WHERE 1 
				AND bkg_is_fbg_type=0
				AND ( bpr_skip_csr_assignment IS NULL OR (bpr_skip_csr_assignment IS NOT NULL AND bpr_skip_csr_assignment<=NOW()))
				AND bpr_askmanual_assignment=0
				$where
				AND bkg_pickup_date >= NOW() 
				AND booking_pref.bpr_assignment_level IN (0,1)
				AND bkg_status=2
				AND scq_id IS NULL
				AND (bkg_manual_assignment=1 OR bkg_critical_assignment=1)
				GROUP BY booking_cab.bcb_id
				ORDER BY  bkg_critical_assignment DESC, bkg_manual_assignment DESC, bkg_critical_score DESC,booking.bkg_pickup_date ASC,bkg_create_date ASC LIMIT 0,5";
		return DBUtil::query($sql, DBUtil::MDB());
	}

	public static function checkDTMAssignmentLead($bkgId)
	{
		try
		{
			$success	 = false;
			$sql		 = "SELECT stt_zone
				FROM `booking_pref`
				INNER JOIN booking ON booking.bkg_id = bpr_bkg_id
				INNER JOIN  cities on bkg_from_city_id = cty_id
				INNER JOIN  states on cty_state_id = stt_id
				WHERE 1
				AND bkg_id=:bkgId
				AND bkg_active=1
				AND booking.bkg_status=2
				AND (bpr_assignment_level IN (2,3) OR  bkg_critical_assignment=1) ";
			$zoneType	 = DBUtil::queryScalar($sql, DBUtil::MDB(), ['bkgId' => $bkgId]);
			if ($zoneType > 0)
			{
				$success = true;
			}
		}
		catch (Exception $ex)
		{
			$success = false;
		}
		return $success;
	}

	/**
	 * 
	 * @param type $model
	 * @return boolean
	 */
	public static function revisedPartnerCommission($model, $jsonObj, $totalAmount)
	{
		try
		{
			$commissionVal									 = $jsonObj->fare->mojoFare - $totalAmount;
			$model->bkgInvoice->bkg_partner_extra_commission = round($commissionVal * 0.9);

			$baseAmount							 = $model->bkgInvoice->bkg_base_amount;
			$model->bkgInvoice->bkg_base_amount	 = $jsonObj->fare->totalAmount;
			$model->calAgentCommission();
			$model->bkgInvoice->bkg_base_amount	 = $baseAmount;
			$model->bkgInvoice->calculateTotal();
			$model->bkgInvoice->save();
			$success							 = true;
		}
		catch (Exception $ex)
		{
			$success = false;
		}
		return $success;
	}

	public static function getTripDetailsForDriver($tripId, $status = NULL, $driverId = 0, $isApp = 0)
	{

		if ($tripId == "" || $tripId == null)
		{
			throw new Exception("Required data missing", ReturnSet::ERROR_INVALID_DATA);
		}
		$uberAgentId = Yii::app()->params['uberAgentId'];
		$condition	 = ($status != NULL) ? "6,7" : "2, 3, 5";
		$bsmModel	 = BookingSmartmatch::model()->find('bsm_bcb_id=:id', ['id' => $tripId]);
		if ($bsmModel != NUll)
		{
			$from	 = "booking_smartmatch bsm
					LEFT JOIN `booking` bkg ON (bkg.bkg_id=bsm.bsm_upbooking_id OR bkg.bkg_id=bsm.bsm_downbooking_id)
					LEFT JOIN booking_cab bcb ON bcb.bcb_id = bsm.bsm_bcb_id";
			$where	 = "bsm.bsm_bcb_id = $tripId AND bkg.bkg_status IN($condition)";
		}
		else
		{
			$from	 = "`booking` bkg
					  LEFT JOIN booking_cab bcb ON bkg.bkg_bcb_id = bcb.bcb_id";
			$where	 = "bkg.bkg_bcb_id = $tripId AND bkg.bkg_status IN($condition)";
		}

		$bookingCab		 = BookingCab::model()->findByPk($tripId);
		$bookingCabType	 = $bookingCab->bcb_trip_type;
		if ($bookingCabType == 0)
		{
			$group = "GROUP BY vhc.vhc_id,bkg.bkg_id";
		}
		else
		{
			$group = "GROUP BY bkg.bkg_id";
		}
		$vndDriverApp	 = 0;
		$vndPenaltyCount = 0;
		$vndStickyScr	 = 0;

		$qry = "SELECT DISTINCT bkg.bkg_id,bkg.bkg_bcb_id as totalTripDuration,bkg.bkg_booking_type,
						IF(bkg_flexxi_type=1,true,false) isPromoter,
						IF(bkg_flexxi_type IN(1,2),true,false) isFlexxi,
						IF(bkgaddinfo.bkg_no_person > 0,bkgaddinfo.bkg_no_person,vct.vct_capacity) AS seatingCapacity,
						IF(bkgaddinfo.bkg_num_large_bag > 0,bkgaddinfo.bkg_num_large_bag,vct.vct_big_bag_capacity) AS bigBagCapacity,
						IF(bkgaddinfo.bkg_num_small_bag > 0,bkgaddinfo.bkg_num_small_bag,vct.vct_small_bag_capacity) AS bagCapacity,
						bcb.bcb_id,bkg.bkg_booking_id,
						bkg.bkg_return_date, bkg.bkg_modified_on,
						bkg.bkg_pickup_address,
						bkg.bkg_drop_address,
						ct1.cty_display_name AS from_city,
						ct2.cty_display_name AS to_city,
						bkguser.bkg_user_fname AS bkg_user_name,
						bkg.bkg_trip_distance,
						vht.vct_desc AS bkg_cab_assigned,
						bkg.bkg_status,
						bkgaddinfo.bkg_no_person,
						bkguser.bkg_user_lname,
						bkg.bkg_pickup_date,
						bkguser.bkg_country_code,
						bkginv.bkg_night_pickup_included,
						bkginv.bkg_night_drop_included,
						bkginv.bkg_rate_per_km_extra,
						bkginv.bkg_extra_km_charge,
						bkginv.bkg_extra_km,
						bkginv.bkg_extra_toll_tax,
						bkginv.bkg_extra_state_tax,
						bkginv.bkg_parking_charge,
						bkginv.bkg_driver_allowance_amount,
						phn.phn_phone_no AS bkg_driver_number,
						drv.drv_name AS bkg_driver_name,
						vhc.vhc_number AS bkg_cab_number,
						bkg.bkg_trip_duration,
						IF(bkg.bkg_pickup_date <= DATE_ADD(NOW(), INTERVAL 240 MINUTE), bkguser.bkg_contact_no,'') AS bkg_contact_no,
						bkguser.bkg_alt_contact_no as bkg_alternate_contact,
						bkguser.bkg_user_email,
						bkgtrack.bkg_ride_start,
						bkgtrack.bkg_ride_complete,
						vehicle_types.vht_make,
						vehicle_types.vht_model,
						IF(bkgtrack.bkg_ride_start>0 AND DATE_ADD(bkg.bkg_pickup_date , INTERVAL (bkg.bkg_trip_duration/2) MINUTE) < NOW() ,bkgtrack.bkg_ride_complete,1) as bkg_ride_complete_old,
						CONCAT(
						CASE
             WHEN     (TIMESTAMPDIFF(MINUTE,NOW(), bkg.bkg_pickup_date) > 0) AND
						((TIMESTAMPDIFF(MINUTE,NOW(),DATE_ADD(bkg.bkg_pickup_date, INTERVAL bkg.bkg_trip_duration MINUTE))) > 0)
             THEN 0
						WHEN (TIMESTAMPDIFF(MINUTE,NOW(), bkg.bkg_pickup_date) < 0)
                  AND ((TIMESTAMPDIFF( MINUTE,NOW(),DATE_ADD(bkg.bkg_pickup_date,INTERVAL bkg.bkg_trip_duration MINUTE))) > 0)
             THEN 1
						WHEN (TIMESTAMPDIFF(MINUTE,NOW(), bkg.bkg_pickup_date) < 0)
                  AND ((TIMESTAMPDIFF(MINUTE,NOW(),DATE_ADD(bkg.bkg_pickup_date,INTERVAL bkg.bkg_trip_duration MINUTE))) < 0)
             THEN 2
						ELSE 0
						END)
						AS is_start_overDue,
						bkginv.bkg_total_amount,
						bkginv.bkg_advance_amount,
						bkginv.bkg_due_amount,
						bkginv.bkg_service_tax,
						bkginv.bkg_service_tax_rate,
						bkginv.bkg_is_airport_fee_included as isAirportEntryFeeIncluded,
						bkginv.bkg_airport_entry_fee,
						vct.vct_desc AS bkg_cab_type,
						bkg.bkg_booking_type,
						bkg.bkg_instruction_to_driver_vendor,
						scc.scc_desc, scc.scc_vnd_desc,
						scc.scc_id,
						vhc.vhc_id,
						drv.drv_id,
						bkginv.bkg_is_toll_tax_included,
						IF(bkg.bkg_return_date IS NULL, DATE_ADD(bkg.bkg_pickup_date, INTERVAL bkg.bkg_trip_duration MINUTE), bkg.bkg_return_date) AS trip_completion_time,
						bkginv.bkg_is_state_tax_included,
						bkg.bkg_reconfirm_flag as bkg_reconfirm_id,
						bkgtrack.bkg_is_no_show,
			bpr.bkg_duty_slip_required is_duty_slip_required, bpr.bkg_driver_app_required is_driver_app_required,
			bpr.bkg_cng_allowed AS is_cng_allowed ,bpr.bkg_driver_app_required,
			IF(bpr.bkg_is_gozonow IN(1,2),1,0) isGozoNow,
						vct.vct_label cab_model,
						vht.vct_label cab_model_assigned,
						'0' AS show_total_amount,
						rtg.rtg_vendor_customer,
						rtg.rtg_vendor_csr,
						rtg.rtg_vendor_review,
						bkg.bkg_pickup_date as brt_pickup_datetime,
						bkg.bkg_trip_duration as brt_trip_duration,
						IF(bkg.bkg_pickup_lat > 0, bkg.bkg_pickup_lat, ct1.cty_lat) AS pickup_lat,
						IF(bkg.bkg_pickup_long > 0, bkg.bkg_pickup_long, ct1.cty_long) AS pickup_long,
						IF(bkg.bkg_dropup_lat > 0, bkg.bkg_dropup_lat, ct2.cty_lat) AS drop_lat,
						IF(bkg.bkg_dropup_long > 0, bkg.bkg_dropup_long, ct2.cty_long) AS drop_long,
						bkg.bkg_from_city_id as brt_from_city_id, bkg.bkg_to_city_id as brt_to_city_id,
						bpr.bpr_vnd_ctrl_trip AS hasTripCtrl,
						IF(bkg.bkg_agent_id > 0, 1, 0) AS is_agent,
						IF(bkg.bkg_agent_id =$uberAgentId,'UBER',IF(bkg.bkg_agent_id is null,'','B2B')) As agent_name,
						IF( vct.vct_id IN(5, 6), '1', '0' ) AS is_assured,
						if(bkgtrack.bkg_is_trip_verified=1,2,bpr.bkg_trip_otp_required) bpr_trip_otp_required,
						bkg.bkg_booking_type,
						bcb.bcb_vendor_amount AS max_bid_amount,(bcb.bcb_vendor_amount * 0.7) AS min_bid_amount,
						
						bcb.bcb_vendor_amount AS vendor_ammount,
						scc.scc_label AS cab_lavel
						FROM
						$from
						
			LEFT JOIN booking_user bkguser ON bkg.bkg_id = bkguser.bui_bkg_id
			LEFT JOIN booking_add_info bkgaddinfo ON bkg.bkg_id = bkgaddinfo.bad_bkg_id
			INNER JOIN booking_invoice bkginv ON bkg.bkg_id = bkginv.biv_bkg_id
			INNER JOIN booking_track bkgtrack ON bkg.bkg_id = bkgtrack.btk_bkg_id
			INNER JOIN booking_trail bkgtrail ON bkg.bkg_id = bkgtrail.btr_bkg_id
			INNER JOIN booking_pref bpr ON bkg.bkg_id = bpr.bpr_bkg_id
			
						LEFT JOIN cities ct1 ON ct1.cty_id = bkg.bkg_from_city_id
						LEFT JOIN cities ct2 ON ct2.cty_id = bkg.bkg_to_city_id
						LEFT JOIN zone_cities fzc ON fzc.zct_cty_id=ct1.cty_id AND fzc.zct_active=1
						LEFT JOIN zone_cities tzc ON tzc.zct_cty_id=ct2.cty_id AND tzc.zct_active=1
			LEFT JOIN vendors agt ON agt.vnd_id = bcb.bcb_vendor_id
			LEFT JOIN `vehicles` vhc ON vhc.vhc_id = bcb.bcb_cab_id
						LEFT JOIN vcv_cat_vhc_type vcvt ON vcvt.vcv_vht_id = vhc.vhc_type_id
						LEFT JOIN vehicle_category vht ON vht.vct_id = vcvt.vcv_vct_id
						LEFT JOIN `drivers` drv ON drv.drv_id = bcb.bcb_driver_id and drv.drv_id = drv.drv_ref_code
						LEFT JOIN contact_profile cp ON cp.cr_is_driver = drv.drv_id and cp.cr_status =1
						LEFT JOIN contact ctt on ctt.ctt_id = cp.cr_contact_id and ctt.ctt_id = ctt.ctt_ref_code and ctt.ctt_active=1
						LEFT JOIN contact_phone phn ON phn.phn_contact_id=ctt.ctt_id AND phn.phn_is_primary=1 AND phn.phn_active=1
						LEFT JOIN svc_class_vhc_cat scv ON bkg.bkg_vehicle_type_id = scv.scv_id
						LEFT JOIN `vehicle_category` vct ON scv.scv_vct_id = vct.vct_id
						LEFT JOIN service_class scc ON scc.scc_id = scv.scv_scc_id
						LEFT JOIN vehicle_types ON vehicle_types.vht_id = scv.scv_model
			LEFT JOIN `ratings` rtg ON bkg.bkg_id = rtg.rtg_booking_id
			LEFT JOIN `agents` agts ON bkg.bkg_agent_id = agts.agt_id
		WHERE    $where $group
		ORDER BY bkg.bkg_pickup_date, bkg.bkg_flexxi_type DESC";

		Logger::create("Query:- " . $qry, CLogger::LEVEL_INFO);
		$recordset = DBUtil::queryAll($qry);

		foreach ($recordset as $key => $val)
		{

			$bkgs									 = BookingCab::model()->getBkgIdByTripId($val['totalTripDuration']);
			$timeDuration							 = Filter::getTimeDurationbyMinute($val['bkg_trip_duration']);
			$tripDay								 = Filter::getTripDayByRoute(implode(",", $bkgs));
			$tot									 = $timeDuration . '(' . $tripDay . 'day)';
			$recordset[$key]['totalTripDuration']	 = $tot;
			if ($val['bkg_contact_no'])
			{
				$bkgModel							 = Booking::model()->findByPk($bookingCab->bcb_bkg_id1);
				$timeDiff							 = Filter::getTimeDiff($bkgModel->bkg_pickup_date, null);
				$custNo								 = BookingPref::getCustomerNumber($bkgModel, $val['bkg_contact_no']);
				$custNo								 = (($timeDiff) < 120) ? $val['bkg_contact_no'] : $custNo;
				$recordset[$key]['bkg_contact_no']	 = $custNo;
			}


			if ($val['agent_name'] == 'UBER')
			{
				$recordset[$key]['bkg_pickup_date'] = BookingCab::model()->getPickupDateTime("Y-m-d H:i:s", $recordset[$key]['bkg_pickup_date'], $uberAgentId);
			}
			if ($val['bkg_id'] > 0)
			{
				$recordset[$key]['bkg_instruction_to_driver_vendor'] = Booking::model()->getFullInstructionsByid($val['bkg_id'], $isApp);
				$recordset[$key]['bkg_flight_no']					 = $bkgModel->bkgAddInfo->bkg_flight_no;
			}
			if ($val['bkg_agent_id'] > 0 && $val['is_duty_slip_required'] == 0)
			{
				$agentModel									 = Agents::model()->findByPk($val['bkg_agent_id']);
				$recordset[$key]['is_duty_slip_required']	 = $agentModel->agt_duty_slip_required;
			}
			if ($val['bkg_agent_id'] > 0 && $val['is_driver_app_required'] == 0)
			{
				$agentModel									 = Agents::model()->findByPk($val['bkg_agent_id']);
				$recordset[$key]['is_driver_app_required']	 = $agentModel->agt_driver_app_required;
			}
			if ($val['is_cng_allowed'] > 0)
			{
				$recordset[$key]['is_cng_allowed'] = $val['is_cng_allowed'];
			}
			if ($val['bkg_driver_app_required'] > 0)
			{
				$recordset[$key]['bkg_driver_app_required'] = (int) $val['bkg_driver_app_required'];
			}
			$recordset[$key]['seatingCapacity']				 = (int) $val['seatingCapacity'];
			$recordset[$key]['bagCapacity']					 = (int) $val['bagCapacity'];
			$recordset[$key]['bigBagCapacity']				 = (int) $val['bigBagCapacity'];
			$recordset[$key]['hasTripCtrl']					 = (int) $val['hasTripCtrl'];
			$recordset[$key]['bkg_driver_allowance_amount']	 = (int) $val['bkg_driver_allowance_amount'];
			$recordset[$key]['bkg_parking_charge']			 = (int) $val['bkg_parking_charge'];
			$recordset[$key]['bpr_trip_otp_required']		 = (int) $val['bpr_trip_otp_required'];
			$recordset[$key]['bkg_route_name']				 = BookingRoute::getRouteCityFullName($val['bkg_id']);
			$sccVndDesc										 = json_decode($recordset[$key]['scc_vnd_desc']);
			if (in_array($recordset[$key]['bkg_booking_type'], [2, 3]))
			{
				$pickupdata						 = BookingRoute::model()->getPickupLatLngByBkgId($val['bkg_id']);
				$recordset[$key]['pickup_lat']	 = $pickupdata['pickup_lat'];
				$recordset[$key]['pickup_long']	 = $pickupdata['pickup_long'];
			}
			$recordset[$key]['isAirportEntryFeeIncluded']		 = (int) $val['isAirportEntryFeeIncluded'];
			$recordset[$key]['bkg_instruction_to_driver_vendor'] = (($recordset[$key]['scc_id'] != ServiceClass::CLASS_ECONOMIC) ? (($recordset[$key]['bkg_instruction_to_driver_vendor'] != '') ? $recordset[$key]['bkg_instruction_to_driver_vendor'] . ", " . implode(", ", $sccVndDesc) : implode(", ", $sccVndDesc)) : ($recordset[$key]['bkg_instruction_to_driver_vendor']));
			$hashBkgId											 = Yii::app()->shortHash->hash($val['bkg_id']);
			$hashDrvId											 = Yii::app()->shortHash->hash($driverId);
			$recordset[$key]['bkvn_url']						 = Yii::app()->params['fullBaseURL'] . '/bkvn/' . $hashBkgId . '/' . $hashDrvId;

			if ($recordset[$key]['bkg_status'] < 5)
			{
				$recordset[$key]['bkg_pickup_address']	 = 'xxxxxxx' . ', ' . $recordset[$key]['from_city'];
				$recordset[$key]['bkg_drop_address']	 = 'xxxxxxx' . ', ' . $recordset[$key]['to_city'];
				$recordset[$key]['pickup_lat']			 = round($recordset[$key]['pickup_lat'], 2);
				$recordset[$key]['pickup_long']			 = round($recordset[$key]['pickup_long'], 2);
			}
			else
			{
				$recordset[$key]['bkg_pickup_address']	 = $recordset[$key]['bkg_pickup_address'];
				$recordset[$key]['bkg_drop_address']	 = $recordset[$key]['bkg_drop_address'];
				$recordset[$key]['pickup_lat']			 = $recordset[$key]['pickup_lat'];
				$recordset[$key]['pickup_long']			 = $recordset[$key]['pickup_long'];
			}

			$customerShow = Filter::customerDataShow($recordset[$key]['bkg_pickup_date']);
			if ($customerShow < 1)
			{
				$recordset[$key]['bkg_user_name']	 = "";
				$recordset[$key]['bkg_user_lname']	 = "";
				$recordset[$key]['bkg_contact_no']	 = "";
				$recordset[$key]['bkg_user_email']	 = "";
			}

			Logger::create("IS OVER DUE ==>" . $recordset[$key]['is_start_overDue'] . " bkgID ==>" . $recordset[$key]['bkg_id']);
		}
		return $recordset;
	}

	/**
	 * 
	 * @param type $bkgId
	 */
	public static function sendInvoice($bkgId)
	{
		BookingScheduleEvent::add($bkgId, BookingScheduleEvent::SEND_BOOKING_INVOICE, "Send booking invoice");
	}

	/**
	 * @param $bkgId
	 */
	public static function driverAppUsagePenalty($bkgId)
	{
		BookingScheduleEvent::add($bkgId, BookingScheduleEvent::DRIVER_APP_PENALTY, "Calculate & apply driver app usage penalty");
	}

	/**
	 * 
	 * @param type $contactemailphone
	 * @return type
	 */
	public static function getConfirmBookingByContact($contactemailphone = '')
	{
		$params	 = ['contactemailphone' => $contactemailphone];
		$sql	 = "SELECT
					COUNT(*)
				FROM
					booking
				INNER JOIN booking_user ON booking.bkg_id = booking_user.bui_bkg_id
				INNER JOIN booking_trail ON booking.bkg_id = booking_trail.btr_bkg_id
				WHERE
					booking.bkg_status IN(2, 3, 5) 
					AND (booking.bkg_pickup_date BETWEEN DATE_SUB(NOW(), INTERVAL 3 DAY) AND DATE_ADD(NOW(), INTERVAL 3 DAY) OR  booking_trail.bkg_confirm_datetime > DATE_SUB(NOW(), INTERVAL 24 HOUR))
					AND((booking_user.bkg_user_email <> '' AND booking_user.bkg_user_email = '$contactemailphone') 
					OR(booking_user.bkg_contact_no <> '' AND booking_user.bkg_contact_no = '$contactemailphone'))";

		return DBUtil::command($sql, DBUtil::SDB())->queryScalar($params);
	}

	/**
	 * 
	 * @param Booking $model
	 * @return boolean
	 */
	public static function RefundFromWalletToSource($model)
	{
		$success = false;
		if (!$model)
		{
			return false;
		}
		$bkgId		 = $model->bkg_id;
		$userId		 = $model->bkgUserInfo->bkg_user_id;
		$transArr	 = AccountTransDetails::getWalletTransactionByBooking($bkgId);
		if ($model->bkg_status == 9)
		{
			$onlineRefundable = PaymentGateway::getTotalOnlinePaymentByBooking($bkgId, $model->bkg_status);
		}
		$walletBalance						 = UserWallet::getBalance($userId);
		$amountRefundableFromWalletToUser	 = min([$walletBalance, ($transArr['refundedToWallet'] | 0), ($onlineRefundable['balance'] )]);
		$amount								 = $amountRefundableFromWalletToUser;
		if ($amount > 0)
		{
			$amountRefundable	 = max([0, min([$walletBalance, $onlineRefundable['balance']], $amount)]);
			$amount				 = $amountRefundable;
			if (!$onlineRefundable || $amount > $walletBalance || $amount <= 0)
			{
				return false;
			}
			$entityArr['entity_type']	 = 1;
			$entityArr['entity_id']		 = $userId;
			$transaction				 = DBUtil::beginTransaction();
			$userInfo					 = UserInfo::getInstance();
			Logger::create("BookingControler::Pgrefund bkgId:$bkgId walletBalance:{$walletBalance} onlineRefundable:{$onlineRefundable['balance']} amountRefundable:{$amountRefundable} ", CLogger::LEVEL_INFO);
			PaymentGateway::refundToPGByBookingid($bkgId, $amount, $userInfo);
			DBUtil::commitTransaction($transaction);
		}
	}

	public static function checkVendor($pickupDate, $bookingId)
	{
		$success		 = false;
		$currDateTime	 = DBUtil::getCurrentTime();
		$queueId		 = ServiceCallQueue::TYPE_BAR . "," . ServiceCallQueue::TYPE_AIRPORT_DAILYRENTAL . "," . ServiceCallQueue::TYPE_CSA;
		$scqIds			 = ServiceCallQueue::getDetailsByQueueBkgCsr($queueId, $bookingId, UserInfo::getUserId(), $check			 = 1, $status			 = "1,3,2");
		$workingMins	 = DBUtil::CalcWorkingMinutes($currDateTime, $pickupDate);
		$currentHour	 = date('H', strtotime($currDateTime));
		if (($currentHour > 21 || $currentHour < 7) && ($workingMins < 60) && $scqIds > 0)
		{
			$success = true;
		}
		return $success;
	}

	public static function getDailyConfirmationData($params, $orderby = 'date', $command = DBUtil::ReturnType_Provider)
	{
		$fromConfirmDate = $params['fromConfirmDate'];
		$toConfirmDate	 = $params['toConfirmDate'];
		$bkgType		 = $params['bkgTypes'];
		$region			 = $params['region'];
		$weekDays		 = $params['weekDays'];
		$local			 = $params['local'];
		$outstation		 = $params['outstation'];
		$restricted		 = $params['restricted'];
		$isGozonow		 = $params['isGozonow'];
		$isMobileApp	 = $params['mobileApp'];
		$androidApp		 = $params['androidApp'];
		$iosApp			 = $params['iosApp'];

		$where	 = '';
		$sqlJoin = '';

		if ($fromConfirmDate != '' && $toConfirmDate != '')
		{
			$createDate = " AND (bkg_confirm_datetime BETWEEN '$fromConfirmDate 00:00:00' AND '$toConfirmDate 23:59:59')";
		}

		if (count($bkgType) > 0)
		{
			$bkgTypeStr	 = implode(",", $bkgType);
			$where		 .= " AND bkg_booking_type IN ($bkgTypeStr) ";
		}

		$bkgTypeCondition = [];
		if ($local)
		{
			$bkgTypeCondition[] = "(bkg_booking_type IN (4,6,7,9,10,11,12,14,15))";
		}
		if ($outstation)
		{
			$bkgTypeCondition[] = "(bkg_booking_type IN (1,2,3,5,8))";
		}
		if ($restricted)
		{
			switch ($orderby)
			{
				case "month":
					$where	 .= " AND DAY(bkg_confirm_datetime)<=DAY('$toConfirmDate 23:59:59')";
					break;
				case "week":
				case "date":
				case "hour":
				default:
					$where	 .= " AND TIME(bkg_confirm_datetime)<=CURRENT_TIME()";
					break;
			}
		}

		if ($isGozonow)
		{
			$where .= "  AND (bpr.bkg_is_gozonow =1) ";
		}

		if ($androidApp == true && $iosApp == true)
		{
			$isMobileApp = true;
			$androidApp	 = false;
			$iosApp		 = false;
		}

		if ($isMobileApp)
		{
			$where .= "  AND (booking_trail.bkg_platform =3) ";
		}

		if ($androidApp)
		{
			$where .= "  AND booking_trail.bkg_platform=3 AND booking_trail.bkg_user_device NOT LIKE '%iOS%'";
		}

		if ($iosApp)
		{
			$where .= "  AND booking_trail.bkg_platform=3 AND booking_trail.bkg_user_device LIKE '%iOS%'";
		}

		if (count($bkgTypeCondition) > 0)
		{
			$where .= " AND (" . implode(" OR ", $bkgTypeCondition) . ")";
		}
		if (is_array($weekDays) && count($weekDays) > 0)
		{
			$weekDaysStr = implode(',', $weekDays);

			$where .= "  AND FIND_IN_SET(DAYOFWEEK(bkg_confirm_datetime), '{$weekDaysStr}') ";
		}

		if ($region != '')
		{
			$sqlJoin .= " INNER JOIN cities c1 ON c1.cty_id=bkg_from_city_id AND c1.cty_active=1 
						INNER JOIN states s1 ON s1.stt_id=c1.cty_state_id AND s1.stt_active = '1' ";

			if ($region != '')
			{
				$strRegion	 = implode(',', $region);
				$where		 .= " AND s1.stt_zone IN ($strRegion) ";
			}
		}

//		$where .= "AND bkg_create_date>=DATE_SUB(NOW(), INTERVAL 7 DAY)   ";

		$dataSelect = "SELECT 
		DATE_FORMAT(bkg_confirm_datetime, '%Y-%m-%d %H') AS hour,
		DATE_FORMAT(bkg_confirm_datetime, '%Y-%m-%d') AS date,
		DATE_FORMAT(bkg_confirm_datetime, '%x-%v') as week,
		DATE_FORMAT(bkg_confirm_datetime, '%b-%Y') AS monthname, DATE_FORMAT(bkg_confirm_datetime, '%Y-%m') AS month,
		CONCAT(DATE_FORMAT(MIN(bkg_confirm_datetime), '%D %b'), ' - ' , DATE_FORMAT(MAX(bkg_confirm_datetime), '%D %b')) as DateRange,    
		'$orderby' groupType,
		SUM(IF(bkg_status IN (9) AND booking_trail.bkg_create_user_type=1 AND booking_trail.bkg_confirm_user_type=1,1,0)) as `cnt Self Cancelled`,    
		SUM(IF(bkg_status IN (2,3,5,6,7) AND booking_trail.bkg_create_user_type=1 AND booking_trail.bkg_confirm_user_type=1,1,0)) as `cnt Self Active`,    
		SUM(IF(bkg_credits_used>0 AND booking_trail.bkg_create_user_type=1 AND booking_trail.bkg_confirm_user_type=1,1,0)) as `cnt Self Gozo Coins`,    
		COUNT(DISTINCT IF(booking_trail.bkg_create_user_type=1 AND booking_trail.bkg_confirm_user_type=1,IF(bkg_status IN (2,3,5,6,7,9), bkg_id, bui.bkg_contact_no),NULL)) as `cnt Self`,
	    SUM(IF(bkg_credits_used>0,1,0)) as `Count Gozo Coins`,
	    SUM(IF(bkg_create_user_type=4 AND bkg_status IN (9),1,0)) as `Count Admin Cancelled`,
	    SUM(IF(bkg_create_user_type=4 AND bkg_status IN (2,3,5,6,7),1,0)) as `Count Admin Active`,
	    SUM(IF(bkg_create_user_type=4,1,0)) as `count Admin`,
	    (SUM(IF(bkg_agent_id IS NULL AND bkg_status NOT IN (9),
		bkg_gozo_amount-bkg_credits_used, 0))*100/SUM(IF(bkg_agent_id IS NULL AND bkg_status NOT IN (9),
			bkg_net_base_amount-bkg_credits_used, 0))) as `B2C Margin`, 
		SUM(IF(bkg_agent_id IS NULL AND bkg_status NOT IN (9), bkg_gozo_amount-bkg_credits_used, 0)) as `B2C Gozo Amount`,
	    SUM(IF(bkg_agent_id IS NULL, 1,0)) AS `Count B2C`,
	    SUM(IF(bkg_agent_id=18190 AND bkg_status=9, 1,0)) AS `Cancelled MMT`,
	    SUM(IF(bkg_agent_id=18190, 1,0)) AS `Count MMT`,
	    (SUM(IF(bkg_agent_id=18190 AND bkg_status NOT IN (9), bkg_gozo_amount-bkg_credits_used, 0))*100/SUM(IF(bkg_agent_id=18190 AND bkg_status NOT IN (9), bkg_net_base_amount-bkg_credits_used, 0))) as `MMT Margin`,
		 SUM(IF(bkg_agent_id=18190 AND bkg_status IN (2,3,5,6,7), bkg_gozo_amount-bkg_credits_used, 0)) as `MMT Gozo Amount`";

		$countSelect = "SELECT DATE_FORMAT(bkg_confirm_datetime, '%Y-%m-%d %H') AS hour  
					,DATE_FORMAT(bkg_confirm_datetime, '%Y-%m-%d') AS date 
					,DATE_FORMAT(bkg_confirm_datetime, '%Y-%m-%d %H') AS week
					,DATE_FORMAT(bkg_confirm_datetime, '%b-%Y') AS monthname, DATE_FORMAT(bkg_confirm_datetime, '%Y-%m') AS month ";
		$sqlBody	 = "FROM booking
							INNER JOIN booking_pref bpr ON bpr.bpr_bkg_id=bkg_id
							INNER JOIN booking_trail ON booking_trail.btr_bkg_id=bkg_id 
							INNER JOIN booking_user bui ON bui_bkg_id=bkg_id
							INNER JOIN booking_invoice ON biv_bkg_id=bkg_id $sqlJoin
							WHERE (bkg_status IN (2,3,5,6,7)  OR (bkg_status=9 AND bkg_advance_amount>0))
							AND (bkg_agent_id=18190 OR bkg_agent_id IS NULL)  
							AND bkg_reconfirm_flag=1 
							$createDate $where
							GROUP BY $orderby
						";
		$sqlData	 = $dataSelect . $sqlBody;
		$sqlCount	 = $countSelect . $sqlBody;
		if ($command == DBUtil::ReturnType_Provider)
		{
			$count			 = DBUtil::queryScalar("SELECT COUNT(*) FROM ($sqlCount) abc", DBUtil::SDB3());
			$dataprovider	 = new CSqlDataProvider($sqlData, [
				'totalItemCount' => $count,
				'db'			 => DBUtil::SDB3(),
				'sort'			 => ['attributes'	 => [],
					'defaultOrder'	 => "{$orderby} DESC"],
				'pagination'	 => ['pageSize' => 50],
			]);
			return $dataprovider;
		}
		else
		{
			$orderBySql = " ORDER BY $orderby DESC";
			return DBUtil::query($sqlData . $orderBySql, DBUtil::SDB3());
		}
	}

	/**
	 * 
	 * @param type $attribute
	 * @throws \Exception
	 */
	public function checkDuplicatePartnerRefId($attribute)
	{
		if ($this->bkg_agent_ref_code != '' && $this->bkg_agent_id != null && $this->bkg_agent_id != 1249)
		{
			$cnt = Booking::model()->checkDuplicateReferenceId($this->bkg_agent_ref_code, $this->bkg_agent_id);
			if ($cnt > 0)
			{
				throw new \Exception('Reference Id already exists', \ReturnSet::ERROR_INVALID_DATA);
			}
		}
	}

	public static function checkTimeAccess($pickupDate)
	{
		$success		 = false;
		$currDateTime	 = DBUtil::getCurrentTime();
		$workingMins	 = DBUtil::CalcWorkingMinutes($currDateTime, $pickupDate);
		$currentHour	 = date('H', strtotime($currDateTime));
		if (($currentHour >= 21 || $currentHour < 7) && ($workingMins < 60))
		{
			$success = true;
		}
		return $success;
	}

	/**
	 * 
	 * @param type $bkgId
	 * @return boolean
	 */
	public static function checkDuraionForTripDetails($model)
	{
		$result			 = false;
		$currDateTime	 = Filter::getDBDateTime();
		$date			 = DateTimeFormat::SQLDateTimeToDateTime($currDateTime)->sub(new DateInterval('P' . 3 . 'M'));
		$dateTime		 = DateTimeFormat::DateTimeToSQLDateTime($date);

		if ($dateTime < $model->bkg_pickup_date)
		{
			$result = true;
		}
		return $result;
	}

	public function updatePickupDate($reachingAtTime)
	{
		if ($reachingAtTime == '' || $reachingAtTime == null)
		{
			return false;
		}
		$pickupDate	 = $this->bkg_pickup_date;
		$endTime	 = $this->bkgBcb->bcb_end_time;
		$brtModels	 = $this->bookingRoutes;
		$timeDiff	 = \Filter::getTimeDiff($reachingAtTime, $pickupDate);
		if ($timeDiff <= 5)
		{
			return false;
		}
		$minToSec	 = (60 * $timeDiff);
		$returnSet	 = new ReturnSet();
		$transaction = DBUtil::beginTransaction();
		try
		{
			$updatePickupDate	 = date("d/m/Y", strtotime($pickupDate) + $minToSec);
			$updatePickupTime	 = date("h:i a", strtotime($pickupDate) + $minToSec);

			$this->bookingRoutes[0]->brt_pickup_date_date	 = $updatePickupDate;
			$this->bookingRoutes[0]->brt_pickup_date_time	 = $updatePickupTime;

			$result = CActiveForm::validate($this, null, false);
			if ($result == '[]')
			{
				if (!$this->save())
				{
					$this->getErrors();
					throw new Exception("Failed to save booking", 1);
				}
				$this->bkgBcb->bcb_start_time	 = $this->bkg_pickup_date;
				$this->bkgBcb->bcb_end_time		 = date("Y-m-d H:i:s", (strtotime($endTime) + $minToSec));
				if (!$this->bkgBcb->save())
				{
					throw new Exception("Failed to save booking cab", 1);
				}

				$brtId							 = $brtModels[0]->brt_id;
				$brtModel						 = BookingRoute::model()->findByPk($brtId);
				$brtModel->brt_pickup_date_date	 = $updatePickupDate;
				$brtModel->brt_pickup_date_time	 = $updatePickupTime;
				if (!$brtModel->save())
				{
					throw new Exception("Failed to save booking route", 1);
				}
				$eventid = BookingLog::BOOKING_MODIFIED;
				$desc	 = "New Pickup Date: " . $this->bkg_pickup_date . ", Previous Pickup Date: " . $pickupDate . ", Reason: Customer accepted";
				BookingLog::model()->createLog($this->bkg_id, $desc, UserInfo::getInstance(), $eventid);

				$returnSet->setStatus(true);
				DBUtil::commitTransaction($transaction);
			}
		}
		catch (Exception $ex)
		{
			$returnSet = ReturnSet::setException($ex);
			$returnSet->setStatus(false);
			DBUtil::rollbackTransaction($transaction);
		}
		return $returnSet;
	}

	public static function clone($prevModel)
	{
		$newModel							 = Booking::getNewInstance();
		$newModel->setAttributes($prevModel->getAttributes());
		$newModel->unsetAttributes(array("bkg_id", "bkg_bcb_id"));
		$newModel->bkg_reconfirm_flag		 = 0;
		$newModel->bkg_create_date			 = new CDbExpression('NOW()');
		$newModel->bkgTrail->bkg_platform	 = $prevModel->bkgTrail->bkg_platform;
		$newModel->bkgUserInfo->setAttributes($prevModel->bkgUserInfo->getAttributes());
		$newModel->bkgUserInfo->unsetAttributes(array("bui_id", "bui_bkg_id"));
		$newModel->bkgAddInfo->setAttributes($prevModel->bkgAddInfo->getAttributes());
		$newModel->bkgAddInfo->unsetAttributes(array("bad_id", "bad_bkg_id"));
		return $newModel;
	}

	public function reschedule($pickupdate, $pickuptime)
	{
		try
		{
			$newModel = self::clone($this);

			//assign new time
			$newModel->bkg_pickup_date	 = DateTimeFormat::DatePickerToDate($pickupdate) . " " . date('H:i:00', strtotime($pickuptime));
			$routes						 = BookingRoute::reschedulePickupTime($newModel->bkg_pickup_date, $this->bookingRoutes);
			$newModel->bookingRoutes	 = $routes;

			$returnSet = $this->validateOnReschedule($newModel); //validate before reschedule

			if ($returnSet && $returnSet->getStatus())
			{
				$newModel->loadDefaults(); //assign default values
				$newModel->loadQuote(); // quote according to new time
				$newModel->initReschedule($this); //reschedule all conditions applied here
				return $newModel;
			}
		}
		catch (Exception $ex)
		{
			$returnSet = ReturnSet::setException($ex);
			\Sentry\captureMessage(json_encode($ex), null);
		}

		return $returnSet;
	}

	public function initReschedule($prevModel)
	{
		$this->bkgUserInfo->bkg_user_id = $prevModel->bkgUserInfo->bkg_user_id;

		//if lesser price use previous price
		$this->bkgInvoice->bkg_base_amount		 = intval($this->bkgInvoice->bkg_base_amount);
		$prevModel->bkgInvoice->bkg_base_amount	 = intval($prevModel->bkgInvoice->bkg_base_amount);
		if ($prevModel->bkgInvoice->bkg_base_amount >= $this->bkgInvoice->bkg_base_amount)
		{
			$this->bkgInvoice->setAttributes($prevModel->bkgInvoice->attributes);
			$this->bkgInvoice->isNewRecord			 = true;
			$this->bkgInvoice->unsetAttributes(array("biv_id", "biv_bkg_id", "bkg_promo1_code", "bkg_promo1_id", "bkg_promo1_amt", "bkg_promo1_coins"));
			$this->bkgPf->attributes				 = $prevModel->bkgPf->attributes;
			$this->bkgPf->unsetAttributes(array("bpf_id", "bpf_bkg_id"));
			$this->bkgInvoice->bkg_advance_amount	 = $this->bkgInvoice->bkg_credits_used		 = $this->bkgInvoice->bkg_refund_amount	 = $this->bkgInvoice->bkg_discount_amount	 = 0;
			$this->bkgInvoice->calculateTotal();
		}

		//validate promo for new pickup time and fare
		$prmModel = Promos::validateCode($this, $prevModel->bkgInvoice->bkg_promo1_code);
		if ($prmModel)
		{
			if (!$prmModel->hasErrors())
			{
				$this->bkgInvoice->pickupdate = $this->bkg_pickup_date;
				(in_array($prevModel->bkg_status, [1, 15])) ? $this->bkgInvoice->addPromo($prmModel) : $this->bkgInvoice->evaluatePromo($prmModel);
			}
		}

		$this->calculateExtraMinPayOnReschedule($prevModel);
	}

	public function calculateExtraMinPayOnReschedule($prevModel)
	{
		//if cancel charge applicable apply non-cancellable policy
		$cancelObj							 = CancellationPolicy::initiateRequest($prevModel);
		$this->bkgPref->bkg_cancel_rule_id	 = ($cancelObj->charges > 0) ? CancellationPolicyDetails::NON_CANCELLABLE : $prevModel->bkgPref->bkg_cancel_rule_id;

		//reschedule charge applicable if cancel chanrge is applicable
		$this->rescheduleCharge = $this->bkgInvoice->calculateRescheduleCharge($cancelObj->charges, $prevModel->bkg_pickup_date);

		//new minPay > old minPay ask extra payment
		$this->minPay = $this->bkgInvoice->calculateMinPayment($this->bkgInvoice->bkg_total_amount, false);
		if ($this->minPay > ($prevModel->bkgInvoice->bkg_advance_amount - $this->rescheduleCharge - $prevModel->bkgInvoice->bkg_refund_amount) && $prevModel->bkgInvoice->bkg_advance_amount > 0)
		{
			$this->minPayExtra = $this->minPay - ($prevModel->bkgInvoice->bkg_advance_amount - $this->rescheduleCharge - $prevModel->bkgInvoice->bkg_refund_amount);
		}
	}

	/**
	 * @param string $pickupdate
	 * @param string $pickuptime
	 * @param boolean $isAdmin
	 * @throws Exception
	 */
	public function confirmReschedule($pickupdate, $pickuptime, $isAdmin = false)
	{
		$newModel = $this->reschedule($pickupdate, $pickuptime);

		$returnSet	 = new ReturnSet();
		$returnSet->setStatus(true);
		$returnSet->setData([]);
		$transaction = DBUtil::beginTransaction();

		try
		{
			$newModel->bkgPref->bpr_rescheduled_from = $this->bkg_id;
			$newModel->createQuote();

			$newModel->bkgPref->bpr_rescheduled_from = $this->bkg_id;
			if (!$newModel->bkgPref->save())
			{
				throw new Exception('Unable to process your request. Please try after sometime.');
			}
			if ($newModel->minPayExtra > 0)
			{
				$url = Yii::app()->createAbsoluteUrl("booking/paymentreview", ["id" => $newModel->bkg_id, "hash" => Yii::app()->shortHash->hash($newModel->bkg_id), 'minPayExtra' => $newModel->minPayExtra]);
				$returnSet->setData(['payUrl' => $url, 'bkgId' => $newModel->bkg_id]);
				if ($isAdmin)
				{
//					smsWrapper::sendPaymentLink($newModel->bkg_id, $newModel->minPayExtra);
//					$emailCom = new emailWrapper();
//					$emailCom->paymentLink($newModel->bkg_id, $newModel->minPayExtra);
//					$returnSet->setData(['payUrl' => $url, 'newBkgId' => $newModel->bkg_booking_id]);
//
//					WhatsappLog::sendPaymentRequestForBkg($newModel->bkg_id, null, $newModel->minPayExtra);

					self::notifyPaymentRequestToCustomer($newModel->bkg_id, $newModel->minPayExtra);
				}

				$params['blg_ref_id'] = BookingLog::RESCHEDEULE_PICKUP_TIME;
				BookingLog::model()->createLog($this->bkg_id, "Reschedule Initiated (new booking: {$newModel->bkg_booking_id})", UserInfo:: getInstance(), BookingLog::BOOKING_MODIFIED, false, $params);
				BookingLog::model()->createLog($newModel->bkg_id, "Reschedule Initiated (previous booking: {$this->bkg_booking_id})", UserInfo:: getInstance(), BookingLog::BOOKING_MODIFIED, false, $params);
			}
			else
			{
				$returnSet = Booking::cancelOnReschedule($newModel->bkg_id, $newModel->bkgPref->bpr_rescheduled_from);
				$newModel->refresh();
				if (!$returnSet->getStatus())
				{
					throw new Exception('Unable to process your request. Please try after sometime.');
				}
				$returnSet->setData(['newBkgId' => $newModel->bkg_booking_id, 'bkgId' => $newModel->bkg_id]);
			}
			DBUtil::commitTransaction($transaction);
			//DBUtil::rollbackTransaction($transaction);
		}
		catch (Exception $ex)
		{
			DBUtil::rollbackTransaction($transaction);
			$returnSet = ReturnSet::setException($ex);
			\Sentry\captureMessage(json_encode($ex), null);
		}
		return $returnSet;
	}

	public function validateOnReschedule($newModel = '')
	{
		$returnSet = new ReturnSet();
		$returnSet->setStatus(true);
		$returnSet->setData([]);
		//chcek if new booking will be gozonow booking
		if ($newModel != '')
		{
			$date_3_months	 = strtotime("+90 days");
			$pDate			 = strtotime($newModel->bkg_pickup_date);
			if ($pDate > $date_3_months)
			{
				$this->addError('bkg_id', "Departure time should be within 90 days from now.");
				return false;
			}
			$bookingTempModel					 = new BookingTemp();
			$bookingTempModel->bkg_vehicle_type_id;
			$bookingTempModel->bkg_agent_id		 = $newModel->bkg_agent_id;
			$bookingTempModel->bkg_booking_type	 = $newModel->bkg_booking_type;
			$bookingTempModel->bkg_pickup_date	 = $newModel->bkg_pickup_date;
			$bookingTempModel->bkg_from_city_id	 = $newModel->bkg_from_city_id;
			$bookingTempModel->bkg_to_city_id	 = $newModel->bkg_to_city_id;
			$response							 = $bookingTempModel->checkGozoNowEligibility();
			if ($response->pickDiff < $response->timeDifference)
			{
				$this->addError('bkg_id', "Departure time should be at least {$response->timeDifference} minutes from now.");
				return false;
			}
			else if ($response->pickDiff >= $response->timeDifference && $response->pickDiff <= $response->maxGNowAllowedDuration)
			{
				$gnowMinTime		 = date('Y-m-d H:i:s', strtotime($response->maxGNowAllowedDuration . ' minute'));
				$gnowMinDateTime	 = new DateTime($gnowMinTime);
				$roundedGnowMinTime	 = Filter::roundUpToMinuteInterval($gnowMinDateTime);
				$returnSet->setStatus(false);
				$errMsg				 = "Rescheduling of this booking before {$roundedGnowMinTime->format('h:i A')} is not allowed. If you still need any assistance you can request a call back from our customer support team. Do you want to place your call back request now?";
				if (UserInfo::getUserType() == UserInfo::TYPE_ADMIN)
				{
					$errMsg = "Rescheduling of this booking before {$roundedGnowMinTime->format('h:i A')} is not allowed.";
				}
				$returnSet->setData(["errMessage" => $errMsg, "isGozoNow" => 1, "bkgID" => $this->bkg_booking_id, "msg" => "I want to reschedule pickup time to " . DateTimeFormat::DateTimeToDatePicker($newModel->bkg_pickup_date) . " " . DateTimeFormat::DateTimeToTimePicker($newModel->bkg_pickup_date)]);
				return $returnSet;
			}
		}

		//gozonow checking current booking
		$date = date('Y-m-d H:i:s');
		if ($date > $this->bkg_pickup_date)
		{
			$this->addError('bkg_id', "Reschedule not applicable as pickup date has been passed.");
			return false;
		}

		//gozonow checking current booking
		if ($this->bkgPref->bkg_is_gozonow == 1)
		{
			$this->addError('bkg_id', "Reschedule not applicable for gozonow booking.");
			return false;
		}

		//check if already rescheduled
		//$bkgPrefModel	 = BookingPref::model()->findBySql("SELECT 1 FROM booking_pref WHERE bpr_rescheduled_from = {$this->bkg_id}"); 
		if ($this->bkgPref->bpr_rescheduled_from > 0)
		{
			$this->addError('bkg_id', "Booking can be reschedule only once.");
			return false;
		}
//		$getBookingLogInfo	 = BookingLog::model()->getRescheduleTimeLog($this->bkg_id);
//		if ($getBookingLogInfo != '')
//		{
//				$this->addError('bkg_id', "Booking can be reschedule only once.");
//				return false;
//		}
		//booking status checking allowed until vendor is assigned
		if (!in_array($this->bkg_status, [2, 3, 5]))
		{
			$this->addError('bkg_id', "This booking can not be rescheduled as booking is already under process.");
			return false;
		}

		return $returnSet;
	}

	public static function cancelOnReschedule($newBkgId, $prevBkgId)
	{
		$transaction = DBUtil::beginTransaction();
		$returnSet	 = new ReturnSet();
		$returnSet->setStatus(true);
		try
		{
			$prevModel		 = Booking::model()->findByPk($prevBkgId);
			$newModel		 = Booking::model()->findByPk($newBkgId);
			$bkgOldStatus	 = $prevModel->bkg_status;

			if (in_array($prevModel->bkg_status, [9, 10]) || in_array($newModel->bkg_status, [9, 10]))
			{
				goto lastLine;
			}

			if ($prevModel->bkgTrack->bkg_ride_start == 1)
			{
				throw new Exception("Reschedule is not possible, as ride is already started.");
			}
			$cancelObj = CancellationPolicy::initiateRequest($prevModel);
			if ($cancelObj->charges > 0)
			{
				$newModel->rescheduleCharge					 = $newModel->bkgInvoice->calculateRescheduleCharge($cancelObj->charges, $prevModel->bkg_pickup_date);
				$prevModel->bkgInvoice->bkg_cancel_charge	 = ($newModel->rescheduleCharge > 0) ? $newModel->rescheduleCharge : 0;
			}

			$userInfo = UserInfo::getInstance();

			$prevModel->bkgInvoice->bkg_cancel_charge = ($newModel->rescheduleCharge > 0) ? intval($newModel->rescheduleCharge) : 0;
			if (!$prevModel->bkgInvoice->save())
			{
				$returnSet->setStatus(false);
				goto lastLine;
			}


			$reason	 = "Booking Rescheduled (New Booking - {$newModel->bkg_booking_id})";
			$resonId = CancelReasons::CR_BOOKING_RESCHEDULED;
			$success = Booking::model()->canBooking($prevModel->bkg_id, $reason, $resonId, $userInfo, '', 1);
			if (!$success)
			{
				throw new Exception("Failed to reschedule");
			}
			BookingLog::model()->createLog($prevModel->bkg_id, "Booking Rescheduled (rescheduled booking id: {$newModel->bkg_booking_id})", $userInfo, BookingLog::BOOKING_CANCELLED);
			//advance transfer
			if ($prevModel->bkgInvoice->bkg_advance_amount > 0)
			{
				$transArr	 = AccountTransDetails::getWalletTransactionByBooking($prevModel->bkg_id);
				$amount		 = abs($transArr['refundedToWallet'] + $transArr['paidThroughWallet']);
				if ($amount > 0)
				{
					//keep reschedule charge as cancel charge if applicable

					if ($newModel->rescheduleCharge > 0)
					{
						if ($amount >= $newModel->rescheduleCharge)
						{
							$amount = $amount - $newModel->rescheduleCharge;
							BookingLog::model()->createLog($prevModel->bkg_id, "Reschedule charge applied Rs." . $newModel->rescheduleCharge, $userInfo, BookingLog::BOOKING_CANCELLED);
						}
					}
					if ($amount > 0)
					{
						//revert advance from booking to wallet for old booking
						$userInfo = UserInfo::getInstance();
						PaymentGateway::model()->refundByRefId($amount, $prevModel->bkg_id, Accounting:: AT_BOOKING, $userInfo, false, false, true);

						//add advance from wallet to booking for new booking
						AccountTransactions::userWalletToBooking(new CDbExpression('NOW()'), $amount, $newModel->bkgUserInfo->bkg_user_id, $newModel->bkg_id);

						$newModel->confirmBooking();
						$newModel->refresh();
						$newModel->bkgInvoice->bkg_advance_amount += $amount;
						$newModel->bkgInvoice->calculateDues();
						if (!$newModel->bkgInvoice->save())
						{
							$returnSet->setStatus(false);
							goto lastLine;
						}
						$newModel->setReconfirm();
						BookingLog::model()->createLog($newModel->bkg_id, "Advance transferred Rs." . $amount . " (previous booking: {$prevModel->bkg_booking_id})", $userInfo, BookingLog::BOOKING_CANCELLED);

						if ($newModel->bkg_cav_id != '')
						{
							goto skipdbo;
						}
						// Double back offer
						$dboSettings = Config::get('dbo.settings');
						$data		 = CJSON::decode($dboSettings);
						if ($newModel->bkg_pickup_date >= $data['dboStartDate'] && $newModel->bkg_pickup_date <= $data['dboEndDate'])
						{
							if ($newModel->bkgInvoice->bkg_advance_amount > 0 && $newModel->bkg_reconfirm_flag == 1 && $newModel->bkg_agent_id == null)
							{
								$newModel->bkgTrail->updateDBOStatus($newModel->bkg_pickup_date, $newModel->bkgInvoice->bkg_advance_amount, $newModel);
							}
						}

						skipdbo:
					}
				}
			}
			else if ($bkgOldStatus == 2)
			{
				$newModel->confirmBooking();
				$newModel->refresh();
				$newModel->setReconfirm();
				$newModel->refresh();
			}
			$params['blg_ref_id'] = BookingLog::RESCHEDEULE_PICKUP_TIME;

			BookingLog::model()->createLog($prevModel->bkg_id, "Reschedule Completed (new booking: {$newModel->bkg_booking_id})", UserInfo:: getInstance(), BookingLog::BOOKING_MODIFIED, false, $params);

			BookingLog::model()->createLog($newModel->bkg_id, "Reschedule Completed (previous booking: {$prevModel->bkg_booking_id})", UserInfo:: getInstance(), BookingLog::BOOKING_MODIFIED, false, $params);

			DBUtil::commitTransaction($transaction);
//DBUtil::rollbackTransaction($transaction);
			if ($returnSet->getStatus())
			{
				//sending email and sms
				notificationWrapper::customerBookingCancelled($prevModel->bkg_id, true, true, $prevModel->bkgUserInfo->bkg_country_code, $prevModel->bkgUserInfo->bkg_contact_no, CancelReasons::CR_BOOKING_RESCHEDULED);

				if ($newModel->bkgInvoice->bkg_advance_amount > 0)
				{
					$newModel->confirmMessages();
				}
				else
				{
					$newModel->sendConfirmation(BookingLog::System);
				}
			}
		}
		catch (Exception $e)
		{
			$returnSet = ReturnSet::setException($e);
			DBUtil::rollbackTransaction($transaction);
			\Sentry\captureMessage(json_encode($e), null);
		}
		lastLine:
		return $returnSet;
	}

	public static function getMaxToTransferOnReschedule($prevId)
	{
		$amount		 = 0;
		$prevModel	 = Booking::model()->findByPk($prevId);
		$cancelObj	 = CancellationPolicy::initiateRequest($prevModel);
		if ($prevModel->bkgInvoice->bkg_advance_amount > 0)
		{
			$transArr	 = AccountTransDetails::getWalletTransactionByBooking($prevModel->bkg_id);
			$amount		 = abs($transArr['refundedToWallet'] + $transArr['paidThroughWallet']);

			//keep reschedule charge as cancel charge if applicable
			if ($cancelObj->charges > 0 && $amount > 0)
			{
				$rescheduleCharge = $prevModel->bkgInvoice->calculateRescheduleCharge($cancelObj->charges, $prevModel->bkg_pickup_date);
				if ($amount >= $rescheduleCharge)
				{
					$amount = $amount - $rescheduleCharge;
				}
			}
		}
		return $amount;
	}

	/**
	 * 
	 * @param type $tripType
	 * @return dataReader
	 */
	public static function getBookings()
	{
		$sql		 = "(SELECT bkg.bkg_id, bkg.bkg_create_date
				FROM booking bkg
				WHERE bkg.bkg_pickup_date > NOW() AND bkg.bkg_booking_type IN (4,12,10,11) AND bkg.bkg_status = 2 AND bkg.bkg_reconfirm_flag = 1
				AND ((bkg.bkg_from_city_id IN (31001,30474,34786,30475)) OR (bkg.bkg_to_city_id IN (31001,30474,34786,30475)))
				AND bkg.bkg_create_date >= DATE_SUB(NOW(), INTERVAL 60 MINUTE)
				ORDER BY bkg_id ASC)
				UNION ALL (SELECT bkg.bkg_id, bkg.bkg_create_date
				FROM booking bkg
                RIGHT JOIN cities cty ON cty.cty_id = bkg.bkg_to_city_id
				WHERE bkg.bkg_pickup_date > NOW() AND bkg.bkg_booking_type IN (1,2,3) AND bkg.bkg_status = 2 AND bkg.bkg_reconfirm_flag =1
				AND ((bkg.bkg_from_city_id IN (31001,30474,34786,30475)))
				AND bkg.bkg_create_date >= DATE_SUB(NOW(), INTERVAL 60 MINUTE) 
				AND cty.cty_state_id = 91 ORDER BY bkg_id ASC)
		";
		$resultSet	 = DBUtil::query($sql, DBUtil::SDB());

		return $resultSet;
	}

	/**
	 * 
	 * @param type $tripType
	 * @return dataReader
	 */
	public static function getDummyTrip($tripType)
	{
		$params = ["tripType" => $tripType];

		$sql		 = "SELECT bkg.bkg_id FROM booking bkg  WHERE bkg.bkg_pickup_date > NOW() AND bkg.bkg_booking_type =:tripType AND bkg.bkg_status IN (2,3) AND bkg.bkg_reconfirm_flag = 1 AND (bkg.bkg_from_city_id = 34786 OR bkg.bkg_to_city_id = 34786) ORDER BY bkg_id DESC LIMIT 0, 1";
		$resultSet	 = DBUtil::query($sql, DBUtil::SDB(), $params);

		return $resultSet;
	}

	/**
	 * 
	 * @return array
	 */
	public static function getTransferzActiveBookingList()
	{
		$partnerId = Config::get('transferz.partner.id');

		$sql = "SELECT bkg_id 
				FROM `booking` 
				INNER JOIN transferz_offers ON bkg_id = trb_bkg_id 
				WHERE bkg_status IN (2,3,5) AND bkg_agent_id = {$partnerId} AND bkg_active = 1 
				AND bkg_agent_ref_code IS NOT NULL AND bkg_agent_ref_code REGEXP '^[0-9]+$' 
				AND bkg_pickup_date > NOW() 
				AND (
					trb_data_last_pull_date IS NULL 
					OR (TIMESTAMPDIFF(MINUTE, NOW(), bkg_pickup_date) > 2880 AND TIMESTAMPDIFF(MINUTE, trb_data_last_pull_date, NOW()) >= 480) 
					OR ((TIMESTAMPDIFF(MINUTE, NOW(), bkg_pickup_date) BETWEEN 1440 AND 2880) AND TIMESTAMPDIFF(MINUTE, trb_data_last_pull_date, NOW()) >= 60) 
					OR (TIMESTAMPDIFF(MINUTE, NOW(), bkg_pickup_date) < 1440 AND TIMESTAMPDIFF(MINUTE, trb_data_last_pull_date, NOW()) >= 10) 
				)";

		$results = DBUtil::query($sql);
		return $results;
	}

	/**
	 * 
	 * @param type $bktype
	 * @return string
	 */
	public function getBookingTypeCode($bktype = 0)
	{
		$arrBktype = [
			1	 => 'ONE_WAY',
			2	 => 'ROUND_TRIP',
			3	 => 'MULTI_CITY',
			4	 => 'AIRPORT_TRANSFER',
			9	 => 'DAY_RENTAL_4HR-40KM',
			10	 => 'DAY_RENTAL_8HR-80KM',
			11	 => 'DAY_RENTAL_12HR-120KM',
			12	 => 'AIRPORT_PACKAGES'
		];
		if ($bktype != 0)
		{
			return trim($arrBktype[$bktype]);
		}
		else
		{
			return $arrBktype;
		}
	}

	/**
	 * 
	 * @param type $model
	 * @return string
	 */
	public function getAirportType($model)
	{
		switch (true)
		{
			case $model->bookingRoutes->brtFromCity->cty_is_airport:
				$type	 = "PICKUP";
				break;
			case $model->bookingRoutes->brtToCity->cty_is_airport:
				$type	 = "ARRIVAL";
				break;
			default:
				$type	 = "";
				break;
		}
		return $airport;
	}

	public static function leadTrack($params)
	{
		$fromDate	 = $params['bkg_create_date1'];
		$toDate		 = $params['bkg_create_date2'];

		$sqlBody = "
					FROM( SELECT DATE_FORMAT(vtr_visit_date, '%Y-%m-%d') as dt, COUNT(DISTINCT vtr_register_id) redirect_count
							FROM visitor_track WHERE 1 AND vtr_page_id = 1017 AND vtr_referal_url LIKE '%bookairportcab.com%' 
							AND (vtr_visit_date BETWEEN '$fromDate 00:00:00' AND '$toDate 23:59:59') GROUP BY dt ) visitor 
						LEFT JOIN( SELECT DATE_FORMAT(bt.bkg_create_date, '%Y-%m-%d') as dt, 
								COUNT(DISTINCT bt.bkg_contact_no) lead_count 
								FROM booking_temp bt WHERE 1 AND bt.bkg_agent_id = 34928 
								AND (bt.bkg_create_date BETWEEN  '$fromDate 00:00:00' AND '$toDate 23:59:59') GROUP BY dt ) lead ON visitor.dt = lead.dt 
						LEFT JOIN( SELECT DATE_FORMAT(bkg.bkg_create_date, '%Y-%m-%d') as dt, 
								COUNT(IF(bkg.bkg_status IN (1,15,10), bkg.bkg_id, NULL)) quoted, 
								COUNT(IF(bkg.bkg_status IN (2,3,5), bkg.bkg_id, NULL)) confirmed, 
								COUNT(IF(bkg.bkg_status IN (6,7), bkg.bkg_id, NULL)) completed, 
								COUNT(IF(bkg.bkg_status IN (9), bkg.bkg_id, NULL)) cancelled 
									FROM booking bkg 
									WHERE 1 AND bkg.bkg_agent_id = 34928 
											AND (bkg.bkg_agent_ref_code IS NULL OR bkg.bkg_agent_ref_code = '') 
											AND (bkg.bkg_create_date BETWEEN '$fromDate 00:00:00' AND '$toDate 23:59:59') GROUP BY dt) 
							booking ON lead.dt = booking.dt";

		$dataSelect = "SELECT visitor.dt, visitor.redirect_count, lead.lead_count, booking.quoted,
						booking.confirmed, booking.completed, booking.cancelled";

		$countSelect = "SELECT  visitor.dt ";
		$sqlData	 = $dataSelect . $sqlBody;
		$sqlCount	 = $countSelect . $sqlBody;

		$count			 = DBUtil::command("SELECT COUNT(*) FROM ($sqlCount) abc", DBUtil::SDB3())->queryScalar();
		$dataprovider	 = new CSqlDataProvider($sqlData, [
			'totalItemCount' => $count,
			'db'			 => DBUtil::SDB3(),
			'sort'			 => ['attributes'	 => ['dt', 'redirect_count', 'lead_count'],
				'defaultOrder'	 => 'dt DESC'],
			'pagination'	 => ['pageSize' => 50],
		]);
		return $dataprovider;
	}

	public function routeWithLogConversion($model, $type = DBUtil::ReturnType_Provider)
	{
		$fromDate	 = "$model->bkg_create_date1";
		$toDate		 = "$model->bkg_create_date2";
		$bkgTypes	 = $model->bkgtypes;

		$command = self::getRouteWithLogConversion($fromDate, $toDate, $bkgTypes);

		$count = DBUtil::queryScalar("SELECT COUNT(*) FROM ({$command->getText()} ) temp", DBUtil::SDB3(), $command->params);
		if ($type == DBUtil::ReturnType_Provider)
		{
			$dataprovider = new CSqlDataProvider($command, array(
				"totalItemCount" => $count,
				"params"		 => $command->params,
				'db'			 => DBUtil ::SDB3(),
				"pagination"	 => array("pageSize" => 1000),
				'sort'			 => array('attributes'	 => ['cntInquired', 'cntQuoted', 'cntCompleted', 'cntRT', 'cntOW', 'cntAT', 'cntDR', 'cntLocal'],
					'defaultOrder'	 => 'pct_local DESC, pct_served ASC, cntInquired DESC, pct_conversion ASC')
			));
			return $dataprovider;
		}
		else
		{
			return DBUtil::query($command->getText(), DBUtil::SDB3(), $command->params);
		}
	}

	public static function getRouteWithLogConversion($fromDate, $toDate, $bkgTypes)
	{
		if ($fromDate != '' && $toDate != '')
		{
			$createFromDays		 = " AND bkg_create_date BETWEEN CONCAT(:fromDate) AND CONCAT(:toDate)";
			$params[":fromDate"] = $fromDate;
			$params[":toDate"]	 = $toDate;
		}

		if (count($bkgTypes) > 0)
		{
			$bkgtype			 = implode(',', $bkgTypes);
			$bookingType		 = " AND bkg_booking_type IN (:bkgtype)";
			$params[":bkgtype"]	 = $bkgtype;
		}

		$sql = "SELECT c1.cty_display_name AS fromCityName, c2.cty_display_name AS toCityName,
				COUNT(bkg_id) AS cntInquired,
				(COUNT(IF(bkg_status IN(6, 7), 1, NULL)) / COUNT(bkg_id) ) * 100 AS pct_served,
				(COUNT(IF(bkg_booking_type IN(4, 12, 9, 10, 11), 1, NULL)) / COUNT(bkg_id)) * 100 AS pct_local,
				(1 -(COUNT(IF(bkg_booking_type IN(4, 12, 9, 10, 11), 1, NULL)) / COUNT(bkg_id))) * 100 AS pct_OS,
				(COUNT(IF(bkg_status IN(2, 3, 5, 6, 7, 9), 1, NULL)) / COUNT(bkg_id)) * 100 AS pct_conversion,
				(COUNT(IF(bkg_status IN(6, 7), 1, NULL)) / COUNT(IF(bkg_status IN(2, 3, 5, 6, 7, 9), 1, NULL))
						) * 100 AS pct_fulfilment,
				COUNT(IF(bkg_status IN(2, 3, 5, 6, 7, 9), 1, NULL)) AS cntCreated, COUNT(IF(bkg_status IN(15), 1,
					NULL)) AS cntQuoted,
				COUNT(IF(bkg_status IN(6, 7), 1, NULL)) AS cntCompleted,
				(COUNT(IF(bkg_booking_type IN(2, 3), 1, NULL))) AS cntRT,
				(COUNT(IF(bkg_booking_type IN(1), 1, NULL) )) AS cntOW,
				(COUNT(IF(bkg_booking_type IN(4, 12), 1, NULL))) AS cntAT,
				(COUNT(IF(bkg_booking_type IN(9, 10, 11), 1, NULL))) AS cntDR,
				(COUNT(IF(bkg_booking_type IN(4, 12, 9, 10, 11), 1, NULL))) AS cntLocal,
				MIN(bkg_create_date) AS firstBookingCreateDate, MAX(bkg_create_date) AS lastBookingCreateDate, bkg_booking_type
			FROM
				booking
			INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id = booking.bkg_id
			INNER JOIN cities c1 ON c1.cty_id = booking.bkg_from_city_id
			INNER JOIN cities c2 ON c2.cty_id = booking.bkg_to_city_id
			WHERE 1 $createFromDays $bookingType AND bkg_agent_id IS NULL 
			GROUP BY booking.bkg_from_city_id, booking.bkg_to_city_id  HAVING cntInquired > 5";

		$command		 = DBUtil::command($sql, DBUtil::SDB3());
		$command->params = $params;
		return $command;
	}

	/**
	 * 
	 * @param Booking $model
	 * @param integer $type
	 * @return \CSqlDataProvider
	 */
	public function stateWiseBookingCount($model, $type = DBUtil::ReturnType_Provider)
	{
		$fromDate	 = "$model->bkg_pickup_date1";
		$toDate		 = "$model->bkg_pickup_date2";
		$bkgTypes	 = $model->bkgtypes;

		//	$command = self::getBookingCountByState($fromDate, $toDate, $bkgTypes);
		$sql = "SELECT COUNT(DISTINCT bkg_id) AS cnt,
					CONCAT(YEAR(bkg_pickup_date),'-', LPAD(MONTH(bkg_pickup_date), 2, '0')) AS PickupMonth,
					CONCAT(states.stt_name, '(',cty_state_id, ')' ) AS StateName, cty_state_id AS StateId
				FROM  booking
				JOIN booking_cab ON booking_cab.bcb_id = booking.bkg_bcb_id AND bcb_active = 1
				JOIN cities ON cty_id = bkg_from_city_id AND cities.cty_active = 1
				JOIN states ON stt_id = cty_state_id AND stt_active = '1'
				WHERE 1 AND bkg_status IN(2, 3, 4, 5, 6, 7) AND bkg_reconfirm_flag = 1";
		if ($fromDate != '' && $toDate != '')
		{
			$sql				 .= " AND bkg_pickup_date BETWEEN (:fromDate) AND (:toDate)";
			$params[":fromDate"] = $fromDate;
			$params[":toDate"]	 = $toDate;
		}
		if (count($bkgTypes) > 0)
		{
			$bkgtype			 = implode(',', $bkgTypes);
			$sql				 .= " AND bkg_booking_type IN (:bkgtype)";
			$params[":bkgtype"]	 = $bkgtype;
		}
		$sql	 .= " GROUP BY YEAR(bkg_pickup_date), MONTH(bkg_pickup_date), stt_id ";
		$count	 = DBUtil::queryScalar("SELECT COUNT(*) FROM ({$sql} ) temp", DBUtil::SDB3(), $params);
		if ($type == DBUtil::ReturnType_Provider)
		{
			$dataprovider = new CSqlDataProvider($sql, array(
				"totalItemCount" => $count,
				"params"		 => $params,
				'db'			 => DBUtil ::SDB3(),
				"pagination"	 => array("pageSize" => 100),
				'sort'			 => array('attributes'	 => array('bkg_id', 'cnt', 'PickupMonth', 'StateId'),
					'defaultOrder'	 => '')
			));
			return $dataprovider;
		}
		else
		{
			return DBUtil::query($sql, DBUtil::SDB3(), $params);
		}
	}

	public static function getBookingCountByState($fromDate, $toDate, $bkgTypes)
	{
		if ($fromDate != '' && $toDate != '')
		{
			$createFromDays		 = " AND bkg_pickup_date BETWEEN (:fromDate) AND (:toDate)";
			$params[":fromDate"] = $fromDate;
			$params[":toDate"]	 = $toDate;
		}

		if (count($bkgTypes) > 0)
		{
			$bkgtype			 = implode(',', $bkgTypes);
			$tripType			 = " AND bkg_booking_type IN (:bkgtype)";
			$params[":bkgtype"]	 = $bkgtype;
		}

		$sql = "SELECT COUNT(DISTINCT bkg_id) AS cnt,
					CONCAT(YEAR(bkg_pickup_date),'-', LPAD(MONTH(bkg_pickup_date), 2, '0')) AS PickupMonth,
					CONCAT(states.stt_name, '(',cty_state_id, ')' ) AS StateName, cty_state_id AS StateId
				FROM  booking
				JOIN booking_cab ON booking_cab.bcb_id = booking.bkg_bcb_id AND bcb_active = 1
				JOIN cities ON cty_id = bkg_from_city_id AND cities.cty_active = 1
				JOIN states ON stt_id = cty_state_id AND stt_active = '1'
				WHERE
					1 AND bkg_status IN(2, 3, 4, 5, 6, 7) $createFromDays AND bkg_reconfirm_flag = 1 $tripType
				GROUP BY YEAR(bkg_pickup_date), MONTH(bkg_pickup_date), stt_id ";

		$command		 = DBUtil::command($sql, DBUtil::SDB());
		$command->params = $params;
		return $command;
	}

	public static function saveBookingWithAddress($model = null)
	{
		$transaction = DBUtil::beginTransaction();
		try
		{
			$routes	 = $model->bookingRoutes;
			$model->setRoutes($routes);
			$success = $model->save();
			if (!$success)
			{
				throw new Exception(json_encode($model->getErrors()), ReturnSet::ERROR_VALIDATION);
			}


			$bkgModel = Booking::getNewInstance();

			$bkgId		 = $bkgModel->saveBooking($model->bkg_id);
			$bkgModel	 = Booking::model()->findByPk($bkgId);

			if ($model->bkg_agent_id == Config::get('Mobisign.partner.id') || $model->bkg_agent_id == Config::get('Kayak.partner.id'))
			{
				goto skipusercontact;
			}

			$userModel = Users::model()->findByPk($bkgModel->bkgUserInfo->bkg_user_id);
			if ($model->bkgTravellBy == null)
			{
				$contactId = ContactProfile::getByEntityId($userModel->user_id);
				if ($contactId == '')
				{
					$contactId = $userModel->usr_contact_id;
				}
				if ($contactId != '')
				{
					$contactModel = Contact::model()->findByPk($contactId);
				}

				$emailId				 = ContactEmail::getContactEmailById($contactId);
				//$model->bkgTravellBy = 1;
				$model->bkg_user_name	 = $contactModel->ctt_first_name;
				$model->bkg_user_lname	 = $contactModel->ctt_last_name;
				$model->bkg_user_email	 = $emailId;

				if (!Yii::app()->user->isGuest)
				{
					if ($model->bkg_user_name == '' && Yii::app()->user->loadUser()->usr_name != '')
					{
						$model->bkg_user_name	 = Yii::app()->user->loadUser()->usr_name;
						$userModel->usr_name	 = $model->bkg_user_name;
						if ($contactModel != null)
						{
							$contactModel->ctt_first_name = $model->bkg_user_name;
							$contactModel->save();
						}
						$userModel->save();
					}
					if ($model->bkg_user_lname == '' && Yii::app()->user->loadUser()->usr_lname != '')
					{
						$model->bkg_user_lname	 = Yii::app()->user->loadUser()->usr_lname;
						$userModel->usr_lname	 = $model->bkg_user_lname;
						if ($contactModel != null)
						{
							$contactModel->ctt_last_name = $model->bkg_user_lname;
							$contactModel->save();
						}
						$userModel->save();
					}
				}
				$model->save();
			}
			skipusercontact:
			$bkgModel->bkgUserInfo->bkg_user_fname		 = $model->bkg_user_name;
			$bkgModel->bkgUserInfo->bkg_user_lname		 = $model->bkg_user_lname;
			$bkgModel->bkgUserInfo->bkg_country_code	 = ($bkgModel->bkgUserInfo->bkg_country_code == 0) ? $userModel->usr_country_code : $bkgModel->bkgUserInfo->bkg_country_code;
			$bkgModel->bkgUserInfo->bkg_contact_no		 = $model->bkg_contact_no;
			$bkgModel->bkgUserInfo->bkg_traveller_type	 = $model->bkg_traveller_type;
			if ($model->bkg_user_email != '')
			{
				$bkgModel->bkgUserInfo->bkg_user_email = $model->bkg_user_email;
			}

			$result = BookingUser::model()->updateData($bkgModel->bkgUserInfo, $bkgId);
			if ($result)
			{

				$arrResult = BookingRoute::updateDistance($bkgModel, $bkgId);
			}

			$success = true;
			$hash	 = Yii::app()->shortHash->hash($bkgId);

			$url = Yii::app()->createUrl('booking/review', ['bkgid' => $bkgId, 'hash' => $hash]);

			if ($bkgModel->bkgPref->bkg_is_gozonow == 1)
			{
				$tripId		 = $bkgModel->bkg_bcb_id;
				$dataexist	 = BookingVendorRequest::getPreferredVendorbyBooking($tripId);

				if (!$dataexist)
				{
					//actionNotifyVendor
				}

				$url = Yii::app()->createUrl('gznow/' . $bkgId . '/' . $hash);
			}
			$isMAgent = ($model->bkg_agent_id == Config::get('Mobisign.partner.id')) ? 1 : 0;

			$return = ['success' => $success, 'isAddressSaved' => 1, 'url' => $url, 'data' => $arrResult, 'bkgId' => $bkgModel->bkg_id, 'hash' => $hash, 'isMAgent' => $isMAgent];

			DBUtil::commitTransaction($transaction);
		}
		catch (Exception $ex)
		{
			DBUtil::rollbackTransaction($transaction);
			$return = ["success" => false, 'errors' => ['bkg_id' => $ex->getMessage()]];
		}
		return $return;
	}

	public function ratePerKmByQuote($model, $type = DBUtil::ReturnType_Provider)
	{
		$fromDate		 = "$model->bkg_create_date1";
		$toDate			 = "$model->bkg_create_date2";
		$zoneType		 = $model->zoneType;
		$bkgTypes		 = $model->bkgtypes;
		$createFromDays	 = $condZoneType	 = $condtripType	 = '';

		if ($fromDate != '' && $toDate != '')
		{
			$createFromDays		 = " AND booking.bkg_create_date BETWEEN (:fromDate) AND (:toDate)";
			$params[":fromDate"] = $fromDate;
			$params[":toDate"]	 = $toDate;
		}

		if (count($zoneType) > 0)
		{
			$zoneType			 = implode(',', $zoneType);
			$condZoneType		 = " AND bpr.bpr_zone_type IN(:zoneType)";
			$params[":zoneType"] = $zoneType;
		}

		if (count($bkgTypes) > 0)
		{
			$bkgtype			 = implode(',', $bkgTypes);
			$condtripType		 = " AND bkg_booking_type IN(:bkgtype)";
			$params[":bkgtype"]	 = $bkgtype;
		}

		$sql = "SELECT booking.bkg_id AS bookingId,
					booking.bkg_create_date AS 'Create Date',
					booking.bkg_pickup_date AS 'Pickup Date',
					CASE WHEN stt.stt_zone = 1 THEN 'North' 
						WHEN stt.stt_zone = 2 THEN 'West' 
						WHEN stt.stt_zone = 3 THEN 'Central' 
						WHEN stt.stt_zone = 4 THEN 'South' 
						WHEN stt.stt_zone = 5 THEN 'East' 
						WHEN stt.stt_zone = 6 THEN 'North East' 
						WHEN stt.stt_zone = 7 THEN 'South-Kerala' ELSE '-'
					END AS 'Region',
					CASE WHEN booking.bkg_booking_type = 1 THEN 'One Way' 
						WHEN booking.bkg_booking_type = 2 THEN 'Round Trip/Multi City' 
						WHEN booking.bkg_booking_type = 3 THEN 'Round Trip/Multi City' 
						WHEN booking.bkg_booking_type = 4 THEN 'Airport Transfer' 
						WHEN booking.bkg_booking_type = 5 THEN 'Package' 
						WHEN booking.bkg_booking_type = 6 THEN 'Flexxi' 
						WHEN booking.bkg_booking_type = 7 THEN 'Shuttle' 
						WHEN booking.bkg_booking_type = 8 THEN 'Custom' 
						WHEN booking.bkg_booking_type = 9 THEN 'Day Rental 4hr-40km' 
						WHEN booking.bkg_booking_type = 10 THEN 'Day Rental 8hr-80km' 
						WHEN booking.bkg_booking_type = 11 THEN 'Day Rental 12hr-120km' 
						WHEN booking.bkg_booking_type = 12 THEN 'Airport Packages' ELSE '-'
					END AS 'Booking Type',
				scvc.scv_label AS 'Vehicle Type',
				z1.zon_name AS 'From Zone',
				z2.zon_name AS 'To Zone',
				bpr.bpr_zone_type AS 'Zone Type',
				sc.scc_label AS 'Service Class',
				CASE WHEN bpf.bkg_surge_applied = 0 THEN 'Regular' 
						WHEN bpf.bkg_surge_applied = 1 THEN 'Manual' 
						WHEN bpf.bkg_surge_applied = 2 THEN 'DDBP' 
						WHEN bpf.bkg_surge_applied = 4 THEN 'DTBP' 
						WHEN bpf.bkg_surge_applied = 5 THEN 'Profitability' 
						WHEN bpf.bkg_surge_applied = 7 THEN 'DZPP' 
						WHEN bpf.bkg_surge_applied = 6 THEN 'DZPP' ELSE '-'
					END AS 'surge Type',
				bkg_trip_distance AS 'Trip distance',
				ROUND(
					(
						bkg_gozo_amount / biv.bkg_total_amount
					) * 100,
					2
				) AS 'Reliazed Margin',
				biv_quote_base_rate_km AS 'Rate Per Kilometer'
				FROM booking
				JOIN booking_cab ON booking_cab.bcb_id = booking.bkg_bcb_id AND booking.bkg_active = 1 
				JOIN booking_invoice biv ON biv.biv_bkg_id = booking.bkg_id AND booking.bkg_active = 1 
				JOIN booking_pref bpr ON bpr.bpr_bkg_id = booking.bkg_id AND booking.bkg_active = 1 
				JOIN booking_price_factor bpf ON bpf.bpf_bkg_id = booking.bkg_id AND booking.bkg_active = 1 
				JOIN svc_class_vhc_cat scvc ON scvc.scv_id = booking.bkg_vehicle_type_id AND scvc.scv_active = 1 
				JOIN vehicle_category vhc ON scvc.scv_vct_id = vhc.vct_id AND vhc.vct_active = 1 
				JOIN service_class sc ON scvc.scv_scc_id = sc.scc_id AND sc.scc_active = 1 
				JOIN cities a ON a.cty_id = booking.bkg_from_city_id AND a.cty_active = 1 
				JOIN cities b ON b.cty_id = booking.bkg_to_city_id AND b.cty_active = 1 
				JOIN states stt ON stt.stt_id = a.cty_state_id AND stt.stt_active = '1'
				JOIN zone_cities zc1 ON zc1.zct_cty_id = booking.bkg_from_city_id AND zc1.zct_active = 1 
				JOIN zone_cities zc2 ON zc2.zct_cty_id = booking.bkg_to_city_id AND zc2.zct_active = 1 
				JOIN zones z1 ON z1.zon_id = zc1.zct_zon_id AND z1.zon_active = 1 
				JOIN zones z2 ON z2.zon_id = zc2.zct_zon_id AND z2.zon_active = 1 
				WHERE 1 AND booking.bkg_status IN(2, 3, 5, 6, 7) AND biv_quote_base_rate_km IS NOT NULL 
						AND bkg_trip_distance <> 0 
						AND biv_quote_base_rate_km > 14
					$createFromDays $condZoneType $condtripType
				GROUP BY booking_cab.bcb_id";

		$command		 = DBUtil::command($sql, DBUtil::SDB3());
		$command->params = $params;

		$count = DBUtil::queryScalar("SELECT COUNT(*) FROM ({$command->getText()} ) temp", DBUtil::SDB3(), $command->params);
		if ($type == DBUtil::ReturnType_Provider)
		{
			$dataprovider = new CSqlDataProvider($command, array(
				"totalItemCount" => $count,
				"params"		 => $command->params,
				'db'			 => DBUtil ::SDB3(),
				"pagination"	 => array("pageSize" => 1000),
				'sort'			 => array('attributes'	 => array('bookingId'),
					'defaultOrder'	 => 'biv_quote_base_rate_km DESC, booking.bkg_id ASC')
			));
			return $dataprovider;
		}
		else
		{
			return DBUtil::query($command->getText(), DBUtil::SDB3(), $command->params);
		}
	}

	public function regionWiseBookingCount($model, $type = DBUtil::ReturnType_Provider)
	{
		$fromDate		 = "$model->bkg_pickup_date1";
		$toDate			 = "$model->bkg_pickup_date2";
		$region			 = $model->bkg_region;
		$bkgRegion		 = $createFromDays	 = '';

		if (count($region) > 0)
		{
			$bkgRegion			 = " AND stt_zone =:region";
			$params[":region"]	 = $region;
		}

		if ($fromDate != '' && $toDate != '')
		{
			$createFromDays		 = " AND bkg_pickup_date BETWEEN (:fromDate) AND (:toDate)";
			$params[":fromDate"] = $fromDate;
			$params[":toDate"]	 = $toDate;
		}

		$sql = "SELECT COUNT(DISTINCT bkg_id) AS cnt, DATE(bkg_pickup_date) AS PickupDate,
					CASE WHEN stt_zone = 1 THEN 'North' 
					WHEN stt_zone = 2 THEN 'West' 
					WHEN stt_zone = 3 THEN 'Central' 
					WHEN stt_zone = 4 THEN 'South' WHEN stt_zone = 5 THEN 'East' 
					WHEN stt_zone = 6 THEN 'North East' 
					WHEN stt_zone = 7 THEN 'South-Kerala' ELSE '-'
				END AS Region
				FROM booking
				JOIN booking_cab ON booking_cab.bcb_id = booking.bkg_bcb_id AND bcb_active = 1 
				JOIN cities ON cty_id = bkg_from_city_id AND cities.cty_active = 1 
				JOIN states ON stt_id = cty_state_id AND stt_active = '1'
				WHERE 1 AND bkg_status IN(2, 3, 4, 5, 6, 7) 
				$createFromDays AND bkg_reconfirm_flag = 1 $bkgRegion
				GROUP BY PickupDate, stt_zone";

		$command		 = DBUtil::command($sql, DBUtil::SDB3());
		$command->params = $params;

		$count = DBUtil::queryScalar("SELECT COUNT(*) FROM ({$command->getText()} ) temp", DBUtil::SDB3(), $command->params);
		if ($type == DBUtil::ReturnType_Provider)
		{
			$dataprovider = new CSqlDataProvider($command, array(
				"totalItemCount" => $count,
				"params"		 => $command->params,
				'db'			 => DBUtil ::SDB3(),
				"pagination"	 => array("pageSize" => 1000),
				'sort'			 => array('attributes'	 => array('PickupDate'),
					'defaultOrder'	 => 'Region, PickupDate ASC')
			));
			return $dataprovider;
		}
		else
		{
			return DBUtil::query($command->getText(), DBUtil::SDB3(), $command->params);
		}
	}

	public function zoneZoneBookingCount($model, $type = DBUtil::ReturnType_Provider)
	{
		$fromDate	 = "$model->bkg_pickup_date1";
		$toDate		 = "$model->bkg_pickup_date2";
		$region		 = $model->bkg_region;
		$bkgTypes	 = $model->bkgtypes;
		$bkgAgentId	 = $model->bkg_agent_id;

		if ($region > 0)
		{
			$bkgRegion			 = " AND stt.stt_zone =:region";
			$params[":region"]	 = $region;
		}
		if ($fromDate != '' && $toDate != '')
		{
			$createFromDays		 = " AND bkg_pickup_date BETWEEN (:fromDate) AND (:toDate)";
			$params[":fromDate"] = $fromDate;
			$params[":toDate"]	 = $toDate;
		}
		if (count($bkgTypes) > 0)
		{
			$bkgtype			 = implode(',', $bkgTypes);
			$condtripType		 = " AND bkg_booking_type IN(:bkgtype)";
			$params[":bkgtype"]	 = $bkgtype;
		}
		if ($bkgAgentId > 0)
		{
			$condAgentId			 = " AND bkg_agent_id=:bkgAgentId ";
			$params[":bkgAgentId"]	 = $bkgAgentId;
		}

		$sql = "SELECT COUNT(DISTINCT bkg_id) AS cnt,
				DATE(bkg_pickup_date) AS PickupDate,
				CASE WHEN stt.stt_zone = 1 THEN 
					CONCAT(fromz.zon_name, '(', 'North', ')', ':', toz.zon_name ) WHEN stt.stt_zone = 2 THEN 
					CONCAT(fromz.zon_name,'(','West',')',':',toz.zon_name) WHEN stt.stt_zone = 3 THEN 
					CONCAT(fromz.zon_name,'(','Central',')',':',toz.zon_name) WHEN stt.stt_zone = 4 THEN 
					CONCAT(fromz.zon_name,'(','South',')',':',toz.zon_name) WHEN stt.stt_zone = 5 THEN 
					CONCAT(fromz.zon_name,'(','East',')', ':',toz.zon_name) WHEN stt.stt_zone = 6 THEN 
					CONCAT(fromz.zon_name,'(','North East',')',':',toz.zon_name) WHEN stt.stt_zone = 7 THEN 
					CONCAT(fromz.zon_name,'(','South',')',':',toz.zon_name) 
					ELSE '-' 
				END AS zon_name,
				CASE 
					WHEN bkg_booking_type = 1 THEN 'OW' 
					WHEN bkg_booking_type = 2 THEN 'RT' 
					WHEN bkg_booking_type = 3 THEN 'MW' 
					WHEN bkg_booking_type = 4 THEN 'AT' 
					WHEN bkg_booking_type = 8 THEN 'CT' 
					WHEN bkg_booking_type = 9 THEN 'DR/4-40' 
					WHEN bkg_booking_type = 10 THEN 'DR/8-80' 
					WHEN bkg_booking_type = 11 THEN 'DR/12-120' 
					WHEN bkg_booking_type = 12 THEN 'AP' 
					ELSE '-' 
				END AS trip_type 
				FROM
					booking
				JOIN cities fromCity ON fromCity.cty_id = bkg_from_city_id AND fromCity.cty_active = 1
				JOIN cities toCity ON toCity.cty_id = bkg_to_city_id AND toCity.cty_active = 1
				JOIN states stt ON stt.stt_id = fromCity.cty_state_id AND stt.stt_active = '1'
				JOIN states s2 ON s2.stt_id = toCity.cty_state_id AND s2.stt_active = '1'
				JOIN zone_cities fromzc ON fromzc.zct_cty_id = fromCity.cty_id AND fromzc.zct_active = 1
				JOIN zone_cities tozc ON tozc.zct_cty_id = toCity.cty_id AND tozc.zct_active = 1
				JOIN zones fromz ON fromz.zon_id = fromzc.zct_zon_id AND fromz.zon_active = 1
				JOIN zones toz ON toz.zon_id = tozc.zct_zon_id AND toz.zon_active = 1
				WHERE bkg_reconfirm_flag = 1 $createFromDays $bkgRegion $condtripType $condAgentId 
				GROUP BY PickupDate, fromz.zon_id, toz.zon_id, stt.stt_zone, bkg_booking_type";

		$command		 = DBUtil::command($sql, DBUtil::SDB3());
		$command->params = $params;

		$count = DBUtil::queryScalar("SELECT COUNT(*) FROM ({$command->getText()} ) temp", DBUtil::SDB3(), $command->params);
		if ($type == DBUtil::ReturnType_Provider)
		{
			$dataprovider = new CSqlDataProvider($command, array(
				"totalItemCount" => $count,
				"params"		 => $command->params,
				'db'			 => DBUtil ::SDB3(),
				"pagination"	 => array("pageSize" => 1000),
				'sort'			 => array('attributes'	 => array('PickupDate'),
					'defaultOrder'	 => 'PickupDate ASC, cnt DESC')
			));
			return $dataprovider;
		}
		else
		{
			return DBUtil::query($command->getText(), DBUtil::SDB3(), $command->params);
		}
	}

	public function zoneWiseBookingCount($model, $type = DBUtil::ReturnType_Provider)
	{
		$fromDate		 = "$model->bkg_pickup_date1";
		$toDate			 = "$model->bkg_pickup_date2";
		$region			 = $model->bkg_region;
		$bkgTypes		 = $model->bkgtypes;
		$stateId		 = $model->bkg_state;
		$createFromDays	 = $bkgRegion		 = $condtripType	 = $bkgState		 = '';

		if ($region > 0)
		{
			$bkgRegion			 = " AND stt_zone =:region";
			$params[":region"]	 = $region;
		}

		if ($fromDate != '' && $toDate != '')
		{
			$createFromDays		 = " AND  bkg_pickup_date BETWEEN (:fromDate) AND (:toDate)";
			$params[":fromDate"] = $fromDate;
			$params[":toDate"]	 = $toDate;
		}

		if (count($bkgTypes) > 0)
		{
			$bkgtype			 = implode(',', $bkgTypes);
			$condtripType		 = " AND booking.bkg_booking_type IN(:bkgtype)";
			$params[":bkgtype"]	 = $bkgtype;
		}

		if ($stateId > 0)
		{
			$bkgState			 = " AND stt_id =:stateId";
			$params[":stateId"]	 = $stateId;
		}

		$sql = "SELECT COUNT(DISTINCT bkg_id) AS cnt,
					DATE(bkg_pickup_date) AS PickupDate,
					CASE WHEN stt_zone = 1 THEN CONCAT(zon_name,  '(', 'North', ')') 
					WHEN stt_zone = 2 THEN CONCAT(zon_name, '(', 'West', ')') 
					WHEN stt_zone = 3 THEN CONCAT(zon_name, '(', 'Central', ')') 
					WHEN stt_zone = 4 THEN CONCAT(zon_name, '(', 'South', ')') 
					WHEN stt_zone = 5 THEN CONCAT(zon_name, '(', 'East', ')') 
					WHEN stt_zone = 6 THEN CONCAT(zon_name, '(', 'North East', ')') 
					WHEN stt_zone = 7 THEN CONCAT(zon_name, '(', 'South', ')') ELSE '-'
				END AS zon_name
				FROM
					booking
				JOIN cities ON cty_id = bkg_from_city_id AND cities.cty_active = 1
				JOIN states ON stt_id = cty_state_id AND stt_active = '1'
				JOIN zone_cities ON zct_cty_id = bkg_from_city_id AND zone_cities.zct_active = 1
				JOIN zones ON zon_id = zct_zon_id AND zon_active = 1
				WHERE bkg_reconfirm_flag = 1 $createFromDays $bkgRegion $condtripType $bkgState
				GROUP BY PickupDate, zon_id, stt_zone
				HAVING cnt >= 5";

		$command		 = DBUtil::command($sql, DBUtil::SDB3());
		$command->params = $params;

		$count = DBUtil::queryScalar("SELECT COUNT(*) FROM ({$command->getText()} ) temp", DBUtil::SDB3(), $command->params);
		if ($type == DBUtil::ReturnType_Provider)
		{
			$dataprovider = new CSqlDataProvider($command, array(
				"totalItemCount" => $count,
				"params"		 => $command->params,
				'db'			 => DBUtil ::SDB3(),
				"pagination"	 => array("pageSize" => 1000),
				'sort'			 => array('attributes'	 => array('PickupDate'),
					'defaultOrder'	 => 'PickupDate ASC, cnt DESC')
			));
			return $dataprovider;
		}
		else
		{
			return DBUtil::query($command->getText(), DBUtil::SDB3(), $command->params);
		}
	}

	public function salesAssistedPercentByTier($type = DBUtil::ReturnType_Provider)
	{
		$sql = "SELECT DATE(`booking`.`bkg_create_date`) AS `bkg_create_date`, `Service Class`.`scc_label` AS `Service Class__scc_label`, COUNT(*) AS `count`
				FROM `booking`
				INNER JOIN `booking_invoice` `Booking Invoice` ON `booking`.`bkg_id` = `Booking Invoice`.`biv_bkg_id`
				INNER JOIN `svc_class_vhc_cat` `Svc Class Vhc Cat` ON `booking`.`bkg_vehicle_type_id` = `Svc Class Vhc Cat`.`scv_id`
				INNER JOIN `service_class` `Service Class` ON `Svc Class Vhc Cat`.`scv_scc_id` = `Service Class`.`scc_id`
				INNER JOIN `admin_profiles` `Admin Profiles` ON `booking`.`bkg_admin_id` = `Admin Profiles`.`adp_adm_id`
				WHERE
					((`booking`.`bkg_status` = 6 OR `booking`.`bkg_status` = 2 OR `booking`.`bkg_status` = 3 OR `booking`.`bkg_status` = 5 OR `booking`.`bkg_status` = 7) 
					 AND `booking`.`bkg_pickup_date` >= STR_TO_DATE(CONCAT(DATE_FORMAT(DATE_ADD(NOW(6), INTERVAL -3 MONTH),'%Y-%m'),'-01'),'%Y-%m-%d') 
					 AND `booking`.`bkg_pickup_date` < STR_TO_DATE(CONCAT(DATE_FORMAT(DATE_ADD(NOW(6),INTERVAL 1 MONTH),'%Y-%m'),'-01'),'%Y-%m-%d') 
					 AND `Admin Profiles`.`adp_team_leader_id` = 467) GROUP BY  DATE(`booking`.`bkg_create_date`), `Service Class`.`scc_label`";

		$command = DBUtil::command($sql, DBUtil::SDB3());

		$count = DBUtil::queryScalar("SELECT COUNT(*) FROM ({$command->getText()} ) temp", DBUtil::SDB3());
		if ($type == DBUtil::ReturnType_Provider)
		{
			$dataprovider = new CSqlDataProvider($command, array(
				"totalItemCount" => $count,
				"params"		 => $command->params,
				'db'			 => DBUtil ::SDB3(),
				"pagination"	 => array("pageSize" => 1000),
				'sort'			 => array('attributes'	 => array('bkg_create_date'),
					'defaultOrder'	 => 'DATE(`booking`.`bkg_create_date`) ASC, `Service Class`.`scc_label` ASC')
			));
			return $dataprovider;
		}
		else
		{
			return DBUtil::query($command->getText(), DBUtil::SDB3(), $command->params);
		}
	}

	/**
	 * Fetching booking Details view 
	 * @return type dataProvider
	 */
	public static function bookingDetailsByIds($bkgIds)
	{
		$bkgIds			 = is_string($bkgIds) ? $bkgIds : strval($bkgIds);
		DBUtil::getINStatement($bkgIds, $bindString, $params);
		$sql			 = "SELECT 
				bkg_id,
				CASE
					 WHEN bcb_assign_mode = 0 THEN 'AUTO'
					 WHEN bcb_assign_mode = 1 THEN 'MANUAL' 
					 WHEN bcb_assign_mode = 2 THEN 'DIRECT ACCEPT'
					 ELSE '-'
				END AS 'assigned_mode',
				booking_trail.bkg_assigned_at,
				admins.gozen,
				bkg_gozo_amount,
				bkg_pickup_date
				FROM booking
				INNER JOIN booking_cab ON booking_cab.bcb_id=booking.bkg_bcb_id
				INNER JOIN booking_invoice ON booking_invoice.biv_bkg_id=booking.bkg_id
				INNER JOIN booking_trail ON booking_trail.btr_bkg_id=booking.bkg_id
				LEFT JOIN admins ON admins.adm_id=booking_cab.bcb_assigned_csr
				WHERE 1 
				AND booking.bkg_id IN ({$bindString})
				AND booking_cab.bcb_active=1";
		$count			 = DBUtil::queryScalar("SELECT COUNT(*) FROM ($sql) temp", DBUtil::SDB(), $params);
		$dataprovider	 = new CSqlDataProvider($sql, array(
			"totalItemCount" => $count,
			"params"		 => $params,
			'db'			 => DBUtil ::SDB(),
			"pagination"	 => array("pageSize" => 100),
			'sort'			 => array('attributes'	 => array('bkg_id', 'assigned_mode', 'bkg_assigned_at', 'bkg_gozo_amount'),
				'defaultOrder'	 => 'DATE(`booking`.`bkg_create_date`) ASC')
		));
		return $dataprovider;
	}

	/**
	 * 
	 * @param array $params
	 * @return \CSqlDataProvider
	 */
	public static function bookingListByDispatch($arr)
	{
		$params						 = [];
		$params['admId']			 = $arr['admId'];
		$params['assignFromDate']	 = $arr['assignFromDate'] . " 00:00:00";
		$params['assignToDate']		 = $arr['assignToDate'] . " 23:59:59";
		if ($arr['pickupDate1'] != '')
		{
			$params['pickupDate1'] = $arr['pickupDate1'] . " 00:00:00";
		}
		if ($arr['pickupDate2'] != '')
		{
			$params['pickupDate2'] = $arr['pickupDate2'] . " 23:59:59";
		}
		if ($arr['region'] != '')
		{
			$sqlRegion	 .= " INNER JOIN cities c1 ON c1.cty_id=bkg_from_city_id AND c1.cty_active=1
							 INNER JOIN states s1 ON s1.stt_id=c1.cty_state_id AND s1.stt_active = '1'";
			$strRegion	 = implode(',', $arr['region']);
		}

		if ($arr['assignMode'] != '' && $arr['assignMode'] != null)
		{
			$params['assignMode']	 = $arr['assignMode'];
			$sqlAssignMode			 .= " AND booking_cab.bcb_assign_mode=:assignMode";
			$strAssignMode			 = implode(',', $arr['assignMode']);
		}


		$baseSql = "SELECT
				booking.bkg_id,
				booking.bkg_pickup_date,
				booking.bkg_booking_id,
				IF(booking.bkg_status <> 9, (booking_invoice.bkg_gozo_amount - booking_invoice.bkg_credits_used), 0) as bkg_gozo_amount,
				booking_vendor_request.bvr_assigned_at,
				admins.gozen,
				CASE
				WHEN bcb_assign_mode = 0 THEN 'AUTO'
				WHEN bcb_assign_mode = 1 THEN 'MANUAL'
				WHEN bcb_assign_mode = 2 THEN 'DIRECT ACCEPT'
				ELSE '-'
				END AS 'assigned_mode'
				FROM `booking`
				INNER JOIN `booking_invoice` ON booking_invoice.biv_bkg_id = booking.bkg_id
				INNER JOIN `booking_pref` ON booking_pref.bpr_bkg_id = booking.bkg_id
				INNER JOIN `booking_vendor_request` ON booking_vendor_request.bvr_booking_id = booking.bkg_id AND booking_vendor_request.bvr_assigned_at IS NOT NULL
				INNER JOIN `booking_cab` ON booking_cab.bcb_id = booking_vendor_request.bvr_bcb_id AND booking_cab.bcb_vendor_id = booking_vendor_request.bvr_vendor_id AND bkg_bcb_id = bcb_id
				INNER JOIN `admins` ON booking_cab.bcb_assigned_csr = admins.adm_id $sqlRegion $sqlAssignMode
				WHERE 1";

		$where = " AND booking.bkg_status IN (3, 5, 6, 7, 9) 
				AND admins.adm_id = :admId
				AND booking.bkg_pickup_date >= :assignFromDate
				AND booking_vendor_request.bvr_assigned_at BETWEEN :assignFromDate AND :assignToDate";

		if ($arr['region'] != '')
		{
			$where .= " AND s1.stt_zone IN ($strRegion)";
		}
		if ($params['assignMode'] != '' && $params['assignMode'] != null)
		{
			$where .= " AND bcb_assign_mode IN ($strAssignMode) ";
		}
		if ($arr['nonManualAssigned'] == 1)
		{
			$where .= " AND bkg_manual_assignment = 0";
		}
		if ($arr['isProfitAssigned'] == 1)
		{
			$where .= " AND (booking_invoice.bkg_gozo_amount - booking_invoice.bkg_credits_used > 0)";
		}
		if ($arr['isLossAssigned'] == 1)
		{
			$where .= " AND (booking_invoice.bkg_gozo_amount - booking_invoice.bkg_credits_used < 0)";
		}
		if ($arr['isManual'] > 0)
		{
			$where .= " AND (bkg_manual_assignment=" . $arr['isManual'] . " AND bkg_critical_assignment=0)";
		}
		if ($arr['isCritical'] > 0)
		{
			$where .= " AND bkg_critical_assignment=" . $arr['isCritical'] . "";
		}

		if ($params['pickupDate1'] != '' && $params['pickupDate2'] != '')
		{
			$where .= " AND (bkg_pickup_date BETWEEN :pickupDate1 AND :pickupDate2) ";
		}


		$sql = $baseSql . $where;

		$count			 = DBUtil::queryScalar("SELECT COUNT(*) FROM ($sql) temp", DBUtil::SDB(), $params);
		$dataprovider	 = new CSqlDataProvider($sql, array(
			"totalItemCount" => $count,
			"params"		 => $params,
			'db'			 => DBUtil ::SDB(),
			"pagination"	 => array("pageSize" => 100),
			'sort'			 => array('attributes'	 => array('bkg_id', 'bkg_pickup_date', 'assigned_mode', 'bkg_assigned_at', 'bkg_gozo_amount'),
				'defaultOrder'	 => 'bkg_id DESC')
		));
		return $dataprovider;
	}

	/**
	 * Fetching booking  region and booking type from particular booking id 
	 * @param integer $bkgId
	 * @return type queryRow
	 */
	public static function getRegionBookingType($bkgId)
	{
		$sql = "SELECT 
					stt_zone AS region,
					fromCty.cty_display_name AS fromCityName,
					toCty.cty_display_name AS toCityName,
					bkg_booking_type AS bookingType,
					bkg_bcb_id,
					bkg_booking_id,
				CASE
					WHEN bkg_booking_type=1 THEN  'One Way'
					WHEN bkg_booking_type=2 THEN  'Round Trip/Multi City'
					WHEN bkg_booking_type=3 THEN  'Round Trip/Multi City'
					WHEN bkg_booking_type=4 THEN  'Airport Transfer'
					WHEN bkg_booking_type=5 THEN  'Package'
					WHEN bkg_booking_type=6 THEN  'Flexxi'
					WHEN bkg_booking_type=7 THEN  'Shuttle'
					WHEN bkg_booking_type=8 THEN  'Custom'
					WHEN bkg_booking_type=9 THEN  'Day Rental 4hr-40km'
					WHEN bkg_booking_type=10 THEN  'Day Rental 8hr-80km'
					WHEN bkg_booking_type=11 THEN  'Day Rental 12hr-120km'
					WHEN bkg_booking_type=12 THEN  'Airport Packages'
					WHEN bkg_booking_type=14 THEN  'Point to point (within-the-city)'
					WHEN bkg_booking_type=15 THEN  'Local Transfer'
					WHEN bkg_booking_type=16 THEN  'Day Rental 10hr-100km'	
				END AS tripType,
				vhc.vct_label,
				booking.bkg_pickup_date,
				bkg_critical_score AS  criticalScore
				FROM booking 
					INNER JOIN booking_pref  ON booking_pref.bpr_bkg_id = booking.bkg_id
					INNER JOIN svc_class_vhc_cat scv ON booking.bkg_vehicle_type_id = scv.scv_id
					INNER JOIN vehicle_category vhc ON scv.scv_vct_id = vhc.vct_id AND vhc.vct_active=1
					INNER JOIN cities fromCty ON fromCty.cty_id =booking.bkg_from_city_id 
					INNER JOIN cities toCty ON toCty.cty_id =booking.bkg_to_city_id 
					INNER JOIN states ON states.stt_id =fromCty.cty_state_id 
				WHERE 1
					AND vhc.vct_active=1
					AND stt_zone IS NOT NULL
					AND stt_zone <> ''
					AND booking.bkg_active=1
					AND bkg_id=:bkgId
					AND fromCty.cty_active=1 
					AND toCty.cty_active=1 
					AND states.stt_active='1'
				GROUP BY booking.bkg_id";
		return DBUtil::queryRow($sql, DBUtil::SDB(), ['bkgId' => $bkgId]);
	}

	/**
	 * 
	 * @return data reader
	 */
	public static function getBookingByBidAccepted()
	{
		$sql		 = "SELECT bkg_id, bvr.bvr_bid_amount, oat.oat_id
				FROM booking bkg
					INNER JOIN operator_api_tracking oat ON oat.oat_booking_id = bkg.bkg_id
					INNER JOIN booking_vendor_request bvr ON bvr.bvr_booking_id = bkg.bkg_id
					INNER JOIN booking_invoice biv ON biv.biv_bkg_id = bvr.bvr_booking_id
				WHERE bkg.bkg_pickup_date > NOW() AND bkg.bkg_status IN(3) AND oat.oat_type = 7 
					AND oat.oat_status = 2 AND bvr.bvr_accepted = 1 AND bvr.bvr_assigned = 1
					 GROUP BY bkg_id";
		$resultSet	 = DBUtil::query($sql, DBUtil::SDB3());
		return $resultSet;
	}

	public function calculateCancelChargeWithoutGst($bkgModel)
	{
		$bkgId			 = $bkgModel->bkg_id;
		$rule			 = CancellationPolicy::getRule($bkgModel->bkgPref->bkg_cancel_rule_id);
		$minCharges		 = $rule["minCharges"];
		$timeRules		 = $rule["timeRules"];
		$chargesNoShow	 = $rule["chargesNoShow"];
		$amount			 = $bkgModel->bkgInvoice->bkg_total_amount;
		$advance		 = $bkgModel->bkgInvoice->bkg_advance_amount;
		$cancelCharge	 = CancellationPolicy::CalculateCharges($minCharges, $amount);
		$cancelCharge	 = min([$advance, $cancelCharge]);
		if ($advance == $cancelCharge)
		{
			$refundAmount			 = round($bkgModel->bkgInvoice->bkg_advance_amount * 0.105);
			$cancelCharges->charges	 = ($bkgModel->bkgInvoice->bkg_advance_amount - $refundAmount);
		}
		return $cancelCharge;
	}

	public static function getchannelPartnerBookingData($pushType)
	{
		$agentId = Config::get('Kayak.partner.id');

		$stDate	 = date("Y-m-d 00:00:00", strtotime("-1 day"));
		$edDate	 = date("Y-m-d 23:59:59", strtotime("-1 day"));

		if ($pushType != "daily")
		{
			$stDate	 = date("Y-m-01 00:00:00", strtotime("-5 day"));
			$edDate	 = date("Y-m-t 23:59:59", strtotime("-5 day"));
		}
		$strCond = " AND ((bkg_create_date BETWEEN '{$stDate}' AND '{$edDate}') OR (btr_cancel_date BETWEEN '{$stDate}' AND '{$edDate}'))";

		$sql = "SELECT bkg_id,bkg_partner_ref_id,bkg_booking_id,bkg_create_date,bkg_status,bcb_start_time,bcb_end_time,btr_cancel_date,
				bkg_total_amount,bkg_partner_commission,bkg_advance_amount,bkg_cancel_id,bkg_cancel_charge,bkg_refund_amount,btr_mark_complete_date
				FROM booking
				INNER JOIN booking_cab ON bcb_id = bkg_bcb_id
				INNER JOIN booking_pref ON bpr_bkg_id = bkg_id
				INNER JOIN booking_trail ON btr_bkg_id = bkg_id
				INNER JOIN booking_invoice ON biv_bkg_id = bkg_id
				WHERE bkg_agent_id =:agentId AND bkg_status IN (2,3,5,6,7,9) " . $strCond;

		$bookingArr = DBUtil::query($sql, DBUtil::SDB(), ['agentId' => $agentId]);
		return $bookingArr;
	}

	public static function channelPartnerPushReport($pushType = 'daily')
	{
		$agentId = Config::get('Kayak.partner.id');

		$agtCode	 = Agents::model()->findByPk($agentId)->agt_code;
		$bookingArr	 = self::getchannelPartnerBookingData($pushType);

		$arrDataCsv		 = [];
		$arrDataCsv[]	 = ['PartnerCode', 'KayakClickID', 'BookingID', 'BookedOn', 'TransactionType', 'TransactedOn', 'ClientCurrencyCode', 'GrossBookingValueClientCurrency',
			'ReportingCurrencyCode', 'GrossBookingValueReportingCurrency', 'CommissionDueReportingCurrency', 'CarPickupDate', 'CarDropOffDate', 'PaymentType',
			'IsNonRefundable', 'CancellationType', 'Locale', 'Platform', 'SiteBrand', 'CarPickupLocationID', 'CarDropOffLocationID', 'CarAgencyID', 'CarClass',
			'CarMakeModelName', 'CommissionCollectedReportingCurrency'
		];
		foreach ($bookingArr as $booking)
		{
			$datetime	 = new DateTime($booking['bkg_create_date'], new DateTimeZone('Asia/Kolkata'));
			$bookedOn	 = gmdate("Y-m-d\TH:i:s\Z", $datetime->getTimestamp());

			$blg_created = BookingLog::getInitialInfoChangedDate($booking['bkg_id']);
			if ($blg_created != '')
			{
				$blgdatetime = new DateTime($blg_created, new DateTimeZone('Asia/Kolkata'));
				$blg_created = gmdate("Y-m-d\TH:i:s\Z", $blgdatetime->getTimestamp());
			}
			$cancelledOn = null;
			if ($booking['btr_cancel_date'] != '')
			{
				$canceldatetime	 = new DateTime($booking['btr_cancel_date'], new DateTimeZone('Asia/Kolkata'));
				$cancelledOn	 = gmdate("Y-m-d\TH:i:s\Z", $canceldatetime->getTimestamp());
			}
			$transactionType = (in_array($booking['bkg_status'], [9, 10])) ? "Cancelled" : (($blg_created != "") ? "Modified" : "New");
			$transactedOn	 = ($transactionType == "Cancelled") ? $cancelledOn : (($transactionType == "Modified") ? $blg_created : $bookedOn);
			if ($pushType != 'daily' && in_array($booking['bkg_status'], [6, 7]))
			{
				$transactionType	 = "Completed";
				$transactiondatetime = new DateTime($booking['btr_mark_complete_date'], new DateTimeZone('Asia/Kolkata'));
				$transactedOn		 = gmdate("Y-m-d\TH:i:s\Z", $transactiondatetime->getTimestamp());
			}

			$paymentType		 = ($booking['bkg_advance_amount'] == $booking['bkg_total_amount']) ? 'Prepay' : (($booking['bkg_advance_amount'] == 0) ? 'Postpay' : 'Deposit');
			$IsNonRefundable	 = ($booking['bkg_status'] == 9 && $booking['bkg_cancel_charge'] == $booking['bkg_total_amount'] && $booking['bkg_refund_amount'] == 0 && $booking['bkg_advance_amount'] > 0) ? 1 : 0;
			$CancellationType	 = null;

			if ($transactionType == "Cancelled")
			{
				$CancellationType = 'Other';
				if (in_array($booking['bkg_cancel_id'], [1, 2, 4, 5, 6, 12, 13, 15, 29, 31, 37]))
				{
					$CancellationType = 'Client';
				}
				if (in_array($booking['bkg_cancel_id'], [9]))
				{
					$CancellationType = 'Agency';
				}
				if (in_array($booking['bkg_cancel_id'], [3, 21]))
				{
					$CancellationType = 'No Show';
				}
				if (in_array($booking['bkg_cancel_id'], [7, 10, 11, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 32, 33, 34, 35, 36, 38, 40, 39, 41, 42]))
				{
					$CancellationType = 'Other';
				}
				if (in_array($booking['bkg_cancel_id'], [0]))
				{
					$CancellationType = 'Fraud';
				}
			}

			$carPickupdatetime	 = new DateTime($booking['bcb_start_time'], new DateTimeZone('Asia/Kolkata'));
			$carPickupDate		 = gmdate("Y-m-d\TH:i:s\Z", $carPickupdatetime->getTimestamp());

			$carDropOffdatetime	 = new DateTime($booking['bcb_end_time'], new DateTimeZone('Asia/Kolkata'));
			$carDropOffDate		 = gmdate("Y-m-d\TH:i:s\Z", $carDropOffdatetime->getTimestamp());

			$arrData = [
				'PartnerCode'							 => $agtCode,
				'KayakClickID'							 => $booking['bkg_partner_ref_id'],
				'BookingID'								 => $booking['bkg_booking_id'],
				'BookedOn'								 => $bookedOn,
				'TransactionType'						 => $transactionType,
				'TransactedOn'							 => $transactedOn,
				'ClientCurrencyCode'					 => 'INR',
				'GrossBookingValueClientCurrency'		 => $booking['bkg_total_amount'],
				'ReportingCurrencyCode'					 => 'INR',
				'GrossBookingValueReportingCurrency'	 => $booking['bkg_total_amount'],
				'CommissionDueReportingCurrency'		 => $booking['bkg_partner_commission'],
				'CarPickupDate'							 => $carPickupDate,
				'CarDropOffDate'						 => $carDropOffDate,
				'PaymentType'							 => $paymentType,
				'IsNonRefundable'						 => $IsNonRefundable,
				'CancellationType'						 => $CancellationType,
				'Locale'								 => null,
				'Platform'								 => null,
				'SiteBrand'								 => null,
				'CarPickupLocationID'					 => null,
				'CarDropOffLocationID'					 => null,
				'CarAgencyID'							 => null,
				'CarClass'								 => null,
				'CarMakeModelName'						 => null,
				'CommissionCollectedReportingCurrency'	 => null
			];

			$arrDataCsv[] = array_values($arrData);
		}

		$path = Yii::app()->basePath . DIRECTORY_SEPARATOR . 'doc' . DIRECTORY_SEPARATOR . Config::getServerID() . DIRECTORY_SEPARATOR . 'partner' . DIRECTORY_SEPARATOR . 'reports' . DIRECTORY_SEPARATOR . $agentId . DIRECTORY_SEPARATOR . date('Y', strtotime("yesterday"));
		if (!is_dir($path))
		{
			$checkFolderdir = mkdir($path, 0755, true);
			chmod($path, 0755);
			if (!$checkFolderdir)
			{
				echo "Failed to create dir: " . $path;
				exit;
			}
		}
		$filenameWithoutext = $agtCode . "-car-daily-" . date('Y-m-d', strtotime("yesterday"));

		if ($pushType == "monthly")
		{
			$filenameWithoutext = $agtCode . "-car-monthly-" . date('Y-m', strtotime("-5 day")) . '-01';
		}
		$fileName	 = $filenameWithoutext . ".csv";
		$filePath	 = $path . DIRECTORY_SEPARATOR . $fileName;
		$handle		 = fopen($filePath, 'w');
		if (!$handle)
		{
			echo "error opening file";
			return false;
		}

		foreach ($arrDataCsv as $line)
		{
			fputcsv($handle, $line);
		}
		fclose($handle);

		//$toArr = ['salesreporting@kayak.com', 'ar@kayak.com', 'tarun@kayak.com', 'upatel@kayak.com', 'gaurav@gozo.cab', 'kaushal.goenka@gozo.cab'];
		$toArr = json_decode(Config::get('kayak.report.mailids'));

		foreach ($toArr as $value)
		{
			$emailCom = new emailWrapper();
			$emailCom->bookingReportToPartner($filenameWithoutext, $filePath, $value);
		}
	}

	/**
	 * 
	 * @return \CSqlDataProvider
	 */
	public function getTFRCancelled($type = '', $sort = '')
	{
		$where		 = '';
		$dateRange	 = '';
		$params		 = [];

		if (!$this->bkg_pickup_date1 || !$this->bkg_pickup_date2)
		{
			$dateRange = " AND bkg.bkg_pickup_date > DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) ";
		}
		else
		{
			$fromDate	 = $this->bkg_pickup_date1;
			$toDate		 = $this->bkg_pickup_date2;
			$dateRange	 = " AND bkg.bkg_pickup_date<= '$toDate 23:59:59' AND bkg.bkg_pickup_date>= '$fromDate 00:00:00' ";
		}
		if (trim($this->bkg_booking_id) != '')
		{
			$params['bkgCode'] = trim($this->bkg_booking_id);

			$where		 = " AND (bkg.bkg_booking_id = :bkgCode 
 							OR bkg.bkg_id = :bkgCode 
							OR bkg.bkg_agent_ref_code = :bkgCode) ";
			$dateRange	 = '';
		}

		$sql = "SELECT bkg.bkg_id,bkg.bkg_booking_id,bkg.bkg_agent_ref_code,
			bkg.bkg_cancel_id,bkg.bkg_cancel_delete_reason ,bkg.bkg_status,
			IF(bkg.bkg_status=9,'Cancelled','Auto Cancelled') bkg_status_name,
			bkg.bkg_create_date,bkg.bkg_pickup_date,btr.btr_cancel_date,
			TIMESTAMPDIFF( MINUTE, bkg.bkg_create_date,btr.btr_cancel_date)AS cancelDateDiff,
			 btr.bkg_cancel_user_id,btr.bkg_cancel_user_type,cr.cnr_reason,
		   concat(adm.adm_fname,' ',adm.adm_lname) admName 
		   FROM booking bkg 
		   JOIN booking_pref bpr ON bpr.bpr_bkg_id = bkg.bkg_id AND bpr.bkg_is_fbg_type=1
		   JOIN booking_trail btr ON btr.btr_bkg_id = bkg.bkg_id 
		   LEFT JOIN cancel_reasons cr ON cr.cnr_id = bkg.bkg_cancel_id 
		   LEFT JOIN admins adm ON adm.adm_id = btr.bkg_cancel_user_id AND btr.bkg_cancel_user_type = 4
		   WHERE bkg.bkg_status IN (9,10) $dateRange $where";

		$defaultOrder = ($sort != '') ? $sort : 'btr_cancel_date DESC';
		if ($type == 'export')
		{
			return DBUtil::query($sql . " ORDER BY $defaultOrder", DBUtil::SDB3(), $params);
		}

		$count			 = DBUtil::queryScalar("SELECT COUNT(*) FROM ($sql) abc", DBUtil::SDB(), $params);
		$dataprovider	 = new CSqlDataProvider($sql, [
			'params'		 => $params,
			'totalItemCount' => $count,
			'sort'			 => ['attributes'	 => ['bkg_booking_id', 'bkg_create_date', 'bkg_pickup_date', 'btr_cancel_date', 'cancelDateDiff'],
				'defaultOrder'	 => 'btr_cancel_date DESC'], 'pagination'	 => ['pageSize' => 50],
		]);
		return $dataprovider;
	}

	/**
	 * 
	 * @return array ['label'=>$label,'isNegative'=>$isNegative, 'value'=>$value]
	 */
	public function getAppliedAddonList()
	{
		$model			 = $this;
		$arr			 = [];
		$addonDetails	 = json_decode($model->bkgInvoice->bkg_addon_details, true);
		//$addonCharge	 = (preg_match('/-/', $model->bkgInvoice->bkg_addon_charges)) ? str_replace('-', '', $model->bkgInvoice->bkg_addon_charges) : $model->bkgInvoice->bkg_addon_charges;
		//$minusSymbol	 = (preg_match('/-/', $model->bkgInvoice->bkg_addon_charges)) ? '(-)' : '';

		foreach ($addonDetails as $row)
		{
			if ($row['adn_type'] == 1)
			{
				$label = CancellationPolicyDetails::model()->findByPk($model->bkgPref->bkg_cancel_rule_id)->cnp_label;
			}
			if ($row['adn_type'] == 2)
			{
				$label = SvcClassVhcCat::model()->findByPk($model->bkg_vehicle_type_id)->scv_label;
			}
			$addonCharge = (preg_match('/-/', $row['adn_value'])) ? str_replace('-', '', $row['adn_value']) : $row['adn_value'];
			$minusSymbol = (preg_match('/-/', $row['adn_value'])) ? '(-)' : '';
			$isNegative	 = (preg_match('/-/', $row['adn_value']));

			$arr[] = ['label' => $label, 'isNegative' => $isNegative, 'value' => $minusSymbol . " " . Filter::moneyFormatter($addonCharge)];
		}
		return $arr;
	}

	public function setAccountMismatchFlag($bkgId = null)
	{
		$isAccountMisMatch = $this->bkgInvoice->checkAccountMisMatch();
		if ($isAccountMisMatch)
		{
			$desc		 = "Accounts mismatch in actual collected and estimated collected amount";
			$userInfo	 = UserInfo::model();
			$this->bkgPref->setAccountingFlag($desc, $userInfo);
			// create service call que
			if ($bkgId > 0)
			{
				ServiceCallQueue::addFollowupForExtraDriverCollected($bkgId);
			}
		}
	}

	public static function monthWiseDailyMetric($date)
	{
		$sql = 'SELECT * FROM 
				(
					SELECT 
					DATE_FORMAT(bkg_pickup_date,"%Y-%m") AS MONTH,
                    1 AS TYPE,
					DAYOFMONTH(LAST_DAY(bkg_pickup_date)) AS MONTH_DAYS,
					ROUND(SUM(IF(bkg_agent_id IS NULL,1,NULL))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS B2C_PER_DAY_CNT,
					ROUND(SUM(IF(bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16),1,NULL))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS B2C_PER_DAY_CNT_LOCAL,
					ROUND(SUM(IF(bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16),1,NULL))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS B2C_PER_DAY_CNT_OUTSTATION,
					ROUND(SUM(IF((bkg_agent_id IS NULL AND bkg_is_gozonow IN (1)),1,0))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS B2C_GN_PER_DAY_CNT,
					ROUND(SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow IN (1) ),1,0))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS B2C_GN_PER_DAY_CNT_LOCAL,
					ROUND(SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow IN (1) ),1,0))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS B2C_GN_PER_DAY_CNT_OUTSTATION,
					ROUND(SUM(IF((bkg_agent_id IS NULL AND bkg_is_gozonow NOT IN (1) ),1,0))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS B2C_NON_GN_PER_DAY_CNT,
					ROUND(SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow NOT IN (1) ),1,0))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS B2C_NON_GN_PER_DAY_CNT_LOCAL,
					ROUND(SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow NOT IN (1) ),1,0))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS B2C_NON_GN_PER_DAY_CNT_OUTSTATION,
					ROUND(SUM(if(bkg_agent_id IS NOT NULL AND bkg_agent_id IN (450,18190) ,1,NULL))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS MMT_PER_DAY_CNT,
					ROUND(SUM(if(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16)  AND bkg_agent_id IN (450,18190) ,1,NULL))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS MMT_PER_DAY_CNT_LOCAL,
					ROUND(SUM(if(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_agent_id IN (450,18190) ,1,NULL))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS MMT_PER_DAY_CNT_OUTSTATION,
					ROUND(SUM(if(bkg_agent_id IS NOT NULL AND bkg_agent_id NOT IN (450,18190) ,1,NULL))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS OTHER_PARTNER_PER_DAY_CNT,
					ROUND(SUM(if(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_agent_id NOT IN (450,18190) ,1,NULL))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS OTHER_PARTNER_PER_DAY_CNT_LOCAL,
					ROUND(SUM(if(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_agent_id NOT IN (450,18190) ,1,NULL))/DAYOFMONTH(LAST_DAY(bkg_pickup_date)),2) AS OTHER_PARTNER_PER_DAY_CNT_OUTSTATION,
					SUM(IF(bkg_agent_id IS NULL,1,NULL)) AS B2C_TOTAL,
					SUM(IF(bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) ,1,NULL)) AS B2C_TOTAL_LOCAL,
					SUM(IF(bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) ,1,NULL)) AS B2C_TOTAL_OUTSTATION,
					SUM(IF((bkg_agent_id IS NULL AND bkg_is_gozonow IN (1) ),1,0)) AS B2C_GN_TOTAL,
					SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow IN (1) ),1,0)) AS B2C_GN_TOTAL_LOCAL,
					SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow IN (1) ),1,0)) AS B2C_GN_TOTAL_OUTSTATION,
					SUM(IF((bkg_agent_id IS NULL AND bkg_is_gozonow NOT IN (1) ),1,0)) AS B2C_NON_GN_TOTAL,
					SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow NOT IN (1) ),1,0)) AS B2C_NON_GN_TOTAL_LOCAL,
					SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow NOT IN (1) ),1,0)) AS B2C_NON_GN_TOTAL_OUTSTATION,
					SUM(IF(bkg_agent_id IS NOT NULL AND bkg_agent_id IN (450,18190) ,1,NULL)) AS MMT_TOTAL,
					SUM(IF(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_agent_id IN (450,18190) ,1,NULL)) AS MMT_TOTAL_LOCAL,
					SUM(IF(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_agent_id IN (450,18190) ,1,NULL)) AS MMT_TOTAL_OUTSTATION,
					SUM(IF(bkg_agent_id IS NOT NULL AND bkg_agent_id NOT IN (450,18190) ,1,NULL)) AS OTHER_PARTNER_TOTAL,
					SUM(IF(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type  IN (4,9,10,11,12,14,15,16) AND bkg_agent_id NOT IN (450,18190) ,1,NULL)) AS OTHER_PARTNER_TOTAL_LOCAL,
					SUM(IF(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_agent_id NOT IN (450,18190) ,1,NULL)) AS OTHER_PARTNER_TOTAL_OUTSTATION
					
					FROM booking 
					INNER JOIN booking_trail ON booking_trail.btr_bkg_id = booking.bkg_id
					INNER JOIN booking_pref ON booking_pref.bpr_bkg_id=booking.bkg_id
					WHERE 1 
					  AND bkg_pickup_date BETWEEN CONCAT(DATE_SUB(DATE_FORMAT(:date,"%Y-%m-01"), INTERVAL 3 MONTH) ," 00:00:00") AND CONCAT(LAST_DAY(:date - INTERVAL 1 MONTH) ," 23:59:59")
					  AND booking.bkg_active=1
					  AND booking.bkg_status IN (6,7)
					GROUP BY MONTH
                
					UNION 
               
					SELECT 
						DATE_FORMAT(bkg_pickup_date,"%Y-%m") AS MONTH,
						2 AS TYPE,
						DAY(:date) AS MONTH_DAYS,
						
						ROUND(SUM(IF(bkg_agent_id IS NULL,1,NULL))/DAY(:date),2) AS B2C_PER_DAY_CNT,
						ROUND(SUM(IF(bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16),1,NULL))/DAY(:date),2) AS B2C_PER_DAY_CNT_LOCAL,
						ROUND(SUM(IF(bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16),1,NULL))/DAY(:date),2) AS B2C_PER_DAY_CNT_OUTSTATION,
						ROUND(SUM(IF((bkg_agent_id IS NULL AND bkg_is_gozonow IN (1) ),1,0))/DAY(:date),2) AS B2C_GN_PER_DAY_CNT,
						ROUND(SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow IN (1) ),1,0))/DAY(:date),2) AS B2C_GN_PER_DAY_CNT_LOCAL,
						ROUND(SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow IN (1) ),1,0))/DAY(:date),2) AS B2C_GN_PER_DAY_CNT_OUTSTATION,
						ROUND(SUM(IF((bkg_agent_id IS NULL AND bkg_is_gozonow NOT IN (1) ),1,0))/DAY(:date),2) AS B2C_NON_GN_PER_DAY_CNT,
						ROUND(SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow NOT IN (1) ),1,0))/DAY(:date),2) AS B2C_NON_GN_PER_DAY_CNT_LOCAL,
						ROUND(SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow NOT IN (1) ),1,0))/DAY(:date),2) AS B2C_NON_GN_PER_DAY_CNT_OUTSTATION,
						ROUND(SUM(if(bkg_agent_id IS NOT NULL AND bkg_agent_id IN (450,18190) ,1,NULL))/DAY(:date),2) AS MMT_PER_DAY_CNT,
						ROUND(SUM(if(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16)  AND bkg_agent_id IN (450,18190) ,1,NULL))/DAY(:date),2) AS MMT_PER_DAY_CNT_LOCAL,
						ROUND(SUM(if(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_agent_id IN (450,18190) ,1,NULL))/DAY(:date),2) AS MMT_PER_DAY_CNT_OUTSTATION,
						ROUND(SUM(if(bkg_agent_id IS NOT NULL AND bkg_agent_id NOT IN (450,18190) ,1,NULL))/DAY(:date),2) AS OTHER_PARTNER_PER_DAY_CNT,
						ROUND(SUM(if(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_agent_id NOT IN (450,18190) ,1,NULL))/DAY(:date),2) AS OTHER_PARTNER_PER_DAY_CNT_LOCAL,
						ROUND(SUM(if(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_agent_id NOT IN (450,18190) ,1,NULL))/DAY(:date),2) AS OTHER_PARTNER_PER_DAY_CNT_OUTSTATION,
						SUM(IF(bkg_agent_id IS NULL,1,NULL)) AS B2C_TOTAL,
						SUM(IF(bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) ,1,NULL)) AS B2C_TOTAL_LOCAL,
						SUM(IF(bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) ,1,NULL)) AS B2C_TOTAL_OUTSTATION,
						SUM(IF((bkg_agent_id IS NULL AND bkg_is_gozonow IN (1)),1,0)) AS B2C_GN_TOTAL,
						SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow IN (1) ),1,0)) AS B2C_GN_TOTAL_LOCAL,
						SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow IN (1) ),1,0)) AS B2C_GN_TOTAL_OUTSTATION,
						SUM(IF((bkg_agent_id IS NULL AND bkg_is_gozonow NOT IN (1)),1,0)) AS B2C_NON_GN_TOTAL,
						SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow NOT IN (1) ),1,0)) AS B2C_NON_GN_TOTAL_LOCAL,
						SUM(IF((bkg_agent_id IS NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_is_gozonow NOT IN (1) ),1,0)) AS B2C_NON_GN_TOTAL_OUTSTATION,
						SUM(IF(bkg_agent_id IS NOT NULL AND bkg_agent_id IN (450,18190) ,1,NULL)) AS MMT_TOTAL,
						SUM(IF(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type IN (4,9,10,11,12,14,15,16) AND bkg_agent_id IN (450,18190) ,1,NULL)) AS MMT_TOTAL_LOCAL,
						SUM(IF(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_agent_id IN (450,18190) ,1,NULL)) AS MMT_TOTAL_OUTSTATION,
						SUM(IF(bkg_agent_id IS NOT NULL AND bkg_agent_id NOT IN (450,18190),1,NULL)) AS OTHER_PARTNER_TOTAL,
						SUM(IF(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type  IN (4,9,10,11,12,14,15,16) AND bkg_agent_id NOT IN (450,18190) ,1,NULL)) AS OTHER_PARTNER_TOTAL_LOCAL,
						SUM(IF(bkg_agent_id IS NOT NULL AND booking.bkg_booking_type NOT IN (4,9,10,11,12,14,15,16) AND bkg_agent_id NOT IN (450,18190) ,1,NULL)) AS OTHER_PARTNER_TOTAL_OUTSTATION

					FROM booking 
					INNER JOIN booking_trail ON booking_trail.btr_bkg_id = booking.bkg_id
					INNER JOIN booking_pref ON booking_pref.bpr_bkg_id=booking.bkg_id
					WHERE 1 
					   AND bkg_pickup_date BETWEEN DATE_FORMAT(:date,"%Y-%m-01 00:00:00") AND CONCAT(:date," 23:59:59")
					   AND booking.bkg_active=1
					  AND booking.bkg_status IN (6,7)
					GROUP BY MONTH
				) AS temp ORDER BY temp.type ASC,temp.MONTH ASC';
		return DBUtil::query($sql, DBUtil::SDB(), ['date' => $date], 60 * 10, CacheDependency::Type_Report_DashBoard);
	}

	/**
	 * This function is used to send notifications for the booking Review
	 * @param string $bkgId
	 * @return boolean
	 */
	public static function bookingReview($bkgId, $isSchedule = 0, $schedulePlatform = null)
	{
		$success = false;
		if ($bkgId > 0)
		{
			$bkgModel = Booking::model()->findByPk($bkgId);
		}
		if (!$bkgModel)
		{
			goto skipAll;
		}
		$arrSearchData	 = ['ref_type' => WhatsappLog::REF_TYPE_BOOKING, 'ref_id' => $bkgId, 'template_name' => 'booking_review_to_customer_v2', 'create_date' => $bkgModel->bkg_pickup_date];
		$isAlreadySent	 = WhatsappLog::isMessageAlreadySent($arrSearchData);
		if ($isAlreadySent)
		{
			goto skipAll;
		}
		$arrUserDetails	 = WhatsappLog::getUserByBooking($bkgId);
		$userId			 = $arrUserDetails['userId'];
		$userName		 = $arrUserDetails['userName'];
		$phoneNo		 = WhatsappLog::getPhoneNoByBookingId($bkgId);
		if (!$phoneNo)
		{
			goto skipAll;
		}
		Filter::parsePhoneNumber($phoneNo, $code, $number);
		$row				 = array('code' => $code, 'number' => $number);
		$uniqueId			 = Booking::model()->generateLinkUniqueid($bkgId);
		$reviewQueryString	 = 'r/' . $uniqueId;
		$reviewHostString	 = 'https://gozo.cab/';
		$reviewUrl			 = $reviewHostString . $reviewQueryString;
		$sLink				 = Filter::shortUrl($reviewUrl);
		$contentParams		 = array('eventId' => "3", 'userName' => $userName, 'reviewUrl' => $reviewUrl, 'bookingId' => Filter::formatBookingId($bkgModel->bkg_booking_id), 'sLink' => $sLink);
		$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_CONSUMER, $userId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bkgModel->bkg_booking_id, $row['code'], $row['number'], null, 1, null, null, $reviewQueryString);
		$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_REVIEW, "Customer Booking Review", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
		MessageEventMaster::processPlatformSequences(3, $contentParams, $receiverParams, $eventScheduleParams);
		$success			 = true;
		skipAll:
		return $success;
	}

	/**
	 * This function is used to send notifications for the booking Review for other link
	 * @param string $bkgId
	 * @param string $promoId
	 * @return boolean
	 */
	public static function bookingReviewOtherLinks($bkgId, $promoId = '', $isSchedule = 0, $schedulePlatform = null)
	{
		$success = false;
		if ($bkgId > 0)
		{
			$bkgModel = Booking::model()->findByPk($bkgId);
		}
		if (!$bkgModel)
		{
			goto skipAll;
		}
		if ($promoId == "" || $promoId == null)
		{
			goto skipAll;
		}
		$arrUserDetails	 = WhatsappLog::getUserByBooking($bkgId);
		$userId			 = $arrUserDetails['userId'];
		$userName		 = $arrUserDetails['userName'];
		$phoneNo		 = WhatsappLog::getPhoneNoByBookingId($bkgId);
		if (!$phoneNo)
		{
			goto skipAll;
		}
		Filter::parsePhoneNumber($phoneNo, $code, $number);
		$row		 = array('code' => $code, 'number' => $number);
		$promoModel	 = Promos::model()->findByPk($promoId);
		if (!$promoModel)
		{
			goto skipAll;
		}
		$promoCode			 = $promoModel->prm_code;
		$discount			 = $promoModel->prm_desc;
		$contentParams		 = array('eventId' => "4", 'userName' => $userName, 'code' => $promoCode, 'discount' => $discount);
		$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_CONSUMER, $userId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bkgModel->bkg_booking_id, $row['code'], $row['number'], null, 0, null, null);
		$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_REVIEW_OTHER, "booking review to customer other links", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
		$responseArr		 = MessageEventMaster::processPlatformSequences(4, $contentParams, $receiverParams, $eventScheduleParams);
		$success			 = true;
		skipAll:
		return $success;
	}

	/**
	 * This function is used to send notifications when trip was cancel to driver
	 * @param string $bkgId
	 * @return boolean
	 */
	public static function tripCancelToDriver($bkgId, $isSchedule = 0, $schedulePlatform = null)
	{
		$success = false;
		if ($bkgId > 0)
		{
			$bkgModel = Booking::model()->findByPk($bkgId);
		}
		if (!$bkgModel)
		{
			goto skipAll;
		}
		$drvId			 = $bkgModel->bkgBcb->bcb_driver_id;
		$bookingId		 = $bkgModel->bkg_booking_id;
		$tripType		 = Booking::model()->getBookingType($bkgModel->bkg_booking_type);
		$cabType		 = $bkgModel->bkgSvcClassVhcCat->scc_VehicleCategory->vct_label;
		$datePickupDate	 = new DateTime($bkgModel->bkg_pickup_date);
		$pickupTime		 = $datePickupDate->format('j/M/y h:i A');
		$fromCityName	 = $bkgModel->bkgFromCity->cty_name;
		$toCityName		 = $bkgModel->bkgToCity->cty_name;
		$contactId		 = ContactProfile::getByEntityId($drvId, UserInfo::TYPE_DRIVER);
		$row			 = ContactPhone::getNumber($contactId);
		if (!$row || empty($row))
		{
			goto skipAll;
		}
		$contentParams = array(
			'eventId'	 => "5",
			'bookingId'	 => Filter::formatBookingId($bookingId),
			'tripType'	 => $tripType,
			'cabType'	 => $cabType,
			'pickupDate' => $pickupTime,
			'pickUp'	 => $fromCityName,
			'drop'		 => $toCityName
		);

		$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_DRIVER, $drvId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $row['code'], $row['number'], null, 0, null, SmsLog::Driver);
		$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_CANCEL_TO_DRIVER, "Trip Cancel To Driver", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
		$responseArr		 = MessageEventMaster::processPlatformSequences(5, $contentParams, $receiverParams, $eventScheduleParams);
		foreach ($responseArr as $response)
		{
			if ($response['success'] && $response['type'] == 2)
			{
				$success = true;
				$params	 = array('blg_ref_id' => $response['id'], 'blg_booking_status' => Booking::STATUS_CANCELLED);
				BookingLog::model()->createLog($bkgId, 'SMS to driver for Booking Cancellation', UserInfo::getInstance(), BookingLog::SMS_SENT, '', $params);
			}
		}
		skipAll:
		return $success;
	}

	/**
	 *  This function is used to send notifications when trip details  to driver
	 * @param type $bkgId
	 * @return boolean
	 */
	public static function sendTripDetailsToDriver($bkgId)
	{
		$bkgModel = false;
		if ($bkgId > 0)
		{
			$bkgModel = Booking::model()->findByPk($bkgId);
		}
		if (!$bkgModel || (($bkgModel != '' && ($bkgModel->bkgPref->bkg_blocked_msg == 1 || $bkgModel->bkg_status != 5))))
		{
			goto skipAll;
		}
		$drvId			 = $bkgModel->bkgBcb->bcb_driver_id;
		$vndId			 = $bkgModel->bkgBcb->bcb_vendor_id;
		$bookingId		 = $bkgModel->bkg_booking_id;
		$tripType		 = Booking::model()->getBookingType($bkgModel->bkg_booking_type);
		$cabType		 = $bkgModel->bkgSvcClassVhcCat->scc_VehicleCategory->vct_label;
		$datePickupDate	 = new DateTime($bkgModel->bkg_pickup_date);
		$pickupTime		 = $datePickupDate->format('j/M/y h:i A');
		$fromCityName	 = $bkgModel->bkgFromCity->cty_name;
		$toCityName		 = $bkgModel->bkgToCity->cty_name;
		$tripDistance	 = $bkgModel->bkg_trip_distance . ' KM';
		$amtToCollect	 = 'Rs. ' . $bkgModel->bkgInvoice->bkg_due_amount;
		$dueAmount		 = $bkgModel->bkgInvoice->bkg_due_amount;
		$hashBkgId		 = Yii::app()->shortHash->hash($bkgId);
		$hashVndId		 = Yii::app()->shortHash->hash($vndId);
		$bkvnLink		 = "http://www.aaocab.com/bkvn/{$hashBkgId}/{$hashVndId}";
		$contactId		 = ContactProfile::getByEntityId($drvId, UserInfo::TYPE_DRIVER);
		$row			 = ContactPhone::getNumber($contactId);
		if (!$row || empty($row))
		{
			goto skipAll;
		}
		$contentParams		 = array(
			'eventId'			 => "6",
			'bookingId'			 => Filter::formatBookingId($bookingId),
			'bookingtype'		 => $tripType,
			'cabType'			 => $cabType,
			'pickupDate'		 => $pickupTime,
			'pickUp'			 => $fromCityName,
			'drop'				 => $toCityName,
			'distance'			 => $tripDistance,
			'amountToCollect'	 => $amtToCollect,
			'link'				 => $bkvnLink,
			'dueAmount'			 => $dueAmount,
		);
		$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_DRIVER, $drvId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $row['code'], $row['number'], null, 0, null, SmsLog::SMS_DRIVER_ONLINE_PAYMENT);
		$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_DETAILS_TO_DRIVER, "Trip Details to driver", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
		$responseArr		 = MessageEventMaster::processPlatformSequences(6, $contentParams, $receiverParams, $eventScheduleParams);
		foreach ($responseArr as $response)
		{
			if ($response['success'] && $response['type'] == 2)
			{
				$desc							 = "Sms sent to driver for advance payment.";
				$eventId						 = BookingLog::SMS_SENT;
				$oldModel						 = clone $bkgModel;
				$params							 = [];
				$params['blg_ref_id']			 = $response['id'];
				$params['blg_booking_status']	 = $bkgModel->bkg_status;
				BookingLog::model()->createLog($bkgModel->bkg_id, $desc, UserInfo::getInstance(), $eventId, $oldModel, $params);
			}
		}
		skipAll:
		return $success;
	}

	/**
	 * This function is used to send notifications when trip details to vendor
	 * @param type $bkgId
	 * @return boolean
	 */
	public static function sendTripDetailsToVendor($bkgId)
	{
		$bkgModel = false;
		if ($bkgId > 0)
		{
			$bkgModel = Booking::model()->findByPk($bkgId);
		}
		if (!$bkgModel || (($bkgModel != '' && ($bkgModel->bkgPref->bkg_blocked_msg == 1 || !in_array($bkgModel->bkg_status, [3, 5])))))
		{
			goto skipAll;
		}
		$vndId			 = $bkgModel->bkgBcb->bcb_vendor_id;
		$tripId			 = $bkgModel->bkgBcb->bcb_id;
		$bookingId		 = $bkgModel->bkg_booking_id;
		$firstName		 = $bkgModel->bkgUserInfo->bkg_user_fname;
		$lastName		 = $bkgModel->bkgUserInfo->bkg_user_lname;
		$tripType		 = Booking::model()->getBookingType($bkgModel->bkg_booking_type);
		$cabType		 = $bkgModel->bkgSvcClassVhcCat->scc_VehicleCategory->vct_label;
		$datePickupDate	 = new DateTime($bkgModel->bkg_pickup_date);
		$pickupTime		 = $datePickupDate->format('j/M/y h:i A');
		$fromCityName	 = $bkgModel->bkgFromCity->cty_name;
		$toCityName		 = $bkgModel->bkgToCity->cty_name;
		$tripDistance	 = $bkgModel->bkg_trip_distance . ' KM';
		$amtToCollect	 = 'Rs. ' . $bkgModel->bkgInvoice->bkg_due_amount;
		$dueAmount		 = $bkgModel->bkgInvoice->bkg_due_amount;
		$hashBkgId		 = Yii::app()->shortHash->hash($bkgId);
		$hashVndId		 = Yii::app()->shortHash->hash($vndId);
		$bkvnLink		 = "http://www.aaocab.com/bkvn/{$hashBkgId}/{$hashVndId}";
		$contactId		 = ContactProfile::getByEntityId($vndId, UserInfo::TYPE_VENDOR);
		$row			 = ContactPhone::getNumber($contactId);
		if (!$row || empty($row))
		{
			goto skipAll;
		}
		$contentParams		 = array(
			'eventId'			 => "7",
			'bookingId'			 => Filter::formatBookingId($bookingId),
			'bookingtype'		 => $tripType,
			'cabType'			 => $cabType,
			'pickupDate'		 => $pickupTime,
			'pickUp'			 => $fromCityName,
			'drop'				 => $toCityName,
			'distance'			 => $tripDistance,
			'amountToCollect'	 => $amtToCollect,
			'link'				 => $bkvnLink,
			'dueAmount'			 => $dueAmount,
			'firstName'			 => $firstName,
			'lastName'			 => $lastName,
			'tripId'			 => $tripId
		);
		$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_VENDOR, $vndId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $row['code'], $row['number'], null, 0, Booking::CODE_VENDOR_ADVANCE, SmsLog::SMS_VENDOR_ONLINE_PAYMENT);
		$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_DETAILS_TO_VENDOR, "Trip Details to vendor", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
		$responseArr		 = MessageEventMaster::processPlatformSequences(7, $contentParams, $receiverParams, $eventScheduleParams);
		foreach ($responseArr as $response)
		{
			if ($response['success'] && $response['type'] == 2)
			{
				$desc							 = "Sms sent to vendor for advance payment.";
				$eventId						 = BookingLog::SMS_SENT;
				$oldModel						 = clone $bkgModel;
				$params							 = [];
				$params['blg_ref_id']			 = $response['id'];
				$params['blg_booking_status']	 = $bkgModel->bkg_status;
				BookingLog::model()->createLog($bkgModel->bkg_id, $desc, UserInfo::getInstance(), $eventId, $oldModel, $params);
			}
		}
		skipAll:
		return $success;
	}

	/**
	 * This function is used to mark booking as duplicate booking when is some related booking as per service call queue
	 * @param type $bkgId
	 * @return boolean
	 */
	public static function stopDuplicateQuote($bkgId)
	{
		$success = true;
		try
		{
			$model = Booking::model()->findByPk($bkgId);
			if ($model->bkg_agent_id > 0)
			{
				goto end;
			}
			$sql = "UPDATE booking_trail SET bkg_assign_csr=-1 WHERE 1 AND (bkg_assign_csr=0 OR bkg_assign_csr IS NULL) AND btr_bkg_id=:bkgId";
			DBUtil::execute($sql, ["bkgId" => $bkgId]);
		}
		catch (Exception $exc)
		{
			ReturnSet::setException($exc);
			$success = false;
		}
		end:
		return $success;
	}

	/**
	 * This function is used to send Quote Expiry Reminder To Customer
	 * @param type $bkgId
	 * @return boolean
	 */
	public static function sendQuoteExpiryReminderToCustomer($bkgId, $isSchedule = 0, $schedulePlatform = null)
	{
		$ctr		 = 0;
		$bkgModel	 = Booking::model()->findByPk($bkgId);
		if ((!$bkgModel instanceof Booking) || ($bkgModel != '' && ($bkgModel->bkgPref->bkg_blocked_msg == 1 || $bkgModel->bkgPref->bkg_send_sms == 0 || $bkgModel->bkg_agent_id > 0)))
		{
			goto skipAll;
		}

		$response = Contact::referenceUserData($bkgModel->bkgUserInfo->bui_id, 1);
		if ($response->getStatus())
		{
			$email = $response->getData()->email['email'];
		}
		$minPerc		 = Config::getMinAdvancePercent($bkgModel->bkg_agent_id, $bkgModel->bkg_booking_type, $bkgModel->bkgSvcClassVhcCat->scc_ServiceClass->scc_id, $bkgModel->bkgPref->bkg_is_gozonow);
		$minPay			 = round($minPerc * $bkgModel->bkgInvoice->bkg_total_amount * 0.01);
		$minPercentage	 = " ({$minPerc}%)";
		$userName		 = $bkgModel->bkgUserInfo->bkg_user_fname != null && trim($bkgModel->bkgUserInfo->bkg_user_fname) != "" ? $bkgModel->bkgUserInfo->bkg_user_fname : "Customer";
		$bookingId		 = $bkgModel->bkg_booking_id;
		$cabType		 = $bkgModel->bkgSvcClassVhcCat->scv_label;
		$fromCityName	 = $bkgModel->bkgFromCity->cty_name;
		$toCityName		 = $bkgModel->bkgToCity->cty_name;
		$tripType		 = $bkgModel->getBookingType($bkgModel->bkg_booking_type);
		$totalAmt		 = $bkgModel->bkgInvoice->bkg_total_amount;
		$datePickupDate	 = new DateTime($bkgModel->bkg_pickup_date);
		$pickupTime		 = $datePickupDate->format('j/M/y h:i A');
		$tripStartTime	 = (new DateTime(date('Y-m-d H:i:s', strtotime($bkgModel->bkg_pickup_date))))->format('j/M/y h:i A');
		$tripEndTime	 = (new DateTime(date('Y-m-d H:i:s', strtotime($bkgModel->bkg_pickup_date . ' + ' . $bkgModel->bkg_trip_duration . ' MINUTE'))))->format('j/M/y h:i A');
		$tripDistance	 = $bkgModel->bkg_trip_distance . " Kms";
		$bkgExpiryDate	 = new DateTime($bkgModel->bkgTrail->bkg_quote_expire_date);
		$expiryDate		 = '*' . $bkgExpiryDate->format('j/M/y h:i A') . '*';
		$buttonUrl		 = ltrim(BookingUser::getPaymentLinkByPhone($bkgModel->bkg_id), '/');
		$paymentUrl		 = 'http://www.aaocab.com/' . $buttonUrl;
		$supportPhone	 = "+91-90518-77000";
		$phoneNo		 = $bkgModel->bkgUserInfo->bkg_country_code . $bkgModel->bkgUserInfo->bkg_contact_no;
		$userId			 = $bkgModel->bkgUserInfo->bkg_user_id;
		if ($phoneNo == null || trim($phoneNo) == "")
		{
			$checkVerified	 = true;
			$phoneNo		 = WhatsappLog::getPhoneNoByBookingId($bkgId, $bkgModel, $checkVerified);
			if (!$phoneNo)
			{
				goto skipAll;
			}
		}
		Filter::parsePhoneNumber($phoneNo, $code, $number);
		if (!Filter::processPhoneNumber($number, $code))
		{
			goto skipAll;
		}
		$contentParams		 = array(
			'userName'		 => $userName,
			'bookingId'		 => Filter::formatBookingId($bookingId),
			'tripType'		 => $tripType,
			'cabType'		 => $cabType,
			'pickupTime'	 => $pickupTime,
			'fromCityName'	 => $fromCityName,
			'toCityName'	 => $toCityName,
			'totalFare'		 => Filter::moneyFormatter($totalAmt),
			'minPercentage'	 => $minPercentage,
			'minPay'		 => Filter::moneyFormatter($minPay),
			'paymentUrl'	 => $paymentUrl,
			'expiryDate'	 => $expiryDate,
			'supportPhone'	 => $supportPhone,
			'url'			 => Filter::shortUrl(LeadFollowup::getURL($bkgId, 'p')),
			'primaryId'		 => $bkgId,
			'tripStartTime'	 => $tripStartTime,
			'tripEndTime'	 => $tripEndTime,
			'tripDistance'	 => $tripDistance,
			'eventId'		 => "15"
		);
		$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_CONSUMER, $userId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $code, $number, $email, 1, null, SmsLog::SMS_UNVERIFIED_FOLLOWUP, $buttonUrl, $emailLayout		 = "mail1", $emailReplyTo		 = null, $emailReplyName		 = null, $emailType			 = EmailLog::EMAIL_UNVERIFIED_FOLLOWUP, $emailUserType		 = EmailLog::Consumers, $emailRefType		 = EmailLog::REF_BOOKING_ID, $emailRefId			 = $bkgId, $emailLogInstance	 = EmailLog::SEND_CONSUMER_BATCH_EMAIL, $emailDelayTime		 = 0);
		$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_QUOTE_EXPIRY_REMINDER_TO_CUSTOMER, "Send Quote Expiry Reminder To Customer", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
		$responseArr		 = MessageEventMaster::processPlatformSequences(15, $contentParams, $receiverParams, $eventScheduleParams);
		foreach ($responseArr as $response)
		{
			if ($response['success'] && $response['type'] == 1)
			{
				$ctr++;
				break;
			}
			else if ($response['success'] && $response['type'] == 2)
			{
				$ctr++;
				break;
			}
			else if ($response['success'] && $response['type'] == 3)
			{
				$ctr++;
				break;
			}
		}
		skipAll:
		return $ctr;
	}

	/**
	 * This function is used to send new booking from channel partner
	 * @param type $bkgId
	 * @return boolean
	 */
	public static function newBookingFromChannelPartner($partnerBkgId, $bookingId = '', $bkgId = '', $pickupDate = '', $isSchedule = 0, $schedulePlatform = null)
	{
		$bkgModel = '';
		if ($bkgId > 0)
		{
			$bkgModel = Booking::model()->findByPk($bkgId);
		}
		$partnerName = 'Transferz';
		$cabRequired = $bkgModel->bkgSvcClassVhcCat->scc_VehicleCategory->vct_label;
		$date		 = $bkgModel->bkg_pickup_date;
		if ($bkgModel->bkg_status == 15)
		{
			$bookingId = Filter::formatBookingId($bookingId) . ' *(Not Confirmed)*';
		}
		else if ($bkgModel->bkg_status == 2 && $bkgModel->bkgPref->bkg_is_gozonow == 1)
		{
			$bookingId = Filter::formatBookingId($bookingId) . ' *(Not Confirmed - GozoNow)*';
		}
		$cabType	 = ($cabRequired != '' ? $cabRequired : '-');
		$pickupTime	 = '-';
		if ($bkgId > 0)
		{
			$datePickupDate	 = new DateTime($date, new \DateTimeZone('Asia/Kolkata'));
			$pickupTime		 = $datePickupDate->format('j/M/y h:i A');
		}
		else
		{
			$datePickupDate	 = new DateTime($pickupDate, new \DateTimeZone('Asia/Calcutta'));
			$pickupTime		 = $datePickupDate->format('j/M/y h:i A');
		}
		$fromCityName	 = ($bkgModel->bkgFromCity->cty_name != '' ? $bkgModel->bkgFromCity->cty_name : '-');
		$toCityName		 = ($bkgModel->bkgToCity->cty_name != '' ? $bkgModel->bkgToCity->cty_name : '-');
		$tripDistance	 = ($bkgModel->bkg_trip_distance != '' ? $bkgModel->bkg_trip_distance : '-');
		$bookingAmount	 = ($bkgModel->bkgInvoice->bkg_total_amount != '' ? 'Rs. ' . $bkgModel->bkgInvoice->bkg_total_amount : '-');
		$arrAdmins		 = ['311' => '919831100164', '53' => '919903430853', '13' => '919831859111', '544' => '919051153099', '455' => '918017233722'];
		foreach ($arrAdmins as $adminId => $phone)
		{
			Filter::parsePhoneNumber($phone, $code, $number);
			$contentParams = array(
				'partnerName'	 => $partnerName,
				'partnerBkgId'	 => $partnerBkgId,
				'bookingId'		 => $bookingId != "" ? $bookingId : "-",
				'cabType'		 => $cabType,
				'pickupTime'	 => $pickupTime,
				'fromCityName'	 => $fromCityName,
				'toCityName'	 => $toCityName,
				'tripDistance'	 => $tripDistance,
				'bookingAmount'	 => $bookingAmount,
				'skipPermission' => true,
				'eventId'		 => "24"
			);
			if ($bkgId > 0)
			{
				$receiverParams = EventReceiver::setData(UserInfo::TYPE_ADMIN, $adminId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $code, $number, null, 0, null, null);
			}
			else
			{
				$receiverParams = EventReceiver::setData(UserInfo::TYPE_ADMIN, $adminId, null, null, null, $code, $number, null, 0, null, null);
			}
			$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::NEW_BOOKING_CHANNEL_PARTNER, "New Booking from channel partner", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
			MessageEventMaster::processPlatformSequences(24, $contentParams, $receiverParams, $eventScheduleParams);
		}
	}

	/**
	 * 
	 * @param type $pickupDate
	 * @return boolean
	 */
	public static function checkDboApplicable($pickupDate, $bkgModel = null)
	{
		$dboApplicable = false;
		if ($bkgModel->bkg_vehicle_type_id != null || $bkgModel->bkg_vehicle_type_id != '')
		{
			$applicableVehicleType = SvcClassVhcCat::applicableVehicleType($bkgModel->bkg_vehicle_type_id);
		}
		else
		{
			$applicableVehicleType = true;
		}
		if (($pickupDate != null || $pickupDate != '') && $applicableVehicleType)
		{
			$currDateTime	 = Filter::getDBDateTime();
			//$workingHrsDiff	 = Filter::CalcWorkingHour($currDateTime, $pickupDate);
			$timeDiff		 = Filter::getTimeDiff($pickupDate, $currDateTime);
			$workingHrsDiff	 = $timeDiff;
			$dboSettings	 = Config::get('dbo.settings');
			$data			 = CJSON::decode($dboSettings);
			if (($dboSettings != null || $dboSettings != '') && ($pickupDate >= $data['dboStartDate'] && $pickupDate <= $data['dboEndDate']))
			{
				if ($workingHrsDiff >= ($data['minworkinghour'] * 60))
				{
					$dboApplicable = true;
				}
			}
		}
		return $dboApplicable;
	}

	/**
	 * 
	 * @param type $agtId
	 * @param type $date1
	 * @param type $date2
	 * @return \CSqlDataProvider
	 */
	public function getByAgentId($agtId, $date1, $date2)
	{
		$fromdate	 = $date1 . ' 00:00:00';
		$todate		 = $date2 . ' 23:59:59';
		$sql		 = "Select bkg_id from booking where bkg_agent_id = $agtId AND bkg_pickup_date Between '$fromdate' AND '$todate' ";
		$records	 = DBUtil::query($sql, DBUtil::MDB());
		foreach ($records as $row)
		{
			$data[] = $row['bkg_id'];
		}
		return $data;
	}

	/**
	 * 
	 * @param type $pickupDateTime
	 * @return boolean
	 */
	public static function checkOneHrsPicktime($pickupDateTime)
	{
		$customPushApiSettings	 = Config::get('driver.customPushEvents.duration');
		$duration				 = CJSON::decode($customPushApiSettings);
		$success				 = false;
		$dateInterval			 = DateTimeFormat::SQLDateTimeToDateTime($pickupDateTime)->sub(new DateInterval('PT' . $duration['driverPushTriggerDuration'] . 'M'));
		$oneHRBefore			 = DateTimeFormat::DateTimeToSQLDateTime($dateInterval);
		$dnow					 = Filter::getDBDateTime();
		if (strtotime($oneHRBefore) <= strtotime($dnow))
		{
			$success = true;
		}
		return $success;
	}

	/**
	 * get partner on the way bookings to perform custom push events
	 * @return \CSqlDataProvider 
	 */
	public static function getPartnerOneTheWayBookings()
	{
//		$sql	 = "SELECT bkg_id FROM booking 
//					WHERE bkg_agent_id > 0 AND bkg_status=5 
//					AND bkg_pickup_date BETWEEN DATE_SUB(NOW(), INTERVAl 60 MINUTE) AND DATE_ADD(NOW(), INTERVAl 60 MINUTE) 
//					ORDER BY bkg_pickup_date ASC";

		$sql	 = "SELECT bkg_id, bkg_pickup_date, bkg_return_date, btl_id, bkg_trip_arrive_time, bkg_trip_start_time, bkg_trip_end_time
				FROM booking 
				INNER JOIN booking_track ON bkg_id = btk_bkg_id 
				LEFT JOIN booking_track_log ON bkg_id = btl_bkg_id AND btl_event_type_id = 201 
				WHERE bkg_agent_id=18190 AND bkg_status=5 
				AND bkg_pickup_date >= DATE_SUB(NOW(), INTERVAl 15 DAY) 
				GROUP BY bkg_id 
				HAVING (
				((bkg_pickup_date BETWEEN DATE_SUB(NOW(), INTERVAl 120 MINUTE) AND NOW()) AND (btl_id IS NULL OR bkg_trip_arrive_time IS NULL OR bkg_trip_start_time IS NULL))
				OR 
				((bkg_return_date BETWEEN DATE_SUB(NOW(), INTERVAl 15 DAY) AND DATE_SUB(NOW(), INTERVAl 120 MINUTE)) AND bkg_trip_end_time IS NULL)
				)
				ORDER BY bkg_pickup_date ASC";
		$records = DBUtil::query($sql, DBUtil::MDB());
		return $records;
	}

	/**
	 * @param integer $bkgId
	 * @param integer $isSchedule
	 * @param integer $schedulePlatform
	 * @return \ReturnSet
	 * @throws Exception
	 */
	public static function notifyConfirmBookingB2C($bkgId, $isSchedule = 0, $schedulePlatform = null)
	{
		$returnSet = new ReturnSet();
		try
		{
			Logger::writeToConsole("XXBkgId: " . $bkgId);
			$success = false;
			if ($bkgId > 0)
			{
				$bkgModel = Booking::model()->findByPk($bkgId);
			}
			if (!$bkgModel)
			{
				throw new Exception("Invalid Data", ReturnSet::ERROR_INVALID_DATA);
			}

			$userInfo		 = UserInfo::getInstance();
			$arrUserDetails	 = WhatsappLog::getUserByBooking($bkgId);
			$userId			 = $arrUserDetails['userId'];
			$userName		 = $arrUserDetails['userName'];

			Logger::writeToConsole("User: " . $userId . " - " . $userName);

			// Phone No
			$phoneNo = WhatsappLog::getPhoneNoByBookingId($bkgId);
			if (!$phoneNo)
			{
				goto skipAll;
			}

			Logger::writeToConsole("Phone: " . $phoneNo);

			Filter::parsePhoneNumber($phoneNo, $code, $number);
			$row = array('code' => $code, 'number' => $number);
			if (!$row || empty($row))
			{
				goto skipAll;
			}

			$response = Contact::referenceUserData($bkgModel->bkgUserInfo->bui_id, 1);
			if ($response->getStatus())
			{
				$email			 = $response->getData()->email['email'];
				$emailReplyName	 = $response->getData()->email['userName'];
			}

			Logger::writeToConsole("Email: " . $email . " - " . $emailReplyName);

			$hash			 = Yii::app()->shortHash->hash($bkgId);
			$bookingId		 = $bkgModel->bkg_booking_id;
			$cabType		 = $bkgModel->bkgSvcClassVhcCat->scv_label;
			$pickupAddress	 = $bkgModel->bkgFromCity->cty_name;
			$dropAddress	 = $bkgModel->bkgToCity->cty_name;
			$pickupDate		 = DateTimeFormat::DateTimeToLocale($bkgModel->bkg_pickup_date);
			$tripType		 = trim($bkgModel->getBookingType($bkgModel->bkg_booking_type));
			$distance		 = $bkgModel->bkg_trip_distance . ' KM';
			$amount			 = Filter::moneyFormatter($bkgModel->bkgInvoice->bkg_total_amount);
			$advanceAmount	 = Filter::moneyFormatter($bkgModel->bkgInvoice->bkg_advance_amount);

			$drvId	 = $bkgModel->bkgBcb->bcb_driver_id;
			$cabId	 = $bkgModel->bkgBcb->bcb_cab_id;

			Logger::writeToConsole("Driver: " . $drvId . " - " . $cabId);

			$cabNumber		 = 'Not allocated yet';
			$driverName		 = 'Not allocated yet';
			$driverNumber	 = 'Not allocated yet';

			$pickupDiffMinutes = Filter::getTimeDiff($bkgModel->bkg_pickup_date);
			if (in_array($bkgModel->bkg_status, [5, 6, 7]) && $drvId > 0 && $cabId > 0)
			{
				if ($pickupDiffMinutes > 120)
				{
					$cabNumber		 = '-';
					$driverName		 = '-';
					$driverNumber	 = '-';
				}
				else
				{
					$cabNumber	 = $bkgModel->bkgBcb->bcb_cab_number;
					$driverName	 = $bkgModel->bkgBcb->bcb_driver_name;
					if (!$driverName && $bkgModel->bkgBcb->bcbDriver)
					{
						$drvDetails	 = Drivers::getByDriverId($drvId);
						$driverName	 = $drvDetails['ctt_first_name'] . ' ' . $drvDetails['ctt_last_name'];
					}
					$driverNumber = $bkgModel->bkgBcb->bcb_driver_phone;
				}
			}

			$link			 = Yii::app()->params['fullBaseURL'] . '/bkpn/' . $bkgId . '/' . $hash;
			$buttonUrl		 = 'bkpn/' . $bkgId . '/' . $hash;
			$primaryId		 = $bkgModel->bkg_id;
			$contentParams	 = [
				'userName'		 => $userName,
				'bookingId'		 => Filter::formatBookingId($bookingId),
				'cabType'		 => $cabType,
				'pickupAddress'	 => $pickupAddress,
				'dropAddress'	 => $dropAddress,
				'pickupDate'	 => $pickupDate,
				'tripType'		 => $tripType,
				'distance'		 => $distance,
				'amount'		 => $amount,
				'advanceAmount'	 => $advanceAmount,
				'cabNumber'		 => $cabNumber,
				'driverName'	 => $driverName,
				'driverPhone'	 => $driverNumber,
				'link'			 => $link,
				'primaryId'		 => $bkgId,
				'eventId'		 => "31"
			];

			Logger::writeToConsole("Json: " . json_encode($contentParams));

			$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_CONSUMER, $userId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bkgModel->bkg_booking_id, $row['code'], $row['number'], $email, 1, null, null, $buttonUrl, 'mail1', null, null, EmailLog::EMAIL_BOOKING_CONFIRM, EmailLog::Consumers, EmailLog::REF_USER_ID, $bkgModel->bkg_booking_id, EmailLog::SEND_SERVICE_EMAIL, null, $bkgModel->bkg_booking_id);
			$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_CONFIRM, "Booking Details To Customer", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
			$responseArr		 = MessageEventMaster::processPlatformSequences(31, $contentParams, $receiverParams, $eventScheduleParams);

			Logger::writeToConsole("Respo: " . json_encode($responseArr));

			foreach ($responseArr as $res)
			{
				if ($res['success'] == true && $res['type'] == 3 && $res['id'] > 0)
				{
					$elgId							 = $res['id'];
					$desc							 = "Email sent on Booking Confirmed.";
					$eventId						 = BookingLog::EMAIL_SENT;
					$oldModel						 = clone $bkgModel;
					$params							 = [];
					$params['blg_ref_id']			 = $elgId;
					$params['blg_booking_status']	 = $model->bkg_status;
					BookingLog::model()->createLog($bkgModel->bkg_id, $desc, $userInfo, BookingLog::EMAIL_SENT, $oldModel, $params);
				}
				if ($res['success'] == true)
				{
					$success = true;
				}
			}
			$returnSet->setStatus($success);
		}
		catch (Exception $ex)
		{
			$returnSet = ReturnSet::setException($ex);
			$returnSet->setStatus(false);
		}
		skipAll:
		return $returnSet;
	}

	/**
	 * @param integer $bkgId
	 * @param integer $isSchedule
	 * @param integer $schedulePlatform
	 * @return boolean
	 */
	public static function notifyBookingPaymentReceivedByCustomerB2C($bkgId, $isSchedule = 0, $schedulePlatform = null)
	{
		$success = false;
		if ($bkgId > 0)
		{
			$bkgModel = Booking::model()->findByPk($bkgId);
		}
		if (!$bkgModel)
		{
			goto skipAll;
		}
		if ($bkgModel->bkgInvoice->bkg_advance_amount == 0)
		{
			goto skipAll;
		}
		// Booking User
		$arrUserDetails	 = WhatsappLog::getUserByBooking($bkgId, $bkgModel);
		$userId			 = $arrUserDetails['userId'];
		$userName		 = $arrUserDetails['userName'];
		// Phone No
		$phoneNo		 = WhatsappLog::getPhoneNoByBookingId($bkgId, $bkgModel);
		if (!$phoneNo)
		{
			goto skipAll;
		}

		Filter::parsePhoneNumber($phoneNo, $code, $number);
		$row = array('code' => $code, 'number' => $number);
		if (!$row || empty($row))
		{
			goto skipAll;
		}

		$lastPaymentReceived = AccountTransactions::getLastPaymentReceived($bkgId);
		$paymentAmount		 = ($lastPaymentReceived > 0) ? 'Rs. ' . $lastPaymentReceived : 'Rs. ' . $bkgModel->bkgInvoice->bkg_advance_amount;
		$bookingId			 = $bkgModel->bkg_booking_id;
		$totalAmount		 = 'Rs. ' . $bkgModel->bkgInvoice->bkg_total_amount;
		$totalAdvanceAmount	 = 'Rs. ' . $bkgModel->bkgInvoice->bkg_advance_amount;
		$dueAmount			 = 'Rs. ' . $bkgModel->bkgInvoice->bkg_due_amount;
		$creditUsed			 = 'Rs. ' . $bkgModel->bkgInvoice->bkg_credits_used;

		$hash			 = Yii::app()->shortHash->hash($bkgId);
		$buttonUrl		 = 'bkpn/' . $bkgId . '/' . $hash;
		$contentParams	 = [
			'eventId'		 => "32",
			'userName'		 => $userName,
			'paymentAmount'	 => $paymentAmount,
			'bookingId'		 => Filter::formatBookingId($bookingId),
			'totalAmount'	 => $totalAmount,
			'advanceAmount'	 => $totalAdvanceAmount,
			'dueAmount'		 => $dueAmount,
			'primaryId'		 => $bkgId
		];
		$eventId		 = 32;
		if ($bkgModel->bkgInvoice->bkg_credits_used > 0)
		{
			$contentParams	 = [
				'eventId'		 => "41",
				'userName'		 => $userName,
				'paymentAmount'	 => $paymentAmount,
				'bookingId'		 => Filter::formatBookingId($bookingId),
				'totalAmount'	 => $totalAmount,
				'advanceAmount'	 => $totalAdvanceAmount,
				'creditUsed'	 => $creditUsed,
				'dueAmount'		 => $dueAmount,
				'primaryId'		 => $bkgId
			];
			$eventId		 = 41;
		}
		$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_CONSUMER, $userId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $row['code'], $row['number'], false, 1, null, SmsLog::SMS_PAYMENT_SUCCESS, $buttonUrl, null, null, null, null, null, null, null, null, null);
		$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_PAYMENT_RECEIVED, "Booking Payment Received To Customer", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
		$responseArr		 = MessageEventMaster::processPlatformSequences($eventId, $contentParams, $receiverParams, $eventScheduleParams);
		foreach ($responseArr as $res)
		{
			if ($res['success'] == true && $res['type'] == 2 && $res['id'] > 0)
			{
				$slgId							 = $res['id'];
				$params['blg_ref_id']			 = $slgId;
				$params['blg_booking_status']	 = $bkgModel->bkg_status;
				BookingLog::model()->createLog($bkgModel->bkg_id, "Sms sent on Advance Payment.", UserInfo::model(), BookingLog::SMS_SENT, false, $params);
			}
			if ($res['success'] == true)
			{
				$success = true;
			}
		}


		skipAll:
		return $success;
	}

	/**
	 * @param integer $bkgId
	 * @param integer $minPayExtra
	 * @param integer $isSchedule
	 * @param integer $schedulePlatform
	 * @return boolean
	 */
	public static function notifyPaymentRequestToCustomer($bkgId, $minPayExtra = 0, $isSchedule = 0, $schedulePlatform = null)
	{
		$returnSet = new ReturnSet();
		try
		{
			if ($bkgModel == null)
			{
				$bkgModel = Booking::model()->findByPk($bkgId);
			}
			elseif (!$bkgModel instanceof Booking)
			{
				goto skipAll;
			}
			$userName	 = $bkgModel->bkgUserInfo->bkg_user_fname != null && !empty(trim($bkgModel->bkgUserInfo->bkg_user_fname)) ? $bkgModel->bkgUserInfo->bkg_user_fname : "User";
			$bookingId	 = $bkgModel->bkg_booking_id;

			$buttonUrl	 = ltrim(BookingUser::getPaymentLinkByPhone($bkgModel->bkg_id), '/');
			$paymentUrl	 = 'http://www.aaocab.com/' . $buttonUrl;

			$phoneNo = WhatsappLog::getPhoneNoByBookingId($bkgModel->bkg_id);
			Filter::parsePhoneNumber($phoneNo, $code, $number);
			$row	 = array('code' => $code, 'number' => $number);
			if (!$row || empty($row))
			{
				goto skipAll;
			}

			$response = Contact::referenceUserData($bkgModel->bkgUserInfo->bui_id, 1);
			if ($response->getStatus())
			{
				$email			 = $response->getData()->email['email'];
				$emailReplyName	 = $response->getData()->email['userName'];
			}
			$userId = $bkgModel->bkgUserInfo->bkg_user_id;

			$contentParams		 = [
				'eventId'		 => "33",
				'userName'		 => $userName,
				'bookingId'		 => Filter::formatBookingId($bookingId),
				'minPayExtra'	 => $minPayExtra,
				'link'			 => $paymentUrl,
				'primaryId'		 => $bkgModel->bkg_id
			];
			$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_CONSUMER, $userId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $row['code'], $row['number'], $email, 1, null, null, $buttonUrl, 'mail', null, null, EmailLog::SEND_CONSUMER_BATCH_EMAIL, EmailLog::Consumers, EmailLog::REF_USER_ID, $bookingId, EmailLog::SEND_ACCOUNT_EMAIL, 0, $bookingId);
			$eventScheduleParams = EventSchedule::setData($bkgModel->bkg_id, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::PAYMENT_REQUEST_SENT, "Booking Payment Request To Customer", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
			$responseArr		 = MessageEventMaster::processPlatformSequences(33, $contentParams, $receiverParams, $eventScheduleParams);

			foreach ($responseArr as $res)
			{
				if ($res['success'] == true && ($res['type'] == 2 || $res['type'] == 3) && $res['id'] > 0)
				{
					$success = true;
				}
			}

			$returnSet->setStatus($success);
		}
		catch (Exception $ex)
		{
			$returnSet = ReturnSet::setException($ex);
			$returnSet->setStatus(false);
		}

		skipAll:
		return $returnSet;
	}

	/**
	 * @param integer $bkgId
	 * @param integer $isSchedule
	 * @param integer $schedulePlatform
	 * @return
	 */
	public static function notifyQuoteBookingB2C($bkgId, $isSchedule = 0, $schedulePlatform = null)
	{
		$returnSet = new ReturnSet();
		try
		{
			if ($bkgId > 0)
			{
				$bkgModel = Booking::model()->findByPk($bkgId);
			}
			if (!$bkgModel)
			{
				goto skipAll;
			}
			// Booking User
			$arrUserDetails	 = WhatsappLog::getUserByBooking($bkgId, $bkgModel);
			$userId			 = $arrUserDetails['userId'];
			$userName		 = $arrUserDetails['userName'];
			// Phone No
			$phoneNo		 = WhatsappLog::getPhoneNoByBookingId($bkgId, $bkgModel);
			if (!$phoneNo)
			{
				goto skipAll;
			}
			Filter::parsePhoneNumber($phoneNo, $code, $number);
			$row = array('code' => $code, 'number' => $number);
			if (!$row || empty($row))
			{
				goto skipAll;
			}

			$bookingId	 = $bkgModel->bkg_booking_id;
			$hash		 = Yii::app()->shortHash->hash($bkgId);
			$buttonUrl	 = 'bkpn/' . $bkgId . '/' . $hash;

			$contentParams = [
				'eventId'	 => "34",
				'userName'	 => $userName,
				'bookingId'	 => Filter::formatBookingId($bookingId),
				'primaryId'	 => $bkgId
			];

			$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_CONSUMER, $userId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $row['code'], $row['number'], false, 1, null, SmsLog::SMS_BOOKING_CREATED, $buttonUrl, 'mail', null, null, EmailLog::EMAIL_BOOKING_CREATED, EmailLog::Consumers, EmailLog::REF_USER_ID, $bookingId, EmailLog::SEND_SERVICE_EMAIL);
			$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_QUOTE_CREATED, "Booking Quote Request To Customer", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
			$responseArr		 = MessageEventMaster::processPlatformSequences(34, $contentParams, $receiverParams, $eventScheduleParams);

			foreach ($responseArr as $res)
			{
				if ($res['success'] == true && $res['type'] == 2 && $res['id'] > 0)
				{
					$desc		 = "Sms sent on Booking Created.";
					$userInfo	 = UserInfo::getInstance();
					$eventId	 = BookingLog::SMS_SENT;
					$oldModel	 = clone $bkgModel;
					$params		 = ['blg_ref_id' => $res['id'], 'blg_booking_status' => $bkgModel->bkg_status];
					BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel, $params);
				}
				else if ($res['success'] == true && $res['type'] == 3 && $res['id'] > 0)
				{
					$desc		 = "Email sent on Booking Created.";
					$userInfo	 = UserInfo::getInstance();
					$eventId	 = BookingLog::EMAIL_SENT;
					$oldModel	 = clone $bkgModel;
					$params		 = ['blg_ref_id' => $res['id'], 'blg_booking_status' => $bkgModel->bkg_status];
					BookingLog::model()->createLog($bkgId, $desc, $userInfo, $eventId, $oldModel, $params);
				}
				if ($res['success'] == true)
				{
					$success = true;
				}
			}
		}
		catch (Exception $ex)
		{
			$returnSet = ReturnSet::setException($ex);
			$returnSet->setStatus(false);
		}
		skipAll:
		return $returnSet;
	}

	/**
	 * 
	 * @param integer $bkgId
	 */
	public static function notifyConfirmB2bWithoutPay($bkgId)
	{
		if ($bkgId > 0)
		{
			$model = Booking::model()->findByPk($bkgId);
		}
		if (!$model)
		{
			goto skipAll;
		}
		$messageDetails	 = BookingMessages::messageCommunicationAgentSettings($bkgId, AgentMessages::BOOKING_CONF_WITHOUT_PAYMENTINFO);
		$consumerArr	 = $messageDetails[UserInfo::TYPE_CONSUMER];
		$adminArr		 = $messageDetails[UserInfo::TYPE_ADMIN];
		$agentArr		 = $messageDetails[UserInfo::TYPE_AGENT];
		if (!empty($consumerArr))
		{
			self::notifyConfirmWithoutPayInfo($bkgId, 0, null, $consumerArr, UserInfo::TYPE_CONSUMER);
		}
		if (!empty($adminArr))
		{
			self::notifyConfirmWithoutPayInfo($bkgId, 0, null, $adminArr, UserInfo::TYPE_ADMIN);
		}
		if (!empty($agentArr))
		{
			self::notifyConfirmWithoutPayInfo($bkgId, 0, null, $agentArr, UserInfo::TYPE_AGENT);
		}
		skipAll:
	}

	/**
	 * 
	 * @param integer $bkgId
	 */
	public static function notifyConfirmB2bWithPay($bkgId)
	{
		if ($bkgId > 0)
		{
			$model = Booking::model()->findByPk($bkgId);
		}
		if (!$model)
		{
			goto skipAll;
		}
		$messageDetails	 = BookingMessages::messageCommunicationAgentSettings($bkgId, AgentMessages::BOOKING_CONF_WITH_PAYMENTINFO);
		$consumerArr	 = $messageDetails[UserInfo::TYPE_CONSUMER];
		$adminArr		 = $messageDetails[UserInfo::TYPE_ADMIN];
		$agentArr		 = $messageDetails[UserInfo::TYPE_AGENT];
		if (!empty($consumerArr))
		{
			self::notifyConfirmWithPayInfo($bkgId, 0, null, $consumerArr, UserInfo::TYPE_CONSUMER);
		}
		if (!empty($adminArr))
		{
			self::notifyConfirmWithPayInfo($bkgId, 0, null, $adminArr, UserInfo::TYPE_ADMIN);
		}
		if (!empty($agentArr))
		{
			self::notifyConfirmWithPayInfo($bkgId, 0, null, $agentArr, UserInfo::TYPE_AGENT);
		}
		skipAll:
	}

	/**
	 * 
	 * @param integer $bkgId
	 */
	public static function notifyConfirmB2b($bkgId)
	{
		if ($bkgId > 0)
		{
			$model = Booking::model()->findByPk($bkgId);
		}
		if (!$model)
		{
			goto skipAll;
		}
		$messageDetails	 = BookingMessages::messageCommunicationAgentSettings($bkgId, AgentMessages::PAYMENT_CONFIRM);
		$consumerArr	 = $messageDetails[UserInfo::TYPE_CONSUMER];
		$adminArr		 = $messageDetails[UserInfo::TYPE_ADMIN];
		$agentArr		 = $messageDetails[UserInfo::TYPE_AGENT];
		if (!empty($consumerArr))
		{
			self::notifyConfirmWithPayInfo($bkgId, 0, null, $consumerArr, UserInfo::TYPE_CONSUMER);
		}
		if (!empty($adminArr))
		{
			self::notifyConfirmWithPayInfo($bkgId, 0, null, $adminArr, UserInfo::TYPE_ADMIN);
		}
		if (!empty($agentArr))
		{
			self::notifyConfirmWithPayInfo($bkgId, 0, null, $agentArr, UserInfo::TYPE_AGENT);
		}
		skipAll:
	}

	/**
	 * @param integer $bkgId
	 * @param integer $isSchedule
	 * @param integer $schedulePlatform
	 * @param array $data
	 * @param integer $userType
	 * @return type
	 */
	public static function notifyConfirmWithoutPayInfo($bkgId, $isSchedule = 0, $schedulePlatform = null, $data = array(), $userType = null)
	{
		$returnSet = new ReturnSet();
		try
		{
			if ($bkgId > 0)
			{
				$bkgModel = Booking::model()->findByPk($bkgId);
			}
			if (!$bkgModel)
			{
				goto skipAll;
			}
			// Booking User
			$arrUserDetails	 = WhatsappLog::getUserByBooking($bkgId, $bkgModel);
			$userId			 = $arrUserDetails['userId'];
			$userName		 = $arrUserDetails['userName'];
			// Phone No
			$phoneNo		 = WhatsappLog::getPhoneNoByBookingId($bkgId, $bkgModel);
			if (!$phoneNo)
			{
				goto skipAll;
			}
			Filter::parsePhoneNumber($phoneNo, $code, $number);
			$row = array('code' => $code, 'number' => $number);
			if (!$row || empty($row))
			{
				goto skipAll;
			}

			if ($userType == UserInfo::TYPE_CONSUMER && !empty($data))
			{
				$userName = $bkgModel->bkgUserInfo->bkg_user_fname;
			}
			else if ($userType == UserInfo::TYPE_AGENT && !empty($data))
			{
				$userName = "Agent";
			}
			else if ($userType == UserInfo::TYPE_ADMIN && !empty($data))
			{
				$userName = "Admin";
			}

			$bookingId	 = $bkgModel->bkg_booking_id;
			$hash		 = Yii::app()->shortHash->hash($bkgId);
			$buttonUrl	 = 'bkpn/' . $bkgId . '/' . $hash;

			$contentParams = [
				'userName'	 => $userName,
				'bookingId'	 => Filter::formatBookingId($bookingId),
				'primaryId'	 => $bkgId,
				'extraData'	 => $data,
				'eventId'	 => "35"
			];

			$senderUserId = $bkgModel->bkgUserInfo->bkg_user_id;
			if ($userType == UserInfo::TYPE_CONSUMER && $userType != null)
			{
				$senderUserId = $bkgModel->bkgUserInfo->bkg_user_id;
			}
			else if ($userType != null)
			{
				$senderUserId = null;
			}
			$userInfo			 = UserInfo::getInstance();
			$senderType			 = $userType != null ? $userType : UserInfo::TYPE_CONSUMER;
			$receiverParams		 = EventReceiver::setData($senderType, $senderUserId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $code, $number, false, 1, null, SmsLog::SMS_BOOKING_CREATED, $buttonUrl, 'mail', null, null, EmailLog::EMAIL_BOOKING_CREATED, EmailLog::Consumers, EmailLog::REF_USER_ID, $bookingId, EmailLog::SEND_SERVICE_EMAIL);
			$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_CONFIRM_WITHOUT_PAY, "Booking Details To Customer Without Payment", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
			$responseArr		 = MessageEventMaster::processPlatformSequences(35, $contentParams, $receiverParams, $eventScheduleParams);
			foreach ($responseArr as $res)
			{
				if ($res['success'] == true && $res['type'] == 2 && $res['id'] > 0)
				{
					$desc							 = "Sms sent on Booking Created.";
					$eventId						 = BookingLog::SMS_SENT;
					$oldModel						 = clone $bkgModel;
					$params							 = [];
					$params['blg_ref_id']			 = $res['id'];
					$params['blg_booking_status']	 = $bkgModel->bkg_status;
					BookingLog::model()->createLog($bkgModel->bkg_id, $desc, $userInfo, $eventId, $oldModel, $params);
				}
				else if ($res['success'] == true && $res['type'] == 3 && $res['id'] > 0)
				{
					$desc							 = "Email sent on Booking Created.";
					$eventId						 = BookingLog::EMAIL_SENT;
					$oldModel						 = clone $bkgModel;
					$params							 = [];
					$params['blg_ref_id']			 = $res['id'];
					$params['blg_booking_status']	 = $bkgModel->bkg_status;
					if (($res['id'] > 0) && $bkgModel->bkg_agent_id > 0)
					{
						BookingLog::model()->createLog($bkgModel->bkg_id, $desc, $userInfo, $eventId, $oldModel, $params);
					}
					else if (($res['id'] > 0) && $bkgModel->bkg_agent_id == '')
					{
						BookingLog::model()->createLog($bkgModel->bkg_id, $desc, $userInfo, $eventId, $oldModel, $params);
					}
				}
				if ($res['success'] == true)
				{
					$success = true;
				}
			}
		}
		catch (Exception $ex)
		{
			$returnSet = ReturnSet::setException($ex);
			$returnSet->setStatus(false);
		}
		skipAll:
		return $returnSet;
	}

	public static function notifyConfirmWithPayInfo($bkgId, $isSchedule = 0, $schedulePlatform = null, $data = array(), $userType = null)
	{
		$returnSet = new ReturnSet();
		try
		{
			if ($bkgId > 0)
			{
				$bkgModel = Booking::model()->findByPk($bkgId);
			}
			if (!$bkgModel)
			{
				goto skipAll;
			}
			// Booking User
			$arrUserDetails	 = WhatsappLog::getUserByBooking($bkgId, $bkgModel);
			$userId			 = $arrUserDetails['userId'];
			$userName		 = $arrUserDetails['userName'];
			// Phone No
			$phoneNo		 = WhatsappLog::getPhoneNoByBookingId($bkgId, $bkgModel);
			if (!$phoneNo)
			{
				goto skipAll;
			}
			Filter::parsePhoneNumber($phoneNo, $code, $number);
			$row = array('code' => $code, 'number' => $number);
			if (!$row || empty($row))
			{
				goto skipAll;
			}

			if ($userType == UserInfo::TYPE_CONSUMER && !empty($data))
			{
				$username = $bkgModel->bkgUserInfo->bkg_user_fname;
			}
			else if ($userType == UserInfo::TYPE_AGENT && !empty($data))
			{
				$username = "Agent";
			}
			else if ($userType == UserInfo::TYPE_ADMIN && !empty($data))
			{
				$username = "Admin";
			}

			$bookingId	 = $bkgModel->bkg_booking_id;
			$hash		 = Yii::app()->shortHash->hash($bkgId);
			$buttonUrl	 = 'bkpn/' . $bkgId . '/' . $hash;

			$contentParams = [
				'userName'	 => $userName,
				'bookingId'	 => Filter::formatBookingId($bookingId),
				'primaryId'	 => $bkgId,
				'extraData'	 => $data,
				'eventId'	 => "36"
			];

			$senderUserId = $bkgModel->bkgUserInfo->bkg_user_id;
			if ($userType == UserInfo::TYPE_CONSUMER && $userType != null)
			{
				$senderUserId = $bkgModel->bkgUserInfo->bkg_user_id;
			}
			else if ($userType != null)
			{
				$senderUserId = null;
			}
			$userInfo			 = UserInfo::getInstance();
			$senderType			 = $userType != null ? $userType : UserInfo::TYPE_CONSUMER;
			$receiverParams		 = EventReceiver::setData($senderType, $senderUserId, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $bookingId, $code, $number, false, 1, null, null, $buttonUrl, 'mail', null, null, EmailLog::EMAIL_BOOKING_CREATED, EmailLog::Consumers, EmailLog::REF_USER_ID, $bookingId, EmailLog::SEND_SERVICE_EMAIL);
			$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::BOOKING_CONFIRM_WITH_PAY, "Booking Details To Customer With Payment", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
			$responseArr		 = MessageEventMaster::processPlatformSequences(36, $contentParams, $receiverParams, $eventScheduleParams);
			foreach ($responseArr as $res)
			{
				if ($res['success'] == true)
				{
					$success = true;
				}
			}
		}
		catch (Exception $ex)
		{
			$returnSet = ReturnSet::setException($ex);
			$returnSet->setStatus(false);
		}
		skipAll:
		return $returnSet;
	}

	public static function isValidBookingId($refid, $reftype)
	{
		$userId = UserInfo::getUserId();
		if ($userId == 0 && $refid != '' && $reftype == 2)
		{
			$bkgModel	 = Booking::model()->find('bkg_booking_id=:bkg_booking_id', ['bkg_booking_id' => $refid]);
			$userId		 = $bkgModel->bkgUserInfo->bkg_user_id;
		}
		$success = true;
		$flag	 = 0;
		if (in_array($reftype, [2]) || ($reftype == 4 && trim($refid) != '' ))
		{
			if (trim($refid) == '')
			{
				$success = false;
				$flag	 = 1;
				goto skipVal;
			}
			switch ((int) $reftype)
			{
				case 2:
					$bookingCode = BookingSub::getCodebyUserIdnId($userId, $refid);
					break;
				case 4:
					$contactId	 = ContactProfile::getByEntityId($userId);
					$entityType	 = UserInfo::TYPE_VENDOR;
					$vnd		 = ContactProfile::getEntityById($contactId, $entityType);
					$vndid		 = $vnd['id'];
					$bookingCode = BookingSub::getCodebyVndIdnId($vndid, $refid);
					break;
				default:
					break;
			}
			if (!$bookingCode)
			{
				$success = false;
				$flag	 = 2;
			}
			skipVal:
		}
		$data = ['success' => $success, "flag" => $flag];
		return $data;
	}

	/**
	 * 
	 * @param type $data
	 * @param type $eventType
	 * @param type $vendorAmount
	 * @param type $model
	 * @return string
	 */
	public static function setEventSyncData($data, $eventType, $vendorAmount, $model)
	{
		$orgDate = $data['bkg_pickup_date_date'];
		$date	 = str_replace('/', '-', $orgDate);
		$newDate = date("Y-m-d", strtotime($date));
		$time	 = date('H:i:s', strtotime($data['bkg_pickup_date_time']));

		$pickupDateTime			 = $newDate . ' ' . $time;
		$duration				 = rand(1, 2);
		$dateInterval			 = \DateTimeFormat::SQLDateTimeToDateTime($pickupDateTime)->add(new \DateInterval('PT' . $duration . 'M'));
		$lastUpdatedPickupTime	 = \DateTimeFormat::DateTimeToSQLDateTime($dateInterval);
		$lat					 = $data['bkg_pickup_lat'];
		$long					 = $data['bkg_pickup_long'];
		$dataAvl				 = '';

		if ($data['bkg_trip_end'] == 1)
		{
			$dataAvl = self::trackEndEventData($data, $vendorAmount);
			$lat	 = $data['bkg_dropup_lat'];
			$long	 = $data['bkg_dropup_long'];
		}
		if ($data['bkg_trip_start'] == 1)
		{
			$dataAvl = self::trackStartEventData($data);
		}
		$dataList = '
		{
			"data": {
			  "eventType": "' . $eventType . '",
			  "orderReferenceNumber": "' . $model->bkg_booking_id . '",
			  "deviceTrack": {
				"coordinates": {
				  "lat": "' . $lat . '",
				  "lng": "' . $long . '",
				}
			  },
			  "lastUpdate": "' . $lastUpdatedPickupTime . '",
			  "data": [' . $dataAvl . '],
			}
		  }';
		return $dataList;
	}

	/**
	 * 
	 * @param \Beans\common\Data $data
	 * @param type $vendorAmount
	 * @return string
	 */
	public static function trackStartEventData($data)
	{
		$startOdometer	 = $data['bkg_start_odometer'] | 0;
		$dataAvl		 = '{
					"refType": "START_TRIP_ODOMETER",
					"refValue": "' . $startOdometer . '"
				  }
				  ';
		return $dataAvl;
	}

	/**
	 * 
	 * @param \Beans\common\Data $data
	 * @param type $vendorAmount
	 * @return string
	 */
	public static function trackEndEventData($data, $vendorAmount)
	{
		$endOdometer	 = $data['bkg_end_odometer'] | 0;
		$extraTollTax	 = $data['bkg_extra_toll_tax'] | 0;
		$extraStateTax	 = $data['bkg_extra_state_tax'] | 0;
		$vendorCollected = $data['bkg_vendor_collected'] | 0;
		$extraKm		 = $data['bkg_extra_km'] | 0;
		$extraKmCharge	 = $data['bkg_extra_km_charge'] | 0;
		$extraMin		 = $data['bkg_extra_min'] | 0;
		$extraMinCharge	 = $data['bkg_extra_total_min_charge'] | 0;
		$dataAvl		 = '{
					"refType": "STOP_TRIP_ODOMETER",
					"refValue": "' . $endOdometer . '"
				  },
				  {
				  "refType": "Fare",
				  "refValue": {
					"additionalCharges": [
					  {
						"amount": "' . $extraTollTax . '",
						"type": "TOLL_TAX"
					  },
					  {
						"amount": "' . $extraStateTax . '",
						"type": "STATE_TAX"
					  },
					  {
						"amount": 0,
						"type": "PARKING_CHARGE"
					  }
					],
					"driverCollected": "' . $vendorCollected . '",
					"vendorAmount": "' . $vendorAmount . '",
					"extraCharges": [
					  {
						"unit": "' . $extraKm . '",
						"amount": "' . $extraKmCharge . '",
						"type": "EXTRA_KM"
					  },
					  {
						"unit": "' . $extraMin . '",
						"amount": "' . $extraMinCharge . '",
						"type": "EXTRA_MIN"
					  }
					]
				  }
				  }
				  ';
		return $dataAvl;
	}

	/**
	 * This function is used to send notifications for the event vendor amount reset by driver
	 * @param string $tripId
	 * @param string $amount
	 * @return boolean
	 */
	public static function notifyBookingComplete($bkgId, $isSchedule = 0, $schedulePlatform = null)
	{
		$success = false;
		try
		{
			if ($bkgId == '')
			{
				goto skipAll;
			}
			$model = Booking::model()->findByPk($bkgId);
			if (!$model)
			{
				goto skipAll;
			}

			$contentParams = array();

			$contentParams['eventId']			 = "37";
			$contentParams['fromCity']			 = $model->bkgFromCity->cty_display_name;
			$contentParams['toCity']			 = $model->bkgToCity->cty_display_name;
			$contentParams['vehicleNo']			 = $model->bkgBcb->bcb_cab_number;
			$contentParams['tripId']			 = $model->bkgBcb->bcb_id . " ( Booking Id: " . Filter::formatBookingId($model->bkg_booking_id) . " ) ";
			$contentParams['amount']			 = $model->bkgBcb->bcb_vendor_amount;
			$contentParams['driverCollected']	 = $model->bkgInvoice->bkg_vendor_actual_collected == null ? 0 : $model->bkgInvoice->bkg_vendor_actual_collected;
			$contactId							 = ContactProfile::getByEntityId($model->bkgBcb->bcb_vendor_id, UserInfo::TYPE_VENDOR);
			$row								 = ContactPhone::getNumber($contactId);
			if (!$row || empty($row))
			{
				goto skipAll;
			}
			if (!Filter::processPhoneNumber($row['number'], $row['code']))
			{
				goto skipAll;
			}
			$receiverParams		 = EventReceiver::setData(UserInfo::TYPE_VENDOR, $model->bkgBcb->bcb_vendor_id, WhatsappLog::REF_TYPE_BOOKING, $bkgId, $model->bkg_booking_id, $row['code'], $row['number'], null, 0, BookingLog::BOOKING_MARKED_COMPLETED, null);
			$eventScheduleParams = EventSchedule::setData($bkgId, ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::MARK_COMPLETE_PROCESS, "Booking mark complete", $isSchedule, CJSON::encode(array('bkgId' => $bkgId)), 10, $schedulePlatform);
			$responseArr		 = MessageEventMaster::processPlatformSequences(37, $contentParams, $receiverParams, $eventScheduleParams);
			foreach ($responseArr as $response)
			{
				if ($response['success'] && $response['type'] == 1)
				{
					$success = true;
				}
			}
			skipAll:
			return $success;
		}
		catch (Exception $ex)
		{
			return $success;
		}
	}

	public static function getBookingForCancelForDeepeshSir($userId)
	{
		$sql = "SELECT bkg_id
				FROM booking
					INNER JOIN  booking_user ON booking_user.bui_bkg_id=booking.bkg_id
				WHERE 1 
					AND bkg_status=2
					AND booking_user.bkg_user_id=:userId
					AND bkg_pickup_date<=DATE_ADD(NOW(),INTERVAL 1 DAY)";
		return DBUtil::query($sql, DBUtil::SDB(), ['userId' => $userId]);
	}

	public static function blockAutoAssignmentForDeepeshSir($userId)
	{
		$sql = "SELECT
					booking.bkg_id,
					booking.bkg_booking_id,
					bpr_id
				FROM booking
					INNER JOIN booking_pref ON bpr_bkg_id = bkg_id
					INNER JOIN `booking_user` ON booking_user.bui_bkg_id = bkg_id
				WHERE 1 
					AND bkg_user_id = :userId
					AND bkg_pickup_date > NOW() 
					AND bkg_block_autoassignment = 0
					AND bkg_status IN(2,15)";
		return DBUtil::query($sql, DBUtil::SDB(), ['userId' => $userId]);
	}

	public static function updateBlockAutoAssignmentForDeepeshSir($bprId)
	{
		$sql = "UPDATE 	booking_pref SET bkg_block_autoassignment = 1 WHERE 1 AND bpr_id =:bprId";
		return DBUtil::execute($sql, ['bprId' => $bprId]);
	}

	public static function minBookingPercentageAmount($bkgId)
	{
		$model	 = Booking::model()->findByPk($bkgId);
		$minPerc = Config::getMinAdvancePercent($model->bkg_agent_id, $model->bkg_booking_type, $model->bkgSvcClassVhcCat->scc_ServiceClass->scc_id, $model->bkgPref->bkg_is_gozonow);
		if ($model->bkg_cav_id != NULL && $model->bkg_cav_id > 0)
		{
			$minPerc = 50;
		}
		$arrPartPayPercent	 = array_unique([$minPerc, 50, 100]);
		$paymentOptions		 = Config::get('payment.setting');
		$arrPaymentOptions	 = json_decode($paymentOptions, true);
		foreach ($arrPartPayPercent as $paykey => $value)
		{
			$key		 = array_search($value, array_column($arrPaymentOptions, 'percentage'));
			$payOption	 = $arrPaymentOptions[$key];
			$checked	 = ($payOption['id'] == 'minPayChk') ? 'checked="checked"' : '';
			if ($payOption['id'] == 'partPayChk' && (in_array($model->bkg_booking_type, [9, 10, 11]) || $cavId != NULL))
			{
				$checked = 'checked="checked"';
			}
			return $payOption['percentage'];
		}
	}

	public static function getAllquoteExpiredList()
	{
		$sql = "SELECT
					bkg.bkg_id, 
					bkg.bkg_booking_id,
					bkg.bkg_pickup_date,
					bui.bkg_user_id,
					bui.bkg_country_code,
					bui.bkg_contact_no, 
					bkg.bkg_from_city_id,
					bkg.bkg_to_city_id,
					btr.bkg_quote_expire_date
				FROM `booking` bkg 
					INNER JOIN booking_trail btr ON btr.btr_bkg_id = bkg.bkg_id 
					INNER JOIN booking_user bui ON bui.bui_bkg_id = bkg.bkg_id 
				WHERE 1 
					AND bkg.bkg_active=1 
					AND bkg.bkg_status IN (1,15)
					AND bkg.bkg_reconfirm_flag=0
					AND bkg.bkg_agent_id IS NULL
					AND bkg.bkg_pickup_date > DATE_ADD(NOW(),INTERVAL 7 DAY)
					AND btr.bkg_quote_expire_date IS NOT NULL 
					AND btr.bkg_quote_expire_date BETWEEN CONCAT(DATE_SUB(CURDATE(),INTERVAL 1 DAY),' 00:00:00') AND CONCAT(DATE_SUB(CURDATE(),INTERVAL 1 DAY),' 23:59:59')
				ORDER BY btr.bkg_quote_expire_date ASC LIMIT 0,30";
		return DBUtil::query($sql, DBUtil::SDB2());
	}

	public static function NotificationQuoteExpired($isSchedule = 0, $schedulePlatform = null)
	{
		$rows = Booking::getAllquoteExpiredList();
		foreach ($rows as $val)
		{
			try
			{
				if (MessageEventTracker::isEventExists(ScheduleEvent::BOOKING_REF_TYPE, $val['bkg_id'], 49, TemplateMaster::SEQ_WHATSAPP_CODE) > 0)
				{
					continue;
				}
				$templateId			 = WhatsappLog::findByTemplateName("price_lock_expired", 'wht_id');
				$fromCityDisplayName = Cities::model()->findByPk($val['bkg_from_city_id'])->cty_display_name;
				$toCityDisplayName	 = Cities::model()->findByPk($val['bkg_to_city_id'])->cty_display_name;
				$bkgPickupDate		 = new DateTime($val['bkg_pickup_date']);
				$contentParams		 = ['eventId' => 49, 'fromCity' => $fromCityDisplayName, 'toCity' => $toCityDisplayName, 'pickupDate' => $bkgPickupDate->format('j/M/y h:i A')];
				if (!Filter::processPhoneNumber($val['bkg_contact_no'], $val['bkg_country_code']))
				{
					goto skipAll;
				}
				$receiverParams			 = EventReceiver::setData(UserInfo::TYPE_CONSUMER, $val['bkg_user_id'], WhatsappLog::REF_TYPE_BOOKING, $val['bkg_id'], $val['bkg_booking_id'], $val['bkg_country_code'], $val['bkg_contact_no'], null, 1, null, null, array('data' => "$templateId,$templateId,$templateId", "type" => "button", "subType" => "quick_reply,quick_reply,quick_reply", "text" => "payload,payload,payload"));
				$eventScheduleParams	 = EventSchedule::setData($val['bkg_id'], ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::PRICE_LOCK_EXPIRED, "Price lock expiring Reminder", $isSchedule, CJSON::encode(array('bkgId' => $val['bkg_id'])), 10, $schedulePlatform);
				$responseArr			 = MessageEventMaster::processPlatformSequences(49, $contentParams, $receiverParams, $eventScheduleParams);
				foreach ($responseArr as $response)
				{
					if ($response['success'] && $response['type'] == TemplateMaster::SEQ_WHATSAPP_CODE)
					{
						MessageEventTracker::add(ScheduleEvent::BOOKING_REF_TYPE, $val['bkg_id'], 49, TemplateMaster::SEQ_WHATSAPP_CODE);
					}
				}
				skipAll:
			}
			catch (Exception $ex)
			{
				ReturnSet::setException($ex);
			}
		}
	}

	public static function getAllquoteExpiringList()
	{
		$sql = "SELECT
					bkg.bkg_id, 
					bkg.bkg_booking_id,
					bkg.bkg_pickup_date,
					bui.bkg_user_id,
					bui.bkg_country_code,
					bui.bkg_contact_no, 
					bkg.bkg_from_city_id,
					bkg.bkg_to_city_id,
					btr.bkg_quote_expire_date
				FROM `booking` bkg 
					INNER JOIN booking_trail btr ON btr.btr_bkg_id = bkg.bkg_id 
					INNER JOIN booking_user bui ON bui.bui_bkg_id = bkg.bkg_id 
				WHERE 1 
					AND bkg.bkg_active=1 
					AND bkg.bkg_status = 15
					AND bkg.bkg_agent_id IS NULL
					AND btr.bkg_quote_expire_date IS NOT NULL 
					AND btr.bkg_quote_expire_date BETWEEN NOW() AND DATE_ADD(NOW(),INTERVAL 2 HOUR)
				ORDER BY btr.bkg_quote_expire_date DESC LIMIT 0,20";
		return DBUtil::query($sql, DBUtil::SDB2());
	}

	public function NotificationQuoteExpiring($isSchedule = 0, $schedulePlatform = null)
	{
		$rows = Booking::getAllquoteExpiringList();
		foreach ($rows as $val)
		{
			try
			{
				$templateId = WhatsappLog::findByTemplateName("price_lock__expiring", 'wht_id');
				if (MessageEventTracker::isEventExists(ScheduleEvent::BOOKING_REF_TYPE, $val['bkg_id'], 48, TemplateMaster::SEQ_WHATSAPP_CODE) > 0)
				{
					continue;
				}
				$fromCityDisplayName = Cities::model()->findByPk($val['bkg_from_city_id'])->cty_display_name;
				$toCityDisplayName	 = Cities::model()->findByPk($val['bkg_to_city_id'])->cty_display_name;
				$bkgPickupDate		 = new DateTime($val['bkg_pickup_date']);
				$contentParams		 = ['eventId' => 48, 'fromCity' => $fromCityDisplayName, 'toCity' => $toCityDisplayName, 'pickupDate' => $bkgPickupDate->format('j/M/y h:i A')];
				if (!Filter::processPhoneNumber($val['bkg_contact_no'], $val['bkg_country_code']))
				{
					goto skipAll;
				}
				$receiverParams			 = EventReceiver::setData(UserInfo::TYPE_CONSUMER, $val['bkg_user_id'], WhatsappLog::REF_TYPE_BOOKING, $val['bkg_id'], $val['bkg_booking_id'], $val['bkg_country_code'], $val['bkg_contact_no'], null, 1, null, null, array('data' => "$templateId,$templateId", "type" => "button", "subType" => "quick_reply,quick_reply", "text" => "payload,payload"));
				$eventScheduleParams	 = EventSchedule::setData($val['bkg_id'], ScheduleEvent::BOOKING_REF_TYPE, ScheduleEvent::PRICE_LOCK_EXPIRING, "Price lock expiring Reminder", $isSchedule, CJSON::encode(array('bkgId' => $val['bkg_id'])), 10, $schedulePlatform);
				$responseArr			 = MessageEventMaster::processPlatformSequences(48, $contentParams, $receiverParams, $eventScheduleParams);
				foreach ($responseArr as $response)
				{
					if ($response['success'] && $response['type'] == TemplateMaster::SEQ_WHATSAPP_CODE)
					{
						MessageEventTracker::add(ScheduleEvent::BOOKING_REF_TYPE, $val['bkg_id'], 48, TemplateMaster::SEQ_WHATSAPP_CODE);
					}
				}
				skipAll:
			}
			catch (Exception $ex)
			{
				ReturnSet::setException($ex);
			}
		}
	}

	public function checkVendorEligiblity($vndId, $maxAssignCountPerDay, $ratio, $cabType)
	{
		$zonePairData = Config::get('everestfleet.delhi.serviceZonePairList');

		$isEligible = false;

		if ($this->bkg_status != 2 || $this->bkg_reconfirm_flag != 1)
		{
			goto skipAll;
		}

		$pickupDate	 = $this->bkg_pickup_date;
		$bkgType	 = 1;

		$rowCountBkg	 = BookingCab::getCountByVndAndPickupDate($vndId, $pickupDate, $bkgType, $cabType, $zonePairData);
		$countAll		 = $rowCountBkg['countAll'];
		$countAssigned	 = $rowCountBkg['countAssigned'];

		if ($countAll == 0 || $countAssigned >= $maxAssignCountPerDay)
		{
			goto skipAll;
		}

		if ($countAssigned / $countAll >= $ratio)
		{
			goto skipAll;
		}
		$fromCity		 = $this->bkg_from_city_id;
		$toCity			 = $this->bkg_to_city_id;
		$fromZone		 = ZoneCities::getZonesByCity($fromCity);
		$toZone			 = ZoneCities::getZonesByCity($toCity);
		$zonePairList	 = json_decode($zonePairData, true);

		foreach ($zonePairList as $zonePair)
		{
			if (in_array($zonePair[0], explode(',', $fromZone)) && in_array($zonePair[1], explode(',', $toZone)))
			{
				$isEligible = true;
			}
		}
		skipAll:

		return $isEligible;
	}

	public function getBookingsToAssignForEverestFleet($cabType = '', $bkgId = '')
	{
		$zonePairData = Config::get('everestfleet.delhi.serviceZonePairList');

		$zonePairList	 = json_decode($zonePairData, true);
		$fzoneList		 = [];
		$tzoneList		 = [];
		if ($zonePairData)
		{
			foreach ($zonePairList as $zonePair)
			{
				$fzoneList[] = $zonePair[0];
				$tzoneList[] = $zonePair[1];
			}
		}
		$joinParam = '';
		if (sizeof($fzoneList) > 0)
		{
			$fzoneStr	 = implode(',', $fzoneList);
			$joinParam	 .= " INNER JOIN zone_cities fzct ON fzct.zct_cty_id = bkg.bkg_from_city_id 
				AND fzct.zct_zon_id IN ({$fzoneStr})";
		}
		if (sizeof($tzoneList) > 0)
		{
			$tzoneStr	 = implode(',', $tzoneList);
			$joinParam	 .= "
			INNER JOIN zone_cities tzct ON tzct.zct_cty_id = bkg.bkg_to_city_id 
				AND tzct.zct_zon_id IN ({$tzoneStr})";
		}
		$getFromBvr				 = true;
		$getFromVendorTracking	 = true;
		$evFleetVndId			 = Config::get('everestfleet.delhi.vendor.id');
		$select					 = '';
		$where					 = '';
		if ($getFromBvr)
		{
			$select		 .= ',bvr.bvr_accepted,bvr.bvr_assigned,bvr.bvr_id';
			$joinParam	 .= "
		LEFT JOIN booking_vendor_request bvr ON bvr.bvr_booking_id = bkg.bkg_id 
			AND bvr.bvr_bcb_id = bkg.bkg_bcb_id
			AND bvr.bvr_vendor_id = $evFleetVndId
				AND (bvr.bvr_accepted = 2 OR bvr.bvr_assigned IN (1,2))
				AND bvr.bvr_active=1";
			$where		 .= " AND bvr.bvr_id IS NULL";
		}

		if ($getFromVendorTracking)
		{
			$select		 .= ',vat.vat_id';
			$joinParam	 .= "
		LEFT JOIN vendor_auto_assignment_tracking vat
			ON vat.vat_booking_id = bkg.bkg_id 
			AND vat.vat_vendor_id = $evFleetVndId";
			$where		 .= " AND vat.vat_id IS NULL";
		}

		if ($bkgId > 0)
		{
			$where .= " AND bkg.bkg_id = $bkgId";
		}
		$sql		 = "SELECT DISTINCT bkg.bkg_id,bkg.bkg_bcb_id,bkg.bkg_pickup_date,
				bkg.bkg_vht_id,fzct.zct_cty_id,tzct.zct_cty_id $select
			FROM  booking bkg
			INNER JOIN booking_pref bpr ON bpr.bpr_bkg_id=bkg.bkg_id 
				AND bkg_block_autoassignment=0
			$joinParam 			 
			WHERE bkg.bkg_status=2 
				AND bkg.bkg_booking_type =1 
				AND bkg.bkg_reconfirm_flag = 1 
				AND bkg.bkg_vehicle_type_id IN ({$cabType})  
				AND IFNULL(bkg.bkg_vht_id,0) = 0 $where
				 
				AND bkg.bkg_pickup_date > NOW()";
		$resultSet	 = DBUtil::query($sql, DBUtil::MDB());
		return $resultSet;
	}
}
